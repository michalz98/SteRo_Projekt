
Animacje_Nowy_Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002918  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08002ac4  08002ac4  00012ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b48  08002b48  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002b48  08002b48  00012b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b50  08002b50  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b50  08002b50  00012b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b54  08002b54  00012b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000070  08002bc8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08002bc8  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000076b4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000150c  00000000  00000000  00027754  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006b8  00000000  00000000  00028c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000600  00000000  00000000  00029318  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023429  00000000  00000000  00029918  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005f4b  00000000  00000000  0004cd41  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1d8a  00000000  00000000  00052c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00124a16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fb8  00000000  00000000  00124a94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002aac 	.word	0x08002aac

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	08002aac 	.word	0x08002aac

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char* ptr, int len){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1,  (void*)ptr, len, 50);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	2332      	movs	r3, #50	; 0x32
 80004fe:	68b9      	ldr	r1, [r7, #8]
 8000500:	4803      	ldr	r0, [pc, #12]	; (8000510 <_write+0x24>)
 8000502:	f001 f9da 	bl	80018ba <HAL_UART_Transmit>
	return len;
 8000506:	687b      	ldr	r3, [r7, #4]
}
 8000508:	4618      	mov	r0, r3
 800050a:	3710      	adds	r7, #16
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000098 	.word	0x20000098

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fa22 	bl	8000960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f80e 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f896 	bl	8000650 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000524:	f000 f86a 	bl	80005fc <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Test\r\n");
 8000528:	4803      	ldr	r0, [pc, #12]	; (8000538 <main+0x24>)
 800052a:	f001 feb3 	bl	8002294 <puts>
	  HAL_Delay(1000);
 800052e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000532:	f000 fa87 	bl	8000a44 <HAL_Delay>
	  printf("Test\r\n");
 8000536:	e7f7      	b.n	8000528 <main+0x14>
 8000538:	08002ac4 	.word	0x08002ac4

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f001 fe3e 	bl	80021cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <SystemClock_Config+0xb8>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a22      	ldr	r2, [pc, #136]	; (80005f4 <SystemClock_Config+0xb8>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <SystemClock_Config+0xb8>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b1d      	ldr	r3, [pc, #116]	; (80005f8 <SystemClock_Config+0xbc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000588:	4a1b      	ldr	r2, [pc, #108]	; (80005f8 <SystemClock_Config+0xbc>)
 800058a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <SystemClock_Config+0xbc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2310      	movs	r3, #16
 80005a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a8:	2300      	movs	r3, #0
 80005aa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0320 	add.w	r3, r7, #32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fcf9 	bl	8000fa8 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005bc:	f000 f862 	bl	8000684 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c4:	2300      	movs	r3, #0
 80005c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 ff54 	bl	8001488 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005e6:	f000 f84d 	bl	8000684 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	; 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <MX_USART1_UART_Init+0x50>)
 8000604:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800060c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000622:	220c      	movs	r2, #12
 8000624:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000634:	f001 f8f4 	bl	8001820 <HAL_UART_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800063e:	f000 f821 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000098 	.word	0x20000098
 800064c:	40011000 	.word	0x40011000

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_GPIO_Init+0x30>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a08      	ldr	r2, [pc, #32]	; (8000680 <MX_GPIO_Init+0x30>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_GPIO_Init+0x30>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800

08000684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <HAL_MspInit+0x4c>)
 80006a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a2:	4a0f      	ldr	r2, [pc, #60]	; (80006e0 <HAL_MspInit+0x4c>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6453      	str	r3, [r2, #68]	; 0x44
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_MspInit+0x4c>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <HAL_MspInit+0x4c>)
 80006bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006be:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <HAL_MspInit+0x4c>)
 80006c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c4:	6413      	str	r3, [r2, #64]	; 0x40
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_MspInit+0x4c>)
 80006c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800

080006e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a19      	ldr	r2, [pc, #100]	; (8000768 <HAL_UART_MspInit+0x84>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d12c      	bne.n	8000760 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <HAL_UART_MspInit+0x88>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070e:	4a17      	ldr	r2, [pc, #92]	; (800076c <HAL_UART_MspInit+0x88>)
 8000710:	f043 0310 	orr.w	r3, r3, #16
 8000714:	6453      	str	r3, [r2, #68]	; 0x44
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <HAL_UART_MspInit+0x88>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071a:	f003 0310 	and.w	r3, r3, #16
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <HAL_UART_MspInit+0x88>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a10      	ldr	r2, [pc, #64]	; (800076c <HAL_UART_MspInit+0x88>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <HAL_UART_MspInit+0x88>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800073e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000744:	2302      	movs	r3, #2
 8000746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074c:	2303      	movs	r3, #3
 800074e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000750:	2307      	movs	r3, #7
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	4619      	mov	r1, r3
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <HAL_UART_MspInit+0x8c>)
 800075c:	f000 fa7a 	bl	8000c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	; 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40011000 	.word	0x40011000
 800076c:	40023800 	.word	0x40023800
 8000770:	40020000 	.word	0x40020000

08000774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <HardFault_Handler+0x4>

08000788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <MemManage_Handler+0x4>

0800078e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <BusFault_Handler+0x4>

08000794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <UsageFault_Handler+0x4>

0800079a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c8:	f000 f91c 	bl	8000a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	e00a      	b.n	80007f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007e2:	f3af 8000 	nop.w
 80007e6:	4601      	mov	r1, r0
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	1c5a      	adds	r2, r3, #1
 80007ec:	60ba      	str	r2, [r7, #8]
 80007ee:	b2ca      	uxtb	r2, r1
 80007f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	3301      	adds	r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	697a      	ldr	r2, [r7, #20]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	dbf0      	blt.n	80007e2 <_read+0x12>
	}

return len;
 8000800:	687b      	ldr	r3, [r7, #4]
}
 8000802:	4618      	mov	r0, r3
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <_close>:
	}
	return len;
}

int _close(int file)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
	return -1;
 8000812:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000816:	4618      	mov	r0, r3
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000822:	b480      	push	{r7}
 8000824:	b083      	sub	sp, #12
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
 800082a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000832:	605a      	str	r2, [r3, #4]
	return 0;
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <_isatty>:

int _isatty(int file)
{
 8000842:	b480      	push	{r7}
 8000844:	b083      	sub	sp, #12
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
	return 1;
 800084a:	2301      	movs	r3, #1
}
 800084c:	4618      	mov	r0, r3
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
	return 0;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
	...

08000874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800087c:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <_sbrk+0x5c>)
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <_sbrk+0x60>)
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <_sbrk+0x64>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d102      	bne.n	8000896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <_sbrk+0x64>)
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <_sbrk+0x68>)
 8000894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <_sbrk+0x64>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4413      	add	r3, r2
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d207      	bcs.n	80008b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a4:	f001 fc68 	bl	8002178 <__errno>
 80008a8:	4602      	mov	r2, r0
 80008aa:	230c      	movs	r3, #12
 80008ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295
 80008b2:	e009      	b.n	80008c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <_sbrk+0x64>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <_sbrk+0x64>)
 80008c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008c6:	68fb      	ldr	r3, [r7, #12]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20030000 	.word	0x20030000
 80008d4:	00000400 	.word	0x00000400
 80008d8:	2000008c 	.word	0x2000008c
 80008dc:	200000e0 	.word	0x200000e0

080008e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <SystemInit+0x28>)
 80008e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ea:	4a07      	ldr	r2, [pc, #28]	; (8000908 <SystemInit+0x28>)
 80008ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <SystemInit+0x28>)
 80008f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008fa:	609a      	str	r2, [r3, #8]
#endif
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800090c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000944 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000910:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000912:	e003      	b.n	800091c <LoopCopyDataInit>

08000914 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000916:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000918:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800091a:	3104      	adds	r1, #4

0800091c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800091c:	480b      	ldr	r0, [pc, #44]	; (800094c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000920:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000922:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000924:	d3f6      	bcc.n	8000914 <CopyDataInit>
  ldr  r2, =_sbss
 8000926:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000928:	e002      	b.n	8000930 <LoopFillZerobss>

0800092a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800092a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800092c:	f842 3b04 	str.w	r3, [r2], #4

08000930 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000932:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000934:	d3f9      	bcc.n	800092a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000936:	f7ff ffd3 	bl	80008e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800093a:	f001 fc23 	bl	8002184 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800093e:	f7ff fde9 	bl	8000514 <main>
  bx  lr    
 8000942:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000944:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000948:	08002b58 	.word	0x08002b58
  ldr  r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000950:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000954:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000958:	200000e0 	.word	0x200000e0

0800095c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC_IRQHandler>
	...

08000960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000964:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <HAL_Init+0x40>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a0d      	ldr	r2, [pc, #52]	; (80009a0 <HAL_Init+0x40>)
 800096a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800096e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000970:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <HAL_Init+0x40>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <HAL_Init+0x40>)
 8000976:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800097a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <HAL_Init+0x40>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a07      	ldr	r2, [pc, #28]	; (80009a0 <HAL_Init+0x40>)
 8000982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000988:	2003      	movs	r0, #3
 800098a:	f000 f92f 	bl	8000bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098e:	2000      	movs	r0, #0
 8000990:	f000 f808 	bl	80009a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000994:	f7ff fe7e 	bl	8000694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023c00 	.word	0x40023c00

080009a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_InitTick+0x54>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_InitTick+0x58>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f939 	bl	8000c3a <HAL_SYSTICK_Config>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e00e      	b.n	80009f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d80a      	bhi.n	80009ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d8:	2200      	movs	r2, #0
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295
 80009e0:	f000 f90f 	bl	8000c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e4:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <HAL_InitTick+0x5c>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e000      	b.n	80009f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000008 	.word	0x20000008
 8000a00:	20000004 	.word	0x20000004

08000a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_IncTick+0x20>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_IncTick+0x24>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <HAL_IncTick+0x24>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000008 	.word	0x20000008
 8000a28:	200000d8 	.word	0x200000d8

08000a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <HAL_GetTick+0x14>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	200000d8 	.word	0x200000d8

08000a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a4c:	f7ff ffee 	bl	8000a2c <HAL_GetTick>
 8000a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a5c:	d005      	beq.n	8000a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_Delay+0x40>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4413      	add	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a6a:	bf00      	nop
 8000a6c:	f7ff ffde 	bl	8000a2c <HAL_GetTick>
 8000a70:	4602      	mov	r2, r0
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d8f7      	bhi.n	8000a6c <HAL_Delay+0x28>
  {
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000008 	.word	0x20000008

08000a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aba:	4a04      	ldr	r2, [pc, #16]	; (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	60d3      	str	r3, [r2, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	0a1b      	lsrs	r3, r3, #8
 8000ada:	f003 0307 	and.w	r3, r3, #7
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	db0a      	blt.n	8000b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	490c      	ldr	r1, [pc, #48]	; (8000b38 <__NVIC_SetPriority+0x4c>)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	0112      	lsls	r2, r2, #4
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	440b      	add	r3, r1
 8000b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b14:	e00a      	b.n	8000b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4908      	ldr	r1, [pc, #32]	; (8000b3c <__NVIC_SetPriority+0x50>)
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	3b04      	subs	r3, #4
 8000b24:	0112      	lsls	r2, r2, #4
 8000b26:	b2d2      	uxtb	r2, r2
 8000b28:	440b      	add	r3, r1
 8000b2a:	761a      	strb	r2, [r3, #24]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000e100 	.word	0xe000e100
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	f1c3 0307 	rsb	r3, r3, #7
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	bf28      	it	cs
 8000b5e:	2304      	movcs	r3, #4
 8000b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3304      	adds	r3, #4
 8000b66:	2b06      	cmp	r3, #6
 8000b68:	d902      	bls.n	8000b70 <NVIC_EncodePriority+0x30>
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	e000      	b.n	8000b72 <NVIC_EncodePriority+0x32>
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	401a      	ands	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b88:	f04f 31ff 	mov.w	r1, #4294967295
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b92:	43d9      	mvns	r1, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	4313      	orrs	r3, r2
         );
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3724      	adds	r7, #36	; 0x24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb8:	d301      	bcc.n	8000bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00f      	b.n	8000bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <SysTick_Config+0x40>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc6:	210f      	movs	r1, #15
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f7ff ff8e 	bl	8000aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <SysTick_Config+0x40>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <SysTick_Config+0x40>)
 8000bd8:	2207      	movs	r2, #7
 8000bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	e000e010 	.word	0xe000e010

08000bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff ff47 	bl	8000a88 <__NVIC_SetPriorityGrouping>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b086      	sub	sp, #24
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c14:	f7ff ff5c 	bl	8000ad0 <__NVIC_GetPriorityGrouping>
 8000c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	68b9      	ldr	r1, [r7, #8]
 8000c1e:	6978      	ldr	r0, [r7, #20]
 8000c20:	f7ff ff8e 	bl	8000b40 <NVIC_EncodePriority>
 8000c24:	4602      	mov	r2, r0
 8000c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff5d 	bl	8000aec <__NVIC_SetPriority>
}
 8000c32:	bf00      	nop
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff ffb0 	bl	8000ba8 <SysTick_Config>
 8000c48:	4603      	mov	r3, r0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
 8000c6e:	e177      	b.n	8000f60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c70:	2201      	movs	r2, #1
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	697a      	ldr	r2, [r7, #20]
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	f040 8166 	bne.w	8000f5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d00b      	beq.n	8000cae <HAL_GPIO_Init+0x5a>
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d007      	beq.n	8000cae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ca2:	2b11      	cmp	r3, #17
 8000ca4:	d003      	beq.n	8000cae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2b12      	cmp	r3, #18
 8000cac:	d130      	bne.n	8000d10 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	2203      	movs	r2, #3
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	68da      	ldr	r2, [r3, #12]
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	091b      	lsrs	r3, r3, #4
 8000cfa:	f003 0201 	and.w	r2, r3, #1
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4013      	ands	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	689a      	ldr	r2, [r3, #8]
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d003      	beq.n	8000d50 <HAL_GPIO_Init+0xfc>
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b12      	cmp	r3, #18
 8000d4e:	d123      	bne.n	8000d98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	08da      	lsrs	r2, r3, #3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3208      	adds	r2, #8
 8000d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	f003 0307 	and.w	r3, r3, #7
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	220f      	movs	r2, #15
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	691a      	ldr	r2, [r3, #16]
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	08da      	lsrs	r2, r3, #3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3208      	adds	r2, #8
 8000d92:	69b9      	ldr	r1, [r7, #24]
 8000d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	2203      	movs	r2, #3
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0203 	and.w	r2, r3, #3
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f000 80c0 	beq.w	8000f5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b65      	ldr	r3, [pc, #404]	; (8000f74 <HAL_GPIO_Init+0x320>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	4a64      	ldr	r2, [pc, #400]	; (8000f74 <HAL_GPIO_Init+0x320>)
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dea:	4b62      	ldr	r3, [pc, #392]	; (8000f74 <HAL_GPIO_Init+0x320>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000df6:	4a60      	ldr	r2, [pc, #384]	; (8000f78 <HAL_GPIO_Init+0x324>)
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	089b      	lsrs	r3, r3, #2
 8000dfc:	3302      	adds	r3, #2
 8000dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f003 0303 	and.w	r3, r3, #3
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	220f      	movs	r2, #15
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4013      	ands	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a57      	ldr	r2, [pc, #348]	; (8000f7c <HAL_GPIO_Init+0x328>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d037      	beq.n	8000e92 <HAL_GPIO_Init+0x23e>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a56      	ldr	r2, [pc, #344]	; (8000f80 <HAL_GPIO_Init+0x32c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d031      	beq.n	8000e8e <HAL_GPIO_Init+0x23a>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a55      	ldr	r2, [pc, #340]	; (8000f84 <HAL_GPIO_Init+0x330>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d02b      	beq.n	8000e8a <HAL_GPIO_Init+0x236>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a54      	ldr	r2, [pc, #336]	; (8000f88 <HAL_GPIO_Init+0x334>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d025      	beq.n	8000e86 <HAL_GPIO_Init+0x232>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a53      	ldr	r2, [pc, #332]	; (8000f8c <HAL_GPIO_Init+0x338>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d01f      	beq.n	8000e82 <HAL_GPIO_Init+0x22e>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a52      	ldr	r2, [pc, #328]	; (8000f90 <HAL_GPIO_Init+0x33c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d019      	beq.n	8000e7e <HAL_GPIO_Init+0x22a>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a51      	ldr	r2, [pc, #324]	; (8000f94 <HAL_GPIO_Init+0x340>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d013      	beq.n	8000e7a <HAL_GPIO_Init+0x226>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a50      	ldr	r2, [pc, #320]	; (8000f98 <HAL_GPIO_Init+0x344>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d00d      	beq.n	8000e76 <HAL_GPIO_Init+0x222>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a4f      	ldr	r2, [pc, #316]	; (8000f9c <HAL_GPIO_Init+0x348>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d007      	beq.n	8000e72 <HAL_GPIO_Init+0x21e>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a4e      	ldr	r2, [pc, #312]	; (8000fa0 <HAL_GPIO_Init+0x34c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d101      	bne.n	8000e6e <HAL_GPIO_Init+0x21a>
 8000e6a:	2309      	movs	r3, #9
 8000e6c:	e012      	b.n	8000e94 <HAL_GPIO_Init+0x240>
 8000e6e:	230a      	movs	r3, #10
 8000e70:	e010      	b.n	8000e94 <HAL_GPIO_Init+0x240>
 8000e72:	2308      	movs	r3, #8
 8000e74:	e00e      	b.n	8000e94 <HAL_GPIO_Init+0x240>
 8000e76:	2307      	movs	r3, #7
 8000e78:	e00c      	b.n	8000e94 <HAL_GPIO_Init+0x240>
 8000e7a:	2306      	movs	r3, #6
 8000e7c:	e00a      	b.n	8000e94 <HAL_GPIO_Init+0x240>
 8000e7e:	2305      	movs	r3, #5
 8000e80:	e008      	b.n	8000e94 <HAL_GPIO_Init+0x240>
 8000e82:	2304      	movs	r3, #4
 8000e84:	e006      	b.n	8000e94 <HAL_GPIO_Init+0x240>
 8000e86:	2303      	movs	r3, #3
 8000e88:	e004      	b.n	8000e94 <HAL_GPIO_Init+0x240>
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	e002      	b.n	8000e94 <HAL_GPIO_Init+0x240>
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e000      	b.n	8000e94 <HAL_GPIO_Init+0x240>
 8000e92:	2300      	movs	r3, #0
 8000e94:	69fa      	ldr	r2, [r7, #28]
 8000e96:	f002 0203 	and.w	r2, r2, #3
 8000e9a:	0092      	lsls	r2, r2, #2
 8000e9c:	4093      	lsls	r3, r2
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ea4:	4934      	ldr	r1, [pc, #208]	; (8000f78 <HAL_GPIO_Init+0x324>)
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	3302      	adds	r3, #2
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eb2:	4b3c      	ldr	r3, [pc, #240]	; (8000fa4 <HAL_GPIO_Init+0x350>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ed6:	4a33      	ldr	r2, [pc, #204]	; (8000fa4 <HAL_GPIO_Init+0x350>)
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000edc:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <HAL_GPIO_Init+0x350>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f00:	4a28      	ldr	r2, [pc, #160]	; (8000fa4 <HAL_GPIO_Init+0x350>)
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f06:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <HAL_GPIO_Init+0x350>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f2a:	4a1e      	ldr	r2, [pc, #120]	; (8000fa4 <HAL_GPIO_Init+0x350>)
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f30:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <HAL_GPIO_Init+0x350>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f54:	4a13      	ldr	r2, [pc, #76]	; (8000fa4 <HAL_GPIO_Init+0x350>)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	61fb      	str	r3, [r7, #28]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	2b0f      	cmp	r3, #15
 8000f64:	f67f ae84 	bls.w	8000c70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f68:	bf00      	nop
 8000f6a:	3724      	adds	r7, #36	; 0x24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40013800 	.word	0x40013800
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	40020400 	.word	0x40020400
 8000f84:	40020800 	.word	0x40020800
 8000f88:	40020c00 	.word	0x40020c00
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40021400 	.word	0x40021400
 8000f94:	40021800 	.word	0x40021800
 8000f98:	40021c00 	.word	0x40021c00
 8000f9c:	40022000 	.word	0x40022000
 8000fa0:	40022400 	.word	0x40022400
 8000fa4:	40013c00 	.word	0x40013c00

08000fa8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d101      	bne.n	8000fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e25b      	b.n	8001472 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d075      	beq.n	80010b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fc6:	4ba3      	ldr	r3, [pc, #652]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f003 030c 	and.w	r3, r3, #12
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	d00c      	beq.n	8000fec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fd2:	4ba0      	ldr	r3, [pc, #640]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fda:	2b08      	cmp	r3, #8
 8000fdc:	d112      	bne.n	8001004 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fde:	4b9d      	ldr	r3, [pc, #628]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fe6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fea:	d10b      	bne.n	8001004 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fec:	4b99      	ldr	r3, [pc, #612]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d05b      	beq.n	80010b0 <HAL_RCC_OscConfig+0x108>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d157      	bne.n	80010b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e236      	b.n	8001472 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100c:	d106      	bne.n	800101c <HAL_RCC_OscConfig+0x74>
 800100e:	4b91      	ldr	r3, [pc, #580]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a90      	ldr	r2, [pc, #576]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 8001014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	e01d      	b.n	8001058 <HAL_RCC_OscConfig+0xb0>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001024:	d10c      	bne.n	8001040 <HAL_RCC_OscConfig+0x98>
 8001026:	4b8b      	ldr	r3, [pc, #556]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a8a      	ldr	r2, [pc, #552]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 800102c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	4b88      	ldr	r3, [pc, #544]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a87      	ldr	r2, [pc, #540]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 8001038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	e00b      	b.n	8001058 <HAL_RCC_OscConfig+0xb0>
 8001040:	4b84      	ldr	r3, [pc, #528]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a83      	ldr	r2, [pc, #524]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 8001046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	4b81      	ldr	r3, [pc, #516]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a80      	ldr	r2, [pc, #512]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 8001052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001056:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d013      	beq.n	8001088 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001060:	f7ff fce4 	bl	8000a2c <HAL_GetTick>
 8001064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001066:	e008      	b.n	800107a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001068:	f7ff fce0 	bl	8000a2c <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b64      	cmp	r3, #100	; 0x64
 8001074:	d901      	bls.n	800107a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e1fb      	b.n	8001472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107a:	4b76      	ldr	r3, [pc, #472]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d0f0      	beq.n	8001068 <HAL_RCC_OscConfig+0xc0>
 8001086:	e014      	b.n	80010b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001088:	f7ff fcd0 	bl	8000a2c <HAL_GetTick>
 800108c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108e:	e008      	b.n	80010a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001090:	f7ff fccc 	bl	8000a2c <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b64      	cmp	r3, #100	; 0x64
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e1e7      	b.n	8001472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a2:	4b6c      	ldr	r3, [pc, #432]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1f0      	bne.n	8001090 <HAL_RCC_OscConfig+0xe8>
 80010ae:	e000      	b.n	80010b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d063      	beq.n	8001186 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010be:	4b65      	ldr	r3, [pc, #404]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 030c 	and.w	r3, r3, #12
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00b      	beq.n	80010e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010ca:	4b62      	ldr	r3, [pc, #392]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010d2:	2b08      	cmp	r3, #8
 80010d4:	d11c      	bne.n	8001110 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010d6:	4b5f      	ldr	r3, [pc, #380]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d116      	bne.n	8001110 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e2:	4b5c      	ldr	r3, [pc, #368]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d005      	beq.n	80010fa <HAL_RCC_OscConfig+0x152>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d001      	beq.n	80010fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e1bb      	b.n	8001472 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fa:	4b56      	ldr	r3, [pc, #344]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	4952      	ldr	r1, [pc, #328]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 800110a:	4313      	orrs	r3, r2
 800110c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800110e:	e03a      	b.n	8001186 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d020      	beq.n	800115a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001118:	4b4f      	ldr	r3, [pc, #316]	; (8001258 <HAL_RCC_OscConfig+0x2b0>)
 800111a:	2201      	movs	r2, #1
 800111c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800111e:	f7ff fc85 	bl	8000a2c <HAL_GetTick>
 8001122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001124:	e008      	b.n	8001138 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001126:	f7ff fc81 	bl	8000a2c <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e19c      	b.n	8001472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001138:	4b46      	ldr	r3, [pc, #280]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0f0      	beq.n	8001126 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001144:	4b43      	ldr	r3, [pc, #268]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	4940      	ldr	r1, [pc, #256]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 8001154:	4313      	orrs	r3, r2
 8001156:	600b      	str	r3, [r1, #0]
 8001158:	e015      	b.n	8001186 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800115a:	4b3f      	ldr	r3, [pc, #252]	; (8001258 <HAL_RCC_OscConfig+0x2b0>)
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001160:	f7ff fc64 	bl	8000a2c <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001168:	f7ff fc60 	bl	8000a2c <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e17b      	b.n	8001472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800117a:	4b36      	ldr	r3, [pc, #216]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1f0      	bne.n	8001168 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	2b00      	cmp	r3, #0
 8001190:	d030      	beq.n	80011f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d016      	beq.n	80011c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800119a:	4b30      	ldr	r3, [pc, #192]	; (800125c <HAL_RCC_OscConfig+0x2b4>)
 800119c:	2201      	movs	r2, #1
 800119e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011a0:	f7ff fc44 	bl	8000a2c <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011a8:	f7ff fc40 	bl	8000a2c <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e15b      	b.n	8001472 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ba:	4b26      	ldr	r3, [pc, #152]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 80011bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0f0      	beq.n	80011a8 <HAL_RCC_OscConfig+0x200>
 80011c6:	e015      	b.n	80011f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011c8:	4b24      	ldr	r3, [pc, #144]	; (800125c <HAL_RCC_OscConfig+0x2b4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ce:	f7ff fc2d 	bl	8000a2c <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d6:	f7ff fc29 	bl	8000a2c <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e144      	b.n	8001472 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 80011ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1f0      	bne.n	80011d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 80a0 	beq.w	8001342 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001202:	2300      	movs	r3, #0
 8001204:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10f      	bne.n	8001232 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 800121c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001220:	6413      	str	r3, [r2, #64]	; 0x40
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <HAL_RCC_OscConfig+0x2ac>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800122e:	2301      	movs	r3, #1
 8001230:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <HAL_RCC_OscConfig+0x2b8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123a:	2b00      	cmp	r3, #0
 800123c:	d121      	bne.n	8001282 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <HAL_RCC_OscConfig+0x2b8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a07      	ldr	r2, [pc, #28]	; (8001260 <HAL_RCC_OscConfig+0x2b8>)
 8001244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800124a:	f7ff fbef 	bl	8000a2c <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001250:	e011      	b.n	8001276 <HAL_RCC_OscConfig+0x2ce>
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800
 8001258:	42470000 	.word	0x42470000
 800125c:	42470e80 	.word	0x42470e80
 8001260:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001264:	f7ff fbe2 	bl	8000a2c <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e0fd      	b.n	8001472 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001276:	4b81      	ldr	r3, [pc, #516]	; (800147c <HAL_RCC_OscConfig+0x4d4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0f0      	beq.n	8001264 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d106      	bne.n	8001298 <HAL_RCC_OscConfig+0x2f0>
 800128a:	4b7d      	ldr	r3, [pc, #500]	; (8001480 <HAL_RCC_OscConfig+0x4d8>)
 800128c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128e:	4a7c      	ldr	r2, [pc, #496]	; (8001480 <HAL_RCC_OscConfig+0x4d8>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6713      	str	r3, [r2, #112]	; 0x70
 8001296:	e01c      	b.n	80012d2 <HAL_RCC_OscConfig+0x32a>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	2b05      	cmp	r3, #5
 800129e:	d10c      	bne.n	80012ba <HAL_RCC_OscConfig+0x312>
 80012a0:	4b77      	ldr	r3, [pc, #476]	; (8001480 <HAL_RCC_OscConfig+0x4d8>)
 80012a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a4:	4a76      	ldr	r2, [pc, #472]	; (8001480 <HAL_RCC_OscConfig+0x4d8>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	6713      	str	r3, [r2, #112]	; 0x70
 80012ac:	4b74      	ldr	r3, [pc, #464]	; (8001480 <HAL_RCC_OscConfig+0x4d8>)
 80012ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b0:	4a73      	ldr	r2, [pc, #460]	; (8001480 <HAL_RCC_OscConfig+0x4d8>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	6713      	str	r3, [r2, #112]	; 0x70
 80012b8:	e00b      	b.n	80012d2 <HAL_RCC_OscConfig+0x32a>
 80012ba:	4b71      	ldr	r3, [pc, #452]	; (8001480 <HAL_RCC_OscConfig+0x4d8>)
 80012bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012be:	4a70      	ldr	r2, [pc, #448]	; (8001480 <HAL_RCC_OscConfig+0x4d8>)
 80012c0:	f023 0301 	bic.w	r3, r3, #1
 80012c4:	6713      	str	r3, [r2, #112]	; 0x70
 80012c6:	4b6e      	ldr	r3, [pc, #440]	; (8001480 <HAL_RCC_OscConfig+0x4d8>)
 80012c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ca:	4a6d      	ldr	r2, [pc, #436]	; (8001480 <HAL_RCC_OscConfig+0x4d8>)
 80012cc:	f023 0304 	bic.w	r3, r3, #4
 80012d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d015      	beq.n	8001306 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012da:	f7ff fba7 	bl	8000a2c <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e0:	e00a      	b.n	80012f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012e2:	f7ff fba3 	bl	8000a2c <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e0bc      	b.n	8001472 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f8:	4b61      	ldr	r3, [pc, #388]	; (8001480 <HAL_RCC_OscConfig+0x4d8>)
 80012fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0ee      	beq.n	80012e2 <HAL_RCC_OscConfig+0x33a>
 8001304:	e014      	b.n	8001330 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001306:	f7ff fb91 	bl	8000a2c <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800130c:	e00a      	b.n	8001324 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800130e:	f7ff fb8d 	bl	8000a2c <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	f241 3288 	movw	r2, #5000	; 0x1388
 800131c:	4293      	cmp	r3, r2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e0a6      	b.n	8001472 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001324:	4b56      	ldr	r3, [pc, #344]	; (8001480 <HAL_RCC_OscConfig+0x4d8>)
 8001326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1ee      	bne.n	800130e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d105      	bne.n	8001342 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001336:	4b52      	ldr	r3, [pc, #328]	; (8001480 <HAL_RCC_OscConfig+0x4d8>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a51      	ldr	r2, [pc, #324]	; (8001480 <HAL_RCC_OscConfig+0x4d8>)
 800133c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 8092 	beq.w	8001470 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800134c:	4b4c      	ldr	r3, [pc, #304]	; (8001480 <HAL_RCC_OscConfig+0x4d8>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 030c 	and.w	r3, r3, #12
 8001354:	2b08      	cmp	r3, #8
 8001356:	d05c      	beq.n	8001412 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d141      	bne.n	80013e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001360:	4b48      	ldr	r3, [pc, #288]	; (8001484 <HAL_RCC_OscConfig+0x4dc>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001366:	f7ff fb61 	bl	8000a2c <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800136e:	f7ff fb5d 	bl	8000a2c <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e078      	b.n	8001472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001380:	4b3f      	ldr	r3, [pc, #252]	; (8001480 <HAL_RCC_OscConfig+0x4d8>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f0      	bne.n	800136e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69da      	ldr	r2, [r3, #28]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	431a      	orrs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139a:	019b      	lsls	r3, r3, #6
 800139c:	431a      	orrs	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a2:	085b      	lsrs	r3, r3, #1
 80013a4:	3b01      	subs	r3, #1
 80013a6:	041b      	lsls	r3, r3, #16
 80013a8:	431a      	orrs	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ae:	061b      	lsls	r3, r3, #24
 80013b0:	4933      	ldr	r1, [pc, #204]	; (8001480 <HAL_RCC_OscConfig+0x4d8>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013b6:	4b33      	ldr	r3, [pc, #204]	; (8001484 <HAL_RCC_OscConfig+0x4dc>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fb36 	bl	8000a2c <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c4:	f7ff fb32 	bl	8000a2c <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e04d      	b.n	8001472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d6:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <HAL_RCC_OscConfig+0x4d8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0x41c>
 80013e2:	e045      	b.n	8001470 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e4:	4b27      	ldr	r3, [pc, #156]	; (8001484 <HAL_RCC_OscConfig+0x4dc>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ea:	f7ff fb1f 	bl	8000a2c <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f2:	f7ff fb1b 	bl	8000a2c <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e036      	b.n	8001472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <HAL_RCC_OscConfig+0x4d8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1f0      	bne.n	80013f2 <HAL_RCC_OscConfig+0x44a>
 8001410:	e02e      	b.n	8001470 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d101      	bne.n	800141e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e029      	b.n	8001472 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_RCC_OscConfig+0x4d8>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	429a      	cmp	r2, r3
 8001430:	d11c      	bne.n	800146c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143c:	429a      	cmp	r2, r3
 800143e:	d115      	bne.n	800146c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001446:	4013      	ands	r3, r2
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800144c:	4293      	cmp	r3, r2
 800144e:	d10d      	bne.n	800146c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800145a:	429a      	cmp	r2, r3
 800145c:	d106      	bne.n	800146c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001468:	429a      	cmp	r2, r3
 800146a:	d001      	beq.n	8001470 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e000      	b.n	8001472 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40007000 	.word	0x40007000
 8001480:	40023800 	.word	0x40023800
 8001484:	42470060 	.word	0x42470060

08001488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e0cc      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800149c:	4b68      	ldr	r3, [pc, #416]	; (8001640 <HAL_RCC_ClockConfig+0x1b8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d90c      	bls.n	80014c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014aa:	4b65      	ldr	r3, [pc, #404]	; (8001640 <HAL_RCC_ClockConfig+0x1b8>)
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b2:	4b63      	ldr	r3, [pc, #396]	; (8001640 <HAL_RCC_ClockConfig+0x1b8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d001      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e0b8      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d020      	beq.n	8001512 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014dc:	4b59      	ldr	r3, [pc, #356]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	4a58      	ldr	r2, [pc, #352]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80014e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0308 	and.w	r3, r3, #8
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014f4:	4b53      	ldr	r3, [pc, #332]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	4a52      	ldr	r2, [pc, #328]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001500:	4b50      	ldr	r3, [pc, #320]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	494d      	ldr	r1, [pc, #308]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 800150e:	4313      	orrs	r3, r2
 8001510:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d044      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d107      	bne.n	8001536 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001526:	4b47      	ldr	r3, [pc, #284]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d119      	bne.n	8001566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e07f      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d003      	beq.n	8001546 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001542:	2b03      	cmp	r3, #3
 8001544:	d107      	bne.n	8001556 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001546:	4b3f      	ldr	r3, [pc, #252]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d109      	bne.n	8001566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e06f      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001556:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e067      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001566:	4b37      	ldr	r3, [pc, #220]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f023 0203 	bic.w	r2, r3, #3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	4934      	ldr	r1, [pc, #208]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001574:	4313      	orrs	r3, r2
 8001576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001578:	f7ff fa58 	bl	8000a2c <HAL_GetTick>
 800157c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157e:	e00a      	b.n	8001596 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001580:	f7ff fa54 	bl	8000a2c <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	f241 3288 	movw	r2, #5000	; 0x1388
 800158e:	4293      	cmp	r3, r2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e04f      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001596:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 020c 	and.w	r2, r3, #12
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d1eb      	bne.n	8001580 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015a8:	4b25      	ldr	r3, [pc, #148]	; (8001640 <HAL_RCC_ClockConfig+0x1b8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 030f 	and.w	r3, r3, #15
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d20c      	bcs.n	80015d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b6:	4b22      	ldr	r3, [pc, #136]	; (8001640 <HAL_RCC_ClockConfig+0x1b8>)
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015be:	4b20      	ldr	r3, [pc, #128]	; (8001640 <HAL_RCC_ClockConfig+0x1b8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d001      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e032      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d008      	beq.n	80015ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	4916      	ldr	r1, [pc, #88]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d009      	beq.n	800160e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015fa:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	490e      	ldr	r1, [pc, #56]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	4313      	orrs	r3, r2
 800160c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800160e:	f000 f821 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 8001612:	4601      	mov	r1, r0
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	091b      	lsrs	r3, r3, #4
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <HAL_RCC_ClockConfig+0x1c0>)
 8001620:	5cd3      	ldrb	r3, [r2, r3]
 8001622:	fa21 f303 	lsr.w	r3, r1, r3
 8001626:	4a09      	ldr	r2, [pc, #36]	; (800164c <HAL_RCC_ClockConfig+0x1c4>)
 8001628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_RCC_ClockConfig+0x1c8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff f9b8 	bl	80009a4 <HAL_InitTick>

  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40023c00 	.word	0x40023c00
 8001644:	40023800 	.word	0x40023800
 8001648:	08002acc 	.word	0x08002acc
 800164c:	20000000 	.word	0x20000000
 8001650:	20000004 	.word	0x20000004

08001654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	2300      	movs	r3, #0
 8001664:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800166a:	4b50      	ldr	r3, [pc, #320]	; (80017ac <HAL_RCC_GetSysClockFreq+0x158>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b04      	cmp	r3, #4
 8001674:	d007      	beq.n	8001686 <HAL_RCC_GetSysClockFreq+0x32>
 8001676:	2b08      	cmp	r3, #8
 8001678:	d008      	beq.n	800168c <HAL_RCC_GetSysClockFreq+0x38>
 800167a:	2b00      	cmp	r3, #0
 800167c:	f040 808d 	bne.w	800179a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001680:	4b4b      	ldr	r3, [pc, #300]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001682:	60bb      	str	r3, [r7, #8]
       break;
 8001684:	e08c      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001686:	4b4b      	ldr	r3, [pc, #300]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001688:	60bb      	str	r3, [r7, #8]
      break;
 800168a:	e089      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800168c:	4b47      	ldr	r3, [pc, #284]	; (80017ac <HAL_RCC_GetSysClockFreq+0x158>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001694:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001696:	4b45      	ldr	r3, [pc, #276]	; (80017ac <HAL_RCC_GetSysClockFreq+0x158>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d023      	beq.n	80016ea <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a2:	4b42      	ldr	r3, [pc, #264]	; (80017ac <HAL_RCC_GetSysClockFreq+0x158>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	099b      	lsrs	r3, r3, #6
 80016a8:	f04f 0400 	mov.w	r4, #0
 80016ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	ea03 0501 	and.w	r5, r3, r1
 80016b8:	ea04 0602 	and.w	r6, r4, r2
 80016bc:	4a3d      	ldr	r2, [pc, #244]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80016be:	fb02 f106 	mul.w	r1, r2, r6
 80016c2:	2200      	movs	r2, #0
 80016c4:	fb02 f205 	mul.w	r2, r2, r5
 80016c8:	440a      	add	r2, r1
 80016ca:	493a      	ldr	r1, [pc, #232]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80016cc:	fba5 0101 	umull	r0, r1, r5, r1
 80016d0:	1853      	adds	r3, r2, r1
 80016d2:	4619      	mov	r1, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f04f 0400 	mov.w	r4, #0
 80016da:	461a      	mov	r2, r3
 80016dc:	4623      	mov	r3, r4
 80016de:	f7fe fd85 	bl	80001ec <__aeabi_uldivmod>
 80016e2:	4603      	mov	r3, r0
 80016e4:	460c      	mov	r4, r1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	e049      	b.n	800177e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ea:	4b30      	ldr	r3, [pc, #192]	; (80017ac <HAL_RCC_GetSysClockFreq+0x158>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	099b      	lsrs	r3, r3, #6
 80016f0:	f04f 0400 	mov.w	r4, #0
 80016f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	ea03 0501 	and.w	r5, r3, r1
 8001700:	ea04 0602 	and.w	r6, r4, r2
 8001704:	4629      	mov	r1, r5
 8001706:	4632      	mov	r2, r6
 8001708:	f04f 0300 	mov.w	r3, #0
 800170c:	f04f 0400 	mov.w	r4, #0
 8001710:	0154      	lsls	r4, r2, #5
 8001712:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001716:	014b      	lsls	r3, r1, #5
 8001718:	4619      	mov	r1, r3
 800171a:	4622      	mov	r2, r4
 800171c:	1b49      	subs	r1, r1, r5
 800171e:	eb62 0206 	sbc.w	r2, r2, r6
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	f04f 0400 	mov.w	r4, #0
 800172a:	0194      	lsls	r4, r2, #6
 800172c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001730:	018b      	lsls	r3, r1, #6
 8001732:	1a5b      	subs	r3, r3, r1
 8001734:	eb64 0402 	sbc.w	r4, r4, r2
 8001738:	f04f 0100 	mov.w	r1, #0
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	00e2      	lsls	r2, r4, #3
 8001742:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001746:	00d9      	lsls	r1, r3, #3
 8001748:	460b      	mov	r3, r1
 800174a:	4614      	mov	r4, r2
 800174c:	195b      	adds	r3, r3, r5
 800174e:	eb44 0406 	adc.w	r4, r4, r6
 8001752:	f04f 0100 	mov.w	r1, #0
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	02a2      	lsls	r2, r4, #10
 800175c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001760:	0299      	lsls	r1, r3, #10
 8001762:	460b      	mov	r3, r1
 8001764:	4614      	mov	r4, r2
 8001766:	4618      	mov	r0, r3
 8001768:	4621      	mov	r1, r4
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f04f 0400 	mov.w	r4, #0
 8001770:	461a      	mov	r2, r3
 8001772:	4623      	mov	r3, r4
 8001774:	f7fe fd3a 	bl	80001ec <__aeabi_uldivmod>
 8001778:	4603      	mov	r3, r0
 800177a:	460c      	mov	r4, r1
 800177c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_RCC_GetSysClockFreq+0x158>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	0c1b      	lsrs	r3, r3, #16
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	3301      	adds	r3, #1
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	fbb2 f3f3 	udiv	r3, r2, r3
 8001796:	60bb      	str	r3, [r7, #8]
      break;
 8001798:	e002      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800179a:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800179c:	60bb      	str	r3, [r7, #8]
      break;
 800179e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017a0:	68bb      	ldr	r3, [r7, #8]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	00f42400 	.word	0x00f42400
 80017b4:	017d7840 	.word	0x017d7840

080017b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <HAL_RCC_GetHCLKFreq+0x14>)
 80017be:	681b      	ldr	r3, [r3, #0]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	20000000 	.word	0x20000000

080017d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017d4:	f7ff fff0 	bl	80017b8 <HAL_RCC_GetHCLKFreq>
 80017d8:	4601      	mov	r1, r0
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	0a9b      	lsrs	r3, r3, #10
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	4a03      	ldr	r2, [pc, #12]	; (80017f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017e6:	5cd3      	ldrb	r3, [r2, r3]
 80017e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40023800 	.word	0x40023800
 80017f4:	08002adc 	.word	0x08002adc

080017f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017fc:	f7ff ffdc 	bl	80017b8 <HAL_RCC_GetHCLKFreq>
 8001800:	4601      	mov	r1, r0
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	0b5b      	lsrs	r3, r3, #13
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	4a03      	ldr	r2, [pc, #12]	; (800181c <HAL_RCC_GetPCLK2Freq+0x24>)
 800180e:	5cd3      	ldrb	r3, [r2, r3]
 8001810:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001814:	4618      	mov	r0, r3
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40023800 	.word	0x40023800
 800181c:	08002adc 	.word	0x08002adc

08001820 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e03f      	b.n	80018b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d106      	bne.n	800184c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7fe ff4c 	bl	80006e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2224      	movs	r2, #36	; 0x24
 8001850:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001862:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f90b 	bl	8001a80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	691a      	ldr	r2, [r3, #16]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001878:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	695a      	ldr	r2, [r3, #20]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001888:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68da      	ldr	r2, [r3, #12]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001898:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2220      	movs	r2, #32
 80018a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2220      	movs	r2, #32
 80018ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b088      	sub	sp, #32
 80018be:	af02      	add	r7, sp, #8
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	4613      	mov	r3, r2
 80018c8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b20      	cmp	r3, #32
 80018d8:	f040 8083 	bne.w	80019e2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <HAL_UART_Transmit+0x2e>
 80018e2:	88fb      	ldrh	r3, [r7, #6]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e07b      	b.n	80019e4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d101      	bne.n	80018fa <HAL_UART_Transmit+0x40>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e074      	b.n	80019e4 <HAL_UART_Transmit+0x12a>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2200      	movs	r2, #0
 8001906:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2221      	movs	r2, #33	; 0x21
 800190c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001910:	f7ff f88c 	bl	8000a2c <HAL_GetTick>
 8001914:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	88fa      	ldrh	r2, [r7, #6]
 800191a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	88fa      	ldrh	r2, [r7, #6]
 8001920:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800192a:	e042      	b.n	80019b2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001930:	b29b      	uxth	r3, r3
 8001932:	3b01      	subs	r3, #1
 8001934:	b29a      	uxth	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001942:	d122      	bne.n	800198a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	2200      	movs	r2, #0
 800194c:	2180      	movs	r1, #128	; 0x80
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 f84c 	bl	80019ec <UART_WaitOnFlagUntilTimeout>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e042      	b.n	80019e4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001970:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d103      	bne.n	8001982 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	3302      	adds	r3, #2
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	e017      	b.n	80019b2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	3301      	adds	r3, #1
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	e013      	b.n	80019b2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2200      	movs	r2, #0
 8001992:	2180      	movs	r1, #128	; 0x80
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 f829 	bl	80019ec <UART_WaitOnFlagUntilTimeout>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e01f      	b.n	80019e4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	60ba      	str	r2, [r7, #8]
 80019aa:	781a      	ldrb	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1b7      	bne.n	800192c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	2200      	movs	r2, #0
 80019c4:	2140      	movs	r1, #64	; 0x40
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f000 f810 	bl	80019ec <UART_WaitOnFlagUntilTimeout>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e006      	b.n	80019e4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2220      	movs	r2, #32
 80019da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	e000      	b.n	80019e4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80019e2:	2302      	movs	r3, #2
  }
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	4613      	mov	r3, r2
 80019fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019fc:	e02c      	b.n	8001a58 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a04:	d028      	beq.n	8001a58 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d007      	beq.n	8001a1c <UART_WaitOnFlagUntilTimeout+0x30>
 8001a0c:	f7ff f80e 	bl	8000a2c <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d21d      	bcs.n	8001a58 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001a2a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	695a      	ldr	r2, [r3, #20]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0201 	bic.w	r2, r2, #1
 8001a3a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2220      	movs	r2, #32
 8001a48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e00f      	b.n	8001a78 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	4013      	ands	r3, r2
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	bf0c      	ite	eq
 8001a68:	2301      	moveq	r3, #1
 8001a6a:	2300      	movne	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	461a      	mov	r2, r3
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d0c3      	beq.n	80019fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a84:	b085      	sub	sp, #20
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68da      	ldr	r2, [r3, #12]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001ac2:	f023 030c 	bic.w	r3, r3, #12
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	68f9      	ldr	r1, [r7, #12]
 8001acc:	430b      	orrs	r3, r1
 8001ace:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	699a      	ldr	r2, [r3, #24]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aee:	f040 818b 	bne.w	8001e08 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4ac1      	ldr	r2, [pc, #772]	; (8001dfc <UART_SetConfig+0x37c>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d005      	beq.n	8001b08 <UART_SetConfig+0x88>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4abf      	ldr	r2, [pc, #764]	; (8001e00 <UART_SetConfig+0x380>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	f040 80bd 	bne.w	8001c82 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001b08:	f7ff fe76 	bl	80017f8 <HAL_RCC_GetPCLK2Freq>
 8001b0c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	461d      	mov	r5, r3
 8001b12:	f04f 0600 	mov.w	r6, #0
 8001b16:	46a8      	mov	r8, r5
 8001b18:	46b1      	mov	r9, r6
 8001b1a:	eb18 0308 	adds.w	r3, r8, r8
 8001b1e:	eb49 0409 	adc.w	r4, r9, r9
 8001b22:	4698      	mov	r8, r3
 8001b24:	46a1      	mov	r9, r4
 8001b26:	eb18 0805 	adds.w	r8, r8, r5
 8001b2a:	eb49 0906 	adc.w	r9, r9, r6
 8001b2e:	f04f 0100 	mov.w	r1, #0
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001b3a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001b3e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001b42:	4688      	mov	r8, r1
 8001b44:	4691      	mov	r9, r2
 8001b46:	eb18 0005 	adds.w	r0, r8, r5
 8001b4a:	eb49 0106 	adc.w	r1, r9, r6
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	461d      	mov	r5, r3
 8001b54:	f04f 0600 	mov.w	r6, #0
 8001b58:	196b      	adds	r3, r5, r5
 8001b5a:	eb46 0406 	adc.w	r4, r6, r6
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4623      	mov	r3, r4
 8001b62:	f7fe fb43 	bl	80001ec <__aeabi_uldivmod>
 8001b66:	4603      	mov	r3, r0
 8001b68:	460c      	mov	r4, r1
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4ba5      	ldr	r3, [pc, #660]	; (8001e04 <UART_SetConfig+0x384>)
 8001b6e:	fba3 2302 	umull	r2, r3, r3, r2
 8001b72:	095b      	lsrs	r3, r3, #5
 8001b74:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	461d      	mov	r5, r3
 8001b7c:	f04f 0600 	mov.w	r6, #0
 8001b80:	46a9      	mov	r9, r5
 8001b82:	46b2      	mov	sl, r6
 8001b84:	eb19 0309 	adds.w	r3, r9, r9
 8001b88:	eb4a 040a 	adc.w	r4, sl, sl
 8001b8c:	4699      	mov	r9, r3
 8001b8e:	46a2      	mov	sl, r4
 8001b90:	eb19 0905 	adds.w	r9, r9, r5
 8001b94:	eb4a 0a06 	adc.w	sl, sl, r6
 8001b98:	f04f 0100 	mov.w	r1, #0
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ba4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001ba8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001bac:	4689      	mov	r9, r1
 8001bae:	4692      	mov	sl, r2
 8001bb0:	eb19 0005 	adds.w	r0, r9, r5
 8001bb4:	eb4a 0106 	adc.w	r1, sl, r6
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	461d      	mov	r5, r3
 8001bbe:	f04f 0600 	mov.w	r6, #0
 8001bc2:	196b      	adds	r3, r5, r5
 8001bc4:	eb46 0406 	adc.w	r4, r6, r6
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4623      	mov	r3, r4
 8001bcc:	f7fe fb0e 	bl	80001ec <__aeabi_uldivmod>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	460c      	mov	r4, r1
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b8b      	ldr	r3, [pc, #556]	; (8001e04 <UART_SetConfig+0x384>)
 8001bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8001bdc:	095b      	lsrs	r3, r3, #5
 8001bde:	2164      	movs	r1, #100	; 0x64
 8001be0:	fb01 f303 	mul.w	r3, r1, r3
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	3332      	adds	r3, #50	; 0x32
 8001bea:	4a86      	ldr	r2, [pc, #536]	; (8001e04 <UART_SetConfig+0x384>)
 8001bec:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf0:	095b      	lsrs	r3, r3, #5
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001bf8:	4498      	add	r8, r3
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	461d      	mov	r5, r3
 8001bfe:	f04f 0600 	mov.w	r6, #0
 8001c02:	46a9      	mov	r9, r5
 8001c04:	46b2      	mov	sl, r6
 8001c06:	eb19 0309 	adds.w	r3, r9, r9
 8001c0a:	eb4a 040a 	adc.w	r4, sl, sl
 8001c0e:	4699      	mov	r9, r3
 8001c10:	46a2      	mov	sl, r4
 8001c12:	eb19 0905 	adds.w	r9, r9, r5
 8001c16:	eb4a 0a06 	adc.w	sl, sl, r6
 8001c1a:	f04f 0100 	mov.w	r1, #0
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001c26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001c2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001c2e:	4689      	mov	r9, r1
 8001c30:	4692      	mov	sl, r2
 8001c32:	eb19 0005 	adds.w	r0, r9, r5
 8001c36:	eb4a 0106 	adc.w	r1, sl, r6
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	461d      	mov	r5, r3
 8001c40:	f04f 0600 	mov.w	r6, #0
 8001c44:	196b      	adds	r3, r5, r5
 8001c46:	eb46 0406 	adc.w	r4, r6, r6
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4623      	mov	r3, r4
 8001c4e:	f7fe facd 	bl	80001ec <__aeabi_uldivmod>
 8001c52:	4603      	mov	r3, r0
 8001c54:	460c      	mov	r4, r1
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b6a      	ldr	r3, [pc, #424]	; (8001e04 <UART_SetConfig+0x384>)
 8001c5a:	fba3 1302 	umull	r1, r3, r3, r2
 8001c5e:	095b      	lsrs	r3, r3, #5
 8001c60:	2164      	movs	r1, #100	; 0x64
 8001c62:	fb01 f303 	mul.w	r3, r1, r3
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	3332      	adds	r3, #50	; 0x32
 8001c6c:	4a65      	ldr	r2, [pc, #404]	; (8001e04 <UART_SetConfig+0x384>)
 8001c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	f003 0207 	and.w	r2, r3, #7
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4442      	add	r2, r8
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	e26f      	b.n	8002162 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c82:	f7ff fda5 	bl	80017d0 <HAL_RCC_GetPCLK1Freq>
 8001c86:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	461d      	mov	r5, r3
 8001c8c:	f04f 0600 	mov.w	r6, #0
 8001c90:	46a8      	mov	r8, r5
 8001c92:	46b1      	mov	r9, r6
 8001c94:	eb18 0308 	adds.w	r3, r8, r8
 8001c98:	eb49 0409 	adc.w	r4, r9, r9
 8001c9c:	4698      	mov	r8, r3
 8001c9e:	46a1      	mov	r9, r4
 8001ca0:	eb18 0805 	adds.w	r8, r8, r5
 8001ca4:	eb49 0906 	adc.w	r9, r9, r6
 8001ca8:	f04f 0100 	mov.w	r1, #0
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001cb4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001cb8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001cbc:	4688      	mov	r8, r1
 8001cbe:	4691      	mov	r9, r2
 8001cc0:	eb18 0005 	adds.w	r0, r8, r5
 8001cc4:	eb49 0106 	adc.w	r1, r9, r6
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	461d      	mov	r5, r3
 8001cce:	f04f 0600 	mov.w	r6, #0
 8001cd2:	196b      	adds	r3, r5, r5
 8001cd4:	eb46 0406 	adc.w	r4, r6, r6
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4623      	mov	r3, r4
 8001cdc:	f7fe fa86 	bl	80001ec <__aeabi_uldivmod>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	460c      	mov	r4, r1
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <UART_SetConfig+0x384>)
 8001ce8:	fba3 2302 	umull	r2, r3, r3, r2
 8001cec:	095b      	lsrs	r3, r3, #5
 8001cee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	461d      	mov	r5, r3
 8001cf6:	f04f 0600 	mov.w	r6, #0
 8001cfa:	46a9      	mov	r9, r5
 8001cfc:	46b2      	mov	sl, r6
 8001cfe:	eb19 0309 	adds.w	r3, r9, r9
 8001d02:	eb4a 040a 	adc.w	r4, sl, sl
 8001d06:	4699      	mov	r9, r3
 8001d08:	46a2      	mov	sl, r4
 8001d0a:	eb19 0905 	adds.w	r9, r9, r5
 8001d0e:	eb4a 0a06 	adc.w	sl, sl, r6
 8001d12:	f04f 0100 	mov.w	r1, #0
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001d22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001d26:	4689      	mov	r9, r1
 8001d28:	4692      	mov	sl, r2
 8001d2a:	eb19 0005 	adds.w	r0, r9, r5
 8001d2e:	eb4a 0106 	adc.w	r1, sl, r6
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	461d      	mov	r5, r3
 8001d38:	f04f 0600 	mov.w	r6, #0
 8001d3c:	196b      	adds	r3, r5, r5
 8001d3e:	eb46 0406 	adc.w	r4, r6, r6
 8001d42:	461a      	mov	r2, r3
 8001d44:	4623      	mov	r3, r4
 8001d46:	f7fe fa51 	bl	80001ec <__aeabi_uldivmod>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	460c      	mov	r4, r1
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b2c      	ldr	r3, [pc, #176]	; (8001e04 <UART_SetConfig+0x384>)
 8001d52:	fba3 1302 	umull	r1, r3, r3, r2
 8001d56:	095b      	lsrs	r3, r3, #5
 8001d58:	2164      	movs	r1, #100	; 0x64
 8001d5a:	fb01 f303 	mul.w	r3, r1, r3
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	3332      	adds	r3, #50	; 0x32
 8001d64:	4a27      	ldr	r2, [pc, #156]	; (8001e04 <UART_SetConfig+0x384>)
 8001d66:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d72:	4498      	add	r8, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	461d      	mov	r5, r3
 8001d78:	f04f 0600 	mov.w	r6, #0
 8001d7c:	46a9      	mov	r9, r5
 8001d7e:	46b2      	mov	sl, r6
 8001d80:	eb19 0309 	adds.w	r3, r9, r9
 8001d84:	eb4a 040a 	adc.w	r4, sl, sl
 8001d88:	4699      	mov	r9, r3
 8001d8a:	46a2      	mov	sl, r4
 8001d8c:	eb19 0905 	adds.w	r9, r9, r5
 8001d90:	eb4a 0a06 	adc.w	sl, sl, r6
 8001d94:	f04f 0100 	mov.w	r1, #0
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001da0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001da4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001da8:	4689      	mov	r9, r1
 8001daa:	4692      	mov	sl, r2
 8001dac:	eb19 0005 	adds.w	r0, r9, r5
 8001db0:	eb4a 0106 	adc.w	r1, sl, r6
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	461d      	mov	r5, r3
 8001dba:	f04f 0600 	mov.w	r6, #0
 8001dbe:	196b      	adds	r3, r5, r5
 8001dc0:	eb46 0406 	adc.w	r4, r6, r6
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4623      	mov	r3, r4
 8001dc8:	f7fe fa10 	bl	80001ec <__aeabi_uldivmod>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	460c      	mov	r4, r1
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <UART_SetConfig+0x384>)
 8001dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8001dd8:	095b      	lsrs	r3, r3, #5
 8001dda:	2164      	movs	r1, #100	; 0x64
 8001ddc:	fb01 f303 	mul.w	r3, r1, r3
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	3332      	adds	r3, #50	; 0x32
 8001de6:	4a07      	ldr	r2, [pc, #28]	; (8001e04 <UART_SetConfig+0x384>)
 8001de8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dec:	095b      	lsrs	r3, r3, #5
 8001dee:	f003 0207 	and.w	r2, r3, #7
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4442      	add	r2, r8
 8001df8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001dfa:	e1b2      	b.n	8002162 <UART_SetConfig+0x6e2>
 8001dfc:	40011000 	.word	0x40011000
 8001e00:	40011400 	.word	0x40011400
 8001e04:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4ad7      	ldr	r2, [pc, #860]	; (800216c <UART_SetConfig+0x6ec>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d005      	beq.n	8001e1e <UART_SetConfig+0x39e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4ad6      	ldr	r2, [pc, #856]	; (8002170 <UART_SetConfig+0x6f0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	f040 80d1 	bne.w	8001fc0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e1e:	f7ff fceb 	bl	80017f8 <HAL_RCC_GetPCLK2Freq>
 8001e22:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	469a      	mov	sl, r3
 8001e28:	f04f 0b00 	mov.w	fp, #0
 8001e2c:	46d0      	mov	r8, sl
 8001e2e:	46d9      	mov	r9, fp
 8001e30:	eb18 0308 	adds.w	r3, r8, r8
 8001e34:	eb49 0409 	adc.w	r4, r9, r9
 8001e38:	4698      	mov	r8, r3
 8001e3a:	46a1      	mov	r9, r4
 8001e3c:	eb18 080a 	adds.w	r8, r8, sl
 8001e40:	eb49 090b 	adc.w	r9, r9, fp
 8001e44:	f04f 0100 	mov.w	r1, #0
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001e50:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001e54:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001e58:	4688      	mov	r8, r1
 8001e5a:	4691      	mov	r9, r2
 8001e5c:	eb1a 0508 	adds.w	r5, sl, r8
 8001e60:	eb4b 0609 	adc.w	r6, fp, r9
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	f04f 0400 	mov.w	r4, #0
 8001e76:	0094      	lsls	r4, r2, #2
 8001e78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001e7c:	008b      	lsls	r3, r1, #2
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4623      	mov	r3, r4
 8001e82:	4628      	mov	r0, r5
 8001e84:	4631      	mov	r1, r6
 8001e86:	f7fe f9b1 	bl	80001ec <__aeabi_uldivmod>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	460c      	mov	r4, r1
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4bb8      	ldr	r3, [pc, #736]	; (8002174 <UART_SetConfig+0x6f4>)
 8001e92:	fba3 2302 	umull	r2, r3, r3, r2
 8001e96:	095b      	lsrs	r3, r3, #5
 8001e98:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	469b      	mov	fp, r3
 8001ea0:	f04f 0c00 	mov.w	ip, #0
 8001ea4:	46d9      	mov	r9, fp
 8001ea6:	46e2      	mov	sl, ip
 8001ea8:	eb19 0309 	adds.w	r3, r9, r9
 8001eac:	eb4a 040a 	adc.w	r4, sl, sl
 8001eb0:	4699      	mov	r9, r3
 8001eb2:	46a2      	mov	sl, r4
 8001eb4:	eb19 090b 	adds.w	r9, r9, fp
 8001eb8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001ebc:	f04f 0100 	mov.w	r1, #0
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ec8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001ecc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001ed0:	4689      	mov	r9, r1
 8001ed2:	4692      	mov	sl, r2
 8001ed4:	eb1b 0509 	adds.w	r5, fp, r9
 8001ed8:	eb4c 060a 	adc.w	r6, ip, sl
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	f04f 0300 	mov.w	r3, #0
 8001eea:	f04f 0400 	mov.w	r4, #0
 8001eee:	0094      	lsls	r4, r2, #2
 8001ef0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001ef4:	008b      	lsls	r3, r1, #2
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4623      	mov	r3, r4
 8001efa:	4628      	mov	r0, r5
 8001efc:	4631      	mov	r1, r6
 8001efe:	f7fe f975 	bl	80001ec <__aeabi_uldivmod>
 8001f02:	4603      	mov	r3, r0
 8001f04:	460c      	mov	r4, r1
 8001f06:	461a      	mov	r2, r3
 8001f08:	4b9a      	ldr	r3, [pc, #616]	; (8002174 <UART_SetConfig+0x6f4>)
 8001f0a:	fba3 1302 	umull	r1, r3, r3, r2
 8001f0e:	095b      	lsrs	r3, r3, #5
 8001f10:	2164      	movs	r1, #100	; 0x64
 8001f12:	fb01 f303 	mul.w	r3, r1, r3
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	011b      	lsls	r3, r3, #4
 8001f1a:	3332      	adds	r3, #50	; 0x32
 8001f1c:	4a95      	ldr	r2, [pc, #596]	; (8002174 <UART_SetConfig+0x6f4>)
 8001f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f22:	095b      	lsrs	r3, r3, #5
 8001f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f28:	4498      	add	r8, r3
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	469b      	mov	fp, r3
 8001f2e:	f04f 0c00 	mov.w	ip, #0
 8001f32:	46d9      	mov	r9, fp
 8001f34:	46e2      	mov	sl, ip
 8001f36:	eb19 0309 	adds.w	r3, r9, r9
 8001f3a:	eb4a 040a 	adc.w	r4, sl, sl
 8001f3e:	4699      	mov	r9, r3
 8001f40:	46a2      	mov	sl, r4
 8001f42:	eb19 090b 	adds.w	r9, r9, fp
 8001f46:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001f4a:	f04f 0100 	mov.w	r1, #0
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f5e:	4689      	mov	r9, r1
 8001f60:	4692      	mov	sl, r2
 8001f62:	eb1b 0509 	adds.w	r5, fp, r9
 8001f66:	eb4c 060a 	adc.w	r6, ip, sl
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	f04f 0300 	mov.w	r3, #0
 8001f78:	f04f 0400 	mov.w	r4, #0
 8001f7c:	0094      	lsls	r4, r2, #2
 8001f7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001f82:	008b      	lsls	r3, r1, #2
 8001f84:	461a      	mov	r2, r3
 8001f86:	4623      	mov	r3, r4
 8001f88:	4628      	mov	r0, r5
 8001f8a:	4631      	mov	r1, r6
 8001f8c:	f7fe f92e 	bl	80001ec <__aeabi_uldivmod>
 8001f90:	4603      	mov	r3, r0
 8001f92:	460c      	mov	r4, r1
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b77      	ldr	r3, [pc, #476]	; (8002174 <UART_SetConfig+0x6f4>)
 8001f98:	fba3 1302 	umull	r1, r3, r3, r2
 8001f9c:	095b      	lsrs	r3, r3, #5
 8001f9e:	2164      	movs	r1, #100	; 0x64
 8001fa0:	fb01 f303 	mul.w	r3, r1, r3
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	3332      	adds	r3, #50	; 0x32
 8001faa:	4a72      	ldr	r2, [pc, #456]	; (8002174 <UART_SetConfig+0x6f4>)
 8001fac:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb0:	095b      	lsrs	r3, r3, #5
 8001fb2:	f003 020f 	and.w	r2, r3, #15
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4442      	add	r2, r8
 8001fbc:	609a      	str	r2, [r3, #8]
 8001fbe:	e0d0      	b.n	8002162 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001fc0:	f7ff fc06 	bl	80017d0 <HAL_RCC_GetPCLK1Freq>
 8001fc4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	469a      	mov	sl, r3
 8001fca:	f04f 0b00 	mov.w	fp, #0
 8001fce:	46d0      	mov	r8, sl
 8001fd0:	46d9      	mov	r9, fp
 8001fd2:	eb18 0308 	adds.w	r3, r8, r8
 8001fd6:	eb49 0409 	adc.w	r4, r9, r9
 8001fda:	4698      	mov	r8, r3
 8001fdc:	46a1      	mov	r9, r4
 8001fde:	eb18 080a 	adds.w	r8, r8, sl
 8001fe2:	eb49 090b 	adc.w	r9, r9, fp
 8001fe6:	f04f 0100 	mov.w	r1, #0
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001ff2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001ff6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001ffa:	4688      	mov	r8, r1
 8001ffc:	4691      	mov	r9, r2
 8001ffe:	eb1a 0508 	adds.w	r5, sl, r8
 8002002:	eb4b 0609 	adc.w	r6, fp, r9
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	4619      	mov	r1, r3
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	f04f 0400 	mov.w	r4, #0
 8002018:	0094      	lsls	r4, r2, #2
 800201a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800201e:	008b      	lsls	r3, r1, #2
 8002020:	461a      	mov	r2, r3
 8002022:	4623      	mov	r3, r4
 8002024:	4628      	mov	r0, r5
 8002026:	4631      	mov	r1, r6
 8002028:	f7fe f8e0 	bl	80001ec <__aeabi_uldivmod>
 800202c:	4603      	mov	r3, r0
 800202e:	460c      	mov	r4, r1
 8002030:	461a      	mov	r2, r3
 8002032:	4b50      	ldr	r3, [pc, #320]	; (8002174 <UART_SetConfig+0x6f4>)
 8002034:	fba3 2302 	umull	r2, r3, r3, r2
 8002038:	095b      	lsrs	r3, r3, #5
 800203a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	469b      	mov	fp, r3
 8002042:	f04f 0c00 	mov.w	ip, #0
 8002046:	46d9      	mov	r9, fp
 8002048:	46e2      	mov	sl, ip
 800204a:	eb19 0309 	adds.w	r3, r9, r9
 800204e:	eb4a 040a 	adc.w	r4, sl, sl
 8002052:	4699      	mov	r9, r3
 8002054:	46a2      	mov	sl, r4
 8002056:	eb19 090b 	adds.w	r9, r9, fp
 800205a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800205e:	f04f 0100 	mov.w	r1, #0
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800206a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800206e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002072:	4689      	mov	r9, r1
 8002074:	4692      	mov	sl, r2
 8002076:	eb1b 0509 	adds.w	r5, fp, r9
 800207a:	eb4c 060a 	adc.w	r6, ip, sl
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4619      	mov	r1, r3
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	f04f 0400 	mov.w	r4, #0
 8002090:	0094      	lsls	r4, r2, #2
 8002092:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002096:	008b      	lsls	r3, r1, #2
 8002098:	461a      	mov	r2, r3
 800209a:	4623      	mov	r3, r4
 800209c:	4628      	mov	r0, r5
 800209e:	4631      	mov	r1, r6
 80020a0:	f7fe f8a4 	bl	80001ec <__aeabi_uldivmod>
 80020a4:	4603      	mov	r3, r0
 80020a6:	460c      	mov	r4, r1
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b32      	ldr	r3, [pc, #200]	; (8002174 <UART_SetConfig+0x6f4>)
 80020ac:	fba3 1302 	umull	r1, r3, r3, r2
 80020b0:	095b      	lsrs	r3, r3, #5
 80020b2:	2164      	movs	r1, #100	; 0x64
 80020b4:	fb01 f303 	mul.w	r3, r1, r3
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	3332      	adds	r3, #50	; 0x32
 80020be:	4a2d      	ldr	r2, [pc, #180]	; (8002174 <UART_SetConfig+0x6f4>)
 80020c0:	fba2 2303 	umull	r2, r3, r2, r3
 80020c4:	095b      	lsrs	r3, r3, #5
 80020c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020ca:	4498      	add	r8, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	469b      	mov	fp, r3
 80020d0:	f04f 0c00 	mov.w	ip, #0
 80020d4:	46d9      	mov	r9, fp
 80020d6:	46e2      	mov	sl, ip
 80020d8:	eb19 0309 	adds.w	r3, r9, r9
 80020dc:	eb4a 040a 	adc.w	r4, sl, sl
 80020e0:	4699      	mov	r9, r3
 80020e2:	46a2      	mov	sl, r4
 80020e4:	eb19 090b 	adds.w	r9, r9, fp
 80020e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80020ec:	f04f 0100 	mov.w	r1, #0
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002100:	4689      	mov	r9, r1
 8002102:	4692      	mov	sl, r2
 8002104:	eb1b 0509 	adds.w	r5, fp, r9
 8002108:	eb4c 060a 	adc.w	r6, ip, sl
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4619      	mov	r1, r3
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	f04f 0400 	mov.w	r4, #0
 800211e:	0094      	lsls	r4, r2, #2
 8002120:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002124:	008b      	lsls	r3, r1, #2
 8002126:	461a      	mov	r2, r3
 8002128:	4623      	mov	r3, r4
 800212a:	4628      	mov	r0, r5
 800212c:	4631      	mov	r1, r6
 800212e:	f7fe f85d 	bl	80001ec <__aeabi_uldivmod>
 8002132:	4603      	mov	r3, r0
 8002134:	460c      	mov	r4, r1
 8002136:	461a      	mov	r2, r3
 8002138:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <UART_SetConfig+0x6f4>)
 800213a:	fba3 1302 	umull	r1, r3, r3, r2
 800213e:	095b      	lsrs	r3, r3, #5
 8002140:	2164      	movs	r1, #100	; 0x64
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	3332      	adds	r3, #50	; 0x32
 800214c:	4a09      	ldr	r2, [pc, #36]	; (8002174 <UART_SetConfig+0x6f4>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	f003 020f 	and.w	r2, r3, #15
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4442      	add	r2, r8
 800215e:	609a      	str	r2, [r3, #8]
}
 8002160:	e7ff      	b.n	8002162 <UART_SetConfig+0x6e2>
 8002162:	bf00      	nop
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800216c:	40011000 	.word	0x40011000
 8002170:	40011400 	.word	0x40011400
 8002174:	51eb851f 	.word	0x51eb851f

08002178 <__errno>:
 8002178:	4b01      	ldr	r3, [pc, #4]	; (8002180 <__errno+0x8>)
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	2000000c 	.word	0x2000000c

08002184 <__libc_init_array>:
 8002184:	b570      	push	{r4, r5, r6, lr}
 8002186:	4e0d      	ldr	r6, [pc, #52]	; (80021bc <__libc_init_array+0x38>)
 8002188:	4c0d      	ldr	r4, [pc, #52]	; (80021c0 <__libc_init_array+0x3c>)
 800218a:	1ba4      	subs	r4, r4, r6
 800218c:	10a4      	asrs	r4, r4, #2
 800218e:	2500      	movs	r5, #0
 8002190:	42a5      	cmp	r5, r4
 8002192:	d109      	bne.n	80021a8 <__libc_init_array+0x24>
 8002194:	4e0b      	ldr	r6, [pc, #44]	; (80021c4 <__libc_init_array+0x40>)
 8002196:	4c0c      	ldr	r4, [pc, #48]	; (80021c8 <__libc_init_array+0x44>)
 8002198:	f000 fc88 	bl	8002aac <_init>
 800219c:	1ba4      	subs	r4, r4, r6
 800219e:	10a4      	asrs	r4, r4, #2
 80021a0:	2500      	movs	r5, #0
 80021a2:	42a5      	cmp	r5, r4
 80021a4:	d105      	bne.n	80021b2 <__libc_init_array+0x2e>
 80021a6:	bd70      	pop	{r4, r5, r6, pc}
 80021a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021ac:	4798      	blx	r3
 80021ae:	3501      	adds	r5, #1
 80021b0:	e7ee      	b.n	8002190 <__libc_init_array+0xc>
 80021b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021b6:	4798      	blx	r3
 80021b8:	3501      	adds	r5, #1
 80021ba:	e7f2      	b.n	80021a2 <__libc_init_array+0x1e>
 80021bc:	08002b50 	.word	0x08002b50
 80021c0:	08002b50 	.word	0x08002b50
 80021c4:	08002b50 	.word	0x08002b50
 80021c8:	08002b54 	.word	0x08002b54

080021cc <memset>:
 80021cc:	4402      	add	r2, r0
 80021ce:	4603      	mov	r3, r0
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d100      	bne.n	80021d6 <memset+0xa>
 80021d4:	4770      	bx	lr
 80021d6:	f803 1b01 	strb.w	r1, [r3], #1
 80021da:	e7f9      	b.n	80021d0 <memset+0x4>

080021dc <_puts_r>:
 80021dc:	b570      	push	{r4, r5, r6, lr}
 80021de:	460e      	mov	r6, r1
 80021e0:	4605      	mov	r5, r0
 80021e2:	b118      	cbz	r0, 80021ec <_puts_r+0x10>
 80021e4:	6983      	ldr	r3, [r0, #24]
 80021e6:	b90b      	cbnz	r3, 80021ec <_puts_r+0x10>
 80021e8:	f000 fa0c 	bl	8002604 <__sinit>
 80021ec:	69ab      	ldr	r3, [r5, #24]
 80021ee:	68ac      	ldr	r4, [r5, #8]
 80021f0:	b913      	cbnz	r3, 80021f8 <_puts_r+0x1c>
 80021f2:	4628      	mov	r0, r5
 80021f4:	f000 fa06 	bl	8002604 <__sinit>
 80021f8:	4b23      	ldr	r3, [pc, #140]	; (8002288 <_puts_r+0xac>)
 80021fa:	429c      	cmp	r4, r3
 80021fc:	d117      	bne.n	800222e <_puts_r+0x52>
 80021fe:	686c      	ldr	r4, [r5, #4]
 8002200:	89a3      	ldrh	r3, [r4, #12]
 8002202:	071b      	lsls	r3, r3, #28
 8002204:	d51d      	bpl.n	8002242 <_puts_r+0x66>
 8002206:	6923      	ldr	r3, [r4, #16]
 8002208:	b1db      	cbz	r3, 8002242 <_puts_r+0x66>
 800220a:	3e01      	subs	r6, #1
 800220c:	68a3      	ldr	r3, [r4, #8]
 800220e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002212:	3b01      	subs	r3, #1
 8002214:	60a3      	str	r3, [r4, #8]
 8002216:	b9e9      	cbnz	r1, 8002254 <_puts_r+0x78>
 8002218:	2b00      	cmp	r3, #0
 800221a:	da2e      	bge.n	800227a <_puts_r+0x9e>
 800221c:	4622      	mov	r2, r4
 800221e:	210a      	movs	r1, #10
 8002220:	4628      	mov	r0, r5
 8002222:	f000 f83f 	bl	80022a4 <__swbuf_r>
 8002226:	3001      	adds	r0, #1
 8002228:	d011      	beq.n	800224e <_puts_r+0x72>
 800222a:	200a      	movs	r0, #10
 800222c:	e011      	b.n	8002252 <_puts_r+0x76>
 800222e:	4b17      	ldr	r3, [pc, #92]	; (800228c <_puts_r+0xb0>)
 8002230:	429c      	cmp	r4, r3
 8002232:	d101      	bne.n	8002238 <_puts_r+0x5c>
 8002234:	68ac      	ldr	r4, [r5, #8]
 8002236:	e7e3      	b.n	8002200 <_puts_r+0x24>
 8002238:	4b15      	ldr	r3, [pc, #84]	; (8002290 <_puts_r+0xb4>)
 800223a:	429c      	cmp	r4, r3
 800223c:	bf08      	it	eq
 800223e:	68ec      	ldreq	r4, [r5, #12]
 8002240:	e7de      	b.n	8002200 <_puts_r+0x24>
 8002242:	4621      	mov	r1, r4
 8002244:	4628      	mov	r0, r5
 8002246:	f000 f87f 	bl	8002348 <__swsetup_r>
 800224a:	2800      	cmp	r0, #0
 800224c:	d0dd      	beq.n	800220a <_puts_r+0x2e>
 800224e:	f04f 30ff 	mov.w	r0, #4294967295
 8002252:	bd70      	pop	{r4, r5, r6, pc}
 8002254:	2b00      	cmp	r3, #0
 8002256:	da04      	bge.n	8002262 <_puts_r+0x86>
 8002258:	69a2      	ldr	r2, [r4, #24]
 800225a:	429a      	cmp	r2, r3
 800225c:	dc06      	bgt.n	800226c <_puts_r+0x90>
 800225e:	290a      	cmp	r1, #10
 8002260:	d004      	beq.n	800226c <_puts_r+0x90>
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	6022      	str	r2, [r4, #0]
 8002268:	7019      	strb	r1, [r3, #0]
 800226a:	e7cf      	b.n	800220c <_puts_r+0x30>
 800226c:	4622      	mov	r2, r4
 800226e:	4628      	mov	r0, r5
 8002270:	f000 f818 	bl	80022a4 <__swbuf_r>
 8002274:	3001      	adds	r0, #1
 8002276:	d1c9      	bne.n	800220c <_puts_r+0x30>
 8002278:	e7e9      	b.n	800224e <_puts_r+0x72>
 800227a:	6823      	ldr	r3, [r4, #0]
 800227c:	200a      	movs	r0, #10
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	6022      	str	r2, [r4, #0]
 8002282:	7018      	strb	r0, [r3, #0]
 8002284:	e7e5      	b.n	8002252 <_puts_r+0x76>
 8002286:	bf00      	nop
 8002288:	08002b08 	.word	0x08002b08
 800228c:	08002b28 	.word	0x08002b28
 8002290:	08002ae8 	.word	0x08002ae8

08002294 <puts>:
 8002294:	4b02      	ldr	r3, [pc, #8]	; (80022a0 <puts+0xc>)
 8002296:	4601      	mov	r1, r0
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	f7ff bf9f 	b.w	80021dc <_puts_r>
 800229e:	bf00      	nop
 80022a0:	2000000c 	.word	0x2000000c

080022a4 <__swbuf_r>:
 80022a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a6:	460e      	mov	r6, r1
 80022a8:	4614      	mov	r4, r2
 80022aa:	4605      	mov	r5, r0
 80022ac:	b118      	cbz	r0, 80022b6 <__swbuf_r+0x12>
 80022ae:	6983      	ldr	r3, [r0, #24]
 80022b0:	b90b      	cbnz	r3, 80022b6 <__swbuf_r+0x12>
 80022b2:	f000 f9a7 	bl	8002604 <__sinit>
 80022b6:	4b21      	ldr	r3, [pc, #132]	; (800233c <__swbuf_r+0x98>)
 80022b8:	429c      	cmp	r4, r3
 80022ba:	d12a      	bne.n	8002312 <__swbuf_r+0x6e>
 80022bc:	686c      	ldr	r4, [r5, #4]
 80022be:	69a3      	ldr	r3, [r4, #24]
 80022c0:	60a3      	str	r3, [r4, #8]
 80022c2:	89a3      	ldrh	r3, [r4, #12]
 80022c4:	071a      	lsls	r2, r3, #28
 80022c6:	d52e      	bpl.n	8002326 <__swbuf_r+0x82>
 80022c8:	6923      	ldr	r3, [r4, #16]
 80022ca:	b363      	cbz	r3, 8002326 <__swbuf_r+0x82>
 80022cc:	6923      	ldr	r3, [r4, #16]
 80022ce:	6820      	ldr	r0, [r4, #0]
 80022d0:	1ac0      	subs	r0, r0, r3
 80022d2:	6963      	ldr	r3, [r4, #20]
 80022d4:	b2f6      	uxtb	r6, r6
 80022d6:	4283      	cmp	r3, r0
 80022d8:	4637      	mov	r7, r6
 80022da:	dc04      	bgt.n	80022e6 <__swbuf_r+0x42>
 80022dc:	4621      	mov	r1, r4
 80022de:	4628      	mov	r0, r5
 80022e0:	f000 f926 	bl	8002530 <_fflush_r>
 80022e4:	bb28      	cbnz	r0, 8002332 <__swbuf_r+0x8e>
 80022e6:	68a3      	ldr	r3, [r4, #8]
 80022e8:	3b01      	subs	r3, #1
 80022ea:	60a3      	str	r3, [r4, #8]
 80022ec:	6823      	ldr	r3, [r4, #0]
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	6022      	str	r2, [r4, #0]
 80022f2:	701e      	strb	r6, [r3, #0]
 80022f4:	6963      	ldr	r3, [r4, #20]
 80022f6:	3001      	adds	r0, #1
 80022f8:	4283      	cmp	r3, r0
 80022fa:	d004      	beq.n	8002306 <__swbuf_r+0x62>
 80022fc:	89a3      	ldrh	r3, [r4, #12]
 80022fe:	07db      	lsls	r3, r3, #31
 8002300:	d519      	bpl.n	8002336 <__swbuf_r+0x92>
 8002302:	2e0a      	cmp	r6, #10
 8002304:	d117      	bne.n	8002336 <__swbuf_r+0x92>
 8002306:	4621      	mov	r1, r4
 8002308:	4628      	mov	r0, r5
 800230a:	f000 f911 	bl	8002530 <_fflush_r>
 800230e:	b190      	cbz	r0, 8002336 <__swbuf_r+0x92>
 8002310:	e00f      	b.n	8002332 <__swbuf_r+0x8e>
 8002312:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <__swbuf_r+0x9c>)
 8002314:	429c      	cmp	r4, r3
 8002316:	d101      	bne.n	800231c <__swbuf_r+0x78>
 8002318:	68ac      	ldr	r4, [r5, #8]
 800231a:	e7d0      	b.n	80022be <__swbuf_r+0x1a>
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <__swbuf_r+0xa0>)
 800231e:	429c      	cmp	r4, r3
 8002320:	bf08      	it	eq
 8002322:	68ec      	ldreq	r4, [r5, #12]
 8002324:	e7cb      	b.n	80022be <__swbuf_r+0x1a>
 8002326:	4621      	mov	r1, r4
 8002328:	4628      	mov	r0, r5
 800232a:	f000 f80d 	bl	8002348 <__swsetup_r>
 800232e:	2800      	cmp	r0, #0
 8002330:	d0cc      	beq.n	80022cc <__swbuf_r+0x28>
 8002332:	f04f 37ff 	mov.w	r7, #4294967295
 8002336:	4638      	mov	r0, r7
 8002338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800233a:	bf00      	nop
 800233c:	08002b08 	.word	0x08002b08
 8002340:	08002b28 	.word	0x08002b28
 8002344:	08002ae8 	.word	0x08002ae8

08002348 <__swsetup_r>:
 8002348:	4b32      	ldr	r3, [pc, #200]	; (8002414 <__swsetup_r+0xcc>)
 800234a:	b570      	push	{r4, r5, r6, lr}
 800234c:	681d      	ldr	r5, [r3, #0]
 800234e:	4606      	mov	r6, r0
 8002350:	460c      	mov	r4, r1
 8002352:	b125      	cbz	r5, 800235e <__swsetup_r+0x16>
 8002354:	69ab      	ldr	r3, [r5, #24]
 8002356:	b913      	cbnz	r3, 800235e <__swsetup_r+0x16>
 8002358:	4628      	mov	r0, r5
 800235a:	f000 f953 	bl	8002604 <__sinit>
 800235e:	4b2e      	ldr	r3, [pc, #184]	; (8002418 <__swsetup_r+0xd0>)
 8002360:	429c      	cmp	r4, r3
 8002362:	d10f      	bne.n	8002384 <__swsetup_r+0x3c>
 8002364:	686c      	ldr	r4, [r5, #4]
 8002366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800236a:	b29a      	uxth	r2, r3
 800236c:	0715      	lsls	r5, r2, #28
 800236e:	d42c      	bmi.n	80023ca <__swsetup_r+0x82>
 8002370:	06d0      	lsls	r0, r2, #27
 8002372:	d411      	bmi.n	8002398 <__swsetup_r+0x50>
 8002374:	2209      	movs	r2, #9
 8002376:	6032      	str	r2, [r6, #0]
 8002378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800237c:	81a3      	strh	r3, [r4, #12]
 800237e:	f04f 30ff 	mov.w	r0, #4294967295
 8002382:	e03e      	b.n	8002402 <__swsetup_r+0xba>
 8002384:	4b25      	ldr	r3, [pc, #148]	; (800241c <__swsetup_r+0xd4>)
 8002386:	429c      	cmp	r4, r3
 8002388:	d101      	bne.n	800238e <__swsetup_r+0x46>
 800238a:	68ac      	ldr	r4, [r5, #8]
 800238c:	e7eb      	b.n	8002366 <__swsetup_r+0x1e>
 800238e:	4b24      	ldr	r3, [pc, #144]	; (8002420 <__swsetup_r+0xd8>)
 8002390:	429c      	cmp	r4, r3
 8002392:	bf08      	it	eq
 8002394:	68ec      	ldreq	r4, [r5, #12]
 8002396:	e7e6      	b.n	8002366 <__swsetup_r+0x1e>
 8002398:	0751      	lsls	r1, r2, #29
 800239a:	d512      	bpl.n	80023c2 <__swsetup_r+0x7a>
 800239c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800239e:	b141      	cbz	r1, 80023b2 <__swsetup_r+0x6a>
 80023a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80023a4:	4299      	cmp	r1, r3
 80023a6:	d002      	beq.n	80023ae <__swsetup_r+0x66>
 80023a8:	4630      	mov	r0, r6
 80023aa:	f000 fa19 	bl	80027e0 <_free_r>
 80023ae:	2300      	movs	r3, #0
 80023b0:	6363      	str	r3, [r4, #52]	; 0x34
 80023b2:	89a3      	ldrh	r3, [r4, #12]
 80023b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80023b8:	81a3      	strh	r3, [r4, #12]
 80023ba:	2300      	movs	r3, #0
 80023bc:	6063      	str	r3, [r4, #4]
 80023be:	6923      	ldr	r3, [r4, #16]
 80023c0:	6023      	str	r3, [r4, #0]
 80023c2:	89a3      	ldrh	r3, [r4, #12]
 80023c4:	f043 0308 	orr.w	r3, r3, #8
 80023c8:	81a3      	strh	r3, [r4, #12]
 80023ca:	6923      	ldr	r3, [r4, #16]
 80023cc:	b94b      	cbnz	r3, 80023e2 <__swsetup_r+0x9a>
 80023ce:	89a3      	ldrh	r3, [r4, #12]
 80023d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80023d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d8:	d003      	beq.n	80023e2 <__swsetup_r+0x9a>
 80023da:	4621      	mov	r1, r4
 80023dc:	4630      	mov	r0, r6
 80023de:	f000 f9bf 	bl	8002760 <__smakebuf_r>
 80023e2:	89a2      	ldrh	r2, [r4, #12]
 80023e4:	f012 0301 	ands.w	r3, r2, #1
 80023e8:	d00c      	beq.n	8002404 <__swsetup_r+0xbc>
 80023ea:	2300      	movs	r3, #0
 80023ec:	60a3      	str	r3, [r4, #8]
 80023ee:	6963      	ldr	r3, [r4, #20]
 80023f0:	425b      	negs	r3, r3
 80023f2:	61a3      	str	r3, [r4, #24]
 80023f4:	6923      	ldr	r3, [r4, #16]
 80023f6:	b953      	cbnz	r3, 800240e <__swsetup_r+0xc6>
 80023f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023fc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002400:	d1ba      	bne.n	8002378 <__swsetup_r+0x30>
 8002402:	bd70      	pop	{r4, r5, r6, pc}
 8002404:	0792      	lsls	r2, r2, #30
 8002406:	bf58      	it	pl
 8002408:	6963      	ldrpl	r3, [r4, #20]
 800240a:	60a3      	str	r3, [r4, #8]
 800240c:	e7f2      	b.n	80023f4 <__swsetup_r+0xac>
 800240e:	2000      	movs	r0, #0
 8002410:	e7f7      	b.n	8002402 <__swsetup_r+0xba>
 8002412:	bf00      	nop
 8002414:	2000000c 	.word	0x2000000c
 8002418:	08002b08 	.word	0x08002b08
 800241c:	08002b28 	.word	0x08002b28
 8002420:	08002ae8 	.word	0x08002ae8

08002424 <__sflush_r>:
 8002424:	898a      	ldrh	r2, [r1, #12]
 8002426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800242a:	4605      	mov	r5, r0
 800242c:	0710      	lsls	r0, r2, #28
 800242e:	460c      	mov	r4, r1
 8002430:	d458      	bmi.n	80024e4 <__sflush_r+0xc0>
 8002432:	684b      	ldr	r3, [r1, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	dc05      	bgt.n	8002444 <__sflush_r+0x20>
 8002438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800243a:	2b00      	cmp	r3, #0
 800243c:	dc02      	bgt.n	8002444 <__sflush_r+0x20>
 800243e:	2000      	movs	r0, #0
 8002440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002446:	2e00      	cmp	r6, #0
 8002448:	d0f9      	beq.n	800243e <__sflush_r+0x1a>
 800244a:	2300      	movs	r3, #0
 800244c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002450:	682f      	ldr	r7, [r5, #0]
 8002452:	6a21      	ldr	r1, [r4, #32]
 8002454:	602b      	str	r3, [r5, #0]
 8002456:	d032      	beq.n	80024be <__sflush_r+0x9a>
 8002458:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800245a:	89a3      	ldrh	r3, [r4, #12]
 800245c:	075a      	lsls	r2, r3, #29
 800245e:	d505      	bpl.n	800246c <__sflush_r+0x48>
 8002460:	6863      	ldr	r3, [r4, #4]
 8002462:	1ac0      	subs	r0, r0, r3
 8002464:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002466:	b10b      	cbz	r3, 800246c <__sflush_r+0x48>
 8002468:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800246a:	1ac0      	subs	r0, r0, r3
 800246c:	2300      	movs	r3, #0
 800246e:	4602      	mov	r2, r0
 8002470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002472:	6a21      	ldr	r1, [r4, #32]
 8002474:	4628      	mov	r0, r5
 8002476:	47b0      	blx	r6
 8002478:	1c43      	adds	r3, r0, #1
 800247a:	89a3      	ldrh	r3, [r4, #12]
 800247c:	d106      	bne.n	800248c <__sflush_r+0x68>
 800247e:	6829      	ldr	r1, [r5, #0]
 8002480:	291d      	cmp	r1, #29
 8002482:	d848      	bhi.n	8002516 <__sflush_r+0xf2>
 8002484:	4a29      	ldr	r2, [pc, #164]	; (800252c <__sflush_r+0x108>)
 8002486:	40ca      	lsrs	r2, r1
 8002488:	07d6      	lsls	r6, r2, #31
 800248a:	d544      	bpl.n	8002516 <__sflush_r+0xf2>
 800248c:	2200      	movs	r2, #0
 800248e:	6062      	str	r2, [r4, #4]
 8002490:	04d9      	lsls	r1, r3, #19
 8002492:	6922      	ldr	r2, [r4, #16]
 8002494:	6022      	str	r2, [r4, #0]
 8002496:	d504      	bpl.n	80024a2 <__sflush_r+0x7e>
 8002498:	1c42      	adds	r2, r0, #1
 800249a:	d101      	bne.n	80024a0 <__sflush_r+0x7c>
 800249c:	682b      	ldr	r3, [r5, #0]
 800249e:	b903      	cbnz	r3, 80024a2 <__sflush_r+0x7e>
 80024a0:	6560      	str	r0, [r4, #84]	; 0x54
 80024a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024a4:	602f      	str	r7, [r5, #0]
 80024a6:	2900      	cmp	r1, #0
 80024a8:	d0c9      	beq.n	800243e <__sflush_r+0x1a>
 80024aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80024ae:	4299      	cmp	r1, r3
 80024b0:	d002      	beq.n	80024b8 <__sflush_r+0x94>
 80024b2:	4628      	mov	r0, r5
 80024b4:	f000 f994 	bl	80027e0 <_free_r>
 80024b8:	2000      	movs	r0, #0
 80024ba:	6360      	str	r0, [r4, #52]	; 0x34
 80024bc:	e7c0      	b.n	8002440 <__sflush_r+0x1c>
 80024be:	2301      	movs	r3, #1
 80024c0:	4628      	mov	r0, r5
 80024c2:	47b0      	blx	r6
 80024c4:	1c41      	adds	r1, r0, #1
 80024c6:	d1c8      	bne.n	800245a <__sflush_r+0x36>
 80024c8:	682b      	ldr	r3, [r5, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0c5      	beq.n	800245a <__sflush_r+0x36>
 80024ce:	2b1d      	cmp	r3, #29
 80024d0:	d001      	beq.n	80024d6 <__sflush_r+0xb2>
 80024d2:	2b16      	cmp	r3, #22
 80024d4:	d101      	bne.n	80024da <__sflush_r+0xb6>
 80024d6:	602f      	str	r7, [r5, #0]
 80024d8:	e7b1      	b.n	800243e <__sflush_r+0x1a>
 80024da:	89a3      	ldrh	r3, [r4, #12]
 80024dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e0:	81a3      	strh	r3, [r4, #12]
 80024e2:	e7ad      	b.n	8002440 <__sflush_r+0x1c>
 80024e4:	690f      	ldr	r7, [r1, #16]
 80024e6:	2f00      	cmp	r7, #0
 80024e8:	d0a9      	beq.n	800243e <__sflush_r+0x1a>
 80024ea:	0793      	lsls	r3, r2, #30
 80024ec:	680e      	ldr	r6, [r1, #0]
 80024ee:	bf08      	it	eq
 80024f0:	694b      	ldreq	r3, [r1, #20]
 80024f2:	600f      	str	r7, [r1, #0]
 80024f4:	bf18      	it	ne
 80024f6:	2300      	movne	r3, #0
 80024f8:	eba6 0807 	sub.w	r8, r6, r7
 80024fc:	608b      	str	r3, [r1, #8]
 80024fe:	f1b8 0f00 	cmp.w	r8, #0
 8002502:	dd9c      	ble.n	800243e <__sflush_r+0x1a>
 8002504:	4643      	mov	r3, r8
 8002506:	463a      	mov	r2, r7
 8002508:	6a21      	ldr	r1, [r4, #32]
 800250a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800250c:	4628      	mov	r0, r5
 800250e:	47b0      	blx	r6
 8002510:	2800      	cmp	r0, #0
 8002512:	dc06      	bgt.n	8002522 <__sflush_r+0xfe>
 8002514:	89a3      	ldrh	r3, [r4, #12]
 8002516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800251a:	81a3      	strh	r3, [r4, #12]
 800251c:	f04f 30ff 	mov.w	r0, #4294967295
 8002520:	e78e      	b.n	8002440 <__sflush_r+0x1c>
 8002522:	4407      	add	r7, r0
 8002524:	eba8 0800 	sub.w	r8, r8, r0
 8002528:	e7e9      	b.n	80024fe <__sflush_r+0xda>
 800252a:	bf00      	nop
 800252c:	20400001 	.word	0x20400001

08002530 <_fflush_r>:
 8002530:	b538      	push	{r3, r4, r5, lr}
 8002532:	690b      	ldr	r3, [r1, #16]
 8002534:	4605      	mov	r5, r0
 8002536:	460c      	mov	r4, r1
 8002538:	b1db      	cbz	r3, 8002572 <_fflush_r+0x42>
 800253a:	b118      	cbz	r0, 8002544 <_fflush_r+0x14>
 800253c:	6983      	ldr	r3, [r0, #24]
 800253e:	b90b      	cbnz	r3, 8002544 <_fflush_r+0x14>
 8002540:	f000 f860 	bl	8002604 <__sinit>
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <_fflush_r+0x48>)
 8002546:	429c      	cmp	r4, r3
 8002548:	d109      	bne.n	800255e <_fflush_r+0x2e>
 800254a:	686c      	ldr	r4, [r5, #4]
 800254c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002550:	b17b      	cbz	r3, 8002572 <_fflush_r+0x42>
 8002552:	4621      	mov	r1, r4
 8002554:	4628      	mov	r0, r5
 8002556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800255a:	f7ff bf63 	b.w	8002424 <__sflush_r>
 800255e:	4b07      	ldr	r3, [pc, #28]	; (800257c <_fflush_r+0x4c>)
 8002560:	429c      	cmp	r4, r3
 8002562:	d101      	bne.n	8002568 <_fflush_r+0x38>
 8002564:	68ac      	ldr	r4, [r5, #8]
 8002566:	e7f1      	b.n	800254c <_fflush_r+0x1c>
 8002568:	4b05      	ldr	r3, [pc, #20]	; (8002580 <_fflush_r+0x50>)
 800256a:	429c      	cmp	r4, r3
 800256c:	bf08      	it	eq
 800256e:	68ec      	ldreq	r4, [r5, #12]
 8002570:	e7ec      	b.n	800254c <_fflush_r+0x1c>
 8002572:	2000      	movs	r0, #0
 8002574:	bd38      	pop	{r3, r4, r5, pc}
 8002576:	bf00      	nop
 8002578:	08002b08 	.word	0x08002b08
 800257c:	08002b28 	.word	0x08002b28
 8002580:	08002ae8 	.word	0x08002ae8

08002584 <std>:
 8002584:	2300      	movs	r3, #0
 8002586:	b510      	push	{r4, lr}
 8002588:	4604      	mov	r4, r0
 800258a:	e9c0 3300 	strd	r3, r3, [r0]
 800258e:	6083      	str	r3, [r0, #8]
 8002590:	8181      	strh	r1, [r0, #12]
 8002592:	6643      	str	r3, [r0, #100]	; 0x64
 8002594:	81c2      	strh	r2, [r0, #14]
 8002596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800259a:	6183      	str	r3, [r0, #24]
 800259c:	4619      	mov	r1, r3
 800259e:	2208      	movs	r2, #8
 80025a0:	305c      	adds	r0, #92	; 0x5c
 80025a2:	f7ff fe13 	bl	80021cc <memset>
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <std+0x38>)
 80025a8:	6263      	str	r3, [r4, #36]	; 0x24
 80025aa:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <std+0x3c>)
 80025ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80025ae:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <std+0x40>)
 80025b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <std+0x44>)
 80025b4:	6224      	str	r4, [r4, #32]
 80025b6:	6323      	str	r3, [r4, #48]	; 0x30
 80025b8:	bd10      	pop	{r4, pc}
 80025ba:	bf00      	nop
 80025bc:	08002951 	.word	0x08002951
 80025c0:	08002973 	.word	0x08002973
 80025c4:	080029ab 	.word	0x080029ab
 80025c8:	080029cf 	.word	0x080029cf

080025cc <_cleanup_r>:
 80025cc:	4901      	ldr	r1, [pc, #4]	; (80025d4 <_cleanup_r+0x8>)
 80025ce:	f000 b885 	b.w	80026dc <_fwalk_reent>
 80025d2:	bf00      	nop
 80025d4:	08002531 	.word	0x08002531

080025d8 <__sfmoreglue>:
 80025d8:	b570      	push	{r4, r5, r6, lr}
 80025da:	1e4a      	subs	r2, r1, #1
 80025dc:	2568      	movs	r5, #104	; 0x68
 80025de:	4355      	muls	r5, r2
 80025e0:	460e      	mov	r6, r1
 80025e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80025e6:	f000 f949 	bl	800287c <_malloc_r>
 80025ea:	4604      	mov	r4, r0
 80025ec:	b140      	cbz	r0, 8002600 <__sfmoreglue+0x28>
 80025ee:	2100      	movs	r1, #0
 80025f0:	e9c0 1600 	strd	r1, r6, [r0]
 80025f4:	300c      	adds	r0, #12
 80025f6:	60a0      	str	r0, [r4, #8]
 80025f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80025fc:	f7ff fde6 	bl	80021cc <memset>
 8002600:	4620      	mov	r0, r4
 8002602:	bd70      	pop	{r4, r5, r6, pc}

08002604 <__sinit>:
 8002604:	6983      	ldr	r3, [r0, #24]
 8002606:	b510      	push	{r4, lr}
 8002608:	4604      	mov	r4, r0
 800260a:	bb33      	cbnz	r3, 800265a <__sinit+0x56>
 800260c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002610:	6503      	str	r3, [r0, #80]	; 0x50
 8002612:	4b12      	ldr	r3, [pc, #72]	; (800265c <__sinit+0x58>)
 8002614:	4a12      	ldr	r2, [pc, #72]	; (8002660 <__sinit+0x5c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6282      	str	r2, [r0, #40]	; 0x28
 800261a:	4298      	cmp	r0, r3
 800261c:	bf04      	itt	eq
 800261e:	2301      	moveq	r3, #1
 8002620:	6183      	streq	r3, [r0, #24]
 8002622:	f000 f81f 	bl	8002664 <__sfp>
 8002626:	6060      	str	r0, [r4, #4]
 8002628:	4620      	mov	r0, r4
 800262a:	f000 f81b 	bl	8002664 <__sfp>
 800262e:	60a0      	str	r0, [r4, #8]
 8002630:	4620      	mov	r0, r4
 8002632:	f000 f817 	bl	8002664 <__sfp>
 8002636:	2200      	movs	r2, #0
 8002638:	60e0      	str	r0, [r4, #12]
 800263a:	2104      	movs	r1, #4
 800263c:	6860      	ldr	r0, [r4, #4]
 800263e:	f7ff ffa1 	bl	8002584 <std>
 8002642:	2201      	movs	r2, #1
 8002644:	2109      	movs	r1, #9
 8002646:	68a0      	ldr	r0, [r4, #8]
 8002648:	f7ff ff9c 	bl	8002584 <std>
 800264c:	2202      	movs	r2, #2
 800264e:	2112      	movs	r1, #18
 8002650:	68e0      	ldr	r0, [r4, #12]
 8002652:	f7ff ff97 	bl	8002584 <std>
 8002656:	2301      	movs	r3, #1
 8002658:	61a3      	str	r3, [r4, #24]
 800265a:	bd10      	pop	{r4, pc}
 800265c:	08002ae4 	.word	0x08002ae4
 8002660:	080025cd 	.word	0x080025cd

08002664 <__sfp>:
 8002664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002666:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <__sfp+0x70>)
 8002668:	681e      	ldr	r6, [r3, #0]
 800266a:	69b3      	ldr	r3, [r6, #24]
 800266c:	4607      	mov	r7, r0
 800266e:	b913      	cbnz	r3, 8002676 <__sfp+0x12>
 8002670:	4630      	mov	r0, r6
 8002672:	f7ff ffc7 	bl	8002604 <__sinit>
 8002676:	3648      	adds	r6, #72	; 0x48
 8002678:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800267c:	3b01      	subs	r3, #1
 800267e:	d503      	bpl.n	8002688 <__sfp+0x24>
 8002680:	6833      	ldr	r3, [r6, #0]
 8002682:	b133      	cbz	r3, 8002692 <__sfp+0x2e>
 8002684:	6836      	ldr	r6, [r6, #0]
 8002686:	e7f7      	b.n	8002678 <__sfp+0x14>
 8002688:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800268c:	b16d      	cbz	r5, 80026aa <__sfp+0x46>
 800268e:	3468      	adds	r4, #104	; 0x68
 8002690:	e7f4      	b.n	800267c <__sfp+0x18>
 8002692:	2104      	movs	r1, #4
 8002694:	4638      	mov	r0, r7
 8002696:	f7ff ff9f 	bl	80025d8 <__sfmoreglue>
 800269a:	6030      	str	r0, [r6, #0]
 800269c:	2800      	cmp	r0, #0
 800269e:	d1f1      	bne.n	8002684 <__sfp+0x20>
 80026a0:	230c      	movs	r3, #12
 80026a2:	603b      	str	r3, [r7, #0]
 80026a4:	4604      	mov	r4, r0
 80026a6:	4620      	mov	r0, r4
 80026a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026aa:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <__sfp+0x74>)
 80026ac:	6665      	str	r5, [r4, #100]	; 0x64
 80026ae:	e9c4 5500 	strd	r5, r5, [r4]
 80026b2:	60a5      	str	r5, [r4, #8]
 80026b4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80026b8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80026bc:	2208      	movs	r2, #8
 80026be:	4629      	mov	r1, r5
 80026c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80026c4:	f7ff fd82 	bl	80021cc <memset>
 80026c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80026cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80026d0:	e7e9      	b.n	80026a6 <__sfp+0x42>
 80026d2:	bf00      	nop
 80026d4:	08002ae4 	.word	0x08002ae4
 80026d8:	ffff0001 	.word	0xffff0001

080026dc <_fwalk_reent>:
 80026dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026e0:	4680      	mov	r8, r0
 80026e2:	4689      	mov	r9, r1
 80026e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80026e8:	2600      	movs	r6, #0
 80026ea:	b914      	cbnz	r4, 80026f2 <_fwalk_reent+0x16>
 80026ec:	4630      	mov	r0, r6
 80026ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026f2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80026f6:	3f01      	subs	r7, #1
 80026f8:	d501      	bpl.n	80026fe <_fwalk_reent+0x22>
 80026fa:	6824      	ldr	r4, [r4, #0]
 80026fc:	e7f5      	b.n	80026ea <_fwalk_reent+0xe>
 80026fe:	89ab      	ldrh	r3, [r5, #12]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d907      	bls.n	8002714 <_fwalk_reent+0x38>
 8002704:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002708:	3301      	adds	r3, #1
 800270a:	d003      	beq.n	8002714 <_fwalk_reent+0x38>
 800270c:	4629      	mov	r1, r5
 800270e:	4640      	mov	r0, r8
 8002710:	47c8      	blx	r9
 8002712:	4306      	orrs	r6, r0
 8002714:	3568      	adds	r5, #104	; 0x68
 8002716:	e7ee      	b.n	80026f6 <_fwalk_reent+0x1a>

08002718 <__swhatbuf_r>:
 8002718:	b570      	push	{r4, r5, r6, lr}
 800271a:	460e      	mov	r6, r1
 800271c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002720:	2900      	cmp	r1, #0
 8002722:	b096      	sub	sp, #88	; 0x58
 8002724:	4614      	mov	r4, r2
 8002726:	461d      	mov	r5, r3
 8002728:	da07      	bge.n	800273a <__swhatbuf_r+0x22>
 800272a:	2300      	movs	r3, #0
 800272c:	602b      	str	r3, [r5, #0]
 800272e:	89b3      	ldrh	r3, [r6, #12]
 8002730:	061a      	lsls	r2, r3, #24
 8002732:	d410      	bmi.n	8002756 <__swhatbuf_r+0x3e>
 8002734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002738:	e00e      	b.n	8002758 <__swhatbuf_r+0x40>
 800273a:	466a      	mov	r2, sp
 800273c:	f000 f96e 	bl	8002a1c <_fstat_r>
 8002740:	2800      	cmp	r0, #0
 8002742:	dbf2      	blt.n	800272a <__swhatbuf_r+0x12>
 8002744:	9a01      	ldr	r2, [sp, #4]
 8002746:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800274a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800274e:	425a      	negs	r2, r3
 8002750:	415a      	adcs	r2, r3
 8002752:	602a      	str	r2, [r5, #0]
 8002754:	e7ee      	b.n	8002734 <__swhatbuf_r+0x1c>
 8002756:	2340      	movs	r3, #64	; 0x40
 8002758:	2000      	movs	r0, #0
 800275a:	6023      	str	r3, [r4, #0]
 800275c:	b016      	add	sp, #88	; 0x58
 800275e:	bd70      	pop	{r4, r5, r6, pc}

08002760 <__smakebuf_r>:
 8002760:	898b      	ldrh	r3, [r1, #12]
 8002762:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002764:	079d      	lsls	r5, r3, #30
 8002766:	4606      	mov	r6, r0
 8002768:	460c      	mov	r4, r1
 800276a:	d507      	bpl.n	800277c <__smakebuf_r+0x1c>
 800276c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002770:	6023      	str	r3, [r4, #0]
 8002772:	6123      	str	r3, [r4, #16]
 8002774:	2301      	movs	r3, #1
 8002776:	6163      	str	r3, [r4, #20]
 8002778:	b002      	add	sp, #8
 800277a:	bd70      	pop	{r4, r5, r6, pc}
 800277c:	ab01      	add	r3, sp, #4
 800277e:	466a      	mov	r2, sp
 8002780:	f7ff ffca 	bl	8002718 <__swhatbuf_r>
 8002784:	9900      	ldr	r1, [sp, #0]
 8002786:	4605      	mov	r5, r0
 8002788:	4630      	mov	r0, r6
 800278a:	f000 f877 	bl	800287c <_malloc_r>
 800278e:	b948      	cbnz	r0, 80027a4 <__smakebuf_r+0x44>
 8002790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002794:	059a      	lsls	r2, r3, #22
 8002796:	d4ef      	bmi.n	8002778 <__smakebuf_r+0x18>
 8002798:	f023 0303 	bic.w	r3, r3, #3
 800279c:	f043 0302 	orr.w	r3, r3, #2
 80027a0:	81a3      	strh	r3, [r4, #12]
 80027a2:	e7e3      	b.n	800276c <__smakebuf_r+0xc>
 80027a4:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <__smakebuf_r+0x7c>)
 80027a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80027a8:	89a3      	ldrh	r3, [r4, #12]
 80027aa:	6020      	str	r0, [r4, #0]
 80027ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027b0:	81a3      	strh	r3, [r4, #12]
 80027b2:	9b00      	ldr	r3, [sp, #0]
 80027b4:	6163      	str	r3, [r4, #20]
 80027b6:	9b01      	ldr	r3, [sp, #4]
 80027b8:	6120      	str	r0, [r4, #16]
 80027ba:	b15b      	cbz	r3, 80027d4 <__smakebuf_r+0x74>
 80027bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027c0:	4630      	mov	r0, r6
 80027c2:	f000 f93d 	bl	8002a40 <_isatty_r>
 80027c6:	b128      	cbz	r0, 80027d4 <__smakebuf_r+0x74>
 80027c8:	89a3      	ldrh	r3, [r4, #12]
 80027ca:	f023 0303 	bic.w	r3, r3, #3
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	81a3      	strh	r3, [r4, #12]
 80027d4:	89a3      	ldrh	r3, [r4, #12]
 80027d6:	431d      	orrs	r5, r3
 80027d8:	81a5      	strh	r5, [r4, #12]
 80027da:	e7cd      	b.n	8002778 <__smakebuf_r+0x18>
 80027dc:	080025cd 	.word	0x080025cd

080027e0 <_free_r>:
 80027e0:	b538      	push	{r3, r4, r5, lr}
 80027e2:	4605      	mov	r5, r0
 80027e4:	2900      	cmp	r1, #0
 80027e6:	d045      	beq.n	8002874 <_free_r+0x94>
 80027e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027ec:	1f0c      	subs	r4, r1, #4
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	bfb8      	it	lt
 80027f2:	18e4      	addlt	r4, r4, r3
 80027f4:	f000 f946 	bl	8002a84 <__malloc_lock>
 80027f8:	4a1f      	ldr	r2, [pc, #124]	; (8002878 <_free_r+0x98>)
 80027fa:	6813      	ldr	r3, [r2, #0]
 80027fc:	4610      	mov	r0, r2
 80027fe:	b933      	cbnz	r3, 800280e <_free_r+0x2e>
 8002800:	6063      	str	r3, [r4, #4]
 8002802:	6014      	str	r4, [r2, #0]
 8002804:	4628      	mov	r0, r5
 8002806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800280a:	f000 b93c 	b.w	8002a86 <__malloc_unlock>
 800280e:	42a3      	cmp	r3, r4
 8002810:	d90c      	bls.n	800282c <_free_r+0x4c>
 8002812:	6821      	ldr	r1, [r4, #0]
 8002814:	1862      	adds	r2, r4, r1
 8002816:	4293      	cmp	r3, r2
 8002818:	bf04      	itt	eq
 800281a:	681a      	ldreq	r2, [r3, #0]
 800281c:	685b      	ldreq	r3, [r3, #4]
 800281e:	6063      	str	r3, [r4, #4]
 8002820:	bf04      	itt	eq
 8002822:	1852      	addeq	r2, r2, r1
 8002824:	6022      	streq	r2, [r4, #0]
 8002826:	6004      	str	r4, [r0, #0]
 8002828:	e7ec      	b.n	8002804 <_free_r+0x24>
 800282a:	4613      	mov	r3, r2
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	b10a      	cbz	r2, 8002834 <_free_r+0x54>
 8002830:	42a2      	cmp	r2, r4
 8002832:	d9fa      	bls.n	800282a <_free_r+0x4a>
 8002834:	6819      	ldr	r1, [r3, #0]
 8002836:	1858      	adds	r0, r3, r1
 8002838:	42a0      	cmp	r0, r4
 800283a:	d10b      	bne.n	8002854 <_free_r+0x74>
 800283c:	6820      	ldr	r0, [r4, #0]
 800283e:	4401      	add	r1, r0
 8002840:	1858      	adds	r0, r3, r1
 8002842:	4282      	cmp	r2, r0
 8002844:	6019      	str	r1, [r3, #0]
 8002846:	d1dd      	bne.n	8002804 <_free_r+0x24>
 8002848:	6810      	ldr	r0, [r2, #0]
 800284a:	6852      	ldr	r2, [r2, #4]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	4401      	add	r1, r0
 8002850:	6019      	str	r1, [r3, #0]
 8002852:	e7d7      	b.n	8002804 <_free_r+0x24>
 8002854:	d902      	bls.n	800285c <_free_r+0x7c>
 8002856:	230c      	movs	r3, #12
 8002858:	602b      	str	r3, [r5, #0]
 800285a:	e7d3      	b.n	8002804 <_free_r+0x24>
 800285c:	6820      	ldr	r0, [r4, #0]
 800285e:	1821      	adds	r1, r4, r0
 8002860:	428a      	cmp	r2, r1
 8002862:	bf04      	itt	eq
 8002864:	6811      	ldreq	r1, [r2, #0]
 8002866:	6852      	ldreq	r2, [r2, #4]
 8002868:	6062      	str	r2, [r4, #4]
 800286a:	bf04      	itt	eq
 800286c:	1809      	addeq	r1, r1, r0
 800286e:	6021      	streq	r1, [r4, #0]
 8002870:	605c      	str	r4, [r3, #4]
 8002872:	e7c7      	b.n	8002804 <_free_r+0x24>
 8002874:	bd38      	pop	{r3, r4, r5, pc}
 8002876:	bf00      	nop
 8002878:	20000090 	.word	0x20000090

0800287c <_malloc_r>:
 800287c:	b570      	push	{r4, r5, r6, lr}
 800287e:	1ccd      	adds	r5, r1, #3
 8002880:	f025 0503 	bic.w	r5, r5, #3
 8002884:	3508      	adds	r5, #8
 8002886:	2d0c      	cmp	r5, #12
 8002888:	bf38      	it	cc
 800288a:	250c      	movcc	r5, #12
 800288c:	2d00      	cmp	r5, #0
 800288e:	4606      	mov	r6, r0
 8002890:	db01      	blt.n	8002896 <_malloc_r+0x1a>
 8002892:	42a9      	cmp	r1, r5
 8002894:	d903      	bls.n	800289e <_malloc_r+0x22>
 8002896:	230c      	movs	r3, #12
 8002898:	6033      	str	r3, [r6, #0]
 800289a:	2000      	movs	r0, #0
 800289c:	bd70      	pop	{r4, r5, r6, pc}
 800289e:	f000 f8f1 	bl	8002a84 <__malloc_lock>
 80028a2:	4a21      	ldr	r2, [pc, #132]	; (8002928 <_malloc_r+0xac>)
 80028a4:	6814      	ldr	r4, [r2, #0]
 80028a6:	4621      	mov	r1, r4
 80028a8:	b991      	cbnz	r1, 80028d0 <_malloc_r+0x54>
 80028aa:	4c20      	ldr	r4, [pc, #128]	; (800292c <_malloc_r+0xb0>)
 80028ac:	6823      	ldr	r3, [r4, #0]
 80028ae:	b91b      	cbnz	r3, 80028b8 <_malloc_r+0x3c>
 80028b0:	4630      	mov	r0, r6
 80028b2:	f000 f83d 	bl	8002930 <_sbrk_r>
 80028b6:	6020      	str	r0, [r4, #0]
 80028b8:	4629      	mov	r1, r5
 80028ba:	4630      	mov	r0, r6
 80028bc:	f000 f838 	bl	8002930 <_sbrk_r>
 80028c0:	1c43      	adds	r3, r0, #1
 80028c2:	d124      	bne.n	800290e <_malloc_r+0x92>
 80028c4:	230c      	movs	r3, #12
 80028c6:	6033      	str	r3, [r6, #0]
 80028c8:	4630      	mov	r0, r6
 80028ca:	f000 f8dc 	bl	8002a86 <__malloc_unlock>
 80028ce:	e7e4      	b.n	800289a <_malloc_r+0x1e>
 80028d0:	680b      	ldr	r3, [r1, #0]
 80028d2:	1b5b      	subs	r3, r3, r5
 80028d4:	d418      	bmi.n	8002908 <_malloc_r+0x8c>
 80028d6:	2b0b      	cmp	r3, #11
 80028d8:	d90f      	bls.n	80028fa <_malloc_r+0x7e>
 80028da:	600b      	str	r3, [r1, #0]
 80028dc:	50cd      	str	r5, [r1, r3]
 80028de:	18cc      	adds	r4, r1, r3
 80028e0:	4630      	mov	r0, r6
 80028e2:	f000 f8d0 	bl	8002a86 <__malloc_unlock>
 80028e6:	f104 000b 	add.w	r0, r4, #11
 80028ea:	1d23      	adds	r3, r4, #4
 80028ec:	f020 0007 	bic.w	r0, r0, #7
 80028f0:	1ac3      	subs	r3, r0, r3
 80028f2:	d0d3      	beq.n	800289c <_malloc_r+0x20>
 80028f4:	425a      	negs	r2, r3
 80028f6:	50e2      	str	r2, [r4, r3]
 80028f8:	e7d0      	b.n	800289c <_malloc_r+0x20>
 80028fa:	428c      	cmp	r4, r1
 80028fc:	684b      	ldr	r3, [r1, #4]
 80028fe:	bf16      	itet	ne
 8002900:	6063      	strne	r3, [r4, #4]
 8002902:	6013      	streq	r3, [r2, #0]
 8002904:	460c      	movne	r4, r1
 8002906:	e7eb      	b.n	80028e0 <_malloc_r+0x64>
 8002908:	460c      	mov	r4, r1
 800290a:	6849      	ldr	r1, [r1, #4]
 800290c:	e7cc      	b.n	80028a8 <_malloc_r+0x2c>
 800290e:	1cc4      	adds	r4, r0, #3
 8002910:	f024 0403 	bic.w	r4, r4, #3
 8002914:	42a0      	cmp	r0, r4
 8002916:	d005      	beq.n	8002924 <_malloc_r+0xa8>
 8002918:	1a21      	subs	r1, r4, r0
 800291a:	4630      	mov	r0, r6
 800291c:	f000 f808 	bl	8002930 <_sbrk_r>
 8002920:	3001      	adds	r0, #1
 8002922:	d0cf      	beq.n	80028c4 <_malloc_r+0x48>
 8002924:	6025      	str	r5, [r4, #0]
 8002926:	e7db      	b.n	80028e0 <_malloc_r+0x64>
 8002928:	20000090 	.word	0x20000090
 800292c:	20000094 	.word	0x20000094

08002930 <_sbrk_r>:
 8002930:	b538      	push	{r3, r4, r5, lr}
 8002932:	4c06      	ldr	r4, [pc, #24]	; (800294c <_sbrk_r+0x1c>)
 8002934:	2300      	movs	r3, #0
 8002936:	4605      	mov	r5, r0
 8002938:	4608      	mov	r0, r1
 800293a:	6023      	str	r3, [r4, #0]
 800293c:	f7fd ff9a 	bl	8000874 <_sbrk>
 8002940:	1c43      	adds	r3, r0, #1
 8002942:	d102      	bne.n	800294a <_sbrk_r+0x1a>
 8002944:	6823      	ldr	r3, [r4, #0]
 8002946:	b103      	cbz	r3, 800294a <_sbrk_r+0x1a>
 8002948:	602b      	str	r3, [r5, #0]
 800294a:	bd38      	pop	{r3, r4, r5, pc}
 800294c:	200000dc 	.word	0x200000dc

08002950 <__sread>:
 8002950:	b510      	push	{r4, lr}
 8002952:	460c      	mov	r4, r1
 8002954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002958:	f000 f896 	bl	8002a88 <_read_r>
 800295c:	2800      	cmp	r0, #0
 800295e:	bfab      	itete	ge
 8002960:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002962:	89a3      	ldrhlt	r3, [r4, #12]
 8002964:	181b      	addge	r3, r3, r0
 8002966:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800296a:	bfac      	ite	ge
 800296c:	6563      	strge	r3, [r4, #84]	; 0x54
 800296e:	81a3      	strhlt	r3, [r4, #12]
 8002970:	bd10      	pop	{r4, pc}

08002972 <__swrite>:
 8002972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002976:	461f      	mov	r7, r3
 8002978:	898b      	ldrh	r3, [r1, #12]
 800297a:	05db      	lsls	r3, r3, #23
 800297c:	4605      	mov	r5, r0
 800297e:	460c      	mov	r4, r1
 8002980:	4616      	mov	r6, r2
 8002982:	d505      	bpl.n	8002990 <__swrite+0x1e>
 8002984:	2302      	movs	r3, #2
 8002986:	2200      	movs	r2, #0
 8002988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800298c:	f000 f868 	bl	8002a60 <_lseek_r>
 8002990:	89a3      	ldrh	r3, [r4, #12]
 8002992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800299a:	81a3      	strh	r3, [r4, #12]
 800299c:	4632      	mov	r2, r6
 800299e:	463b      	mov	r3, r7
 80029a0:	4628      	mov	r0, r5
 80029a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80029a6:	f000 b817 	b.w	80029d8 <_write_r>

080029aa <__sseek>:
 80029aa:	b510      	push	{r4, lr}
 80029ac:	460c      	mov	r4, r1
 80029ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029b2:	f000 f855 	bl	8002a60 <_lseek_r>
 80029b6:	1c43      	adds	r3, r0, #1
 80029b8:	89a3      	ldrh	r3, [r4, #12]
 80029ba:	bf15      	itete	ne
 80029bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80029be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80029c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80029c6:	81a3      	strheq	r3, [r4, #12]
 80029c8:	bf18      	it	ne
 80029ca:	81a3      	strhne	r3, [r4, #12]
 80029cc:	bd10      	pop	{r4, pc}

080029ce <__sclose>:
 80029ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029d2:	f000 b813 	b.w	80029fc <_close_r>
	...

080029d8 <_write_r>:
 80029d8:	b538      	push	{r3, r4, r5, lr}
 80029da:	4c07      	ldr	r4, [pc, #28]	; (80029f8 <_write_r+0x20>)
 80029dc:	4605      	mov	r5, r0
 80029de:	4608      	mov	r0, r1
 80029e0:	4611      	mov	r1, r2
 80029e2:	2200      	movs	r2, #0
 80029e4:	6022      	str	r2, [r4, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	f7fd fd80 	bl	80004ec <_write>
 80029ec:	1c43      	adds	r3, r0, #1
 80029ee:	d102      	bne.n	80029f6 <_write_r+0x1e>
 80029f0:	6823      	ldr	r3, [r4, #0]
 80029f2:	b103      	cbz	r3, 80029f6 <_write_r+0x1e>
 80029f4:	602b      	str	r3, [r5, #0]
 80029f6:	bd38      	pop	{r3, r4, r5, pc}
 80029f8:	200000dc 	.word	0x200000dc

080029fc <_close_r>:
 80029fc:	b538      	push	{r3, r4, r5, lr}
 80029fe:	4c06      	ldr	r4, [pc, #24]	; (8002a18 <_close_r+0x1c>)
 8002a00:	2300      	movs	r3, #0
 8002a02:	4605      	mov	r5, r0
 8002a04:	4608      	mov	r0, r1
 8002a06:	6023      	str	r3, [r4, #0]
 8002a08:	f7fd feff 	bl	800080a <_close>
 8002a0c:	1c43      	adds	r3, r0, #1
 8002a0e:	d102      	bne.n	8002a16 <_close_r+0x1a>
 8002a10:	6823      	ldr	r3, [r4, #0]
 8002a12:	b103      	cbz	r3, 8002a16 <_close_r+0x1a>
 8002a14:	602b      	str	r3, [r5, #0]
 8002a16:	bd38      	pop	{r3, r4, r5, pc}
 8002a18:	200000dc 	.word	0x200000dc

08002a1c <_fstat_r>:
 8002a1c:	b538      	push	{r3, r4, r5, lr}
 8002a1e:	4c07      	ldr	r4, [pc, #28]	; (8002a3c <_fstat_r+0x20>)
 8002a20:	2300      	movs	r3, #0
 8002a22:	4605      	mov	r5, r0
 8002a24:	4608      	mov	r0, r1
 8002a26:	4611      	mov	r1, r2
 8002a28:	6023      	str	r3, [r4, #0]
 8002a2a:	f7fd fefa 	bl	8000822 <_fstat>
 8002a2e:	1c43      	adds	r3, r0, #1
 8002a30:	d102      	bne.n	8002a38 <_fstat_r+0x1c>
 8002a32:	6823      	ldr	r3, [r4, #0]
 8002a34:	b103      	cbz	r3, 8002a38 <_fstat_r+0x1c>
 8002a36:	602b      	str	r3, [r5, #0]
 8002a38:	bd38      	pop	{r3, r4, r5, pc}
 8002a3a:	bf00      	nop
 8002a3c:	200000dc 	.word	0x200000dc

08002a40 <_isatty_r>:
 8002a40:	b538      	push	{r3, r4, r5, lr}
 8002a42:	4c06      	ldr	r4, [pc, #24]	; (8002a5c <_isatty_r+0x1c>)
 8002a44:	2300      	movs	r3, #0
 8002a46:	4605      	mov	r5, r0
 8002a48:	4608      	mov	r0, r1
 8002a4a:	6023      	str	r3, [r4, #0]
 8002a4c:	f7fd fef9 	bl	8000842 <_isatty>
 8002a50:	1c43      	adds	r3, r0, #1
 8002a52:	d102      	bne.n	8002a5a <_isatty_r+0x1a>
 8002a54:	6823      	ldr	r3, [r4, #0]
 8002a56:	b103      	cbz	r3, 8002a5a <_isatty_r+0x1a>
 8002a58:	602b      	str	r3, [r5, #0]
 8002a5a:	bd38      	pop	{r3, r4, r5, pc}
 8002a5c:	200000dc 	.word	0x200000dc

08002a60 <_lseek_r>:
 8002a60:	b538      	push	{r3, r4, r5, lr}
 8002a62:	4c07      	ldr	r4, [pc, #28]	; (8002a80 <_lseek_r+0x20>)
 8002a64:	4605      	mov	r5, r0
 8002a66:	4608      	mov	r0, r1
 8002a68:	4611      	mov	r1, r2
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	6022      	str	r2, [r4, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f7fd fef2 	bl	8000858 <_lseek>
 8002a74:	1c43      	adds	r3, r0, #1
 8002a76:	d102      	bne.n	8002a7e <_lseek_r+0x1e>
 8002a78:	6823      	ldr	r3, [r4, #0]
 8002a7a:	b103      	cbz	r3, 8002a7e <_lseek_r+0x1e>
 8002a7c:	602b      	str	r3, [r5, #0]
 8002a7e:	bd38      	pop	{r3, r4, r5, pc}
 8002a80:	200000dc 	.word	0x200000dc

08002a84 <__malloc_lock>:
 8002a84:	4770      	bx	lr

08002a86 <__malloc_unlock>:
 8002a86:	4770      	bx	lr

08002a88 <_read_r>:
 8002a88:	b538      	push	{r3, r4, r5, lr}
 8002a8a:	4c07      	ldr	r4, [pc, #28]	; (8002aa8 <_read_r+0x20>)
 8002a8c:	4605      	mov	r5, r0
 8002a8e:	4608      	mov	r0, r1
 8002a90:	4611      	mov	r1, r2
 8002a92:	2200      	movs	r2, #0
 8002a94:	6022      	str	r2, [r4, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	f7fd fe9a 	bl	80007d0 <_read>
 8002a9c:	1c43      	adds	r3, r0, #1
 8002a9e:	d102      	bne.n	8002aa6 <_read_r+0x1e>
 8002aa0:	6823      	ldr	r3, [r4, #0]
 8002aa2:	b103      	cbz	r3, 8002aa6 <_read_r+0x1e>
 8002aa4:	602b      	str	r3, [r5, #0]
 8002aa6:	bd38      	pop	{r3, r4, r5, pc}
 8002aa8:	200000dc 	.word	0x200000dc

08002aac <_init>:
 8002aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aae:	bf00      	nop
 8002ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ab2:	bc08      	pop	{r3}
 8002ab4:	469e      	mov	lr, r3
 8002ab6:	4770      	bx	lr

08002ab8 <_fini>:
 8002ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aba:	bf00      	nop
 8002abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002abe:	bc08      	pop	{r3}
 8002ac0:	469e      	mov	lr, r3
 8002ac2:	4770      	bx	lr
