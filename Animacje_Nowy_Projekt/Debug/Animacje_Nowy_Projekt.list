
Animacje_Nowy_Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007680  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001af8  0800782c  0800782c  0001782c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009324  08009324  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  08009324  08009324  00019324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800932c  0800932c  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800932c  0800932c  0001932c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009330  08009330  00019330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08009334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  200000b4  080093e8  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  080093e8  0002058c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023a15  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004e12  00000000  00000000  00043af9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001be8  00000000  00000000  00048910  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019f8  00000000  00000000  0004a4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a8b8  00000000  00000000  0004bef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019363  00000000  00000000  000767a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eee2b  00000000  00000000  0008fb0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017e936  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a48  00000000  00000000  0017e9b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000004e  00000000  00000000  001863fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000b4 	.word	0x200000b4
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007814 	.word	0x08007814

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200000b8 	.word	0x200000b8
 80001e8:	08007814 	.word	0x08007814

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <_ZN6CircleC1Ei>:
 *  Created on: May 24, 2021
 *      Author: michal
 */
#include <Circle.h>

Circle::Circle(int r)
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	6039      	str	r1, [r7, #0]
{
	this->r = r;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	683a      	ldr	r2, [r7, #0]
 80004fa:	601a      	str	r2, [r3, #0]
}
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4618      	mov	r0, r3
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr

0800050a <_ZN6Circle10drawCircleEiiP5Stage>:


void Circle::drawCircle(int x, int y, Stage* stage)
{
 800050a:	b480      	push	{r7}
 800050c:	b089      	sub	sp, #36	; 0x24
 800050e:	af00      	add	r7, sp, #0
 8000510:	60f8      	str	r0, [r7, #12]
 8000512:	60b9      	str	r1, [r7, #8]
 8000514:	607a      	str	r2, [r7, #4]
 8000516:	603b      	str	r3, [r7, #0]
    int d = 1 - this->r;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f1c3 0301 	rsb	r3, r3, #1
 8000520:	61fb      	str	r3, [r7, #28]
    int x_t, y_t;
    x_t = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	61bb      	str	r3, [r7, #24]
    y_t = r;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	617b      	str	r3, [r7, #20]

    for(int i = 1; x_t < y_t; i++)
 800052c:	2301      	movs	r3, #1
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	69ba      	ldr	r2, [r7, #24]
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	429a      	cmp	r2, r3
 8000536:	f280 813f 	bge.w	80007b8 <_ZN6Circle10drawCircleEiiP5Stage+0x2ae>
    {
        if(d < 0)
 800053a:	69fb      	ldr	r3, [r7, #28]
 800053c:	2b00      	cmp	r3, #0
 800053e:	da09      	bge.n	8000554 <_ZN6Circle10drawCircleEiiP5Stage+0x4a>
        {
            x_t++;
 8000540:	69bb      	ldr	r3, [r7, #24]
 8000542:	3301      	adds	r3, #1
 8000544:	61bb      	str	r3, [r7, #24]
            d += 2*x_t+3;
 8000546:	69bb      	ldr	r3, [r7, #24]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	3303      	adds	r3, #3
 800054c:	69fa      	ldr	r2, [r7, #28]
 800054e:	4413      	add	r3, r2
 8000550:	61fb      	str	r3, [r7, #28]
 8000552:	e00d      	b.n	8000570 <_ZN6Circle10drawCircleEiiP5Stage+0x66>
        }
        else
        {
            x_t++;
 8000554:	69bb      	ldr	r3, [r7, #24]
 8000556:	3301      	adds	r3, #1
 8000558:	61bb      	str	r3, [r7, #24]
            y_t--;
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	3b01      	subs	r3, #1
 800055e:	617b      	str	r3, [r7, #20]
            d +=  2*(x_t - y_t)+5;
 8000560:	69ba      	ldr	r2, [r7, #24]
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	3305      	adds	r3, #5
 800056a:	69fa      	ldr	r2, [r7, #28]
 800056c:	4413      	add	r3, r2
 800056e:	61fb      	str	r3, [r7, #28]
        }
        if (x_t+x > 0 && x_t+x < 240 && y_t+y > 0 && y_t+y < 320)
 8000570:	69ba      	ldr	r2, [r7, #24]
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	4413      	add	r3, r2
 8000576:	2b00      	cmp	r3, #0
 8000578:	dd1e      	ble.n	80005b8 <_ZN6Circle10drawCircleEiiP5Stage+0xae>
 800057a:	69ba      	ldr	r2, [r7, #24]
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	4413      	add	r3, r2
 8000580:	2bef      	cmp	r3, #239	; 0xef
 8000582:	dc19      	bgt.n	80005b8 <_ZN6Circle10drawCircleEiiP5Stage+0xae>
 8000584:	697a      	ldr	r2, [r7, #20]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4413      	add	r3, r2
 800058a:	2b00      	cmp	r3, #0
 800058c:	dd14      	ble.n	80005b8 <_ZN6Circle10drawCircleEiiP5Stage+0xae>
 800058e:	697a      	ldr	r2, [r7, #20]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4413      	add	r3, r2
 8000594:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000598:	da0e      	bge.n	80005b8 <_ZN6Circle10drawCircleEiiP5Stage+0xae>
        	stage->p[x_t+x][y_t+y] = 1;
 800059a:	69ba      	ldr	r2, [r7, #24]
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	441a      	add	r2, r3
 80005a0:	6979      	ldr	r1, [r7, #20]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4419      	add	r1, r3
 80005a6:	6838      	ldr	r0, [r7, #0]
 80005a8:	4613      	mov	r3, r2
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	4413      	add	r3, r2
 80005ae:	019b      	lsls	r3, r3, #6
 80005b0:	4403      	add	r3, r0
 80005b2:	440b      	add	r3, r1
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
        if (x_t+x > 0 && x_t+x < 240 && -y_t+y > 0 && -y_t+y < 320)
 80005b8:	69ba      	ldr	r2, [r7, #24]
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	4413      	add	r3, r2
 80005be:	2b00      	cmp	r3, #0
 80005c0:	dd1e      	ble.n	8000600 <_ZN6Circle10drawCircleEiiP5Stage+0xf6>
 80005c2:	69ba      	ldr	r2, [r7, #24]
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	4413      	add	r3, r2
 80005c8:	2bef      	cmp	r3, #239	; 0xef
 80005ca:	dc19      	bgt.n	8000600 <_ZN6Circle10drawCircleEiiP5Stage+0xf6>
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dd14      	ble.n	8000600 <_ZN6Circle10drawCircleEiiP5Stage+0xf6>
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80005e0:	da0e      	bge.n	8000600 <_ZN6Circle10drawCircleEiiP5Stage+0xf6>
        	stage->p[x_t+x][-y_t+y] = 1;
 80005e2:	69ba      	ldr	r2, [r7, #24]
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	441a      	add	r2, r3
 80005e8:	6879      	ldr	r1, [r7, #4]
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	1ac9      	subs	r1, r1, r3
 80005ee:	6838      	ldr	r0, [r7, #0]
 80005f0:	4613      	mov	r3, r2
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	4413      	add	r3, r2
 80005f6:	019b      	lsls	r3, r3, #6
 80005f8:	4403      	add	r3, r0
 80005fa:	440b      	add	r3, r1
 80005fc:	2201      	movs	r2, #1
 80005fe:	701a      	strb	r2, [r3, #0]
        if (-x_t+x > 0 && -x_t+x < 240 && y_t+y > 0 && y_t+y < 320)
 8000600:	68ba      	ldr	r2, [r7, #8]
 8000602:	69bb      	ldr	r3, [r7, #24]
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	dd1e      	ble.n	8000648 <_ZN6Circle10drawCircleEiiP5Stage+0x13e>
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	2bef      	cmp	r3, #239	; 0xef
 8000612:	dc19      	bgt.n	8000648 <_ZN6Circle10drawCircleEiiP5Stage+0x13e>
 8000614:	697a      	ldr	r2, [r7, #20]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	2b00      	cmp	r3, #0
 800061c:	dd14      	ble.n	8000648 <_ZN6Circle10drawCircleEiiP5Stage+0x13e>
 800061e:	697a      	ldr	r2, [r7, #20]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4413      	add	r3, r2
 8000624:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000628:	da0e      	bge.n	8000648 <_ZN6Circle10drawCircleEiiP5Stage+0x13e>
        	stage->p[-x_t+x][y_t+y] = 1;
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	1ad2      	subs	r2, r2, r3
 8000630:	6979      	ldr	r1, [r7, #20]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4419      	add	r1, r3
 8000636:	6838      	ldr	r0, [r7, #0]
 8000638:	4613      	mov	r3, r2
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	4413      	add	r3, r2
 800063e:	019b      	lsls	r3, r3, #6
 8000640:	4403      	add	r3, r0
 8000642:	440b      	add	r3, r1
 8000644:	2201      	movs	r2, #1
 8000646:	701a      	strb	r2, [r3, #0]
        if (-x_t+x > 0 && -x_t+x < 240 && -y_t+y > 0 && -y_t+y < 320)
 8000648:	68ba      	ldr	r2, [r7, #8]
 800064a:	69bb      	ldr	r3, [r7, #24]
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	2b00      	cmp	r3, #0
 8000650:	dd1e      	ble.n	8000690 <_ZN6Circle10drawCircleEiiP5Stage+0x186>
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	2bef      	cmp	r3, #239	; 0xef
 800065a:	dc19      	bgt.n	8000690 <_ZN6Circle10drawCircleEiiP5Stage+0x186>
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	dd14      	ble.n	8000690 <_ZN6Circle10drawCircleEiiP5Stage+0x186>
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	1ad3      	subs	r3, r2, r3
 800066c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000670:	da0e      	bge.n	8000690 <_ZN6Circle10drawCircleEiiP5Stage+0x186>
        	stage->p[-x_t+x][-y_t+y] = 1;
 8000672:	68ba      	ldr	r2, [r7, #8]
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	1ad2      	subs	r2, r2, r3
 8000678:	6879      	ldr	r1, [r7, #4]
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	1ac9      	subs	r1, r1, r3
 800067e:	6838      	ldr	r0, [r7, #0]
 8000680:	4613      	mov	r3, r2
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	4413      	add	r3, r2
 8000686:	019b      	lsls	r3, r3, #6
 8000688:	4403      	add	r3, r0
 800068a:	440b      	add	r3, r1
 800068c:	2201      	movs	r2, #1
 800068e:	701a      	strb	r2, [r3, #0]
        if (x_t+x > 0 && x_t+x < 320 && y_t+y > 0 && y_t+y < 240)
 8000690:	69ba      	ldr	r2, [r7, #24]
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	4413      	add	r3, r2
 8000696:	2b00      	cmp	r3, #0
 8000698:	dd1e      	ble.n	80006d8 <_ZN6Circle10drawCircleEiiP5Stage+0x1ce>
 800069a:	69ba      	ldr	r2, [r7, #24]
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	4413      	add	r3, r2
 80006a0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80006a4:	da18      	bge.n	80006d8 <_ZN6Circle10drawCircleEiiP5Stage+0x1ce>
 80006a6:	697a      	ldr	r2, [r7, #20]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4413      	add	r3, r2
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	dd13      	ble.n	80006d8 <_ZN6Circle10drawCircleEiiP5Stage+0x1ce>
 80006b0:	697a      	ldr	r2, [r7, #20]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4413      	add	r3, r2
 80006b6:	2bef      	cmp	r3, #239	; 0xef
 80006b8:	dc0e      	bgt.n	80006d8 <_ZN6Circle10drawCircleEiiP5Stage+0x1ce>
        	stage->p[y_t+x][x_t+y] = 1;
 80006ba:	697a      	ldr	r2, [r7, #20]
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	441a      	add	r2, r3
 80006c0:	69b9      	ldr	r1, [r7, #24]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4419      	add	r1, r3
 80006c6:	6838      	ldr	r0, [r7, #0]
 80006c8:	4613      	mov	r3, r2
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	4413      	add	r3, r2
 80006ce:	019b      	lsls	r3, r3, #6
 80006d0:	4403      	add	r3, r0
 80006d2:	440b      	add	r3, r1
 80006d4:	2201      	movs	r2, #1
 80006d6:	701a      	strb	r2, [r3, #0]
        if (-x_t+x > 0 && -x_t+x < 320 && y_t+y > 0 && y_t+y < 240)
 80006d8:	68ba      	ldr	r2, [r7, #8]
 80006da:	69bb      	ldr	r3, [r7, #24]
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	dd1e      	ble.n	8000720 <_ZN6Circle10drawCircleEiiP5Stage+0x216>
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	1ad3      	subs	r3, r2, r3
 80006e8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80006ec:	da18      	bge.n	8000720 <_ZN6Circle10drawCircleEiiP5Stage+0x216>
 80006ee:	697a      	ldr	r2, [r7, #20]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4413      	add	r3, r2
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	dd13      	ble.n	8000720 <_ZN6Circle10drawCircleEiiP5Stage+0x216>
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4413      	add	r3, r2
 80006fe:	2bef      	cmp	r3, #239	; 0xef
 8000700:	dc0e      	bgt.n	8000720 <_ZN6Circle10drawCircleEiiP5Stage+0x216>
        	stage->p[y_t+x][-x_t+y] = 1;
 8000702:	697a      	ldr	r2, [r7, #20]
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	441a      	add	r2, r3
 8000708:	6879      	ldr	r1, [r7, #4]
 800070a:	69bb      	ldr	r3, [r7, #24]
 800070c:	1ac9      	subs	r1, r1, r3
 800070e:	6838      	ldr	r0, [r7, #0]
 8000710:	4613      	mov	r3, r2
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	4413      	add	r3, r2
 8000716:	019b      	lsls	r3, r3, #6
 8000718:	4403      	add	r3, r0
 800071a:	440b      	add	r3, r1
 800071c:	2201      	movs	r2, #1
 800071e:	701a      	strb	r2, [r3, #0]
        if (x_t+x > 0 && x_t+x < 320 && -y_t+y > 0 && -y_t+y < 240)
 8000720:	69ba      	ldr	r2, [r7, #24]
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	4413      	add	r3, r2
 8000726:	2b00      	cmp	r3, #0
 8000728:	dd1e      	ble.n	8000768 <_ZN6Circle10drawCircleEiiP5Stage+0x25e>
 800072a:	69ba      	ldr	r2, [r7, #24]
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	4413      	add	r3, r2
 8000730:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000734:	da18      	bge.n	8000768 <_ZN6Circle10drawCircleEiiP5Stage+0x25e>
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	1ad3      	subs	r3, r2, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	dd13      	ble.n	8000768 <_ZN6Circle10drawCircleEiiP5Stage+0x25e>
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	2bef      	cmp	r3, #239	; 0xef
 8000748:	dc0e      	bgt.n	8000768 <_ZN6Circle10drawCircleEiiP5Stage+0x25e>
        	stage->p[-y_t+x][x_t+y] = 1;
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	1ad2      	subs	r2, r2, r3
 8000750:	69b9      	ldr	r1, [r7, #24]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4419      	add	r1, r3
 8000756:	6838      	ldr	r0, [r7, #0]
 8000758:	4613      	mov	r3, r2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	019b      	lsls	r3, r3, #6
 8000760:	4403      	add	r3, r0
 8000762:	440b      	add	r3, r1
 8000764:	2201      	movs	r2, #1
 8000766:	701a      	strb	r2, [r3, #0]
        if (-x_t+x > 0 && -x_t+x < 320 && -y_t+y > 0 && -y_t+y < 240)
 8000768:	68ba      	ldr	r2, [r7, #8]
 800076a:	69bb      	ldr	r3, [r7, #24]
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	2b00      	cmp	r3, #0
 8000770:	dd1e      	ble.n	80007b0 <_ZN6Circle10drawCircleEiiP5Stage+0x2a6>
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800077c:	da18      	bge.n	80007b0 <_ZN6Circle10drawCircleEiiP5Stage+0x2a6>
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	2b00      	cmp	r3, #0
 8000786:	dd13      	ble.n	80007b0 <_ZN6Circle10drawCircleEiiP5Stage+0x2a6>
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	2bef      	cmp	r3, #239	; 0xef
 8000790:	dc0e      	bgt.n	80007b0 <_ZN6Circle10drawCircleEiiP5Stage+0x2a6>
        	stage->p[-y_t+x][-x_t+y] = 1;
 8000792:	68ba      	ldr	r2, [r7, #8]
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	1ad2      	subs	r2, r2, r3
 8000798:	6879      	ldr	r1, [r7, #4]
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	1ac9      	subs	r1, r1, r3
 800079e:	6838      	ldr	r0, [r7, #0]
 80007a0:	4613      	mov	r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	4413      	add	r3, r2
 80007a6:	019b      	lsls	r3, r3, #6
 80007a8:	4403      	add	r3, r0
 80007aa:	440b      	add	r3, r1
 80007ac:	2201      	movs	r2, #1
 80007ae:	701a      	strb	r2, [r3, #0]
    for(int i = 1; x_t < y_t; i++)
 80007b0:	693b      	ldr	r3, [r7, #16]
 80007b2:	3301      	adds	r3, #1
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	e6bb      	b.n	8000530 <_ZN6Circle10drawCircleEiiP5Stage+0x26>
    }
}
 80007b8:	bf00      	nop
 80007ba:	3724      	adds	r7, #36	; 0x24
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <_ZN9RectangleC1Eii>:
 *      Author: michal
 */

#include <Rectangle.h>

Rectangle::Rectangle(int w, int l)
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
{
	this->width = w;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	68ba      	ldr	r2, [r7, #8]
 80007d4:	601a      	str	r2, [r3, #0]
	this->length = l;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	605a      	str	r2, [r3, #4]
}
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	4618      	mov	r0, r3
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <_ZN5Stage5clearEv>:
#include <stdio.h>
#include "stm32f429i_discovery_lcd.h"



bool Stage::clear(){
 80007ea:	b480      	push	{r7}
 80007ec:	b085      	sub	sp, #20
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 240; i++){
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2bef      	cmp	r3, #239	; 0xef
 80007fa:	dc18      	bgt.n	800082e <_ZN5Stage5clearEv+0x44>
		for(int j = 0; j < 320; j++){
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000806:	da0e      	bge.n	8000826 <_ZN5Stage5clearEv+0x3c>
			p[i][j] = 0;
 8000808:	6879      	ldr	r1, [r7, #4]
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	4613      	mov	r3, r2
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	4413      	add	r3, r2
 8000812:	019b      	lsls	r3, r3, #6
 8000814:	18ca      	adds	r2, r1, r3
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	4413      	add	r3, r2
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 320; j++){
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	3301      	adds	r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	e7ec      	b.n	8000800 <_ZN5Stage5clearEv+0x16>
	for(int i = 0; i < 240; i++){
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	3301      	adds	r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	e7e3      	b.n	80007f6 <_ZN5Stage5clearEv+0xc>
		}
	}
}
 800082e:	bf00      	nop
 8000830:	4618      	mov	r0, r3
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <_ZN5Stage8sendDataEv>:


void Stage::sendData()
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	//printf("c\r\n");
	for(int i=0; i<240;i++)
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2bef      	cmp	r3, #239	; 0xef
 800084c:	dc25      	bgt.n	800089a <_ZN5Stage8sendDataEv+0x5e>
		for(int j=0; j<320; j++)
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000858:	da1b      	bge.n	8000892 <_ZN5Stage8sendDataEv+0x56>
		{
			if(p[i][j]==1)
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	68fa      	ldr	r2, [r7, #12]
 800085e:	4613      	mov	r3, r2
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	4413      	add	r3, r2
 8000864:	019b      	lsls	r3, r3, #6
 8000866:	18ca      	adds	r2, r1, r3
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	4413      	add	r3, r2
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d00b      	beq.n	800088a <_ZN5Stage8sendDataEv+0x4e>
			{
				  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000872:	f04f 30ff 	mov.w	r0, #4294967295
 8000876:	f001 fd29 	bl	80022cc <BSP_LCD_SetTextColor>
				  BSP_LCD_DrawRect(i,j,1,1);
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	b298      	uxth	r0, r3
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	b299      	uxth	r1, r3
 8000882:	2301      	movs	r3, #1
 8000884:	2201      	movs	r2, #1
 8000886:	f001 fdfb 	bl	8002480 <BSP_LCD_DrawRect>
		for(int j=0; j<320; j++)
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	3301      	adds	r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	e7df      	b.n	8000852 <_ZN5Stage8sendDataEv+0x16>
	for(int i=0; i<240;i++)
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	3301      	adds	r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	e7d6      	b.n	8000848 <_ZN5Stage8sendDataEv+0xc>
				  //printf("p %d %d\r\n",i,j);
			}
		}
	//printf("k\r\n");
}
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <_ZN8StageObjC1Ev>:
 *      Author: michal
 */

#include <StageObj.h>

StageObj::StageObj()
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b087      	sub	sp, #28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	335c      	adds	r3, #92	; 0x5c
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 f8c0 	bl	8000a36 <_ZNSt6vectorIiSaIiEEC1Ev>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	3368      	adds	r3, #104	; 0x68
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f8bb 	bl	8000a36 <_ZNSt6vectorIiSaIiEEC1Ev>
{
	this->x1 = -1;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f04f 32ff 	mov.w	r2, #4294967295
 80008c6:	625a      	str	r2, [r3, #36]	; 0x24
	this->x2 = -1;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f04f 32ff 	mov.w	r2, #4294967295
 80008ce:	629a      	str	r2, [r3, #40]	; 0x28
	this->x3 = -1;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f04f 32ff 	mov.w	r2, #4294967295
 80008d6:	62da      	str	r2, [r3, #44]	; 0x2c
	this->x4 = -1;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f04f 32ff 	mov.w	r2, #4294967295
 80008de:	631a      	str	r2, [r3, #48]	; 0x30

	this->y1 = -1;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f04f 32ff 	mov.w	r2, #4294967295
 80008e6:	639a      	str	r2, [r3, #56]	; 0x38
	this->y2 = -1;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f04f 32ff 	mov.w	r2, #4294967295
 80008ee:	63da      	str	r2, [r3, #60]	; 0x3c
	this->y3 = -1;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f04f 32ff 	mov.w	r2, #4294967295
 80008f6:	641a      	str	r2, [r3, #64]	; 0x40
	this->y4 = -1;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f04f 32ff 	mov.w	r2, #4294967295
 80008fe:	645a      	str	r2, [r3, #68]	; 0x44

	this->r1 = 0;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
	this->r2 = 0;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2200      	movs	r2, #0
 800090a:	605a      	str	r2, [r3, #4]
	this->w1 = 0;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
	this->w2 = 0;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
	this->l1 = 0;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2200      	movs	r2, #0
 800091c:	615a      	str	r2, [r3, #20]
	this->l2 = 0;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]

	this->rb = 25;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2219      	movs	r2, #25
 8000928:	609a      	str	r2, [r3, #8]
	this->xb = 100;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2264      	movs	r2, #100	; 0x64
 800092e:	635a      	str	r2, [r3, #52]	; 0x34
	this->yb = 100;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2264      	movs	r2, #100	; 0x64
 8000934:	649a      	str	r2, [r3, #72]	; 0x48
	this->vxb = 1;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2201      	movs	r2, #1
 800093a:	61da      	str	r2, [r3, #28]
	this->vyb = 1;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2201      	movs	r2, #1
 8000940:	621a      	str	r2, [r3, #32]

	this->x_axis = {1,0};
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8000948:	4a17      	ldr	r2, [pc, #92]	; (80009a8 <_ZN8StageObjC1Ev+0x104>)
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000952:	e883 0003 	stmia.w	r3, {r0, r1}
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800095e:	4620      	mov	r0, r4
 8000960:	f000 f894 	bl	8000a8c <_ZNSt6vectorIiSaIiEEaSESt16initializer_listIiE>
	this->y_axis = {0,1};
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800096a:	4a10      	ldr	r2, [pc, #64]	; (80009ac <_ZN8StageObjC1Ev+0x108>)
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000974:	e883 0003 	stmia.w	r3, {r0, r1}
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000980:	4620      	mov	r0, r4
 8000982:	f000 f883 	bl	8000a8c <_ZNSt6vectorIiSaIiEEaSESt16initializer_listIiE>

	this->rw1 = 0;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	64da      	str	r2, [r3, #76]	; 0x4c
	this->rw2 = 0;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2200      	movs	r2, #0
 8000990:	651a      	str	r2, [r3, #80]	; 0x50
	this->rw3 = 0;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2200      	movs	r2, #0
 8000996:	655a      	str	r2, [r3, #84]	; 0x54
	this->rw4 = 0;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	659a      	str	r2, [r3, #88]	; 0x58



}
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4618      	mov	r0, r3
 80009a2:	371c      	adds	r7, #28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd90      	pop	{r4, r7, pc}
 80009a8:	0800782c 	.word	0x0800782c
 80009ac:	08007834 	.word	0x08007834

080009b0 <_ZN8StageObj7initFigEv>:

bool StageObj::initFig()
{
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	this->cir1 = new Circle(this->r1);
 80009b8:	2004      	movs	r0, #4
 80009ba:	f006 fdab 	bl	8007514 <_Znwj>
 80009be:	4603      	mov	r3, r0
 80009c0:	461c      	mov	r4, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4619      	mov	r1, r3
 80009c8:	4620      	mov	r0, r4
 80009ca:	f7ff fd8f 	bl	80004ec <_ZN6CircleC1Ei>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	675c      	str	r4, [r3, #116]	; 0x74
	this->cir2 = new Circle(this->r2);
 80009d2:	2004      	movs	r0, #4
 80009d4:	f006 fd9e 	bl	8007514 <_Znwj>
 80009d8:	4603      	mov	r3, r0
 80009da:	461c      	mov	r4, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	4619      	mov	r1, r3
 80009e2:	4620      	mov	r0, r4
 80009e4:	f7ff fd82 	bl	80004ec <_ZN6CircleC1Ei>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	679c      	str	r4, [r3, #120]	; 0x78
	this->rec1 = new Rectangle(this->w1, this->l1);
 80009ec:	2008      	movs	r0, #8
 80009ee:	f006 fd91 	bl	8007514 <_Znwj>
 80009f2:	4603      	mov	r3, r0
 80009f4:	461c      	mov	r4, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	68d9      	ldr	r1, [r3, #12]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	461a      	mov	r2, r3
 8000a00:	4620      	mov	r0, r4
 8000a02:	f7ff fedf 	bl	80007c4 <_ZN9RectangleC1Eii>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
	this->rec2 = new Rectangle(this->w2, this->l2);
 8000a0c:	2008      	movs	r0, #8
 8000a0e:	f006 fd81 	bl	8007514 <_Znwj>
 8000a12:	4603      	mov	r3, r0
 8000a14:	461c      	mov	r4, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6919      	ldr	r1, [r3, #16]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4620      	mov	r0, r4
 8000a22:	f7ff fecf 	bl	80007c4 <_ZN9RectangleC1Eii>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
}
 8000a2c:	bf00      	nop
 8000a2e:	4618      	mov	r0, r3
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd90      	pop	{r4, r7, pc}

08000a36 <_ZNSt6vectorIiSaIiEEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 f83e 	bl	8000ac2 <_ZNSt12_Vector_baseIiSaIiEEC1Ev>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <_ZNKSt16initializer_listIiE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <_ZNKSt16initializer_listIiE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff ffed 	bl	8000a50 <_ZNKSt16initializer_listIiE5beginEv>
 8000a76:	4604      	mov	r4, r0
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f000 f848 	bl	8000b0e <_ZNKSt16initializer_listIiE4sizeEv>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4423      	add	r3, r4
 8000a84:	4618      	mov	r0, r3
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd90      	pop	{r4, r7, pc}

08000a8c <_ZNSt6vectorIiSaIiEEaSESt16initializer_listIiE>:
       *  Note that the assignment completely changes the %vector and
       *  that the resulting %vector's size is the same as the number
       *  of elements assigned.
       */
      vector&
      operator=(initializer_list<value_type> __l)
 8000a8c:	b5b0      	push	{r4, r5, r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	e883 0006 	stmia.w	r3, {r1, r2}
      {
	this->_M_assign_aux(__l.begin(), __l.end(),
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ffd7 	bl	8000a50 <_ZNKSt16initializer_listIiE5beginEv>
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ffde 	bl	8000a68 <_ZNKSt16initializer_listIiE3endEv>
 8000aac:	4602      	mov	r2, r0
 8000aae:	462b      	mov	r3, r5
 8000ab0:	4621      	mov	r1, r4
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	f000 f837 	bl	8000b26 <_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag>
			    random_access_iterator_tag());
	return *this;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
      }
 8000aba:	4618      	mov	r0, r3
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bdb0      	pop	{r4, r5, r7, pc}

08000ac2 <_ZNSt12_Vector_baseIiSaIiEEC1Ev>:
      _Vector_base()
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 f8b4 	bl	8000c3a <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1Ev>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b084      	sub	sp, #16
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	60f8      	str	r0, [r7, #12]
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000afe:	68b9      	ldr	r1, [r7, #8]
 8000b00:	68f8      	ldr	r0, [r7, #12]
 8000b02:	f000 f8c2 	bl	8000c8a <_ZSt8_DestroyIPiEvT_S1_>
    }
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <_ZNKSt16initializer_listIiE4sizeEv>:
      size() const noexcept { return _M_len; }
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag>:
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
 8000b26:	b5b0      	push	{r4, r5, r7, lr}
 8000b28:	b088      	sub	sp, #32
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
 8000b32:	703b      	strb	r3, [r7, #0]
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);
 8000b34:	6879      	ldr	r1, [r7, #4]
 8000b36:	68b8      	ldr	r0, [r7, #8]
 8000b38:	f000 f8be 	bl	8000cb8 <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	61fb      	str	r3, [r7, #28]

	if (__len > capacity())
 8000b40:	68f8      	ldr	r0, [r7, #12]
 8000b42:	f000 f8cd 	bl	8000ce0 <_ZNKSt6vectorIiSaIiEE8capacityEv>
 8000b46:	4602      	mov	r2, r0
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	bf8c      	ite	hi
 8000b4e:	2301      	movhi	r3, #1
 8000b50:	2300      	movls	r3, #0
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d030      	beq.n	8000bba <_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag+0x94>
	  {
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	69f9      	ldr	r1, [r7, #28]
 8000b5e:	68f8      	ldr	r0, [r7, #12]
 8000b60:	f000 f8cf 	bl	8000d02 <_ZNSt6vectorIiSaIiEE20_M_allocate_and_copyIPKiEEPijT_S6_>
 8000b64:	61b8      	str	r0, [r7, #24]
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681c      	ldr	r4, [r3, #0]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	685d      	ldr	r5, [r3, #4]
			  _M_get_Tp_allocator());
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ffb3 	bl	8000adc <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8000b76:	4603      	mov	r3, r0
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	f7ff ffb8 	bl	8000af2 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>
	    _M_deallocate(this->_M_impl._M_start,
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	6819      	ldr	r1, [r3, #0]
			  this->_M_impl._M_end_of_storage
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	689b      	ldr	r3, [r3, #8]
			  - this->_M_impl._M_start);
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	109b      	asrs	r3, r3, #2
	    _M_deallocate(this->_M_impl._M_start,
 8000b96:	461a      	mov	r2, r3
 8000b98:	f000 f864 	bl	8000c64 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>
	    this->_M_impl._M_start = __tmp;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	441a      	add	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	605a      	str	r2, [r3, #4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	609a      	str	r2, [r3, #8]
	    this->_M_impl._M_finish =
	      std::__uninitialized_copy_a(__mid, __last,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	  }
      }
 8000bb8:	e03b      	b.n	8000c32 <_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag+0x10c>
	else if (size() >= __len)
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f000 f8bd 	bl	8000d3a <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	bf94      	ite	ls
 8000bc8:	2301      	movls	r3, #1
 8000bca:	2300      	movhi	r3, #0
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d00c      	beq.n	8000bec <_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag+0xc6>
	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	6879      	ldr	r1, [r7, #4]
 8000bda:	68b8      	ldr	r0, [r7, #8]
 8000bdc:	f000 f8d6 	bl	8000d8c <_ZSt4copyIPKiPiET0_T_S4_S3_>
 8000be0:	4603      	mov	r3, r0
 8000be2:	4619      	mov	r1, r3
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	f000 f8b9 	bl	8000d5c <_ZNSt6vectorIiSaIiEE15_M_erase_at_endEPi>
      }
 8000bea:	e022      	b.n	8000c32 <_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag+0x10c>
	    _ForwardIterator __mid = __first;
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	617b      	str	r3, [r7, #20]
	    std::advance(__mid, size());
 8000bf0:	68f8      	ldr	r0, [r7, #12]
 8000bf2:	f000 f8a2 	bl	8000d3a <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f8dc 	bl	8000dbc <_ZSt7advanceIPKijEvRT_T0_>
	    std::copy(__first, __mid, this->_M_impl._M_start);
 8000c04:	6979      	ldr	r1, [r7, #20]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68b8      	ldr	r0, [r7, #8]
 8000c0e:	f000 f8bd 	bl	8000d8c <_ZSt4copyIPKiPiET0_T_S4_S3_>
	      std::__uninitialized_copy_a(__mid, __last,
 8000c12:	697c      	ldr	r4, [r7, #20]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	685d      	ldr	r5, [r3, #4]
					  _M_get_Tp_allocator());
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff5e 	bl	8000adc <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8000c20:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__mid, __last,
 8000c22:	462a      	mov	r2, r5
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	4620      	mov	r0, r4
 8000c28:	f000 f8db 	bl	8000de2 <_ZSt22__uninitialized_copy_aIPKiPiiET0_T_S4_S3_RSaIT1_E>
 8000c2c:	4602      	mov	r2, r0
	    this->_M_impl._M_finish =
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	605a      	str	r2, [r3, #4]
      }
 8000c32:	bf00      	nop
 8000c34:	3720      	adds	r7, #32
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bdb0      	pop	{r4, r5, r7, pc}

08000c3a <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1Ev>:
	_Vector_impl()
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f000 f8de 	bl	8000e04 <_ZNSaIiEC1Ev>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2200      	movs	r2, #0
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
	{ }
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>:
      _M_deallocate(pointer __p, size_t __n)
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
	if (__p)
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d005      	beq.n	8000c82 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	68b9      	ldr	r1, [r7, #8]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 f8cd 	bl	8000e1c <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>
      }
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_ZSt8_DestroyIPiEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8000c94:	6839      	ldr	r1, [r7, #0]
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f000 f8cf 	bl	8000e3a <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>
    }
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8000cb8:	b5b0      	push	{r4, r5, r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8000cc2:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff ffec 	bl	8000ca4 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
 8000ccc:	462a      	mov	r2, r5
 8000cce:	6839      	ldr	r1, [r7, #0]
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	f000 f8bd 	bl	8000e50 <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8000cd6:	4603      	mov	r3, r0
    }
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bdb0      	pop	{r4, r5, r7, pc}

08000ce0 <_ZNKSt6vectorIiSaIiEE8capacityEv>:
      /**
       *  Returns the total number of elements that the %vector can
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689b      	ldr	r3, [r3, #8]
			 - this->_M_impl._M_start); }
 8000cec:	461a      	mov	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	109b      	asrs	r3, r3, #2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <_ZNSt6vectorIiSaIiEE20_M_allocate_and_copyIPKiEEPijT_S6_>:
       *  Memory expansion handler.  Uses the member allocation function to
       *  obtain @a n bytes of memory, and then copies [first,last) into it.
       */
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	60f8      	str	r0, [r7, #12]
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
 8000d0e:	603b      	str	r3, [r7, #0]
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	68b9      	ldr	r1, [r7, #8]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 f8ab 	bl	8000e70 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>
 8000d1a:	6178      	str	r0, [r7, #20]
	  __try
	    {
	      std::__uninitialized_copy_a(__first, __last, __result,
					  _M_get_Tp_allocator());
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fedc 	bl	8000adc <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8000d24:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	6839      	ldr	r1, [r7, #0]
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f000 f859 	bl	8000de2 <_ZSt22__uninitialized_copy_aIPKiPiiET0_T_S4_S3_RSaIT1_E>
	      return __result;
 8000d30:	697b      	ldr	r3, [r7, #20]
	  __catch(...)
	    {
	      _M_deallocate(__result, __n);
	      __throw_exception_again;
	    }
	}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <_ZNKSt6vectorIiSaIiEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	461a      	mov	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	109b      	asrs	r3, r3, #2
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <_ZNSt6vectorIiSaIiEE15_M_erase_at_endEPi>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685c      	ldr	r4, [r3, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff feb5 	bl	8000adc <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8000d72:	4603      	mov	r3, r0
 8000d74:	461a      	mov	r2, r3
 8000d76:	4621      	mov	r1, r4
 8000d78:	6838      	ldr	r0, [r7, #0]
 8000d7a:	f7ff feba 	bl	8000af2 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	683a      	ldr	r2, [r7, #0]
 8000d82:	605a      	str	r2, [r3, #4]
      }
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd90      	pop	{r4, r7, pc}

08000d8c <_ZSt4copyIPKiPiET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8000d8c:	b590      	push	{r4, r7, lr}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f000 f87d 	bl	8000e98 <_ZSt12__miter_baseIPKiET_S2_>
 8000d9e:	4604      	mov	r4, r0
 8000da0:	68b8      	ldr	r0, [r7, #8]
 8000da2:	f000 f879 	bl	8000e98 <_ZSt12__miter_baseIPKiET_S2_>
 8000da6:	4603      	mov	r3, r0
	       __result));
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	4619      	mov	r1, r3
 8000dac:	4620      	mov	r0, r4
 8000dae:	f000 f87e 	bl	8000eae <_ZSt14__copy_move_a2ILb0EPKiPiET1_T0_S4_S3_>
 8000db2:	4603      	mov	r3, r0
    }
 8000db4:	4618      	mov	r0, r3
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd90      	pop	{r4, r7, pc}

08000dbc <_ZSt7advanceIPKijEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ff6a 	bl	8000ca4 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
 8000dd0:	4622      	mov	r2, r4
 8000dd2:	68f9      	ldr	r1, [r7, #12]
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f000 f886 	bl	8000ee6 <_ZSt9__advanceIPKiiEvRT_T0_St26random_access_iterator_tag>
    }
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd90      	pop	{r4, r7, pc}

08000de2 <_ZSt22__uninitialized_copy_aIPKiPiiET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b084      	sub	sp, #16
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	60f8      	str	r0, [r7, #12]
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	68b9      	ldr	r1, [r7, #8]
 8000df4:	68f8      	ldr	r0, [r7, #12]
 8000df6:	f000 f889 	bl	8000f0c <_ZSt18uninitialized_copyIPKiPiET0_T_S4_S3_>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <_ZNSaIiEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f000 f88f 	bl	8000f30 <_ZN9__gnu_cxx13new_allocatorIiEC1Ev>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	68b9      	ldr	r1, [r7, #8]
 8000e2c:	68f8      	ldr	r0, [r7, #12]
 8000e2e:	f000 f88a 	bl	8000f46 <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPij>
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	6039      	str	r1, [r7, #0]
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8000e5c:	68ba      	ldr	r2, [r7, #8]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	109b      	asrs	r3, r3, #2
    }
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d006      	beq.n	8000e8e <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x1e>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6839      	ldr	r1, [r7, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 f86b 	bl	8000f60 <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	e000      	b.n	8000e90 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x20>
 8000e8e:	2300      	movs	r3, #0
      }
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <_ZSt12__miter_baseIPKiET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <_ZSt14__copy_move_a2ILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8000eae:	b5b0      	push	{r4, r5, r7, lr}
 8000eb0:	b084      	sub	sp, #16
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	60f8      	str	r0, [r7, #12]
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8000eba:	68f8      	ldr	r0, [r7, #12]
 8000ebc:	f000 f85f 	bl	8000f7e <_ZSt12__niter_baseIPKiET_S2_>
 8000ec0:	4604      	mov	r4, r0
 8000ec2:	68b8      	ldr	r0, [r7, #8]
 8000ec4:	f000 f85b 	bl	8000f7e <_ZSt12__niter_baseIPKiET_S2_>
 8000ec8:	4605      	mov	r5, r0
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f000 f862 	bl	8000f94 <_ZSt12__niter_baseIPiET_S1_>
 8000ed0:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4629      	mov	r1, r5
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	f000 f867 	bl	8000faa <_ZSt13__copy_move_aILb0EPKiPiET1_T0_S4_S3_>
 8000edc:	4603      	mov	r3, r0
    }
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bdb0      	pop	{r4, r5, r7, pc}

08000ee6 <_ZSt9__advanceIPKiiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8000ee6:	b480      	push	{r7}
 8000ee8:	b085      	sub	sp, #20
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	60f8      	str	r0, [r7, #12]
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	713a      	strb	r2, [r7, #4]
      __i += __n;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	441a      	add	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	601a      	str	r2, [r3, #0]
    }
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <_ZSt18uninitialized_copyIPKiPiET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	68b9      	ldr	r1, [r7, #8]
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f000 f854 	bl	8000fce <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKiPiEET0_T_S6_S5_>
 8000f26:	4603      	mov	r3, r0
    }
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_ZN9__gnu_cxx13new_allocatorIiEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPij>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b084      	sub	sp, #16
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8000f52:	68b8      	ldr	r0, [r7, #8]
 8000f54:	f006 faf8 	bl	8007548 <_ZdlPv>
      }
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	6839      	ldr	r1, [r7, #0]
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 f83d 	bl	8000fee <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <_ZSt12__niter_baseIPKiET_S2_>:
    __niter_base(_Iterator __it)
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <_ZSt12__niter_baseIPiET_S1_>:
    __niter_base(_Iterator __it)
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <_ZSt13__copy_move_aILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f000 f833 	bl	800102a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
 8000fc4:	4603      	mov	r3, r0
    }
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKiPiEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68b9      	ldr	r1, [r7, #8]
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f7ff fed4 	bl	8000d8c <_ZSt4copyIPKiPiET0_T_S4_S3_>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b084      	sub	sp, #16
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f000 f832 	bl	8001064 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>
 8001000:	4602      	mov	r2, r0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	4293      	cmp	r3, r2
 8001006:	bf8c      	ite	hi
 8001008:	2301      	movhi	r3, #1
 800100a:	2300      	movls	r3, #0
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001012:	f006 fa9b 	bl	800754c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4618      	mov	r0, r3
 800101c:	f006 fa7a 	bl	8007514 <_Znwj>
 8001020:	4603      	mov	r3, r0
      }
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	60f8      	str	r0, [r7, #12]
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	109b      	asrs	r3, r3, #2
 800103e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d006      	beq.n	8001054 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	461a      	mov	r2, r3
 800104c:	68f9      	ldr	r1, [r7, #12]
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f006 fac0 	bl	80075d4 <memmove>
	  return __result + _Num;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	4413      	add	r3, r2
	}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800106c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <_Z7circlesiP5StageP8StageObj>:
 */

#include "animacja5.h"

void circles(int step, Stage* stage, StageObj* stgobj)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
	int x = 120, y= 160;
 8001088:	2378      	movs	r3, #120	; 0x78
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	23a0      	movs	r3, #160	; 0xa0
 800108e:	613b      	str	r3, [r7, #16]

	if(step%20 == 0 && stgobj->rw1 == 0){
 8001090:	68f9      	ldr	r1, [r7, #12]
 8001092:	4b85      	ldr	r3, [pc, #532]	; (80012a8 <_Z7circlesiP5StageP8StageObj+0x22c>)
 8001094:	fb83 2301 	smull	r2, r3, r3, r1
 8001098:	10da      	asrs	r2, r3, #3
 800109a:	17cb      	asrs	r3, r1, #31
 800109c:	1ad2      	subs	r2, r2, r3
 800109e:	4613      	mov	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	1aca      	subs	r2, r1, r3
 80010a8:	2a00      	cmp	r2, #0
 80010aa:	d106      	bne.n	80010ba <_Z7circlesiP5StageP8StageObj+0x3e>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d102      	bne.n	80010ba <_Z7circlesiP5StageP8StageObj+0x3e>
		stgobj->rw1 = 1;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2201      	movs	r2, #1
 80010b8:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	if(step%40 == 0 && stgobj->rw2 == 0){
 80010ba:	68f9      	ldr	r1, [r7, #12]
 80010bc:	4b7a      	ldr	r3, [pc, #488]	; (80012a8 <_Z7circlesiP5StageP8StageObj+0x22c>)
 80010be:	fb83 2301 	smull	r2, r3, r3, r1
 80010c2:	111a      	asrs	r2, r3, #4
 80010c4:	17cb      	asrs	r3, r1, #31
 80010c6:	1ad2      	subs	r2, r2, r3
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	1aca      	subs	r2, r1, r3
 80010d2:	2a00      	cmp	r2, #0
 80010d4:	d106      	bne.n	80010e4 <_Z7circlesiP5StageP8StageObj+0x68>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d102      	bne.n	80010e4 <_Z7circlesiP5StageP8StageObj+0x68>
		stgobj->rw2 = 1;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2201      	movs	r2, #1
 80010e2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	if(step%80 == 0 && stgobj->rw3 == 0){
 80010e4:	68f9      	ldr	r1, [r7, #12]
 80010e6:	4b70      	ldr	r3, [pc, #448]	; (80012a8 <_Z7circlesiP5StageP8StageObj+0x22c>)
 80010e8:	fb83 2301 	smull	r2, r3, r3, r1
 80010ec:	115a      	asrs	r2, r3, #5
 80010ee:	17cb      	asrs	r3, r1, #31
 80010f0:	1ad2      	subs	r2, r2, r3
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	011b      	lsls	r3, r3, #4
 80010fa:	1aca      	subs	r2, r1, r3
 80010fc:	2a00      	cmp	r2, #0
 80010fe:	d106      	bne.n	800110e <_Z7circlesiP5StageP8StageObj+0x92>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001104:	2b00      	cmp	r3, #0
 8001106:	d102      	bne.n	800110e <_Z7circlesiP5StageP8StageObj+0x92>
		stgobj->rw3 = 1;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2201      	movs	r2, #1
 800110c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	if(step%100 == 0 && stgobj->rw4 == 0){
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	4b66      	ldr	r3, [pc, #408]	; (80012ac <_Z7circlesiP5StageP8StageObj+0x230>)
 8001112:	fb83 1302 	smull	r1, r3, r3, r2
 8001116:	1159      	asrs	r1, r3, #5
 8001118:	17d3      	asrs	r3, r2, #31
 800111a:	1acb      	subs	r3, r1, r3
 800111c:	2164      	movs	r1, #100	; 0x64
 800111e:	fb01 f303 	mul.w	r3, r1, r3
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d106      	bne.n	8001136 <_Z7circlesiP5StageP8StageObj+0xba>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112c:	2b00      	cmp	r3, #0
 800112e:	d102      	bne.n	8001136 <_Z7circlesiP5StageP8StageObj+0xba>
		stgobj->rw4 = 1;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2201      	movs	r2, #1
 8001134:	659a      	str	r2, [r3, #88]	; 0x58
	}
	stgobj->wave1 = new Circle(stgobj->rw1);
 8001136:	2004      	movs	r0, #4
 8001138:	f006 f9ec 	bl	8007514 <_Znwj>
 800113c:	4603      	mov	r3, r0
 800113e:	461c      	mov	r4, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001144:	4619      	mov	r1, r3
 8001146:	4620      	mov	r0, r4
 8001148:	f7ff f9d0 	bl	80004ec <_ZN6CircleC1Ei>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	stgobj->wave2 = new Circle(stgobj->rw2);
 8001152:	2004      	movs	r0, #4
 8001154:	f006 f9de 	bl	8007514 <_Znwj>
 8001158:	4603      	mov	r3, r0
 800115a:	461c      	mov	r4, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001160:	4619      	mov	r1, r3
 8001162:	4620      	mov	r0, r4
 8001164:	f7ff f9c2 	bl	80004ec <_ZN6CircleC1Ei>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	stgobj->wave3 = new Circle(stgobj->rw3);
 800116e:	2004      	movs	r0, #4
 8001170:	f006 f9d0 	bl	8007514 <_Znwj>
 8001174:	4603      	mov	r3, r0
 8001176:	461c      	mov	r4, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800117c:	4619      	mov	r1, r3
 800117e:	4620      	mov	r0, r4
 8001180:	f7ff f9b4 	bl	80004ec <_ZN6CircleC1Ei>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
	stgobj->wave4 = new Circle(stgobj->rw4);
 800118a:	2004      	movs	r0, #4
 800118c:	f006 f9c2 	bl	8007514 <_Znwj>
 8001190:	4603      	mov	r3, r0
 8001192:	461c      	mov	r4, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001198:	4619      	mov	r1, r3
 800119a:	4620      	mov	r0, r4
 800119c:	f7ff f9a6 	bl	80004ec <_ZN6CircleC1Ei>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c

	stgobj->wave1->drawCircle(x, y, stage);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	6979      	ldr	r1, [r7, #20]
 80011b2:	f7ff f9aa 	bl	800050a <_ZN6Circle10drawCircleEiiP5Stage>
	stgobj->wave2->drawCircle(x, y, stage);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	6979      	ldr	r1, [r7, #20]
 80011c2:	f7ff f9a2 	bl	800050a <_ZN6Circle10drawCircleEiiP5Stage>
	stgobj->wave3->drawCircle(x, y, stage);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	6979      	ldr	r1, [r7, #20]
 80011d2:	f7ff f99a 	bl	800050a <_ZN6Circle10drawCircleEiiP5Stage>
	stgobj->wave4->drawCircle(x, y, stage);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	6979      	ldr	r1, [r7, #20]
 80011e2:	f7ff f992 	bl	800050a <_ZN6Circle10drawCircleEiiP5Stage>


	if( stgobj->rw1 != 0){
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d004      	beq.n	80011f8 <_Z7circlesiP5StageP8StageObj+0x17c>
		stgobj->rw1 += 2;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	1c9a      	adds	r2, r3, #2
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	if( stgobj->rw2 != 0){
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d004      	beq.n	800120a <_Z7circlesiP5StageP8StageObj+0x18e>
		stgobj->rw2 += 2;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001204:	1c9a      	adds	r2, r3, #2
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	651a      	str	r2, [r3, #80]	; 0x50
	}

	if( stgobj->rw3 != 0){
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800120e:	2b00      	cmp	r3, #0
 8001210:	d004      	beq.n	800121c <_Z7circlesiP5StageP8StageObj+0x1a0>
		stgobj->rw3 += 2;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001216:	1c9a      	adds	r2, r3, #2
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if( stgobj->rw4 != 0){
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001220:	2b00      	cmp	r3, #0
 8001222:	d004      	beq.n	800122e <_Z7circlesiP5StageP8StageObj+0x1b2>
		stgobj->rw4 += 2;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001228:	1c9a      	adds	r2, r3, #2
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	659a      	str	r2, [r3, #88]	; 0x58
	}

	if( stgobj->rw1 > 115){
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	2b73      	cmp	r3, #115	; 0x73
 8001234:	dd02      	ble.n	800123c <_Z7circlesiP5StageP8StageObj+0x1c0>
		stgobj->rw1 = 0;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	if( stgobj->rw2 > 115){
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001240:	2b73      	cmp	r3, #115	; 0x73
 8001242:	dd02      	ble.n	800124a <_Z7circlesiP5StageP8StageObj+0x1ce>
		stgobj->rw2 = 0;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	651a      	str	r2, [r3, #80]	; 0x50
	}

	if( stgobj->rw3 > 115){
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800124e:	2b73      	cmp	r3, #115	; 0x73
 8001250:	dd02      	ble.n	8001258 <_Z7circlesiP5StageP8StageObj+0x1dc>
		stgobj->rw3 = 0;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if( stgobj->rw4 > 115){
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125c:	2b73      	cmp	r3, #115	; 0x73
 800125e:	dd02      	ble.n	8001266 <_Z7circlesiP5StageP8StageObj+0x1ea>
		stgobj->rw4 = 0;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	659a      	str	r2, [r3, #88]	; 0x58
	}

	delete stgobj->wave1;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800126c:	2104      	movs	r1, #4
 800126e:	4618      	mov	r0, r3
 8001270:	f006 f94e 	bl	8007510 <_ZdlPvj>
	delete stgobj->wave2;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800127a:	2104      	movs	r1, #4
 800127c:	4618      	mov	r0, r3
 800127e:	f006 f947 	bl	8007510 <_ZdlPvj>
	delete stgobj->wave3;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001288:	2104      	movs	r1, #4
 800128a:	4618      	mov	r0, r3
 800128c:	f006 f940 	bl	8007510 <_ZdlPvj>
	delete stgobj->wave4;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001296:	2104      	movs	r1, #4
 8001298:	4618      	mov	r0, r3
 800129a:	f006 f939 	bl	8007510 <_ZdlPvj>
}
 800129e:	bf00      	nop
 80012a0:	371c      	adds	r7, #28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd90      	pop	{r4, r7, pc}
 80012a6:	bf00      	nop
 80012a8:	66666667 	.word	0x66666667
 80012ac:	51eb851f 	.word	0x51eb851f

080012b0 <ili9341_Init>:
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	f000 fe1a 	bl	8001eec <LCD_IO_Init>
 80012b8:	20ca      	movs	r0, #202	; 0xca
 80012ba:	f000 f95d 	bl	8001578 <ili9341_WriteReg>
 80012be:	20c3      	movs	r0, #195	; 0xc3
 80012c0:	f000 f967 	bl	8001592 <ili9341_WriteData>
 80012c4:	2008      	movs	r0, #8
 80012c6:	f000 f964 	bl	8001592 <ili9341_WriteData>
 80012ca:	2050      	movs	r0, #80	; 0x50
 80012cc:	f000 f961 	bl	8001592 <ili9341_WriteData>
 80012d0:	20cf      	movs	r0, #207	; 0xcf
 80012d2:	f000 f951 	bl	8001578 <ili9341_WriteReg>
 80012d6:	2000      	movs	r0, #0
 80012d8:	f000 f95b 	bl	8001592 <ili9341_WriteData>
 80012dc:	20c1      	movs	r0, #193	; 0xc1
 80012de:	f000 f958 	bl	8001592 <ili9341_WriteData>
 80012e2:	2030      	movs	r0, #48	; 0x30
 80012e4:	f000 f955 	bl	8001592 <ili9341_WriteData>
 80012e8:	20ed      	movs	r0, #237	; 0xed
 80012ea:	f000 f945 	bl	8001578 <ili9341_WriteReg>
 80012ee:	2064      	movs	r0, #100	; 0x64
 80012f0:	f000 f94f 	bl	8001592 <ili9341_WriteData>
 80012f4:	2003      	movs	r0, #3
 80012f6:	f000 f94c 	bl	8001592 <ili9341_WriteData>
 80012fa:	2012      	movs	r0, #18
 80012fc:	f000 f949 	bl	8001592 <ili9341_WriteData>
 8001300:	2081      	movs	r0, #129	; 0x81
 8001302:	f000 f946 	bl	8001592 <ili9341_WriteData>
 8001306:	20e8      	movs	r0, #232	; 0xe8
 8001308:	f000 f936 	bl	8001578 <ili9341_WriteReg>
 800130c:	2085      	movs	r0, #133	; 0x85
 800130e:	f000 f940 	bl	8001592 <ili9341_WriteData>
 8001312:	2000      	movs	r0, #0
 8001314:	f000 f93d 	bl	8001592 <ili9341_WriteData>
 8001318:	2078      	movs	r0, #120	; 0x78
 800131a:	f000 f93a 	bl	8001592 <ili9341_WriteData>
 800131e:	20cb      	movs	r0, #203	; 0xcb
 8001320:	f000 f92a 	bl	8001578 <ili9341_WriteReg>
 8001324:	2039      	movs	r0, #57	; 0x39
 8001326:	f000 f934 	bl	8001592 <ili9341_WriteData>
 800132a:	202c      	movs	r0, #44	; 0x2c
 800132c:	f000 f931 	bl	8001592 <ili9341_WriteData>
 8001330:	2000      	movs	r0, #0
 8001332:	f000 f92e 	bl	8001592 <ili9341_WriteData>
 8001336:	2034      	movs	r0, #52	; 0x34
 8001338:	f000 f92b 	bl	8001592 <ili9341_WriteData>
 800133c:	2002      	movs	r0, #2
 800133e:	f000 f928 	bl	8001592 <ili9341_WriteData>
 8001342:	20f7      	movs	r0, #247	; 0xf7
 8001344:	f000 f918 	bl	8001578 <ili9341_WriteReg>
 8001348:	2020      	movs	r0, #32
 800134a:	f000 f922 	bl	8001592 <ili9341_WriteData>
 800134e:	20ea      	movs	r0, #234	; 0xea
 8001350:	f000 f912 	bl	8001578 <ili9341_WriteReg>
 8001354:	2000      	movs	r0, #0
 8001356:	f000 f91c 	bl	8001592 <ili9341_WriteData>
 800135a:	2000      	movs	r0, #0
 800135c:	f000 f919 	bl	8001592 <ili9341_WriteData>
 8001360:	20b1      	movs	r0, #177	; 0xb1
 8001362:	f000 f909 	bl	8001578 <ili9341_WriteReg>
 8001366:	2000      	movs	r0, #0
 8001368:	f000 f913 	bl	8001592 <ili9341_WriteData>
 800136c:	201b      	movs	r0, #27
 800136e:	f000 f910 	bl	8001592 <ili9341_WriteData>
 8001372:	20b6      	movs	r0, #182	; 0xb6
 8001374:	f000 f900 	bl	8001578 <ili9341_WriteReg>
 8001378:	200a      	movs	r0, #10
 800137a:	f000 f90a 	bl	8001592 <ili9341_WriteData>
 800137e:	20a2      	movs	r0, #162	; 0xa2
 8001380:	f000 f907 	bl	8001592 <ili9341_WriteData>
 8001384:	20c0      	movs	r0, #192	; 0xc0
 8001386:	f000 f8f7 	bl	8001578 <ili9341_WriteReg>
 800138a:	2010      	movs	r0, #16
 800138c:	f000 f901 	bl	8001592 <ili9341_WriteData>
 8001390:	20c1      	movs	r0, #193	; 0xc1
 8001392:	f000 f8f1 	bl	8001578 <ili9341_WriteReg>
 8001396:	2010      	movs	r0, #16
 8001398:	f000 f8fb 	bl	8001592 <ili9341_WriteData>
 800139c:	20c5      	movs	r0, #197	; 0xc5
 800139e:	f000 f8eb 	bl	8001578 <ili9341_WriteReg>
 80013a2:	2045      	movs	r0, #69	; 0x45
 80013a4:	f000 f8f5 	bl	8001592 <ili9341_WriteData>
 80013a8:	2015      	movs	r0, #21
 80013aa:	f000 f8f2 	bl	8001592 <ili9341_WriteData>
 80013ae:	20c7      	movs	r0, #199	; 0xc7
 80013b0:	f000 f8e2 	bl	8001578 <ili9341_WriteReg>
 80013b4:	2090      	movs	r0, #144	; 0x90
 80013b6:	f000 f8ec 	bl	8001592 <ili9341_WriteData>
 80013ba:	2036      	movs	r0, #54	; 0x36
 80013bc:	f000 f8dc 	bl	8001578 <ili9341_WriteReg>
 80013c0:	20c8      	movs	r0, #200	; 0xc8
 80013c2:	f000 f8e6 	bl	8001592 <ili9341_WriteData>
 80013c6:	20f2      	movs	r0, #242	; 0xf2
 80013c8:	f000 f8d6 	bl	8001578 <ili9341_WriteReg>
 80013cc:	2000      	movs	r0, #0
 80013ce:	f000 f8e0 	bl	8001592 <ili9341_WriteData>
 80013d2:	20b0      	movs	r0, #176	; 0xb0
 80013d4:	f000 f8d0 	bl	8001578 <ili9341_WriteReg>
 80013d8:	20c2      	movs	r0, #194	; 0xc2
 80013da:	f000 f8da 	bl	8001592 <ili9341_WriteData>
 80013de:	20b6      	movs	r0, #182	; 0xb6
 80013e0:	f000 f8ca 	bl	8001578 <ili9341_WriteReg>
 80013e4:	200a      	movs	r0, #10
 80013e6:	f000 f8d4 	bl	8001592 <ili9341_WriteData>
 80013ea:	20a7      	movs	r0, #167	; 0xa7
 80013ec:	f000 f8d1 	bl	8001592 <ili9341_WriteData>
 80013f0:	2027      	movs	r0, #39	; 0x27
 80013f2:	f000 f8ce 	bl	8001592 <ili9341_WriteData>
 80013f6:	2004      	movs	r0, #4
 80013f8:	f000 f8cb 	bl	8001592 <ili9341_WriteData>
 80013fc:	202a      	movs	r0, #42	; 0x2a
 80013fe:	f000 f8bb 	bl	8001578 <ili9341_WriteReg>
 8001402:	2000      	movs	r0, #0
 8001404:	f000 f8c5 	bl	8001592 <ili9341_WriteData>
 8001408:	2000      	movs	r0, #0
 800140a:	f000 f8c2 	bl	8001592 <ili9341_WriteData>
 800140e:	2000      	movs	r0, #0
 8001410:	f000 f8bf 	bl	8001592 <ili9341_WriteData>
 8001414:	20ef      	movs	r0, #239	; 0xef
 8001416:	f000 f8bc 	bl	8001592 <ili9341_WriteData>
 800141a:	202b      	movs	r0, #43	; 0x2b
 800141c:	f000 f8ac 	bl	8001578 <ili9341_WriteReg>
 8001420:	2000      	movs	r0, #0
 8001422:	f000 f8b6 	bl	8001592 <ili9341_WriteData>
 8001426:	2000      	movs	r0, #0
 8001428:	f000 f8b3 	bl	8001592 <ili9341_WriteData>
 800142c:	2001      	movs	r0, #1
 800142e:	f000 f8b0 	bl	8001592 <ili9341_WriteData>
 8001432:	203f      	movs	r0, #63	; 0x3f
 8001434:	f000 f8ad 	bl	8001592 <ili9341_WriteData>
 8001438:	20f6      	movs	r0, #246	; 0xf6
 800143a:	f000 f89d 	bl	8001578 <ili9341_WriteReg>
 800143e:	2001      	movs	r0, #1
 8001440:	f000 f8a7 	bl	8001592 <ili9341_WriteData>
 8001444:	2000      	movs	r0, #0
 8001446:	f000 f8a4 	bl	8001592 <ili9341_WriteData>
 800144a:	2006      	movs	r0, #6
 800144c:	f000 f8a1 	bl	8001592 <ili9341_WriteData>
 8001450:	202c      	movs	r0, #44	; 0x2c
 8001452:	f000 f891 	bl	8001578 <ili9341_WriteReg>
 8001456:	20c8      	movs	r0, #200	; 0xc8
 8001458:	f000 fe36 	bl	80020c8 <LCD_Delay>
 800145c:	2026      	movs	r0, #38	; 0x26
 800145e:	f000 f88b 	bl	8001578 <ili9341_WriteReg>
 8001462:	2001      	movs	r0, #1
 8001464:	f000 f895 	bl	8001592 <ili9341_WriteData>
 8001468:	20e0      	movs	r0, #224	; 0xe0
 800146a:	f000 f885 	bl	8001578 <ili9341_WriteReg>
 800146e:	200f      	movs	r0, #15
 8001470:	f000 f88f 	bl	8001592 <ili9341_WriteData>
 8001474:	2029      	movs	r0, #41	; 0x29
 8001476:	f000 f88c 	bl	8001592 <ili9341_WriteData>
 800147a:	2024      	movs	r0, #36	; 0x24
 800147c:	f000 f889 	bl	8001592 <ili9341_WriteData>
 8001480:	200c      	movs	r0, #12
 8001482:	f000 f886 	bl	8001592 <ili9341_WriteData>
 8001486:	200e      	movs	r0, #14
 8001488:	f000 f883 	bl	8001592 <ili9341_WriteData>
 800148c:	2009      	movs	r0, #9
 800148e:	f000 f880 	bl	8001592 <ili9341_WriteData>
 8001492:	204e      	movs	r0, #78	; 0x4e
 8001494:	f000 f87d 	bl	8001592 <ili9341_WriteData>
 8001498:	2078      	movs	r0, #120	; 0x78
 800149a:	f000 f87a 	bl	8001592 <ili9341_WriteData>
 800149e:	203c      	movs	r0, #60	; 0x3c
 80014a0:	f000 f877 	bl	8001592 <ili9341_WriteData>
 80014a4:	2009      	movs	r0, #9
 80014a6:	f000 f874 	bl	8001592 <ili9341_WriteData>
 80014aa:	2013      	movs	r0, #19
 80014ac:	f000 f871 	bl	8001592 <ili9341_WriteData>
 80014b0:	2005      	movs	r0, #5
 80014b2:	f000 f86e 	bl	8001592 <ili9341_WriteData>
 80014b6:	2017      	movs	r0, #23
 80014b8:	f000 f86b 	bl	8001592 <ili9341_WriteData>
 80014bc:	2011      	movs	r0, #17
 80014be:	f000 f868 	bl	8001592 <ili9341_WriteData>
 80014c2:	2000      	movs	r0, #0
 80014c4:	f000 f865 	bl	8001592 <ili9341_WriteData>
 80014c8:	20e1      	movs	r0, #225	; 0xe1
 80014ca:	f000 f855 	bl	8001578 <ili9341_WriteReg>
 80014ce:	2000      	movs	r0, #0
 80014d0:	f000 f85f 	bl	8001592 <ili9341_WriteData>
 80014d4:	2016      	movs	r0, #22
 80014d6:	f000 f85c 	bl	8001592 <ili9341_WriteData>
 80014da:	201b      	movs	r0, #27
 80014dc:	f000 f859 	bl	8001592 <ili9341_WriteData>
 80014e0:	2004      	movs	r0, #4
 80014e2:	f000 f856 	bl	8001592 <ili9341_WriteData>
 80014e6:	2011      	movs	r0, #17
 80014e8:	f000 f853 	bl	8001592 <ili9341_WriteData>
 80014ec:	2007      	movs	r0, #7
 80014ee:	f000 f850 	bl	8001592 <ili9341_WriteData>
 80014f2:	2031      	movs	r0, #49	; 0x31
 80014f4:	f000 f84d 	bl	8001592 <ili9341_WriteData>
 80014f8:	2033      	movs	r0, #51	; 0x33
 80014fa:	f000 f84a 	bl	8001592 <ili9341_WriteData>
 80014fe:	2042      	movs	r0, #66	; 0x42
 8001500:	f000 f847 	bl	8001592 <ili9341_WriteData>
 8001504:	2005      	movs	r0, #5
 8001506:	f000 f844 	bl	8001592 <ili9341_WriteData>
 800150a:	200c      	movs	r0, #12
 800150c:	f000 f841 	bl	8001592 <ili9341_WriteData>
 8001510:	200a      	movs	r0, #10
 8001512:	f000 f83e 	bl	8001592 <ili9341_WriteData>
 8001516:	2028      	movs	r0, #40	; 0x28
 8001518:	f000 f83b 	bl	8001592 <ili9341_WriteData>
 800151c:	202f      	movs	r0, #47	; 0x2f
 800151e:	f000 f838 	bl	8001592 <ili9341_WriteData>
 8001522:	200f      	movs	r0, #15
 8001524:	f000 f835 	bl	8001592 <ili9341_WriteData>
 8001528:	2011      	movs	r0, #17
 800152a:	f000 f825 	bl	8001578 <ili9341_WriteReg>
 800152e:	20c8      	movs	r0, #200	; 0xc8
 8001530:	f000 fdca 	bl	80020c8 <LCD_Delay>
 8001534:	2029      	movs	r0, #41	; 0x29
 8001536:	f000 f81f 	bl	8001578 <ili9341_WriteReg>
 800153a:	202c      	movs	r0, #44	; 0x2c
 800153c:	f000 f81c 	bl	8001578 <ili9341_WriteReg>
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <ili9341_ReadID>:
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
 8001548:	f000 fcd0 	bl	8001eec <LCD_IO_Init>
 800154c:	2103      	movs	r1, #3
 800154e:	20d3      	movs	r0, #211	; 0xd3
 8001550:	f000 f82c 	bl	80015ac <ili9341_ReadData>
 8001554:	4603      	mov	r3, r0
 8001556:	b29b      	uxth	r3, r3
 8001558:	4618      	mov	r0, r3
 800155a:	bd80      	pop	{r7, pc}

0800155c <ili9341_DisplayOn>:
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
 8001560:	2029      	movs	r0, #41	; 0x29
 8001562:	f000 f809 	bl	8001578 <ili9341_WriteReg>
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}

0800156a <ili9341_DisplayOff>:
 800156a:	b580      	push	{r7, lr}
 800156c:	af00      	add	r7, sp, #0
 800156e:	2028      	movs	r0, #40	; 0x28
 8001570:	f000 f802 	bl	8001578 <ili9341_WriteReg>
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}

08001578 <ili9341_WriteReg>:
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	4618      	mov	r0, r3
 8001586:	f000 fd4b 	bl	8002020 <LCD_IO_WriteReg>
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <ili9341_WriteData>:
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	80fb      	strh	r3, [r7, #6]
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 fd1c 	bl	8001fdc <LCD_IO_WriteData>
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <ili9341_ReadData>:
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	460a      	mov	r2, r1
 80015b6:	80fb      	strh	r3, [r7, #6]
 80015b8:	4613      	mov	r3, r2
 80015ba:	717b      	strb	r3, [r7, #5]
 80015bc:	797a      	ldrb	r2, [r7, #5]
 80015be:	88fb      	ldrh	r3, [r7, #6]
 80015c0:	4611      	mov	r1, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 fd4e 	bl	8002064 <LCD_IO_ReadData>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <ili9341_GetLcdPixelWidth>:
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	23f0      	movs	r3, #240	; 0xf0
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <ili9341_GetLcdPixelHeight>:
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	Stage* stage = new Stage;
 80015fa:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
 80015fe:	f005 ff89 	bl	8007514 <_Znwj>
 8001602:	4603      	mov	r3, r0
 8001604:	60fb      	str	r3, [r7, #12]
	StageObj* stgobj = new StageObj;
 8001606:	2098      	movs	r0, #152	; 0x98
 8001608:	f005 ff84 	bl	8007514 <_Znwj>
 800160c:	4603      	mov	r3, r0
 800160e:	461c      	mov	r4, r3
 8001610:	4620      	mov	r0, r4
 8001612:	f7ff f947 	bl	80008a4 <_ZN8StageObjC1Ev>
 8001616:	60bc      	str	r4, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8001618:	f001 fe3e 	bl	8003298 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800161c:	f000 f84c 	bl	80016b8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001620:	f000 fb30 	bl	8001c84 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8001624:	f000 faae 	bl	8001b84 <_ZL19MX_USART1_UART_Initv>
  MX_LTDC_Init();
 8001628:	f000 f972 	bl	8001910 <_ZL12MX_LTDC_Initv>
  MX_DMA2D_Init();
 800162c:	f000 f8e4 	bl	80017f8 <_ZL13MX_DMA2D_Initv>
  MX_I2C3_Init();
 8001630:	f000 f91e 	bl	8001870 <_ZL12MX_I2C3_Initv>
  MX_SPI5_Init();
 8001634:	f000 fa2a 	bl	8001a8c <_ZL12MX_SPI5_Initv>
  MX_MBEDTLS_Init();
 8001638:	f005 ff63 	bl	8007502 <MX_MBEDTLS_Init>
  MX_FMC_Init();
 800163c:	f000 fad0 	bl	8001be0 <_ZL11MX_FMC_Initv>
  MX_TIM6_Init();
 8001640:	f000 fa60 	bl	8001b04 <_ZL12MX_TIM6_Initv>

  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8001644:	f000 fd4c 	bl	80020e0 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER,LCD_FRAME_BUFFER);
 8001648:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800164c:	2000      	movs	r0, #0
 800164e:	f000 fdc9 	bl	80021e4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 8001652:	2000      	movs	r0, #0
 8001654:	f000 fe2a 	bl	80022ac <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8001658:	f000 ff44 	bl	80024e4 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800165c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001660:	f000 fe66 	bl	8002330 <BSP_LCD_Clear>


  int y=0;
 8001664:	2300      	movs	r3, #0
 8001666:	607b      	str	r3, [r7, #4]
  bool state=1;
 8001668:	2301      	movs	r3, #1
 800166a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  stage->clear();
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f7ff f8bc 	bl	80007ea <_ZN5Stage5clearEv>
  stgobj->r1=100;
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	2264      	movs	r2, #100	; 0x64
 8001676:	601a      	str	r2, [r3, #0]
  stgobj->initFig();
 8001678:	68b8      	ldr	r0, [r7, #8]
 800167a:	f7ff f999 	bl	80009b0 <_ZN8StageObj7initFigEv>
//	  n++;
//	  stage->sendData();
//	  HAL_Delay(300);

	  //============circles===================
	  stage->clear();
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f7ff f8b3 	bl	80007ea <_ZN5Stage5clearEv>
	  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001684:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001688:	f000 fe52 	bl	8002330 <BSP_LCD_Clear>
	  circles(n, stage, stgobj);
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <main+0xc0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68ba      	ldr	r2, [r7, #8]
 8001692:	68f9      	ldr	r1, [r7, #12]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fcf1 	bl	800107c <_Z7circlesiP5StageP8StageObj>
	  n++;
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <main+0xc0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	3301      	adds	r3, #1
 80016a0:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <main+0xc0>)
 80016a2:	6013      	str	r3, [r2, #0]
	  stage->sendData();
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f7ff f8c9 	bl	800083c <_ZN5Stage8sendDataEv>
	  HAL_Delay(100);
 80016aa:	2064      	movs	r0, #100	; 0x64
 80016ac:	f001 fe66 	bl	800337c <HAL_Delay>
	  stage->clear();
 80016b0:	e7e5      	b.n	800167e <main+0x8a>
 80016b2:	bf00      	nop
 80016b4:	200000d0 	.word	0x200000d0

080016b8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b0a0      	sub	sp, #128	; 0x80
 80016bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016c2:	2230      	movs	r2, #48	; 0x30
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f005 ff9d 	bl	8007606 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	2230      	movs	r2, #48	; 0x30
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f005 ff8e 	bl	8007606 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	4b40      	ldr	r3, [pc, #256]	; (80017f0 <_Z18SystemClock_Configv+0x138>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a3f      	ldr	r2, [pc, #252]	; (80017f0 <_Z18SystemClock_Configv+0x138>)
 80016f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
 80016fa:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <_Z18SystemClock_Configv+0x138>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	4b3a      	ldr	r3, [pc, #232]	; (80017f4 <_Z18SystemClock_Configv+0x13c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a39      	ldr	r2, [pc, #228]	; (80017f4 <_Z18SystemClock_Configv+0x13c>)
 8001710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	4b37      	ldr	r3, [pc, #220]	; (80017f4 <_Z18SystemClock_Configv+0x13c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001722:	2302      	movs	r3, #2
 8001724:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001726:	2301      	movs	r3, #1
 8001728:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800172a:	2310      	movs	r3, #16
 800172c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172e:	2302      	movs	r3, #2
 8001730:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001732:	2300      	movs	r3, #0
 8001734:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001736:	2310      	movs	r3, #16
 8001738:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 360;
 800173a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800173e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001740:	2302      	movs	r3, #2
 8001742:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001744:	2304      	movs	r3, #4
 8001746:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001748:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800174c:	4618      	mov	r0, r3
 800174e:	f003 fb33 	bl	8004db8 <HAL_RCC_OscConfig>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	bf14      	ite	ne
 8001758:	2301      	movne	r3, #1
 800175a:	2300      	moveq	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 8001762:	f000 fafd 	bl	8001d60 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001766:	f003 fad7 	bl	8004d18 <HAL_PWREx_EnableOverDrive>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	bf14      	ite	ne
 8001770:	2301      	movne	r3, #1
 8001772:	2300      	moveq	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 800177a:	f000 faf1 	bl	8001d60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177e:	230f      	movs	r3, #15
 8001780:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001782:	2302      	movs	r3, #2
 8001784:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001786:	2300      	movs	r3, #0
 8001788:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800178a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800178e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001794:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001796:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800179a:	2105      	movs	r1, #5
 800179c:	4618      	mov	r0, r3
 800179e:	f003 fd7b 	bl	8005298 <HAL_RCC_ClockConfig>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	bf14      	ite	ne
 80017a8:	2301      	movne	r3, #1
 80017aa:	2300      	moveq	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <_Z18SystemClock_Configv+0xfe>
  {
    Error_Handler();
 80017b2:	f000 fad5 	bl	8001d60 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80017b6:	2308      	movs	r3, #8
 80017b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 432;
 80017ba:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80017be:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80017c0:	2302      	movs	r3, #2
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80017c4:	2300      	movs	r3, #0
 80017c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	4618      	mov	r0, r3
 80017ce:	f003 ff2f 	bl	8005630 <HAL_RCCEx_PeriphCLKConfig>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	bf14      	ite	ne
 80017d8:	2301      	movne	r3, #1
 80017da:	2300      	moveq	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <_Z18SystemClock_Configv+0x12e>
  {
    Error_Handler();
 80017e2:	f000 fabd 	bl	8001d60 <Error_Handler>
  }
}
 80017e6:	bf00      	nop
 80017e8:	3780      	adds	r7, #128	; 0x80
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40007000 	.word	0x40007000

080017f8 <_ZL13MX_DMA2D_Initv>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80017fc:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <_ZL13MX_DMA2D_Initv+0x70>)
 80017fe:	4a1b      	ldr	r2, [pc, #108]	; (800186c <_ZL13MX_DMA2D_Initv+0x74>)
 8001800:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001802:	4b19      	ldr	r3, [pc, #100]	; (8001868 <_ZL13MX_DMA2D_Initv+0x70>)
 8001804:	2200      	movs	r2, #0
 8001806:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001808:	4b17      	ldr	r3, [pc, #92]	; (8001868 <_ZL13MX_DMA2D_Initv+0x70>)
 800180a:	2202      	movs	r2, #2
 800180c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800180e:	4b16      	ldr	r3, [pc, #88]	; (8001868 <_ZL13MX_DMA2D_Initv+0x70>)
 8001810:	2200      	movs	r2, #0
 8001812:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001814:	4b14      	ldr	r3, [pc, #80]	; (8001868 <_ZL13MX_DMA2D_Initv+0x70>)
 8001816:	2200      	movs	r2, #0
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800181a:	4b13      	ldr	r3, [pc, #76]	; (8001868 <_ZL13MX_DMA2D_Initv+0x70>)
 800181c:	2202      	movs	r2, #2
 800181e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <_ZL13MX_DMA2D_Initv+0x70>)
 8001822:	2200      	movs	r2, #0
 8001824:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <_ZL13MX_DMA2D_Initv+0x70>)
 8001828:	2200      	movs	r2, #0
 800182a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800182c:	480e      	ldr	r0, [pc, #56]	; (8001868 <_ZL13MX_DMA2D_Initv+0x70>)
 800182e:	f002 f895 	bl	800395c <HAL_DMA2D_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	bf14      	ite	ne
 8001838:	2301      	movne	r3, #1
 800183a:	2300      	moveq	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <_ZL13MX_DMA2D_Initv+0x4e>
  {
    Error_Handler();
 8001842:	f000 fa8d 	bl	8001d60 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001846:	2101      	movs	r1, #1
 8001848:	4807      	ldr	r0, [pc, #28]	; (8001868 <_ZL13MX_DMA2D_Initv+0x70>)
 800184a:	f002 f9e5 	bl	8003c18 <HAL_DMA2D_ConfigLayer>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	bf14      	ite	ne
 8001854:	2301      	movne	r3, #1
 8001856:	2300      	moveq	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <_ZL13MX_DMA2D_Initv+0x6a>
  {
    Error_Handler();
 800185e:	f000 fa7f 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200000d4 	.word	0x200000d4
 800186c:	4002b000 	.word	0x4002b000

08001870 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001874:	4b23      	ldr	r3, [pc, #140]	; (8001904 <_ZL12MX_I2C3_Initv+0x94>)
 8001876:	4a24      	ldr	r2, [pc, #144]	; (8001908 <_ZL12MX_I2C3_Initv+0x98>)
 8001878:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800187a:	4b22      	ldr	r3, [pc, #136]	; (8001904 <_ZL12MX_I2C3_Initv+0x94>)
 800187c:	4a23      	ldr	r2, [pc, #140]	; (800190c <_ZL12MX_I2C3_Initv+0x9c>)
 800187e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001880:	4b20      	ldr	r3, [pc, #128]	; (8001904 <_ZL12MX_I2C3_Initv+0x94>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001886:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <_ZL12MX_I2C3_Initv+0x94>)
 8001888:	2200      	movs	r2, #0
 800188a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800188c:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <_ZL12MX_I2C3_Initv+0x94>)
 800188e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001892:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001894:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <_ZL12MX_I2C3_Initv+0x94>)
 8001896:	2200      	movs	r2, #0
 8001898:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800189a:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <_ZL12MX_I2C3_Initv+0x94>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a0:	4b18      	ldr	r3, [pc, #96]	; (8001904 <_ZL12MX_I2C3_Initv+0x94>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <_ZL12MX_I2C3_Initv+0x94>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80018ac:	4815      	ldr	r0, [pc, #84]	; (8001904 <_ZL12MX_I2C3_Initv+0x94>)
 80018ae:	f002 fdaf 	bl	8004410 <HAL_I2C_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	bf14      	ite	ne
 80018b8:	2301      	movne	r3, #1
 80018ba:	2300      	moveq	r3, #0
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 80018c2:	f000 fa4d 	bl	8001d60 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018c6:	2100      	movs	r1, #0
 80018c8:	480e      	ldr	r0, [pc, #56]	; (8001904 <_ZL12MX_I2C3_Initv+0x94>)
 80018ca:	f002 fed9 	bl	8004680 <HAL_I2CEx_ConfigAnalogFilter>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	bf14      	ite	ne
 80018d4:	2301      	movne	r3, #1
 80018d6:	2300      	moveq	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <_ZL12MX_I2C3_Initv+0x72>
  {
    Error_Handler();
 80018de:	f000 fa3f 	bl	8001d60 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80018e2:	2100      	movs	r1, #0
 80018e4:	4807      	ldr	r0, [pc, #28]	; (8001904 <_ZL12MX_I2C3_Initv+0x94>)
 80018e6:	f002 ff07 	bl	80046f8 <HAL_I2CEx_ConfigDigitalFilter>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	bf14      	ite	ne
 80018f0:	2301      	movne	r3, #1
 80018f2:	2300      	moveq	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <_ZL12MX_I2C3_Initv+0x8e>
  {
    Error_Handler();
 80018fa:	f000 fa31 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000114 	.word	0x20000114
 8001908:	40005c00 	.word	0x40005c00
 800190c:	000186a0 	.word	0x000186a0

08001910 <_ZL12MX_LTDC_Initv>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b09a      	sub	sp, #104	; 0x68
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001916:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800191a:	2234      	movs	r2, #52	; 0x34
 800191c:	2100      	movs	r1, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f005 fe71 	bl	8007606 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001924:	463b      	mov	r3, r7
 8001926:	2234      	movs	r2, #52	; 0x34
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f005 fe6b 	bl	8007606 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001930:	4b54      	ldr	r3, [pc, #336]	; (8001a84 <_ZL12MX_LTDC_Initv+0x174>)
 8001932:	4a55      	ldr	r2, [pc, #340]	; (8001a88 <_ZL12MX_LTDC_Initv+0x178>)
 8001934:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001936:	4b53      	ldr	r3, [pc, #332]	; (8001a84 <_ZL12MX_LTDC_Initv+0x174>)
 8001938:	2200      	movs	r2, #0
 800193a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800193c:	4b51      	ldr	r3, [pc, #324]	; (8001a84 <_ZL12MX_LTDC_Initv+0x174>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001942:	4b50      	ldr	r3, [pc, #320]	; (8001a84 <_ZL12MX_LTDC_Initv+0x174>)
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001948:	4b4e      	ldr	r3, [pc, #312]	; (8001a84 <_ZL12MX_LTDC_Initv+0x174>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800194e:	4b4d      	ldr	r3, [pc, #308]	; (8001a84 <_ZL12MX_LTDC_Initv+0x174>)
 8001950:	2207      	movs	r2, #7
 8001952:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001954:	4b4b      	ldr	r3, [pc, #300]	; (8001a84 <_ZL12MX_LTDC_Initv+0x174>)
 8001956:	2203      	movs	r2, #3
 8001958:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800195a:	4b4a      	ldr	r3, [pc, #296]	; (8001a84 <_ZL12MX_LTDC_Initv+0x174>)
 800195c:	220e      	movs	r2, #14
 800195e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001960:	4b48      	ldr	r3, [pc, #288]	; (8001a84 <_ZL12MX_LTDC_Initv+0x174>)
 8001962:	2205      	movs	r2, #5
 8001964:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 334;
 8001966:	4b47      	ldr	r3, [pc, #284]	; (8001a84 <_ZL12MX_LTDC_Initv+0x174>)
 8001968:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 800196c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 245;
 800196e:	4b45      	ldr	r3, [pc, #276]	; (8001a84 <_ZL12MX_LTDC_Initv+0x174>)
 8001970:	22f5      	movs	r2, #245	; 0xf5
 8001972:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 340;
 8001974:	4b43      	ldr	r3, [pc, #268]	; (8001a84 <_ZL12MX_LTDC_Initv+0x174>)
 8001976:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 247;
 800197c:	4b41      	ldr	r3, [pc, #260]	; (8001a84 <_ZL12MX_LTDC_Initv+0x174>)
 800197e:	22f7      	movs	r2, #247	; 0xf7
 8001980:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001982:	4b40      	ldr	r3, [pc, #256]	; (8001a84 <_ZL12MX_LTDC_Initv+0x174>)
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800198a:	4b3e      	ldr	r3, [pc, #248]	; (8001a84 <_ZL12MX_LTDC_Initv+0x174>)
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001992:	4b3c      	ldr	r3, [pc, #240]	; (8001a84 <_ZL12MX_LTDC_Initv+0x174>)
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800199a:	483a      	ldr	r0, [pc, #232]	; (8001a84 <_ZL12MX_LTDC_Initv+0x174>)
 800199c:	f002 feec 	bl	8004778 <HAL_LTDC_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	bf14      	ite	ne
 80019a6:	2301      	movne	r3, #1
 80019a8:	2300      	moveq	r3, #0
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <_ZL12MX_LTDC_Initv+0xa4>
  {
    Error_Handler();
 80019b0:	f000 f9d6 	bl	8001d60 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80019c4:	2302      	movs	r3, #2
 80019c6:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80019d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019d4:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80019d6:	2305      	movs	r3, #5
 80019d8:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80019f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019fc:	2200      	movs	r2, #0
 80019fe:	4619      	mov	r1, r3
 8001a00:	4820      	ldr	r0, [pc, #128]	; (8001a84 <_ZL12MX_LTDC_Initv+0x174>)
 8001a02:	f002 ff89 	bl	8004918 <HAL_LTDC_ConfigLayer>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	bf14      	ite	ne
 8001a0c:	2301      	movne	r3, #1
 8001a0e:	2300      	moveq	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <_ZL12MX_LTDC_Initv+0x10a>
  {
    Error_Handler();
 8001a16:	f000 f9a3 	bl	8001d60 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001a32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a36:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001a38:	2305      	movs	r3, #5
 8001a3a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4808      	ldr	r0, [pc, #32]	; (8001a84 <_ZL12MX_LTDC_Initv+0x174>)
 8001a62:	f002 ff59 	bl	8004918 <HAL_LTDC_ConfigLayer>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	bf14      	ite	ne
 8001a6c:	2301      	movne	r3, #1
 8001a6e:	2300      	moveq	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <_ZL12MX_LTDC_Initv+0x16a>
  {
    Error_Handler();
 8001a76:	f000 f973 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	3768      	adds	r7, #104	; 0x68
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000168 	.word	0x20000168
 8001a88:	40016800 	.word	0x40016800

08001a8c <_ZL12MX_SPI5_Initv>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001a90:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <_ZL12MX_SPI5_Initv+0x70>)
 8001a92:	4a1b      	ldr	r2, [pc, #108]	; (8001b00 <_ZL12MX_SPI5_Initv+0x74>)
 8001a94:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001a96:	4b19      	ldr	r3, [pc, #100]	; (8001afc <_ZL12MX_SPI5_Initv+0x70>)
 8001a98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a9c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001a9e:	4b17      	ldr	r3, [pc, #92]	; (8001afc <_ZL12MX_SPI5_Initv+0x70>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001aa4:	4b15      	ldr	r3, [pc, #84]	; (8001afc <_ZL12MX_SPI5_Initv+0x70>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aaa:	4b14      	ldr	r3, [pc, #80]	; (8001afc <_ZL12MX_SPI5_Initv+0x70>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <_ZL12MX_SPI5_Initv+0x70>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001ab6:	4b11      	ldr	r3, [pc, #68]	; (8001afc <_ZL12MX_SPI5_Initv+0x70>)
 8001ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001abc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <_ZL12MX_SPI5_Initv+0x70>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ac4:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <_ZL12MX_SPI5_Initv+0x70>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <_ZL12MX_SPI5_Initv+0x70>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <_ZL12MX_SPI5_Initv+0x70>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <_ZL12MX_SPI5_Initv+0x70>)
 8001ad8:	220a      	movs	r2, #10
 8001ada:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001adc:	4807      	ldr	r0, [pc, #28]	; (8001afc <_ZL12MX_SPI5_Initv+0x70>)
 8001ade:	f003 ffe4 	bl	8005aaa <HAL_SPI_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	bf14      	ite	ne
 8001ae8:	2301      	movne	r3, #1
 8001aea:	2300      	moveq	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <_ZL12MX_SPI5_Initv+0x6a>
  {
    Error_Handler();
 8001af2:	f000 f935 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000210 	.word	0x20000210
 8001b00:	40015000 	.word	0x40015000

08001b04 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b12:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <_ZL12MX_TIM6_Initv+0x78>)
 8001b14:	4a1a      	ldr	r2, [pc, #104]	; (8001b80 <_ZL12MX_TIM6_Initv+0x7c>)
 8001b16:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001b18:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <_ZL12MX_TIM6_Initv+0x78>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1e:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <_ZL12MX_TIM6_Initv+0x78>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001b24:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <_ZL12MX_TIM6_Initv+0x78>)
 8001b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b2a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <_ZL12MX_TIM6_Initv+0x78>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b32:	4812      	ldr	r0, [pc, #72]	; (8001b7c <_ZL12MX_TIM6_Initv+0x78>)
 8001b34:	f004 fd44 	bl	80065c0 <HAL_TIM_Base_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	bf14      	ite	ne
 8001b3e:	2301      	movne	r3, #1
 8001b40:	2300      	moveq	r3, #0
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <_ZL12MX_TIM6_Initv+0x48>
  {
    Error_Handler();
 8001b48:	f000 f90a 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b54:	463b      	mov	r3, r7
 8001b56:	4619      	mov	r1, r3
 8001b58:	4808      	ldr	r0, [pc, #32]	; (8001b7c <_ZL12MX_TIM6_Initv+0x78>)
 8001b5a:	f004 ff37 	bl	80069cc <HAL_TIMEx_MasterConfigSynchronization>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	bf14      	ite	ne
 8001b64:	2301      	movne	r3, #1
 8001b66:	2300      	moveq	r3, #0
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <_ZL12MX_TIM6_Initv+0x6e>
  {
    Error_Handler();
 8001b6e:	f000 f8f7 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000268 	.word	0x20000268
 8001b80:	40001000 	.word	0x40001000

08001b84 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b8a:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <_ZL19MX_USART1_UART_Initv+0x58>)
 8001b8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001baa:	220c      	movs	r2, #12
 8001bac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bba:	4807      	ldr	r0, [pc, #28]	; (8001bd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001bbc:	f004 ff96 	bl	8006aec <HAL_UART_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	bf14      	ite	ne
 8001bc6:	2301      	movne	r3, #1
 8001bc8:	2300      	moveq	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001bd0:	f000 f8c6 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	200002a8 	.word	0x200002a8
 8001bdc:	40011000 	.word	0x40011000

08001be0 <_ZL11MX_FMC_Initv>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
 8001bf4:	615a      	str	r2, [r3, #20]
 8001bf6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001bf8:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <_ZL11MX_FMC_Initv+0x9c>)
 8001bfa:	4a21      	ldr	r2, [pc, #132]	; (8001c80 <_ZL11MX_FMC_Initv+0xa0>)
 8001bfc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001bfe:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <_ZL11MX_FMC_Initv+0x9c>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <_ZL11MX_FMC_Initv+0x9c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001c0a:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <_ZL11MX_FMC_Initv+0x9c>)
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <_ZL11MX_FMC_Initv+0x9c>)
 8001c12:	2210      	movs	r2, #16
 8001c14:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001c16:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <_ZL11MX_FMC_Initv+0x9c>)
 8001c18:	2240      	movs	r2, #64	; 0x40
 8001c1a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001c1c:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <_ZL11MX_FMC_Initv+0x9c>)
 8001c1e:	2280      	movs	r2, #128	; 0x80
 8001c20:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001c22:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <_ZL11MX_FMC_Initv+0x9c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001c28:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <_ZL11MX_FMC_Initv+0x9c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001c2e:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <_ZL11MX_FMC_Initv+0x9c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <_ZL11MX_FMC_Initv+0x9c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001c3a:	2310      	movs	r3, #16
 8001c3c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001c3e:	2310      	movs	r3, #16
 8001c40:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001c42:	2310      	movs	r3, #16
 8001c44:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001c46:	2310      	movs	r3, #16
 8001c48:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001c4a:	2310      	movs	r3, #16
 8001c4c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001c4e:	2310      	movs	r3, #16
 8001c50:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001c52:	2310      	movs	r3, #16
 8001c54:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4808      	ldr	r0, [pc, #32]	; (8001c7c <_ZL11MX_FMC_Initv+0x9c>)
 8001c5c:	f003 fea6 	bl	80059ac <HAL_SDRAM_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	bf14      	ite	ne
 8001c66:	2301      	movne	r3, #1
 8001c68:	2300      	moveq	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <_ZL11MX_FMC_Initv+0x94>
  {
    Error_Handler( );
 8001c70:	f000 f876 	bl	8001d60 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001c74:	bf00      	nop
 8001c76:	3720      	adds	r7, #32
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	200002e8 	.word	0x200002e8
 8001c80:	a0000140 	.word	0xa0000140

08001c84 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	4b33      	ldr	r3, [pc, #204]	; (8001d5c <_ZL12MX_GPIO_Initv+0xd8>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a32      	ldr	r2, [pc, #200]	; (8001d5c <_ZL12MX_GPIO_Initv+0xd8>)
 8001c94:	f043 0320 	orr.w	r3, r3, #32
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b30      	ldr	r3, [pc, #192]	; (8001d5c <_ZL12MX_GPIO_Initv+0xd8>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0320 	and.w	r3, r3, #32
 8001ca2:	61fb      	str	r3, [r7, #28]
 8001ca4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
 8001caa:	4b2c      	ldr	r3, [pc, #176]	; (8001d5c <_ZL12MX_GPIO_Initv+0xd8>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a2b      	ldr	r2, [pc, #172]	; (8001d5c <_ZL12MX_GPIO_Initv+0xd8>)
 8001cb0:	f043 0304 	orr.w	r3, r3, #4
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <_ZL12MX_GPIO_Initv+0xd8>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	61bb      	str	r3, [r7, #24]
 8001cc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <_ZL12MX_GPIO_Initv+0xd8>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a24      	ldr	r2, [pc, #144]	; (8001d5c <_ZL12MX_GPIO_Initv+0xd8>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <_ZL12MX_GPIO_Initv+0xd8>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <_ZL12MX_GPIO_Initv+0xd8>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a1d      	ldr	r2, [pc, #116]	; (8001d5c <_ZL12MX_GPIO_Initv+0xd8>)
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <_ZL12MX_GPIO_Initv+0xd8>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <_ZL12MX_GPIO_Initv+0xd8>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a16      	ldr	r2, [pc, #88]	; (8001d5c <_ZL12MX_GPIO_Initv+0xd8>)
 8001d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <_ZL12MX_GPIO_Initv+0xd8>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <_ZL12MX_GPIO_Initv+0xd8>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4a0f      	ldr	r2, [pc, #60]	; (8001d5c <_ZL12MX_GPIO_Initv+0xd8>)
 8001d20:	f043 0310 	orr.w	r3, r3, #16
 8001d24:	6313      	str	r3, [r2, #48]	; 0x30
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <_ZL12MX_GPIO_Initv+0xd8>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f003 0310 	and.w	r3, r3, #16
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <_ZL12MX_GPIO_Initv+0xd8>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a08      	ldr	r2, [pc, #32]	; (8001d5c <_ZL12MX_GPIO_Initv+0xd8>)
 8001d3c:	f043 0308 	orr.w	r3, r3, #8
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <_ZL12MX_GPIO_Initv+0xd8>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]

}
 8001d4e:	bf00      	nop
 8001d50:	3724      	adds	r7, #36	; 0x24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800

08001d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <SPIx_Init>:
  * @brief  SPIx Bus initialization
  * @param  None
  * @retval None
  */
static void SPIx_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001d74:	4819      	ldr	r0, [pc, #100]	; (8001ddc <SPIx_Init+0x6c>)
 8001d76:	f004 fb03 	bl	8006380 <HAL_SPI_GetState>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d12b      	bne.n	8001dd8 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001d80:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <SPIx_Init+0x6c>)
 8001d82:	4a17      	ldr	r2, [pc, #92]	; (8001de0 <SPIx_Init+0x70>)
 8001d84:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d86:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <SPIx_Init+0x6c>)
 8001d88:	2218      	movs	r2, #24
 8001d8a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <SPIx_Init+0x6c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <SPIx_Init+0x6c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001d98:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <SPIx_Init+0x6c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <SPIx_Init+0x6c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001da4:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <SPIx_Init+0x6c>)
 8001da6:	2207      	movs	r2, #7
 8001da8:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <SPIx_Init+0x6c>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001db0:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <SPIx_Init+0x6c>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <SPIx_Init+0x6c>)
 8001db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dbc:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <SPIx_Init+0x6c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <SPIx_Init+0x6c>)
 8001dc6:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dca:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001dcc:	4803      	ldr	r0, [pc, #12]	; (8001ddc <SPIx_Init+0x6c>)
 8001dce:	f000 f853 	bl	8001e78 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001dd2:	4802      	ldr	r0, [pc, #8]	; (8001ddc <SPIx_Init+0x6c>)
 8001dd4:	f003 fe69 	bl	8005aaa <HAL_SPI_Init>
  } 
}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	2000031c 	.word	0x2000031c
 8001de0:	40015000 	.word	0x40015000

08001de4 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <SPIx_Read+0x38>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f107 0108 	add.w	r1, r7, #8
 8001dfe:	4808      	ldr	r0, [pc, #32]	; (8001e20 <SPIx_Read+0x3c>)
 8001e00:	f004 f813 	bl	8005e2a <HAL_SPI_Receive>
 8001e04:	4603      	mov	r3, r0
 8001e06:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001e0e:	f000 f827 	bl	8001e60 <SPIx_Error>
  }
  
  return readvalue;
 8001e12:	68bb      	ldr	r3, [r7, #8]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000038 	.word	0x20000038
 8001e20:	2000031c 	.word	0x2000031c

08001e24 <SPIx_Write>:
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  * @retval None
  */
static void SPIx_Write(uint16_t Value)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <SPIx_Write+0x34>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	1db9      	adds	r1, r7, #6
 8001e38:	2201      	movs	r2, #1
 8001e3a:	4808      	ldr	r0, [pc, #32]	; (8001e5c <SPIx_Write+0x38>)
 8001e3c:	f003 fec1 	bl	8005bc2 <HAL_SPI_Transmit>
 8001e40:	4603      	mov	r3, r0
 8001e42:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001e4a:	f000 f809 	bl	8001e60 <SPIx_Error>
  }
}
 8001e4e:	bf00      	nop
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000038 	.word	0x20000038
 8001e5c:	2000031c 	.word	0x2000031c

08001e60 <SPIx_Error>:
  * @brief  SPIx error treatment function.
  * @param  None
  * @retval None
  */
static void SPIx_Error(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001e64:	4803      	ldr	r0, [pc, #12]	; (8001e74 <SPIx_Error+0x14>)
 8001e66:	f003 fe84 	bl	8005b72 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001e6a:	f7ff ff81 	bl	8001d70 <SPIx_Init>
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000031c 	.word	0x2000031c

08001e78 <SPIx_MspInit>:
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08a      	sub	sp, #40	; 0x28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001e80:	2300      	movs	r3, #0
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <SPIx_MspInit+0x6c>)
 8001e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e88:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <SPIx_MspInit+0x6c>)
 8001e8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e8e:	6453      	str	r3, [r2, #68]	; 0x44
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <SPIx_MspInit+0x6c>)
 8001e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <SPIx_MspInit+0x6c>)
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <SPIx_MspInit+0x6c>)
 8001ea6:	f043 0320 	orr.w	r3, r3, #32
 8001eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <SPIx_MspInit+0x6c>)
 8001eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb0:	f003 0320 	and.w	r3, r3, #32
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001eb8:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001eca:	2305      	movs	r3, #5
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4804      	ldr	r0, [pc, #16]	; (8001ee8 <SPIx_MspInit+0x70>)
 8001ed6:	f001 ffcd 	bl	8003e74 <HAL_GPIO_Init>
}
 8001eda:	bf00      	nop
 8001edc:	3728      	adds	r7, #40	; 0x28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40021400 	.word	0x40021400

08001eec <LCD_IO_Init>:
  * @brief  Configures the LCD_SPI interface.
  * @param  None
  * @retval None
  */
void LCD_IO_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001ef2:	4b36      	ldr	r3, [pc, #216]	; (8001fcc <LCD_IO_Init+0xe0>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d164      	bne.n	8001fc4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001efa:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <LCD_IO_Init+0xe0>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001f00:	2300      	movs	r3, #0
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	4b32      	ldr	r3, [pc, #200]	; (8001fd0 <LCD_IO_Init+0xe4>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	4a31      	ldr	r2, [pc, #196]	; (8001fd0 <LCD_IO_Init+0xe4>)
 8001f0a:	f043 0308 	orr.w	r3, r3, #8
 8001f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f10:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <LCD_IO_Init+0xe4>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001f1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f20:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001f22:	2301      	movs	r3, #1
 8001f24:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001f2e:	f107 030c 	add.w	r3, r7, #12
 8001f32:	4619      	mov	r1, r3
 8001f34:	4827      	ldr	r0, [pc, #156]	; (8001fd4 <LCD_IO_Init+0xe8>)
 8001f36:	f001 ff9d 	bl	8003e74 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <LCD_IO_Init+0xe4>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a23      	ldr	r2, [pc, #140]	; (8001fd0 <LCD_IO_Init+0xe4>)
 8001f44:	f043 0308 	orr.w	r3, r3, #8
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <LCD_IO_Init+0xe4>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001f56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001f64:	2302      	movs	r3, #2
 8001f66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4819      	ldr	r0, [pc, #100]	; (8001fd4 <LCD_IO_Init+0xe8>)
 8001f70:	f001 ff80 	bl	8003e74 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001f74:	2300      	movs	r3, #0
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <LCD_IO_Init+0xe4>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	4a14      	ldr	r2, [pc, #80]	; (8001fd0 <LCD_IO_Init+0xe4>)
 8001f7e:	f043 0304 	orr.w	r3, r3, #4
 8001f82:	6313      	str	r3, [r2, #48]	; 0x30
 8001f84:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <LCD_IO_Init+0xe4>)
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	603b      	str	r3, [r7, #0]
 8001f8e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001f90:	2304      	movs	r3, #4
 8001f92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001f94:	2301      	movs	r3, #1
 8001f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001fa0:	f107 030c 	add.w	r3, r7, #12
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	480c      	ldr	r0, [pc, #48]	; (8001fd8 <LCD_IO_Init+0xec>)
 8001fa8:	f001 ff64 	bl	8003e74 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001fac:	2200      	movs	r2, #0
 8001fae:	2104      	movs	r1, #4
 8001fb0:	4809      	ldr	r0, [pc, #36]	; (8001fd8 <LCD_IO_Init+0xec>)
 8001fb2:	f002 fa13 	bl	80043dc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	2104      	movs	r1, #4
 8001fba:	4807      	ldr	r0, [pc, #28]	; (8001fd8 <LCD_IO_Init+0xec>)
 8001fbc:	f002 fa0e 	bl	80043dc <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001fc0:	f7ff fed6 	bl	8001d70 <SPIx_Init>
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	3720      	adds	r7, #32
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000374 	.word	0x20000374
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020c00 	.word	0x40020c00
 8001fd8:	40020800 	.word	0x40020800

08001fdc <LCD_IO_WriteData>:
  * @brief  Writes register value.
  * @param  None
  * @retval None
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fec:	480a      	ldr	r0, [pc, #40]	; (8002018 <LCD_IO_WriteData+0x3c>)
 8001fee:	f002 f9f5 	bl	80043dc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2104      	movs	r1, #4
 8001ff6:	4809      	ldr	r0, [pc, #36]	; (800201c <LCD_IO_WriteData+0x40>)
 8001ff8:	f002 f9f0 	bl	80043dc <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001ffc:	88fb      	ldrh	r3, [r7, #6]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff ff10 	bl	8001e24 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002004:	2201      	movs	r2, #1
 8002006:	2104      	movs	r1, #4
 8002008:	4804      	ldr	r0, [pc, #16]	; (800201c <LCD_IO_WriteData+0x40>)
 800200a:	f002 f9e7 	bl	80043dc <HAL_GPIO_WritePin>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40020c00 	.word	0x40020c00
 800201c:	40020800 	.word	0x40020800

08002020 <LCD_IO_WriteReg>:
  * @brief  Writes register address.
  * @param  None
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800202a:	2200      	movs	r2, #0
 800202c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002030:	480a      	ldr	r0, [pc, #40]	; (800205c <LCD_IO_WriteReg+0x3c>)
 8002032:	f002 f9d3 	bl	80043dc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002036:	2200      	movs	r2, #0
 8002038:	2104      	movs	r1, #4
 800203a:	4809      	ldr	r0, [pc, #36]	; (8002060 <LCD_IO_WriteReg+0x40>)
 800203c:	f002 f9ce 	bl	80043dc <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	b29b      	uxth	r3, r3
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff feed 	bl	8001e24 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800204a:	2201      	movs	r2, #1
 800204c:	2104      	movs	r1, #4
 800204e:	4804      	ldr	r0, [pc, #16]	; (8002060 <LCD_IO_WriteReg+0x40>)
 8002050:	f002 f9c4 	bl	80043dc <HAL_GPIO_WritePin>
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40020c00 	.word	0x40020c00
 8002060:	40020800 	.word	0x40020800

08002064 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	460a      	mov	r2, r1
 800206e:	80fb      	strh	r3, [r7, #6]
 8002070:	4613      	mov	r3, r2
 8002072:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002078:	2200      	movs	r2, #0
 800207a:	2104      	movs	r1, #4
 800207c:	4810      	ldr	r0, [pc, #64]	; (80020c0 <LCD_IO_ReadData+0x5c>)
 800207e:	f002 f9ad 	bl	80043dc <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002082:	2200      	movs	r2, #0
 8002084:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002088:	480e      	ldr	r0, [pc, #56]	; (80020c4 <LCD_IO_ReadData+0x60>)
 800208a:	f002 f9a7 	bl	80043dc <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff fec7 	bl	8001e24 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002096:	797b      	ldrb	r3, [r7, #5]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fea3 	bl	8001de4 <SPIx_Read>
 800209e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80020a0:	2201      	movs	r2, #1
 80020a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020a6:	4807      	ldr	r0, [pc, #28]	; (80020c4 <LCD_IO_ReadData+0x60>)
 80020a8:	f002 f998 	bl	80043dc <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80020ac:	2201      	movs	r2, #1
 80020ae:	2104      	movs	r1, #4
 80020b0:	4803      	ldr	r0, [pc, #12]	; (80020c0 <LCD_IO_ReadData+0x5c>)
 80020b2:	f002 f993 	bl	80043dc <HAL_GPIO_WritePin>
  
  return readvalue;
 80020b6:	68fb      	ldr	r3, [r7, #12]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40020800 	.word	0x40020800
 80020c4:	40020c00 	.word	0x40020c00

080020c8 <LCD_Delay>:
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  * @retval None
  */
void LCD_Delay(uint32_t Delay)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f001 f953 	bl	800337c <HAL_Delay>
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80020e4:	4b2d      	ldr	r3, [pc, #180]	; (800219c <BSP_LCD_Init+0xbc>)
 80020e6:	4a2e      	ldr	r2, [pc, #184]	; (80021a0 <BSP_LCD_Init+0xc0>)
 80020e8:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80020ea:	4b2c      	ldr	r3, [pc, #176]	; (800219c <BSP_LCD_Init+0xbc>)
 80020ec:	2209      	movs	r2, #9
 80020ee:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80020f0:	4b2a      	ldr	r3, [pc, #168]	; (800219c <BSP_LCD_Init+0xbc>)
 80020f2:	2201      	movs	r2, #1
 80020f4:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80020f6:	4b29      	ldr	r3, [pc, #164]	; (800219c <BSP_LCD_Init+0xbc>)
 80020f8:	221d      	movs	r2, #29
 80020fa:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80020fc:	4b27      	ldr	r3, [pc, #156]	; (800219c <BSP_LCD_Init+0xbc>)
 80020fe:	2203      	movs	r2, #3
 8002100:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002102:	4b26      	ldr	r3, [pc, #152]	; (800219c <BSP_LCD_Init+0xbc>)
 8002104:	f240 120d 	movw	r2, #269	; 0x10d
 8002108:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800210a:	4b24      	ldr	r3, [pc, #144]	; (800219c <BSP_LCD_Init+0xbc>)
 800210c:	f240 1243 	movw	r2, #323	; 0x143
 8002110:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002112:	4b22      	ldr	r3, [pc, #136]	; (800219c <BSP_LCD_Init+0xbc>)
 8002114:	f240 1217 	movw	r2, #279	; 0x117
 8002118:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800211a:	4b20      	ldr	r3, [pc, #128]	; (800219c <BSP_LCD_Init+0xbc>)
 800211c:	f240 1247 	movw	r2, #327	; 0x147
 8002120:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002122:	4b1e      	ldr	r3, [pc, #120]	; (800219c <BSP_LCD_Init+0xbc>)
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800212a:	4b1c      	ldr	r3, [pc, #112]	; (800219c <BSP_LCD_Init+0xbc>)
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002132:	4b1a      	ldr	r3, [pc, #104]	; (800219c <BSP_LCD_Init+0xbc>)
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <BSP_LCD_Init+0xc4>)
 800213c:	2208      	movs	r2, #8
 800213e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002140:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <BSP_LCD_Init+0xc4>)
 8002142:	22c0      	movs	r2, #192	; 0xc0
 8002144:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002146:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <BSP_LCD_Init+0xc4>)
 8002148:	2204      	movs	r2, #4
 800214a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800214c:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <BSP_LCD_Init+0xc4>)
 800214e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002152:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002154:	4813      	ldr	r0, [pc, #76]	; (80021a4 <BSP_LCD_Init+0xc4>)
 8002156:	f003 fa6b 	bl	8005630 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800215a:	4b10      	ldr	r3, [pc, #64]	; (800219c <BSP_LCD_Init+0xbc>)
 800215c:	2200      	movs	r2, #0
 800215e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002160:	4b0e      	ldr	r3, [pc, #56]	; (800219c <BSP_LCD_Init+0xbc>)
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002166:	4b0d      	ldr	r3, [pc, #52]	; (800219c <BSP_LCD_Init+0xbc>)
 8002168:	2200      	movs	r2, #0
 800216a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <BSP_LCD_Init+0xbc>)
 800216e:	2200      	movs	r2, #0
 8002170:	611a      	str	r2, [r3, #16]
    
    MspInit();
 8002172:	f000 f9c7 	bl	8002504 <MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002176:	4809      	ldr	r0, [pc, #36]	; (800219c <BSP_LCD_Init+0xbc>)
 8002178:	f002 fafe 	bl	8004778 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 800217c:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <BSP_LCD_Init+0xc8>)
 800217e:	4a0b      	ldr	r2, [pc, #44]	; (80021ac <BSP_LCD_Init+0xcc>)
 8002180:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002182:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <BSP_LCD_Init+0xc8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800218a:	f000 fac9 	bl	8002720 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800218e:	4808      	ldr	r0, [pc, #32]	; (80021b0 <BSP_LCD_Init+0xd0>)
 8002190:	f000 f8b4 	bl	80022fc <BSP_LCD_SetFont>

  return LCD_OK;
 8002194:	2300      	movs	r3, #0
}  
 8002196:	4618      	mov	r0, r3
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000378 	.word	0x20000378
 80021a0:	40016800 	.word	0x40016800
 80021a4:	20000460 	.word	0x20000460
 80021a8:	20000580 	.word	0x20000580
 80021ac:	20000000 	.word	0x20000000
 80021b0:	2000003c 	.word	0x2000003c

080021b4 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <BSP_LCD_GetXSize+0x14>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021be:	4798      	blx	r3
 80021c0:	4603      	mov	r3, r0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000580 	.word	0x20000580

080021cc <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None    
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80021d0:	4b03      	ldr	r3, [pc, #12]	; (80021e0 <BSP_LCD_GetYSize+0x14>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d6:	4798      	blx	r3
 80021d8:	4603      	mov	r3, r0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000580 	.word	0x20000580

080021e4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b090      	sub	sp, #64	; 0x40
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	6039      	str	r1, [r7, #0]
 80021ee:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80021f4:	f7ff ffde 	bl	80021b4 <BSP_LCD_GetXSize>
 80021f8:	4603      	mov	r3, r0
 80021fa:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002200:	f7ff ffe4 	bl	80021cc <BSP_LCD_GetYSize>
 8002204:	4603      	mov	r3, r0
 8002206:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002208:	2300      	movs	r3, #0
 800220a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002210:	23ff      	movs	r3, #255	; 0xff
 8002212:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800222a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002230:	2307      	movs	r3, #7
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002234:	f7ff ffbe 	bl	80021b4 <BSP_LCD_GetXSize>
 8002238:	4603      	mov	r3, r0
 800223a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800223c:	f7ff ffc6 	bl	80021cc <BSP_LCD_GetYSize>
 8002240:	4603      	mov	r3, r0
 8002242:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002244:	88fa      	ldrh	r2, [r7, #6]
 8002246:	f107 030c 	add.w	r3, r7, #12
 800224a:	4619      	mov	r1, r3
 800224c:	4814      	ldr	r0, [pc, #80]	; (80022a0 <BSP_LCD_LayerDefaultInit+0xbc>)
 800224e:	f002 fb63 	bl	8004918 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002252:	88fa      	ldrh	r2, [r7, #6]
 8002254:	4913      	ldr	r1, [pc, #76]	; (80022a4 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	3304      	adds	r3, #4
 8002262:	f04f 32ff 	mov.w	r2, #4294967295
 8002266:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002268:	88fa      	ldrh	r2, [r7, #6]
 800226a:	490e      	ldr	r1, [pc, #56]	; (80022a4 <BSP_LCD_LayerDefaultInit+0xc0>)
 800226c:	4613      	mov	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	3308      	adds	r3, #8
 8002278:	4a0b      	ldr	r2, [pc, #44]	; (80022a8 <BSP_LCD_LayerDefaultInit+0xc4>)
 800227a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800227c:	88fa      	ldrh	r2, [r7, #6]
 800227e:	4909      	ldr	r1, [pc, #36]	; (80022a4 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002280:	4613      	mov	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800228e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002290:	4803      	ldr	r0, [pc, #12]	; (80022a0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002292:	f002 fb7f 	bl	8004994 <HAL_LTDC_EnableDither>
}
 8002296:	bf00      	nop
 8002298:	3740      	adds	r7, #64	; 0x40
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000378 	.word	0x20000378
 80022a4:	20000494 	.word	0x20000494
 80022a8:	2000003c 	.word	0x2000003c

080022ac <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80022b4:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <BSP_LCD_SelectLayer+0x1c>)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6013      	str	r3, [r2, #0]
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000490 	.word	0x20000490

080022cc <BSP_LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80022d4:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <BSP_LCD_SetTextColor+0x28>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4907      	ldr	r1, [pc, #28]	; (80022f8 <BSP_LCD_SetTextColor+0x2c>)
 80022da:	4613      	mov	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4413      	add	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	601a      	str	r2, [r3, #0]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	20000490 	.word	0x20000490
 80022f8:	20000494 	.word	0x20000494

080022fc <BSP_LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <BSP_LCD_SetFont+0x2c>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4908      	ldr	r1, [pc, #32]	; (800232c <BSP_LCD_SetFont+0x30>)
 800230a:	4613      	mov	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4413      	add	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	3308      	adds	r3, #8
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	601a      	str	r2, [r3, #0]
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20000490 	.word	0x20000490
 800232c:	20000494 	.word	0x20000494

08002330 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002332:	b085      	sub	sp, #20
 8002334:	af02      	add	r7, sp, #8
 8002336:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <BSP_LCD_Clear+0x48>)
 800233a:	681c      	ldr	r4, [r3, #0]
 800233c:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <BSP_LCD_Clear+0x48>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0e      	ldr	r2, [pc, #56]	; (800237c <BSP_LCD_Clear+0x4c>)
 8002342:	2134      	movs	r1, #52	; 0x34
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	4413      	add	r3, r2
 800234a:	335c      	adds	r3, #92	; 0x5c
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	461d      	mov	r5, r3
 8002350:	f7ff ff30 	bl	80021b4 <BSP_LCD_GetXSize>
 8002354:	4606      	mov	r6, r0
 8002356:	f7ff ff39 	bl	80021cc <BSP_LCD_GetYSize>
 800235a:	4602      	mov	r2, r0
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	9301      	str	r3, [sp, #4]
 8002360:	2300      	movs	r3, #0
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	4613      	mov	r3, r2
 8002366:	4632      	mov	r2, r6
 8002368:	4629      	mov	r1, r5
 800236a:	4620      	mov	r0, r4
 800236c:	f000 f9a0 	bl	80026b0 <FillBuffer>
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002378:	20000490 	.word	0x20000490
 800237c:	20000378 	.word	0x20000378

08002380 <BSP_LCD_DrawHLine>:
  * @param  Ypos: the Y position
  * @param  Length: line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002380:	b5b0      	push	{r4, r5, r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af02      	add	r7, sp, #8
 8002386:	4603      	mov	r3, r0
 8002388:	80fb      	strh	r3, [r7, #6]
 800238a:	460b      	mov	r3, r1
 800238c:	80bb      	strh	r3, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002396:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <BSP_LCD_DrawHLine+0x70>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a16      	ldr	r2, [pc, #88]	; (80023f4 <BSP_LCD_DrawHLine+0x74>)
 800239c:	2134      	movs	r1, #52	; 0x34
 800239e:	fb01 f303 	mul.w	r3, r1, r3
 80023a2:	4413      	add	r3, r2
 80023a4:	335c      	adds	r3, #92	; 0x5c
 80023a6:	681c      	ldr	r4, [r3, #0]
 80023a8:	f7ff ff04 	bl	80021b4 <BSP_LCD_GetXSize>
 80023ac:	4602      	mov	r2, r0
 80023ae:	88bb      	ldrh	r3, [r7, #4]
 80023b0:	fb03 f202 	mul.w	r2, r3, r2
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4423      	add	r3, r4
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80023be:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <BSP_LCD_DrawHLine+0x70>)
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	68fc      	ldr	r4, [r7, #12]
 80023c4:	887d      	ldrh	r5, [r7, #2]
 80023c6:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <BSP_LCD_DrawHLine+0x70>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	490b      	ldr	r1, [pc, #44]	; (80023f8 <BSP_LCD_DrawHLine+0x78>)
 80023cc:	4613      	mov	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	9301      	str	r3, [sp, #4]
 80023da:	2300      	movs	r3, #0
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	2301      	movs	r3, #1
 80023e0:	462a      	mov	r2, r5
 80023e2:	4621      	mov	r1, r4
 80023e4:	f000 f964 	bl	80026b0 <FillBuffer>
}
 80023e8:	bf00      	nop
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bdb0      	pop	{r4, r5, r7, pc}
 80023f0:	20000490 	.word	0x20000490
 80023f4:	20000378 	.word	0x20000378
 80023f8:	20000494 	.word	0x20000494

080023fc <BSP_LCD_DrawVLine>:
  * @param  Ypos: the Y position
  * @param  Length: line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80023fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023fe:	b087      	sub	sp, #28
 8002400:	af02      	add	r7, sp, #8
 8002402:	4603      	mov	r3, r0
 8002404:	80fb      	strh	r3, [r7, #6]
 8002406:	460b      	mov	r3, r1
 8002408:	80bb      	strh	r3, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002412:	4b18      	ldr	r3, [pc, #96]	; (8002474 <BSP_LCD_DrawVLine+0x78>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a18      	ldr	r2, [pc, #96]	; (8002478 <BSP_LCD_DrawVLine+0x7c>)
 8002418:	2134      	movs	r1, #52	; 0x34
 800241a:	fb01 f303 	mul.w	r3, r1, r3
 800241e:	4413      	add	r3, r2
 8002420:	335c      	adds	r3, #92	; 0x5c
 8002422:	681c      	ldr	r4, [r3, #0]
 8002424:	f7ff fec6 	bl	80021b4 <BSP_LCD_GetXSize>
 8002428:	4602      	mov	r2, r0
 800242a:	88bb      	ldrh	r3, [r7, #4]
 800242c:	fb03 f202 	mul.w	r2, r3, r2
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	4413      	add	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4423      	add	r3, r4
 8002438:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800243a:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <BSP_LCD_DrawVLine+0x78>)
 800243c:	681c      	ldr	r4, [r3, #0]
 800243e:	68fd      	ldr	r5, [r7, #12]
 8002440:	887e      	ldrh	r6, [r7, #2]
 8002442:	f7ff feb7 	bl	80021b4 <BSP_LCD_GetXSize>
 8002446:	4603      	mov	r3, r0
 8002448:	1e59      	subs	r1, r3, #1
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <BSP_LCD_DrawVLine+0x78>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	480b      	ldr	r0, [pc, #44]	; (800247c <BSP_LCD_DrawVLine+0x80>)
 8002450:	4613      	mov	r3, r2
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	4413      	add	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4403      	add	r3, r0
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	9301      	str	r3, [sp, #4]
 800245e:	9100      	str	r1, [sp, #0]
 8002460:	4633      	mov	r3, r6
 8002462:	2201      	movs	r2, #1
 8002464:	4629      	mov	r1, r5
 8002466:	4620      	mov	r0, r4
 8002468:	f000 f922 	bl	80026b0 <FillBuffer>
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002474:	20000490 	.word	0x20000490
 8002478:	20000378 	.word	0x20000378
 800247c:	20000494 	.word	0x20000494

08002480 <BSP_LCD_DrawRect>:
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	4604      	mov	r4, r0
 8002488:	4608      	mov	r0, r1
 800248a:	4611      	mov	r1, r2
 800248c:	461a      	mov	r2, r3
 800248e:	4623      	mov	r3, r4
 8002490:	80fb      	strh	r3, [r7, #6]
 8002492:	4603      	mov	r3, r0
 8002494:	80bb      	strh	r3, [r7, #4]
 8002496:	460b      	mov	r3, r1
 8002498:	807b      	strh	r3, [r7, #2]
 800249a:	4613      	mov	r3, r2
 800249c:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 800249e:	887a      	ldrh	r2, [r7, #2]
 80024a0:	88b9      	ldrh	r1, [r7, #4]
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff6b 	bl	8002380 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 80024aa:	88ba      	ldrh	r2, [r7, #4]
 80024ac:	883b      	ldrh	r3, [r7, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	b299      	uxth	r1, r3
 80024b2:	887a      	ldrh	r2, [r7, #2]
 80024b4:	88fb      	ldrh	r3, [r7, #6]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff ff62 	bl	8002380 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 80024bc:	883a      	ldrh	r2, [r7, #0]
 80024be:	88b9      	ldrh	r1, [r7, #4]
 80024c0:	88fb      	ldrh	r3, [r7, #6]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff ff9a 	bl	80023fc <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 80024c8:	88fa      	ldrh	r2, [r7, #6]
 80024ca:	887b      	ldrh	r3, [r7, #2]
 80024cc:	4413      	add	r3, r2
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	883a      	ldrh	r2, [r7, #0]
 80024d2:	88b9      	ldrh	r1, [r7, #4]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff91 	bl	80023fc <BSP_LCD_DrawVLine>
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd90      	pop	{r4, r7, pc}
	...

080024e4 <BSP_LCD_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <BSP_LCD_DisplayOn+0x1c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80024f2:	4b03      	ldr	r3, [pc, #12]	; (8002500 <BSP_LCD_DisplayOn+0x1c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	4798      	blx	r3
  }
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000580 	.word	0x20000580

08002504 <MspInit>:
  * @brief  Initializes the LTDC MSP.
  * @param  None
  * @retval None
  */
static void MspInit(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08e      	sub	sp, #56	; 0x38
 8002508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __LTDC_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	623b      	str	r3, [r7, #32]
 800250e:	4b61      	ldr	r3, [pc, #388]	; (8002694 <MspInit+0x190>)
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	4a60      	ldr	r2, [pc, #384]	; (8002694 <MspInit+0x190>)
 8002514:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002518:	6453      	str	r3, [r2, #68]	; 0x44
 800251a:	4b5e      	ldr	r3, [pc, #376]	; (8002694 <MspInit+0x190>)
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002522:	623b      	str	r3, [r7, #32]
 8002524:	6a3b      	ldr	r3, [r7, #32]
  __DMA2D_CLK_ENABLE(); 
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	4b5a      	ldr	r3, [pc, #360]	; (8002694 <MspInit+0x190>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	4a59      	ldr	r2, [pc, #356]	; (8002694 <MspInit+0x190>)
 8002530:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002534:	6313      	str	r3, [r2, #48]	; 0x30
 8002536:	4b57      	ldr	r3, [pc, #348]	; (8002694 <MspInit+0x190>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800253e:	61fb      	str	r3, [r7, #28]
 8002540:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __GPIOA_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
 8002546:	4b53      	ldr	r3, [pc, #332]	; (8002694 <MspInit+0x190>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	4a52      	ldr	r2, [pc, #328]	; (8002694 <MspInit+0x190>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	6313      	str	r3, [r2, #48]	; 0x30
 8002552:	4b50      	ldr	r3, [pc, #320]	; (8002694 <MspInit+0x190>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	69bb      	ldr	r3, [r7, #24]
  __GPIOB_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	4b4c      	ldr	r3, [pc, #304]	; (8002694 <MspInit+0x190>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a4b      	ldr	r2, [pc, #300]	; (8002694 <MspInit+0x190>)
 8002568:	f043 0302 	orr.w	r3, r3, #2
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b49      	ldr	r3, [pc, #292]	; (8002694 <MspInit+0x190>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	697b      	ldr	r3, [r7, #20]
  __GPIOC_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	4b45      	ldr	r3, [pc, #276]	; (8002694 <MspInit+0x190>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a44      	ldr	r2, [pc, #272]	; (8002694 <MspInit+0x190>)
 8002584:	f043 0304 	orr.w	r3, r3, #4
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b42      	ldr	r3, [pc, #264]	; (8002694 <MspInit+0x190>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]
  __GPIOD_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b3e      	ldr	r3, [pc, #248]	; (8002694 <MspInit+0x190>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a3d      	ldr	r2, [pc, #244]	; (8002694 <MspInit+0x190>)
 80025a0:	f043 0308 	orr.w	r3, r3, #8
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b3b      	ldr	r3, [pc, #236]	; (8002694 <MspInit+0x190>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
  __GPIOF_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	4b37      	ldr	r3, [pc, #220]	; (8002694 <MspInit+0x190>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	4a36      	ldr	r2, [pc, #216]	; (8002694 <MspInit+0x190>)
 80025bc:	f043 0320 	orr.w	r3, r3, #32
 80025c0:	6313      	str	r3, [r2, #48]	; 0x30
 80025c2:	4b34      	ldr	r3, [pc, #208]	; (8002694 <MspInit+0x190>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	f003 0320 	and.w	r3, r3, #32
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]
  __GPIOG_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	607b      	str	r3, [r7, #4]
 80025d2:	4b30      	ldr	r3, [pc, #192]	; (8002694 <MspInit+0x190>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	4a2f      	ldr	r2, [pc, #188]	; (8002694 <MspInit+0x190>)
 80025d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025dc:	6313      	str	r3, [r2, #48]	; 0x30
 80025de:	4b2d      	ldr	r3, [pc, #180]	; (8002694 <MspInit+0x190>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80025ea:	f641 0358 	movw	r3, #6232	; 0x1858
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80025f0:	2302      	movs	r3, #2
 80025f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80025f8:	2302      	movs	r3, #2
 80025fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80025fc:	230e      	movs	r3, #14
 80025fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002604:	4619      	mov	r1, r3
 8002606:	4824      	ldr	r0, [pc, #144]	; (8002698 <MspInit+0x194>)
 8002608:	f001 fc34 	bl	8003e74 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800260c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002616:	4619      	mov	r1, r3
 8002618:	4820      	ldr	r0, [pc, #128]	; (800269c <MspInit+0x198>)
 800261a:	f001 fc2b 	bl	8003e74 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800261e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002628:	4619      	mov	r1, r3
 800262a:	481d      	ldr	r0, [pc, #116]	; (80026a0 <MspInit+0x19c>)
 800262c:	f001 fc22 	bl	8003e74 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002630:	2348      	movs	r3, #72	; 0x48
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002638:	4619      	mov	r1, r3
 800263a:	481a      	ldr	r0, [pc, #104]	; (80026a4 <MspInit+0x1a0>)
 800263c:	f001 fc1a 	bl	8003e74 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800264a:	4619      	mov	r1, r3
 800264c:	4816      	ldr	r0, [pc, #88]	; (80026a8 <MspInit+0x1a4>)
 800264e:	f001 fc11 	bl	8003e74 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002652:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800265c:	4619      	mov	r1, r3
 800265e:	4813      	ldr	r0, [pc, #76]	; (80026ac <MspInit+0x1a8>)
 8002660:	f001 fc08 	bl	8003e74 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002664:	2303      	movs	r3, #3
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002668:	2309      	movs	r3, #9
 800266a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800266c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002670:	4619      	mov	r1, r3
 8002672:	480a      	ldr	r0, [pc, #40]	; (800269c <MspInit+0x198>)
 8002674:	f001 fbfe 	bl	8003e74 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002678:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800267e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002682:	4619      	mov	r1, r3
 8002684:	4809      	ldr	r0, [pc, #36]	; (80026ac <MspInit+0x1a8>)
 8002686:	f001 fbf5 	bl	8003e74 <HAL_GPIO_Init>
}
 800268a:	bf00      	nop
 800268c:	3738      	adds	r7, #56	; 0x38
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40023800 	.word	0x40023800
 8002698:	40020000 	.word	0x40020000
 800269c:	40020400 	.word	0x40020400
 80026a0:	40020800 	.word	0x40020800
 80026a4:	40020c00 	.word	0x40020c00
 80026a8:	40021400 	.word	0x40021400
 80026ac:	40021800 	.word	0x40021800

080026b0 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  * @retval None
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80026be:	4b16      	ldr	r3, [pc, #88]	; (8002718 <FillBuffer+0x68>)
 80026c0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80026c4:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80026c6:	4b14      	ldr	r3, [pc, #80]	; (8002718 <FillBuffer+0x68>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80026cc:	4a12      	ldr	r2, [pc, #72]	; (8002718 <FillBuffer+0x68>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80026d2:	4b11      	ldr	r3, [pc, #68]	; (8002718 <FillBuffer+0x68>)
 80026d4:	4a11      	ldr	r2, [pc, #68]	; (800271c <FillBuffer+0x6c>)
 80026d6:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80026d8:	480f      	ldr	r0, [pc, #60]	; (8002718 <FillBuffer+0x68>)
 80026da:	f001 f93f 	bl	800395c <HAL_DMA2D_Init>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d115      	bne.n	8002710 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80026e4:	68f9      	ldr	r1, [r7, #12]
 80026e6:	480c      	ldr	r0, [pc, #48]	; (8002718 <FillBuffer+0x68>)
 80026e8:	f001 fa96 	bl	8003c18 <HAL_DMA2D_ConfigLayer>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10e      	bne.n	8002710 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69f9      	ldr	r1, [r7, #28]
 80026fc:	4806      	ldr	r0, [pc, #24]	; (8002718 <FillBuffer+0x68>)
 80026fe:	f001 f976 	bl	80039ee <HAL_DMA2D_Start>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d103      	bne.n	8002710 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002708:	210a      	movs	r1, #10
 800270a:	4803      	ldr	r0, [pc, #12]	; (8002718 <FillBuffer+0x68>)
 800270c:	f001 f99a 	bl	8003a44 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002710:	bf00      	nop
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	20000420 	.word	0x20000420
 800271c:	4002b000 	.word	0x4002b000

08002720 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param  None
  * @retval None
  */
void BSP_SDRAM_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002724:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <BSP_SDRAM_Init+0x90>)
 8002726:	4a23      	ldr	r2, [pc, #140]	; (80027b4 <BSP_SDRAM_Init+0x94>)
 8002728:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800272a:	4b23      	ldr	r3, [pc, #140]	; (80027b8 <BSP_SDRAM_Init+0x98>)
 800272c:	2202      	movs	r2, #2
 800272e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002730:	4b21      	ldr	r3, [pc, #132]	; (80027b8 <BSP_SDRAM_Init+0x98>)
 8002732:	2207      	movs	r2, #7
 8002734:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002736:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <BSP_SDRAM_Init+0x98>)
 8002738:	2204      	movs	r2, #4
 800273a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 800273c:	4b1e      	ldr	r3, [pc, #120]	; (80027b8 <BSP_SDRAM_Init+0x98>)
 800273e:	2207      	movs	r2, #7
 8002740:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002742:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <BSP_SDRAM_Init+0x98>)
 8002744:	2202      	movs	r2, #2
 8002746:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002748:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <BSP_SDRAM_Init+0x98>)
 800274a:	2202      	movs	r2, #2
 800274c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800274e:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <BSP_SDRAM_Init+0x98>)
 8002750:	2202      	movs	r2, #2
 8002752:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002754:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <BSP_SDRAM_Init+0x90>)
 8002756:	2201      	movs	r2, #1
 8002758:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800275a:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <BSP_SDRAM_Init+0x90>)
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002760:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <BSP_SDRAM_Init+0x90>)
 8002762:	2204      	movs	r2, #4
 8002764:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <BSP_SDRAM_Init+0x90>)
 8002768:	2210      	movs	r2, #16
 800276a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800276c:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <BSP_SDRAM_Init+0x90>)
 800276e:	2240      	movs	r2, #64	; 0x40
 8002770:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002772:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <BSP_SDRAM_Init+0x90>)
 8002774:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002778:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800277a:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <BSP_SDRAM_Init+0x90>)
 800277c:	2200      	movs	r2, #0
 800277e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <BSP_SDRAM_Init+0x90>)
 8002782:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002786:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <BSP_SDRAM_Init+0x90>)
 800278a:	2200      	movs	r2, #0
 800278c:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <BSP_SDRAM_Init+0x90>)
 8002790:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002794:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  MspInit();
 8002796:	f000 f871 	bl	800287c <MspInit>
  HAL_SDRAM_Init(&SdramHandle, &Timing);
 800279a:	4907      	ldr	r1, [pc, #28]	; (80027b8 <BSP_SDRAM_Init+0x98>)
 800279c:	4804      	ldr	r0, [pc, #16]	; (80027b0 <BSP_SDRAM_Init+0x90>)
 800279e:	f003 f905 	bl	80059ac <HAL_SDRAM_Init>
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80027a2:	f240 506a 	movw	r0, #1386	; 0x56a
 80027a6:	f000 f809 	bl	80027bc <BSP_SDRAM_Initialization_sequence>
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	200004ac 	.word	0x200004ac
 80027b4:	a0000140 	.word	0xa0000140
 80027b8:	200004e0 	.word	0x200004e0

080027bc <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80027c8:	4b2a      	ldr	r3, [pc, #168]	; (8002874 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80027ce:	4b29      	ldr	r3, [pc, #164]	; (8002874 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027d0:	2208      	movs	r2, #8
 80027d2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80027d4:	4b27      	ldr	r3, [pc, #156]	; (8002874 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80027da:	4b26      	ldr	r3, [pc, #152]	; (8002874 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027dc:	2200      	movs	r2, #0
 80027de:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80027e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027e4:	4923      	ldr	r1, [pc, #140]	; (8002874 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027e6:	4824      	ldr	r0, [pc, #144]	; (8002878 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80027e8:	f003 f914 	bl	8005a14 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80027ec:	2001      	movs	r0, #1
 80027ee:	f000 fdc5 	bl	800337c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80027f2:	4b20      	ldr	r3, [pc, #128]	; (8002874 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027f4:	2202      	movs	r2, #2
 80027f6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80027f8:	4b1e      	ldr	r3, [pc, #120]	; (8002874 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027fa:	2208      	movs	r2, #8
 80027fc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80027fe:	4b1d      	ldr	r3, [pc, #116]	; (8002874 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002800:	2201      	movs	r2, #1
 8002802:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002804:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002806:	2200      	movs	r2, #0
 8002808:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800280a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800280e:	4919      	ldr	r1, [pc, #100]	; (8002874 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002810:	4819      	ldr	r0, [pc, #100]	; (8002878 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002812:	f003 f8ff 	bl	8005a14 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002816:	4b17      	ldr	r3, [pc, #92]	; (8002874 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002818:	2203      	movs	r2, #3
 800281a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800281c:	4b15      	ldr	r3, [pc, #84]	; (8002874 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800281e:	2208      	movs	r2, #8
 8002820:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002822:	4b14      	ldr	r3, [pc, #80]	; (8002874 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002824:	2204      	movs	r2, #4
 8002826:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002828:	4b12      	ldr	r3, [pc, #72]	; (8002874 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800282a:	2200      	movs	r2, #0
 800282c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800282e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002832:	4910      	ldr	r1, [pc, #64]	; (8002874 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002834:	4810      	ldr	r0, [pc, #64]	; (8002878 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002836:	f003 f8ed 	bl	8005a14 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800283a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800283e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002842:	2204      	movs	r2, #4
 8002844:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002846:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002848:	2208      	movs	r2, #8
 800284a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800284c:	4b09      	ldr	r3, [pc, #36]	; (8002874 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800284e:	2201      	movs	r2, #1
 8002850:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4a07      	ldr	r2, [pc, #28]	; (8002874 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002856:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002858:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800285c:	4905      	ldr	r1, [pc, #20]	; (8002874 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800285e:	4806      	ldr	r0, [pc, #24]	; (8002878 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002860:	f003 f8d8 	bl	8005a14 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4804      	ldr	r0, [pc, #16]	; (8002878 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002868:	f003 f8ff 	bl	8005a6a <HAL_SDRAM_ProgramRefreshRate>
}
 800286c:	bf00      	nop
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	200004fc 	.word	0x200004fc
 8002878:	200004ac 	.word	0x200004ac

0800287c <MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  None
  * @retval None
  */
static void MspInit(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08e      	sub	sp, #56	; 0x38
 8002880:	af00      	add	r7, sp, #0
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;
  SDRAM_HandleTypeDef  *hsdram = &SdramHandle;
 8002882:	4b79      	ldr	r3, [pc, #484]	; (8002a68 <MspInit+0x1ec>)
 8002884:	637b      	str	r3, [r7, #52]	; 0x34

  /* Enable FMC clock */
  __FMC_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	61fb      	str	r3, [r7, #28]
 800288a:	4b78      	ldr	r3, [pc, #480]	; (8002a6c <MspInit+0x1f0>)
 800288c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288e:	4a77      	ldr	r2, [pc, #476]	; (8002a6c <MspInit+0x1f0>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	6393      	str	r3, [r2, #56]	; 0x38
 8002896:	4b75      	ldr	r3, [pc, #468]	; (8002a6c <MspInit+0x1f0>)
 8002898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	61fb      	str	r3, [r7, #28]
 80028a0:	69fb      	ldr	r3, [r7, #28]

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	4b71      	ldr	r3, [pc, #452]	; (8002a6c <MspInit+0x1f0>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	4a70      	ldr	r2, [pc, #448]	; (8002a6c <MspInit+0x1f0>)
 80028ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028b0:	6313      	str	r3, [r2, #48]	; 0x30
 80028b2:	4b6e      	ldr	r3, [pc, #440]	; (8002a6c <MspInit+0x1f0>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ba:	61bb      	str	r3, [r7, #24]
 80028bc:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __GPIOB_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	4b6a      	ldr	r3, [pc, #424]	; (8002a6c <MspInit+0x1f0>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	4a69      	ldr	r2, [pc, #420]	; (8002a6c <MspInit+0x1f0>)
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	6313      	str	r3, [r2, #48]	; 0x30
 80028ce:	4b67      	ldr	r3, [pc, #412]	; (8002a6c <MspInit+0x1f0>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	697b      	ldr	r3, [r7, #20]
  __GPIOC_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	4b63      	ldr	r3, [pc, #396]	; (8002a6c <MspInit+0x1f0>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4a62      	ldr	r2, [pc, #392]	; (8002a6c <MspInit+0x1f0>)
 80028e4:	f043 0304 	orr.w	r3, r3, #4
 80028e8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ea:	4b60      	ldr	r3, [pc, #384]	; (8002a6c <MspInit+0x1f0>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	693b      	ldr	r3, [r7, #16]
  __GPIOD_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	4b5c      	ldr	r3, [pc, #368]	; (8002a6c <MspInit+0x1f0>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a5b      	ldr	r2, [pc, #364]	; (8002a6c <MspInit+0x1f0>)
 8002900:	f043 0308 	orr.w	r3, r3, #8
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b59      	ldr	r3, [pc, #356]	; (8002a6c <MspInit+0x1f0>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
  __GPIOE_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	4b55      	ldr	r3, [pc, #340]	; (8002a6c <MspInit+0x1f0>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	4a54      	ldr	r2, [pc, #336]	; (8002a6c <MspInit+0x1f0>)
 800291c:	f043 0310 	orr.w	r3, r3, #16
 8002920:	6313      	str	r3, [r2, #48]	; 0x30
 8002922:	4b52      	ldr	r3, [pc, #328]	; (8002a6c <MspInit+0x1f0>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f003 0310 	and.w	r3, r3, #16
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	68bb      	ldr	r3, [r7, #8]
  __GPIOF_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	607b      	str	r3, [r7, #4]
 8002932:	4b4e      	ldr	r3, [pc, #312]	; (8002a6c <MspInit+0x1f0>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a4d      	ldr	r2, [pc, #308]	; (8002a6c <MspInit+0x1f0>)
 8002938:	f043 0320 	orr.w	r3, r3, #32
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b4b      	ldr	r3, [pc, #300]	; (8002a6c <MspInit+0x1f0>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0320 	and.w	r3, r3, #32
 8002946:	607b      	str	r3, [r7, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
  __GPIOG_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	603b      	str	r3, [r7, #0]
 800294e:	4b47      	ldr	r3, [pc, #284]	; (8002a6c <MspInit+0x1f0>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a46      	ldr	r2, [pc, #280]	; (8002a6c <MspInit+0x1f0>)
 8002954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b44      	ldr	r3, [pc, #272]	; (8002a6c <MspInit+0x1f0>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	683b      	ldr	r3, [r7, #0]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002966:	2302      	movs	r3, #2
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800296a:	2302      	movs	r3, #2
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002972:	230c      	movs	r3, #12
 8002974:	633b      	str	r3, [r7, #48]	; 0x30

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002976:	2360      	movs	r3, #96	; 0x60
 8002978:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800297a:	f107 0320 	add.w	r3, r7, #32
 800297e:	4619      	mov	r1, r3
 8002980:	483b      	ldr	r0, [pc, #236]	; (8002a70 <MspInit+0x1f4>)
 8002982:	f001 fa77 	bl	8003e74 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002986:	2301      	movs	r3, #1
 8002988:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800298a:	f107 0320 	add.w	r3, r7, #32
 800298e:	4619      	mov	r1, r3
 8002990:	4838      	ldr	r0, [pc, #224]	; (8002a74 <MspInit+0x1f8>)
 8002992:	f001 fa6f 	bl	8003e74 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002996:	f24c 7303 	movw	r3, #50947	; 0xc703
 800299a:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800299c:	f107 0320 	add.w	r3, r7, #32
 80029a0:	4619      	mov	r1, r3
 80029a2:	4835      	ldr	r0, [pc, #212]	; (8002a78 <MspInit+0x1fc>)
 80029a4:	f001 fa66 	bl	8003e74 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80029a8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80029ac:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80029ae:	f107 0320 	add.w	r3, r7, #32
 80029b2:	4619      	mov	r1, r3
 80029b4:	4831      	ldr	r0, [pc, #196]	; (8002a7c <MspInit+0x200>)
 80029b6:	f001 fa5d 	bl	8003e74 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80029ba:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80029be:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80029c0:	f107 0320 	add.w	r3, r7, #32
 80029c4:	4619      	mov	r1, r3
 80029c6:	482e      	ldr	r0, [pc, #184]	; (8002a80 <MspInit+0x204>)
 80029c8:	f001 fa54 	bl	8003e74 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80029cc:	f248 1333 	movw	r3, #33075	; 0x8133
 80029d0:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80029d2:	f107 0320 	add.w	r3, r7, #32
 80029d6:	4619      	mov	r1, r3
 80029d8:	482a      	ldr	r0, [pc, #168]	; (8002a84 <MspInit+0x208>)
 80029da:	f001 fa4b 	bl	8003e74 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80029de:	4b2a      	ldr	r3, [pc, #168]	; (8002a88 <MspInit+0x20c>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80029e4:	4b28      	ldr	r3, [pc, #160]	; (8002a88 <MspInit+0x20c>)
 80029e6:	2280      	movs	r2, #128	; 0x80
 80029e8:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80029ea:	4b27      	ldr	r3, [pc, #156]	; (8002a88 <MspInit+0x20c>)
 80029ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029f0:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80029f2:	4b25      	ldr	r3, [pc, #148]	; (8002a88 <MspInit+0x20c>)
 80029f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029f8:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029fa:	4b23      	ldr	r3, [pc, #140]	; (8002a88 <MspInit+0x20c>)
 80029fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a00:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002a02:	4b21      	ldr	r3, [pc, #132]	; (8002a88 <MspInit+0x20c>)
 8002a04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a08:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002a0a:	4b1f      	ldr	r3, [pc, #124]	; (8002a88 <MspInit+0x20c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002a10:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <MspInit+0x20c>)
 8002a12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a16:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002a18:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <MspInit+0x20c>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002a1e:	4b1a      	ldr	r3, [pc, #104]	; (8002a88 <MspInit+0x20c>)
 8002a20:	2203      	movs	r2, #3
 8002a22:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002a24:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <MspInit+0x20c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002a2a:	4b17      	ldr	r3, [pc, #92]	; (8002a88 <MspInit+0x20c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002a30:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <MspInit+0x20c>)
 8002a32:	4a16      	ldr	r2, [pc, #88]	; (8002a8c <MspInit+0x210>)
 8002a34:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a38:	4a13      	ldr	r2, [pc, #76]	; (8002a88 <MspInit+0x20c>)
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a3c:	4a12      	ldr	r2, [pc, #72]	; (8002a88 <MspInit+0x20c>)
 8002a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a40:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002a42:	4811      	ldr	r0, [pc, #68]	; (8002a88 <MspInit+0x20c>)
 8002a44:	f000 fe7c 	bl	8003740 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002a48:	480f      	ldr	r0, [pc, #60]	; (8002a88 <MspInit+0x20c>)
 8002a4a:	f000 fdcb 	bl	80035e4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0, 0);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2100      	movs	r1, #0
 8002a52:	2038      	movs	r0, #56	; 0x38
 8002a54:	f000 fd8f 	bl	8003576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002a58:	2038      	movs	r0, #56	; 0x38
 8002a5a:	f000 fda8 	bl	80035ae <HAL_NVIC_EnableIRQ>
}
 8002a5e:	bf00      	nop
 8002a60:	3738      	adds	r7, #56	; 0x38
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200004ac 	.word	0x200004ac
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40020400 	.word	0x40020400
 8002a74:	40020800 	.word	0x40020800
 8002a78:	40020c00 	.word	0x40020c00
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40021400 	.word	0x40021400
 8002a84:	40021800 	.word	0x40021800
 8002a88:	2000050c 	.word	0x2000050c
 8002a8c:	40026410 	.word	0x40026410

08002a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	607b      	str	r3, [r7, #4]
 8002a9a:	4b10      	ldr	r3, [pc, #64]	; (8002adc <HAL_MspInit+0x4c>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	4a0f      	ldr	r2, [pc, #60]	; (8002adc <HAL_MspInit+0x4c>)
 8002aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <HAL_MspInit+0x4c>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aae:	607b      	str	r3, [r7, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	4b09      	ldr	r3, [pc, #36]	; (8002adc <HAL_MspInit+0x4c>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a08      	ldr	r2, [pc, #32]	; (8002adc <HAL_MspInit+0x4c>)
 8002abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_MspInit+0x4c>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800

08002ae0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a0b      	ldr	r2, [pc, #44]	; (8002b1c <HAL_DMA2D_MspInit+0x3c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d10d      	bne.n	8002b0e <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <HAL_DMA2D_MspInit+0x40>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	4a09      	ldr	r2, [pc, #36]	; (8002b20 <HAL_DMA2D_MspInit+0x40>)
 8002afc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b00:	6313      	str	r3, [r2, #48]	; 0x30
 8002b02:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <HAL_DMA2D_MspInit+0x40>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002b0e:	bf00      	nop
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	4002b000 	.word	0x4002b000
 8002b20:	40023800 	.word	0x40023800

08002b24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08a      	sub	sp, #40	; 0x28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b2c:	f107 0314 	add.w	r3, r7, #20
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a29      	ldr	r2, [pc, #164]	; (8002be8 <HAL_I2C_MspInit+0xc4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d14b      	bne.n	8002bde <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	4b28      	ldr	r3, [pc, #160]	; (8002bec <HAL_I2C_MspInit+0xc8>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	4a27      	ldr	r2, [pc, #156]	; (8002bec <HAL_I2C_MspInit+0xc8>)
 8002b50:	f043 0304 	orr.w	r3, r3, #4
 8002b54:	6313      	str	r3, [r2, #48]	; 0x30
 8002b56:	4b25      	ldr	r3, [pc, #148]	; (8002bec <HAL_I2C_MspInit+0xc8>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	4b21      	ldr	r3, [pc, #132]	; (8002bec <HAL_I2C_MspInit+0xc8>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	4a20      	ldr	r2, [pc, #128]	; (8002bec <HAL_I2C_MspInit+0xc8>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	6313      	str	r3, [r2, #48]	; 0x30
 8002b72:	4b1e      	ldr	r3, [pc, #120]	; (8002bec <HAL_I2C_MspInit+0xc8>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b84:	2312      	movs	r3, #18
 8002b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b90:	2304      	movs	r3, #4
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b94:	f107 0314 	add.w	r3, r7, #20
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4815      	ldr	r0, [pc, #84]	; (8002bf0 <HAL_I2C_MspInit+0xcc>)
 8002b9c:	f001 f96a 	bl	8003e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ba6:	2312      	movs	r3, #18
 8002ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002baa:	2301      	movs	r3, #1
 8002bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bb2:	2304      	movs	r3, #4
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb6:	f107 0314 	add.w	r3, r7, #20
 8002bba:	4619      	mov	r1, r3
 8002bbc:	480d      	ldr	r0, [pc, #52]	; (8002bf4 <HAL_I2C_MspInit+0xd0>)
 8002bbe:	f001 f959 	bl	8003e74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	4b09      	ldr	r3, [pc, #36]	; (8002bec <HAL_I2C_MspInit+0xc8>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	4a08      	ldr	r2, [pc, #32]	; (8002bec <HAL_I2C_MspInit+0xc8>)
 8002bcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd2:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_I2C_MspInit+0xc8>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002bde:	bf00      	nop
 8002be0:	3728      	adds	r7, #40	; 0x28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40005c00 	.word	0x40005c00
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40020800 	.word	0x40020800
 8002bf4:	40020000 	.word	0x40020000

08002bf8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08e      	sub	sp, #56	; 0x38
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a77      	ldr	r2, [pc, #476]	; (8002df4 <HAL_LTDC_MspInit+0x1fc>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	f040 80e7 	bne.w	8002dea <HAL_LTDC_MspInit+0x1f2>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	623b      	str	r3, [r7, #32]
 8002c20:	4b75      	ldr	r3, [pc, #468]	; (8002df8 <HAL_LTDC_MspInit+0x200>)
 8002c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c24:	4a74      	ldr	r2, [pc, #464]	; (8002df8 <HAL_LTDC_MspInit+0x200>)
 8002c26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c2a:	6453      	str	r3, [r2, #68]	; 0x44
 8002c2c:	4b72      	ldr	r3, [pc, #456]	; (8002df8 <HAL_LTDC_MspInit+0x200>)
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c34:	623b      	str	r3, [r7, #32]
 8002c36:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61fb      	str	r3, [r7, #28]
 8002c3c:	4b6e      	ldr	r3, [pc, #440]	; (8002df8 <HAL_LTDC_MspInit+0x200>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	4a6d      	ldr	r2, [pc, #436]	; (8002df8 <HAL_LTDC_MspInit+0x200>)
 8002c42:	f043 0320 	orr.w	r3, r3, #32
 8002c46:	6313      	str	r3, [r2, #48]	; 0x30
 8002c48:	4b6b      	ldr	r3, [pc, #428]	; (8002df8 <HAL_LTDC_MspInit+0x200>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	61fb      	str	r3, [r7, #28]
 8002c52:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c54:	2300      	movs	r3, #0
 8002c56:	61bb      	str	r3, [r7, #24]
 8002c58:	4b67      	ldr	r3, [pc, #412]	; (8002df8 <HAL_LTDC_MspInit+0x200>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	4a66      	ldr	r2, [pc, #408]	; (8002df8 <HAL_LTDC_MspInit+0x200>)
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	6313      	str	r3, [r2, #48]	; 0x30
 8002c64:	4b64      	ldr	r3, [pc, #400]	; (8002df8 <HAL_LTDC_MspInit+0x200>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	61bb      	str	r3, [r7, #24]
 8002c6e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	4b60      	ldr	r3, [pc, #384]	; (8002df8 <HAL_LTDC_MspInit+0x200>)
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	4a5f      	ldr	r2, [pc, #380]	; (8002df8 <HAL_LTDC_MspInit+0x200>)
 8002c7a:	f043 0302 	orr.w	r3, r3, #2
 8002c7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c80:	4b5d      	ldr	r3, [pc, #372]	; (8002df8 <HAL_LTDC_MspInit+0x200>)
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	4b59      	ldr	r3, [pc, #356]	; (8002df8 <HAL_LTDC_MspInit+0x200>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	4a58      	ldr	r2, [pc, #352]	; (8002df8 <HAL_LTDC_MspInit+0x200>)
 8002c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9c:	4b56      	ldr	r3, [pc, #344]	; (8002df8 <HAL_LTDC_MspInit+0x200>)
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	4b52      	ldr	r3, [pc, #328]	; (8002df8 <HAL_LTDC_MspInit+0x200>)
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	4a51      	ldr	r2, [pc, #324]	; (8002df8 <HAL_LTDC_MspInit+0x200>)
 8002cb2:	f043 0304 	orr.w	r3, r3, #4
 8002cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb8:	4b4f      	ldr	r3, [pc, #316]	; (8002df8 <HAL_LTDC_MspInit+0x200>)
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	4b4b      	ldr	r3, [pc, #300]	; (8002df8 <HAL_LTDC_MspInit+0x200>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	4a4a      	ldr	r2, [pc, #296]	; (8002df8 <HAL_LTDC_MspInit+0x200>)
 8002cce:	f043 0308 	orr.w	r3, r3, #8
 8002cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd4:	4b48      	ldr	r3, [pc, #288]	; (8002df8 <HAL_LTDC_MspInit+0x200>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002cf2:	230e      	movs	r3, #14
 8002cf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	483f      	ldr	r0, [pc, #252]	; (8002dfc <HAL_LTDC_MspInit+0x204>)
 8002cfe:	f001 f8b9 	bl	8003e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8002d02:	f641 0358 	movw	r3, #6232	; 0x1858
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d10:	2300      	movs	r3, #0
 8002d12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d14:	230e      	movs	r3, #14
 8002d16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4838      	ldr	r0, [pc, #224]	; (8002e00 <HAL_LTDC_MspInit+0x208>)
 8002d20:	f001 f8a8 	bl	8003e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d24:	2303      	movs	r3, #3
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d30:	2300      	movs	r3, #0
 8002d32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002d34:	2309      	movs	r3, #9
 8002d36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4831      	ldr	r0, [pc, #196]	; (8002e04 <HAL_LTDC_MspInit+0x20c>)
 8002d40:	f001 f898 	bl	8003e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8002d44:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d52:	2300      	movs	r3, #0
 8002d54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d56:	230e      	movs	r3, #14
 8002d58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4828      	ldr	r0, [pc, #160]	; (8002e04 <HAL_LTDC_MspInit+0x20c>)
 8002d62:	f001 f887 	bl	8003e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8002d66:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d74:	2300      	movs	r3, #0
 8002d76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d78:	230e      	movs	r3, #14
 8002d7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d80:	4619      	mov	r1, r3
 8002d82:	4821      	ldr	r0, [pc, #132]	; (8002e08 <HAL_LTDC_MspInit+0x210>)
 8002d84:	f001 f876 	bl	8003e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d88:	23c0      	movs	r3, #192	; 0xc0
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d94:	2300      	movs	r3, #0
 8002d96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d98:	230e      	movs	r3, #14
 8002d9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da0:	4619      	mov	r1, r3
 8002da2:	481a      	ldr	r0, [pc, #104]	; (8002e0c <HAL_LTDC_MspInit+0x214>)
 8002da4:	f001 f866 	bl	8003e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002da8:	2308      	movs	r3, #8
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dac:	2302      	movs	r3, #2
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db4:	2300      	movs	r3, #0
 8002db6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002db8:	230e      	movs	r3, #14
 8002dba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4813      	ldr	r0, [pc, #76]	; (8002e10 <HAL_LTDC_MspInit+0x218>)
 8002dc4:	f001 f856 	bl	8003e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002dc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002dda:	2309      	movs	r3, #9
 8002ddc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de2:	4619      	mov	r1, r3
 8002de4:	4808      	ldr	r0, [pc, #32]	; (8002e08 <HAL_LTDC_MspInit+0x210>)
 8002de6:	f001 f845 	bl	8003e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002dea:	bf00      	nop
 8002dec:	3738      	adds	r7, #56	; 0x38
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40016800 	.word	0x40016800
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40021400 	.word	0x40021400
 8002e00:	40020000 	.word	0x40020000
 8002e04:	40020400 	.word	0x40020400
 8002e08:	40021800 	.word	0x40021800
 8002e0c:	40020800 	.word	0x40020800
 8002e10:	40020c00 	.word	0x40020c00

08002e14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08a      	sub	sp, #40	; 0x28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1c:	f107 0314 	add.w	r3, r7, #20
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	60da      	str	r2, [r3, #12]
 8002e2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a19      	ldr	r2, [pc, #100]	; (8002e98 <HAL_SPI_MspInit+0x84>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d12c      	bne.n	8002e90 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	4b18      	ldr	r3, [pc, #96]	; (8002e9c <HAL_SPI_MspInit+0x88>)
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	4a17      	ldr	r2, [pc, #92]	; (8002e9c <HAL_SPI_MspInit+0x88>)
 8002e40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e44:	6453      	str	r3, [r2, #68]	; 0x44
 8002e46:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <HAL_SPI_MspInit+0x88>)
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <HAL_SPI_MspInit+0x88>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	4a10      	ldr	r2, [pc, #64]	; (8002e9c <HAL_SPI_MspInit+0x88>)
 8002e5c:	f043 0320 	orr.w	r3, r3, #32
 8002e60:	6313      	str	r3, [r2, #48]	; 0x30
 8002e62:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <HAL_SPI_MspInit+0x88>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002e6e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e74:	2302      	movs	r3, #2
 8002e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002e80:	2305      	movs	r3, #5
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e84:	f107 0314 	add.w	r3, r7, #20
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4805      	ldr	r0, [pc, #20]	; (8002ea0 <HAL_SPI_MspInit+0x8c>)
 8002e8c:	f000 fff2 	bl	8003e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002e90:	bf00      	nop
 8002e92:	3728      	adds	r7, #40	; 0x28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40015000 	.word	0x40015000
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40021400 	.word	0x40021400

08002ea4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a08      	ldr	r2, [pc, #32]	; (8002ed4 <HAL_SPI_MspDeInit+0x30>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d10a      	bne.n	8002ecc <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002eb6:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <HAL_SPI_MspDeInit+0x34>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	4a07      	ldr	r2, [pc, #28]	; (8002ed8 <HAL_SPI_MspDeInit+0x34>)
 8002ebc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002ec0:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8002ec2:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002ec6:	4805      	ldr	r0, [pc, #20]	; (8002edc <HAL_SPI_MspDeInit+0x38>)
 8002ec8:	f001 f97e 	bl	80041c8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40015000 	.word	0x40015000
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40021400 	.word	0x40021400

08002ee0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a0e      	ldr	r2, [pc, #56]	; (8002f28 <HAL_TIM_Base_MspInit+0x48>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d115      	bne.n	8002f1e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	4b0d      	ldr	r3, [pc, #52]	; (8002f2c <HAL_TIM_Base_MspInit+0x4c>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	4a0c      	ldr	r2, [pc, #48]	; (8002f2c <HAL_TIM_Base_MspInit+0x4c>)
 8002efc:	f043 0310 	orr.w	r3, r3, #16
 8002f00:	6413      	str	r3, [r2, #64]	; 0x40
 8002f02:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <HAL_TIM_Base_MspInit+0x4c>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2100      	movs	r1, #0
 8002f12:	2036      	movs	r0, #54	; 0x36
 8002f14:	f000 fb2f 	bl	8003576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f18:	2036      	movs	r0, #54	; 0x36
 8002f1a:	f000 fb48 	bl	80035ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40001000 	.word	0x40001000
 8002f2c:	40023800 	.word	0x40023800

08002f30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08a      	sub	sp, #40	; 0x28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f38:	f107 0314 	add.w	r3, r7, #20
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	60da      	str	r2, [r3, #12]
 8002f46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a19      	ldr	r2, [pc, #100]	; (8002fb4 <HAL_UART_MspInit+0x84>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d12c      	bne.n	8002fac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	4b18      	ldr	r3, [pc, #96]	; (8002fb8 <HAL_UART_MspInit+0x88>)
 8002f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5a:	4a17      	ldr	r2, [pc, #92]	; (8002fb8 <HAL_UART_MspInit+0x88>)
 8002f5c:	f043 0310 	orr.w	r3, r3, #16
 8002f60:	6453      	str	r3, [r2, #68]	; 0x44
 8002f62:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <HAL_UART_MspInit+0x88>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	f003 0310 	and.w	r3, r3, #16
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <HAL_UART_MspInit+0x88>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	4a10      	ldr	r2, [pc, #64]	; (8002fb8 <HAL_UART_MspInit+0x88>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7e:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <HAL_UART_MspInit+0x88>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f8a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f90:	2302      	movs	r3, #2
 8002f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f9c:	2307      	movs	r3, #7
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa0:	f107 0314 	add.w	r3, r7, #20
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4805      	ldr	r0, [pc, #20]	; (8002fbc <HAL_UART_MspInit+0x8c>)
 8002fa8:	f000 ff64 	bl	8003e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002fac:	bf00      	nop
 8002fae:	3728      	adds	r7, #40	; 0x28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40011000 	.word	0x40011000
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	40020000 	.word	0x40020000

08002fc0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002fc6:	1d3b      	adds	r3, r7, #4
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
 8002fd2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002fd4:	4b3b      	ldr	r3, [pc, #236]	; (80030c4 <HAL_FMC_MspInit+0x104>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d16f      	bne.n	80030bc <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002fdc:	4b39      	ldr	r3, [pc, #228]	; (80030c4 <HAL_FMC_MspInit+0x104>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	603b      	str	r3, [r7, #0]
 8002fe6:	4b38      	ldr	r3, [pc, #224]	; (80030c8 <HAL_FMC_MspInit+0x108>)
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fea:	4a37      	ldr	r2, [pc, #220]	; (80030c8 <HAL_FMC_MspInit+0x108>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	6393      	str	r3, [r2, #56]	; 0x38
 8002ff2:	4b35      	ldr	r3, [pc, #212]	; (80030c8 <HAL_FMC_MspInit+0x108>)
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002ffe:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003002:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003004:	2302      	movs	r3, #2
 8003006:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800300c:	2303      	movs	r3, #3
 800300e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003010:	230c      	movs	r3, #12
 8003012:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003014:	1d3b      	adds	r3, r7, #4
 8003016:	4619      	mov	r1, r3
 8003018:	482c      	ldr	r0, [pc, #176]	; (80030cc <HAL_FMC_MspInit+0x10c>)
 800301a:	f000 ff2b 	bl	8003e74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800301e:	2301      	movs	r3, #1
 8003020:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003022:	2302      	movs	r3, #2
 8003024:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800302a:	2303      	movs	r3, #3
 800302c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800302e:	230c      	movs	r3, #12
 8003030:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003032:	1d3b      	adds	r3, r7, #4
 8003034:	4619      	mov	r1, r3
 8003036:	4826      	ldr	r0, [pc, #152]	; (80030d0 <HAL_FMC_MspInit+0x110>)
 8003038:	f000 ff1c 	bl	8003e74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800303c:	f248 1333 	movw	r3, #33075	; 0x8133
 8003040:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003042:	2302      	movs	r3, #2
 8003044:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800304a:	2303      	movs	r3, #3
 800304c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800304e:	230c      	movs	r3, #12
 8003050:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003052:	1d3b      	adds	r3, r7, #4
 8003054:	4619      	mov	r1, r3
 8003056:	481f      	ldr	r0, [pc, #124]	; (80030d4 <HAL_FMC_MspInit+0x114>)
 8003058:	f000 ff0c 	bl	8003e74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800305c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003060:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003062:	2302      	movs	r3, #2
 8003064:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306a:	2303      	movs	r3, #3
 800306c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800306e:	230c      	movs	r3, #12
 8003070:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003072:	1d3b      	adds	r3, r7, #4
 8003074:	4619      	mov	r1, r3
 8003076:	4818      	ldr	r0, [pc, #96]	; (80030d8 <HAL_FMC_MspInit+0x118>)
 8003078:	f000 fefc 	bl	8003e74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800307c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003080:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003082:	2302      	movs	r3, #2
 8003084:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800308a:	2303      	movs	r3, #3
 800308c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800308e:	230c      	movs	r3, #12
 8003090:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003092:	1d3b      	adds	r3, r7, #4
 8003094:	4619      	mov	r1, r3
 8003096:	4811      	ldr	r0, [pc, #68]	; (80030dc <HAL_FMC_MspInit+0x11c>)
 8003098:	f000 feec 	bl	8003e74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800309c:	2360      	movs	r3, #96	; 0x60
 800309e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a0:	2302      	movs	r3, #2
 80030a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a8:	2303      	movs	r3, #3
 80030aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80030ac:	230c      	movs	r3, #12
 80030ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b0:	1d3b      	adds	r3, r7, #4
 80030b2:	4619      	mov	r1, r3
 80030b4:	480a      	ldr	r0, [pc, #40]	; (80030e0 <HAL_FMC_MspInit+0x120>)
 80030b6:	f000 fedd 	bl	8003e74 <HAL_GPIO_Init>
 80030ba:	e000      	b.n	80030be <HAL_FMC_MspInit+0xfe>
    return;
 80030bc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	2000056c 	.word	0x2000056c
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40021400 	.word	0x40021400
 80030d0:	40020800 	.word	0x40020800
 80030d4:	40021800 	.word	0x40021800
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40020c00 	.word	0x40020c00
 80030e0:	40020400 	.word	0x40020400

080030e4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80030ec:	f7ff ff68 	bl	8002fc0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003106:	b480      	push	{r7}
 8003108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800310a:	e7fe      	b.n	800310a <HardFault_Handler+0x4>

0800310c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003110:	e7fe      	b.n	8003110 <MemManage_Handler+0x4>

08003112 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003116:	e7fe      	b.n	8003116 <BusFault_Handler+0x4>

08003118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800311c:	e7fe      	b.n	800311c <UsageFault_Handler+0x4>

0800311e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800311e:	b480      	push	{r7}
 8003120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003122:	bf00      	nop
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003130:	bf00      	nop
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800313a:	b480      	push	{r7}
 800313c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800313e:	bf00      	nop
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800314c:	f000 f8f6 	bl	800333c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003150:	bf00      	nop
 8003152:	bd80      	pop	{r7, pc}

08003154 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003158:	4802      	ldr	r0, [pc, #8]	; (8003164 <TIM6_DAC_IRQHandler+0x10>)
 800315a:	f003 fa5c 	bl	8006616 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	20000268 	.word	0x20000268

08003168 <_getpid>:
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
 800316c:	2301      	movs	r3, #1
 800316e:	4618      	mov	r0, r3
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <_kill>:
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
 8003182:	f004 f9ed 	bl	8007560 <__errno>
 8003186:	4602      	mov	r2, r0
 8003188:	2316      	movs	r3, #22
 800318a:	6013      	str	r3, [r2, #0]
 800318c:	f04f 33ff 	mov.w	r3, #4294967295
 8003190:	4618      	mov	r0, r3
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <_exit>:
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	f04f 31ff 	mov.w	r1, #4294967295
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff ffe7 	bl	8003178 <_kill>
 80031aa:	e7fe      	b.n	80031aa <_exit+0x12>

080031ac <_sbrk>:
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	4a14      	ldr	r2, [pc, #80]	; (8003208 <_sbrk+0x5c>)
 80031b6:	4b15      	ldr	r3, [pc, #84]	; (800320c <_sbrk+0x60>)
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	4b13      	ldr	r3, [pc, #76]	; (8003210 <_sbrk+0x64>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d102      	bne.n	80031ce <_sbrk+0x22>
 80031c8:	4b11      	ldr	r3, [pc, #68]	; (8003210 <_sbrk+0x64>)
 80031ca:	4a12      	ldr	r2, [pc, #72]	; (8003214 <_sbrk+0x68>)
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	4b10      	ldr	r3, [pc, #64]	; (8003210 <_sbrk+0x64>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d207      	bcs.n	80031ec <_sbrk+0x40>
 80031dc:	f004 f9c0 	bl	8007560 <__errno>
 80031e0:	4602      	mov	r2, r0
 80031e2:	230c      	movs	r3, #12
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	f04f 33ff 	mov.w	r3, #4294967295
 80031ea:	e009      	b.n	8003200 <_sbrk+0x54>
 80031ec:	4b08      	ldr	r3, [pc, #32]	; (8003210 <_sbrk+0x64>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	4b07      	ldr	r3, [pc, #28]	; (8003210 <_sbrk+0x64>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4413      	add	r3, r2
 80031fa:	4a05      	ldr	r2, [pc, #20]	; (8003210 <_sbrk+0x64>)
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	20030000 	.word	0x20030000
 800320c:	00000400 	.word	0x00000400
 8003210:	20000570 	.word	0x20000570
 8003214:	20000590 	.word	0x20000590

08003218 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800321c:	4b08      	ldr	r3, [pc, #32]	; (8003240 <SystemInit+0x28>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003222:	4a07      	ldr	r2, [pc, #28]	; (8003240 <SystemInit+0x28>)
 8003224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800322c:	4b04      	ldr	r3, [pc, #16]	; (8003240 <SystemInit+0x28>)
 800322e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003232:	609a      	str	r2, [r3, #8]
#endif
}
 8003234:	bf00      	nop
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800327c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003248:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800324a:	e003      	b.n	8003254 <LoopCopyDataInit>

0800324c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800324c:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800324e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003250:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003252:	3104      	adds	r1, #4

08003254 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003254:	480b      	ldr	r0, [pc, #44]	; (8003284 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003256:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003258:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800325a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800325c:	d3f6      	bcc.n	800324c <CopyDataInit>
  ldr  r2, =_sbss
 800325e:	4a0b      	ldr	r2, [pc, #44]	; (800328c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003260:	e002      	b.n	8003268 <LoopFillZerobss>

08003262 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003262:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003264:	f842 3b04 	str.w	r3, [r2], #4

08003268 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003268:	4b09      	ldr	r3, [pc, #36]	; (8003290 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800326a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800326c:	d3f9      	bcc.n	8003262 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800326e:	f7ff ffd3 	bl	8003218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003272:	f004 f97b 	bl	800756c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003276:	f7fe f9bd 	bl	80015f4 <main>
  bx  lr    
 800327a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800327c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003280:	08009334 	.word	0x08009334
  ldr  r0, =_sdata
 8003284:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003288:	200000b4 	.word	0x200000b4
  ldr  r2, =_sbss
 800328c:	200000b4 	.word	0x200000b4
  ldr  r3, = _ebss
 8003290:	2000058c 	.word	0x2000058c

08003294 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003294:	e7fe      	b.n	8003294 <ADC_IRQHandler>
	...

08003298 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800329c:	4b0e      	ldr	r3, [pc, #56]	; (80032d8 <HAL_Init+0x40>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a0d      	ldr	r2, [pc, #52]	; (80032d8 <HAL_Init+0x40>)
 80032a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032a8:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <HAL_Init+0x40>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a0a      	ldr	r2, [pc, #40]	; (80032d8 <HAL_Init+0x40>)
 80032ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032b4:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <HAL_Init+0x40>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a07      	ldr	r2, [pc, #28]	; (80032d8 <HAL_Init+0x40>)
 80032ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032c0:	2003      	movs	r0, #3
 80032c2:	f000 f94d 	bl	8003560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032c6:	2000      	movs	r0, #0
 80032c8:	f000 f808 	bl	80032dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032cc:	f7ff fbe0 	bl	8002a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40023c00 	.word	0x40023c00

080032dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032e4:	4b12      	ldr	r3, [pc, #72]	; (8003330 <HAL_InitTick+0x54>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4b12      	ldr	r3, [pc, #72]	; (8003334 <HAL_InitTick+0x58>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	4619      	mov	r1, r3
 80032ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 f965 	bl	80035ca <HAL_SYSTICK_Config>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e00e      	b.n	8003328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b0f      	cmp	r3, #15
 800330e:	d80a      	bhi.n	8003326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003310:	2200      	movs	r2, #0
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	f04f 30ff 	mov.w	r0, #4294967295
 8003318:	f000 f92d 	bl	8003576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800331c:	4a06      	ldr	r2, [pc, #24]	; (8003338 <HAL_InitTick+0x5c>)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	e000      	b.n	8003328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
}
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20000044 	.word	0x20000044
 8003334:	2000004c 	.word	0x2000004c
 8003338:	20000048 	.word	0x20000048

0800333c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003340:	4b06      	ldr	r3, [pc, #24]	; (800335c <HAL_IncTick+0x20>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_IncTick+0x24>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4413      	add	r3, r2
 800334c:	4a04      	ldr	r2, [pc, #16]	; (8003360 <HAL_IncTick+0x24>)
 800334e:	6013      	str	r3, [r2, #0]
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	2000004c 	.word	0x2000004c
 8003360:	20000584 	.word	0x20000584

08003364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return uwTick;
 8003368:	4b03      	ldr	r3, [pc, #12]	; (8003378 <HAL_GetTick+0x14>)
 800336a:	681b      	ldr	r3, [r3, #0]
}
 800336c:	4618      	mov	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	20000584 	.word	0x20000584

0800337c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003384:	f7ff ffee 	bl	8003364 <HAL_GetTick>
 8003388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003394:	d005      	beq.n	80033a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <HAL_Delay+0x40>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4413      	add	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033a2:	bf00      	nop
 80033a4:	f7ff ffde 	bl	8003364 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d8f7      	bhi.n	80033a4 <HAL_Delay+0x28>
  {
  }
}
 80033b4:	bf00      	nop
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	2000004c 	.word	0x2000004c

080033c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033d0:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <__NVIC_SetPriorityGrouping+0x44>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033dc:	4013      	ands	r3, r2
 80033de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033f2:	4a04      	ldr	r2, [pc, #16]	; (8003404 <__NVIC_SetPriorityGrouping+0x44>)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	60d3      	str	r3, [r2, #12]
}
 80033f8:	bf00      	nop
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800340c:	4b04      	ldr	r3, [pc, #16]	; (8003420 <__NVIC_GetPriorityGrouping+0x18>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	0a1b      	lsrs	r3, r3, #8
 8003412:	f003 0307 	and.w	r3, r3, #7
}
 8003416:	4618      	mov	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	2b00      	cmp	r3, #0
 8003434:	db0b      	blt.n	800344e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	f003 021f 	and.w	r2, r3, #31
 800343c:	4907      	ldr	r1, [pc, #28]	; (800345c <__NVIC_EnableIRQ+0x38>)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	2001      	movs	r0, #1
 8003446:	fa00 f202 	lsl.w	r2, r0, r2
 800344a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	e000e100 	.word	0xe000e100

08003460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	6039      	str	r1, [r7, #0]
 800346a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800346c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003470:	2b00      	cmp	r3, #0
 8003472:	db0a      	blt.n	800348a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	b2da      	uxtb	r2, r3
 8003478:	490c      	ldr	r1, [pc, #48]	; (80034ac <__NVIC_SetPriority+0x4c>)
 800347a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347e:	0112      	lsls	r2, r2, #4
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	440b      	add	r3, r1
 8003484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003488:	e00a      	b.n	80034a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	b2da      	uxtb	r2, r3
 800348e:	4908      	ldr	r1, [pc, #32]	; (80034b0 <__NVIC_SetPriority+0x50>)
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	3b04      	subs	r3, #4
 8003498:	0112      	lsls	r2, r2, #4
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	440b      	add	r3, r1
 800349e:	761a      	strb	r2, [r3, #24]
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	e000e100 	.word	0xe000e100
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b089      	sub	sp, #36	; 0x24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f1c3 0307 	rsb	r3, r3, #7
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	bf28      	it	cs
 80034d2:	2304      	movcs	r3, #4
 80034d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	3304      	adds	r3, #4
 80034da:	2b06      	cmp	r3, #6
 80034dc:	d902      	bls.n	80034e4 <NVIC_EncodePriority+0x30>
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	3b03      	subs	r3, #3
 80034e2:	e000      	b.n	80034e6 <NVIC_EncodePriority+0x32>
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43da      	mvns	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	401a      	ands	r2, r3
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	fa01 f303 	lsl.w	r3, r1, r3
 8003506:	43d9      	mvns	r1, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800350c:	4313      	orrs	r3, r2
         );
}
 800350e:	4618      	mov	r0, r3
 8003510:	3724      	adds	r7, #36	; 0x24
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3b01      	subs	r3, #1
 8003528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800352c:	d301      	bcc.n	8003532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800352e:	2301      	movs	r3, #1
 8003530:	e00f      	b.n	8003552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003532:	4a0a      	ldr	r2, [pc, #40]	; (800355c <SysTick_Config+0x40>)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3b01      	subs	r3, #1
 8003538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800353a:	210f      	movs	r1, #15
 800353c:	f04f 30ff 	mov.w	r0, #4294967295
 8003540:	f7ff ff8e 	bl	8003460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <SysTick_Config+0x40>)
 8003546:	2200      	movs	r2, #0
 8003548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800354a:	4b04      	ldr	r3, [pc, #16]	; (800355c <SysTick_Config+0x40>)
 800354c:	2207      	movs	r2, #7
 800354e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	e000e010 	.word	0xe000e010

08003560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ff29 	bl	80033c0 <__NVIC_SetPriorityGrouping>
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003576:	b580      	push	{r7, lr}
 8003578:	b086      	sub	sp, #24
 800357a:	af00      	add	r7, sp, #0
 800357c:	4603      	mov	r3, r0
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003588:	f7ff ff3e 	bl	8003408 <__NVIC_GetPriorityGrouping>
 800358c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	6978      	ldr	r0, [r7, #20]
 8003594:	f7ff ff8e 	bl	80034b4 <NVIC_EncodePriority>
 8003598:	4602      	mov	r2, r0
 800359a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff ff5d 	bl	8003460 <__NVIC_SetPriority>
}
 80035a6:	bf00      	nop
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	4603      	mov	r3, r0
 80035b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff ff31 	bl	8003424 <__NVIC_EnableIRQ>
}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff ffa2 	bl	800351c <SysTick_Config>
 80035d8:	4603      	mov	r3, r0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035f0:	f7ff feb8 	bl	8003364 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e099      	b.n	8003734 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0201 	bic.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003620:	e00f      	b.n	8003642 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003622:	f7ff fe9f 	bl	8003364 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b05      	cmp	r3, #5
 800362e:	d908      	bls.n	8003642 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2220      	movs	r2, #32
 8003634:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2203      	movs	r2, #3
 800363a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e078      	b.n	8003734 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e8      	bne.n	8003622 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	4b38      	ldr	r3, [pc, #224]	; (800373c <HAL_DMA_Init+0x158>)
 800365c:	4013      	ands	r3, r2
 800365e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800366e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800367a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003686:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4313      	orrs	r3, r2
 8003692:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	2b04      	cmp	r3, #4
 800369a:	d107      	bne.n	80036ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	4313      	orrs	r3, r2
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f023 0307 	bic.w	r3, r3, #7
 80036c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d117      	bne.n	8003706 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00e      	beq.n	8003706 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f8bd 	bl	8003868 <DMA_CheckFifoParam>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d008      	beq.n	8003706 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2240      	movs	r2, #64	; 0x40
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003702:	2301      	movs	r3, #1
 8003704:	e016      	b.n	8003734 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f874 	bl	80037fc <DMA_CalcBaseAndBitshift>
 8003714:	4603      	mov	r3, r0
 8003716:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371c:	223f      	movs	r2, #63	; 0x3f
 800371e:	409a      	lsls	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	f010803f 	.word	0xf010803f

08003740 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e050      	b.n	80037f4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d101      	bne.n	8003762 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800375e:	2302      	movs	r3, #2
 8003760:	e048      	b.n	80037f4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0201 	bic.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2200      	movs	r2, #0
 8003780:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2200      	movs	r2, #0
 8003788:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2200      	movs	r2, #0
 8003790:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2200      	movs	r2, #0
 8003798:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2221      	movs	r2, #33	; 0x21
 80037a0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f82a 	bl	80037fc <DMA_CalcBaseAndBitshift>
 80037a8:	4603      	mov	r3, r0
 80037aa:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d4:	223f      	movs	r2, #63	; 0x3f
 80037d6:	409a      	lsls	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	3b10      	subs	r3, #16
 800380c:	4a14      	ldr	r2, [pc, #80]	; (8003860 <DMA_CalcBaseAndBitshift+0x64>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	091b      	lsrs	r3, r3, #4
 8003814:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003816:	4a13      	ldr	r2, [pc, #76]	; (8003864 <DMA_CalcBaseAndBitshift+0x68>)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4413      	add	r3, r2
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b03      	cmp	r3, #3
 8003828:	d909      	bls.n	800383e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003832:	f023 0303 	bic.w	r3, r3, #3
 8003836:	1d1a      	adds	r2, r3, #4
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	659a      	str	r2, [r3, #88]	; 0x58
 800383c:	e007      	b.n	800384e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003846:	f023 0303 	bic.w	r3, r3, #3
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	aaaaaaab 	.word	0xaaaaaaab
 8003864:	0800931c 	.word	0x0800931c

08003868 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003870:	2300      	movs	r3, #0
 8003872:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d11f      	bne.n	80038c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b03      	cmp	r3, #3
 8003886:	d855      	bhi.n	8003934 <DMA_CheckFifoParam+0xcc>
 8003888:	a201      	add	r2, pc, #4	; (adr r2, 8003890 <DMA_CheckFifoParam+0x28>)
 800388a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388e:	bf00      	nop
 8003890:	080038a1 	.word	0x080038a1
 8003894:	080038b3 	.word	0x080038b3
 8003898:	080038a1 	.word	0x080038a1
 800389c:	08003935 	.word	0x08003935
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d045      	beq.n	8003938 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b0:	e042      	b.n	8003938 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038ba:	d13f      	bne.n	800393c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038c0:	e03c      	b.n	800393c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ca:	d121      	bne.n	8003910 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	d836      	bhi.n	8003940 <DMA_CheckFifoParam+0xd8>
 80038d2:	a201      	add	r2, pc, #4	; (adr r2, 80038d8 <DMA_CheckFifoParam+0x70>)
 80038d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d8:	080038e9 	.word	0x080038e9
 80038dc:	080038ef 	.word	0x080038ef
 80038e0:	080038e9 	.word	0x080038e9
 80038e4:	08003901 	.word	0x08003901
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	73fb      	strb	r3, [r7, #15]
      break;
 80038ec:	e02f      	b.n	800394e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d024      	beq.n	8003944 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038fe:	e021      	b.n	8003944 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003908:	d11e      	bne.n	8003948 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800390e:	e01b      	b.n	8003948 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d902      	bls.n	800391c <DMA_CheckFifoParam+0xb4>
 8003916:	2b03      	cmp	r3, #3
 8003918:	d003      	beq.n	8003922 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800391a:	e018      	b.n	800394e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	73fb      	strb	r3, [r7, #15]
      break;
 8003920:	e015      	b.n	800394e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00e      	beq.n	800394c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	73fb      	strb	r3, [r7, #15]
      break;
 8003932:	e00b      	b.n	800394c <DMA_CheckFifoParam+0xe4>
      break;
 8003934:	bf00      	nop
 8003936:	e00a      	b.n	800394e <DMA_CheckFifoParam+0xe6>
      break;
 8003938:	bf00      	nop
 800393a:	e008      	b.n	800394e <DMA_CheckFifoParam+0xe6>
      break;
 800393c:	bf00      	nop
 800393e:	e006      	b.n	800394e <DMA_CheckFifoParam+0xe6>
      break;
 8003940:	bf00      	nop
 8003942:	e004      	b.n	800394e <DMA_CheckFifoParam+0xe6>
      break;
 8003944:	bf00      	nop
 8003946:	e002      	b.n	800394e <DMA_CheckFifoParam+0xe6>
      break;   
 8003948:	bf00      	nop
 800394a:	e000      	b.n	800394e <DMA_CheckFifoParam+0xe6>
      break;
 800394c:	bf00      	nop
    }
  } 
  
  return status; 
 800394e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e03b      	b.n	80039e6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff f8ac 	bl	8002ae0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ac:	f023 0107 	bic.w	r1, r3, #7
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80039c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	68d1      	ldr	r1, [r2, #12]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6812      	ldr	r2, [r2, #0]
 80039d2:	430b      	orrs	r3, r1
 80039d4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b086      	sub	sp, #24
 80039f2:	af02      	add	r7, sp, #8
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
 80039fa:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d101      	bne.n	8003a0a <HAL_DMA2D_Start+0x1c>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e018      	b.n	8003a3c <HAL_DMA2D_Start+0x4e>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2202      	movs	r2, #2
 8003a16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	68b9      	ldr	r1, [r7, #8]
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 f989 	bl	8003d3c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0201 	orr.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d056      	beq.n	8003b0e <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003a60:	f7ff fc80 	bl	8003364 <HAL_GetTick>
 8003a64:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003a66:	e04b      	b.n	8003b00 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d023      	beq.n	8003ac2 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a88:	f043 0202 	orr.w	r2, r3, #2
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9e:	f043 0201 	orr.w	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2221      	movs	r2, #33	; 0x21
 8003aac:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2204      	movs	r2, #4
 8003ab2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e0a5      	b.n	8003c0e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac8:	d01a      	beq.n	8003b00 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003aca:	f7ff fc4b 	bl	8003364 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d302      	bcc.n	8003ae0 <HAL_DMA2D_PollForTransfer+0x9c>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10f      	bne.n	8003b00 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae4:	f043 0220 	orr.w	r2, r3, #32
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2203      	movs	r2, #3
 8003af0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e086      	b.n	8003c0e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0ac      	beq.n	8003a68 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d061      	beq.n	8003bf4 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b30:	f7ff fc18 	bl	8003364 <HAL_GetTick>
 8003b34:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003b36:	e056      	b.n	8003be6 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d02e      	beq.n	8003ba8 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b58:	f043 0204 	orr.w	r2, r3, #4
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6e:	f043 0202 	orr.w	r2, r3, #2
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b84:	f043 0201 	orr.w	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2229      	movs	r2, #41	; 0x29
 8003b92:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2204      	movs	r2, #4
 8003b98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e032      	b.n	8003c0e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bae:	d01a      	beq.n	8003be6 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003bb0:	f7ff fbd8 	bl	8003364 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d302      	bcc.n	8003bc6 <HAL_DMA2D_PollForTransfer+0x182>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10f      	bne.n	8003be6 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bca:	f043 0220 	orr.w	r2, r3, #32
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2203      	movs	r2, #3
 8003bd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e013      	b.n	8003c0e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0a1      	beq.n	8003b38 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2212      	movs	r2, #18
 8003bfa:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_DMA2D_ConfigLayer+0x20>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e079      	b.n	8003d2c <HAL_DMA2D_ConfigLayer+0x114>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	3318      	adds	r3, #24
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	4413      	add	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	041b      	lsls	r3, r3, #16
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003c62:	4b35      	ldr	r3, [pc, #212]	; (8003d38 <HAL_DMA2D_ConfigLayer+0x120>)
 8003c64:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b0a      	cmp	r3, #10
 8003c6c:	d003      	beq.n	8003c76 <HAL_DMA2D_ConfigLayer+0x5e>
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b09      	cmp	r3, #9
 8003c74:	d107      	bne.n	8003c86 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	e005      	b.n	8003c92 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	061b      	lsls	r3, r3, #24
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d120      	bne.n	8003cda <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	ea02 0103 	and.w	r1, r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b0a      	cmp	r3, #10
 8003cc0:	d003      	beq.n	8003cca <HAL_DMA2D_ConfigLayer+0xb2>
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b09      	cmp	r3, #9
 8003cc8:	d127      	bne.n	8003d1a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003cd6:	629a      	str	r2, [r3, #40]	; 0x28
 8003cd8:	e01f      	b.n	8003d1a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69da      	ldr	r2, [r3, #28]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	ea02 0103 	and.w	r1, r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	6812      	ldr	r2, [r2, #0]
 8003cfa:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b0a      	cmp	r3, #10
 8003d02:	d003      	beq.n	8003d0c <HAL_DMA2D_ConfigLayer+0xf4>
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b09      	cmp	r3, #9
 8003d0a:	d106      	bne.n	8003d1a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003d18:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	371c      	adds	r7, #28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	ff03000f 	.word	0xff03000f

08003d3c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b08b      	sub	sp, #44	; 0x2c
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d50:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	041a      	lsls	r2, r3, #16
 8003d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d74:	d174      	bne.n	8003e60 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003d7c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d84:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003d8c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d108      	bne.n	8003dae <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	431a      	orrs	r2, r3
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
 8003dac:	e053      	b.n	8003e56 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d106      	bne.n	8003dc4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc2:	e048      	b.n	8003e56 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d111      	bne.n	8003df0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	0cdb      	lsrs	r3, r3, #19
 8003dd0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	0a9b      	lsrs	r3, r3, #10
 8003dd6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	08db      	lsrs	r3, r3, #3
 8003ddc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	02db      	lsls	r3, r3, #11
 8003de6:	4313      	orrs	r3, r2
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
 8003dee:	e032      	b.n	8003e56 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d117      	bne.n	8003e28 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	0fdb      	lsrs	r3, r3, #31
 8003dfc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	0cdb      	lsrs	r3, r3, #19
 8003e02:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	0adb      	lsrs	r3, r3, #11
 8003e08:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	08db      	lsrs	r3, r3, #3
 8003e0e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	029b      	lsls	r3, r3, #10
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	03db      	lsls	r3, r3, #15
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
 8003e26:	e016      	b.n	8003e56 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	0f1b      	lsrs	r3, r3, #28
 8003e2c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	0d1b      	lsrs	r3, r3, #20
 8003e32:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	0b1b      	lsrs	r3, r3, #12
 8003e38:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	011a      	lsls	r2, r3, #4
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	021b      	lsls	r3, r3, #8
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	031b      	lsls	r3, r3, #12
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003e5e:	e003      	b.n	8003e68 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	60da      	str	r2, [r3, #12]
}
 8003e68:	bf00      	nop
 8003e6a:	372c      	adds	r7, #44	; 0x2c
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b089      	sub	sp, #36	; 0x24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61fb      	str	r3, [r7, #28]
 8003e8e:	e177      	b.n	8004180 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e90:	2201      	movs	r2, #1
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	f040 8166 	bne.w	800417a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d00b      	beq.n	8003ece <HAL_GPIO_Init+0x5a>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d007      	beq.n	8003ece <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ec2:	2b11      	cmp	r3, #17
 8003ec4:	d003      	beq.n	8003ece <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b12      	cmp	r3, #18
 8003ecc:	d130      	bne.n	8003f30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	2203      	movs	r2, #3
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f04:	2201      	movs	r2, #1
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4013      	ands	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	091b      	lsrs	r3, r3, #4
 8003f1a:	f003 0201 	and.w	r2, r3, #1
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	43db      	mvns	r3, r3
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4013      	ands	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d003      	beq.n	8003f70 <HAL_GPIO_Init+0xfc>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2b12      	cmp	r3, #18
 8003f6e:	d123      	bne.n	8003fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	08da      	lsrs	r2, r3, #3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3208      	adds	r2, #8
 8003f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	220f      	movs	r2, #15
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	08da      	lsrs	r2, r3, #3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3208      	adds	r2, #8
 8003fb2:	69b9      	ldr	r1, [r7, #24]
 8003fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 0203 	and.w	r2, r3, #3
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80c0 	beq.w	800417a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	4b65      	ldr	r3, [pc, #404]	; (8004194 <HAL_GPIO_Init+0x320>)
 8004000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004002:	4a64      	ldr	r2, [pc, #400]	; (8004194 <HAL_GPIO_Init+0x320>)
 8004004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004008:	6453      	str	r3, [r2, #68]	; 0x44
 800400a:	4b62      	ldr	r3, [pc, #392]	; (8004194 <HAL_GPIO_Init+0x320>)
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004016:	4a60      	ldr	r2, [pc, #384]	; (8004198 <HAL_GPIO_Init+0x324>)
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	089b      	lsrs	r3, r3, #2
 800401c:	3302      	adds	r3, #2
 800401e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	220f      	movs	r2, #15
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	43db      	mvns	r3, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4013      	ands	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a57      	ldr	r2, [pc, #348]	; (800419c <HAL_GPIO_Init+0x328>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d037      	beq.n	80040b2 <HAL_GPIO_Init+0x23e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a56      	ldr	r2, [pc, #344]	; (80041a0 <HAL_GPIO_Init+0x32c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d031      	beq.n	80040ae <HAL_GPIO_Init+0x23a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a55      	ldr	r2, [pc, #340]	; (80041a4 <HAL_GPIO_Init+0x330>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d02b      	beq.n	80040aa <HAL_GPIO_Init+0x236>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a54      	ldr	r2, [pc, #336]	; (80041a8 <HAL_GPIO_Init+0x334>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d025      	beq.n	80040a6 <HAL_GPIO_Init+0x232>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a53      	ldr	r2, [pc, #332]	; (80041ac <HAL_GPIO_Init+0x338>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d01f      	beq.n	80040a2 <HAL_GPIO_Init+0x22e>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a52      	ldr	r2, [pc, #328]	; (80041b0 <HAL_GPIO_Init+0x33c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d019      	beq.n	800409e <HAL_GPIO_Init+0x22a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a51      	ldr	r2, [pc, #324]	; (80041b4 <HAL_GPIO_Init+0x340>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d013      	beq.n	800409a <HAL_GPIO_Init+0x226>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a50      	ldr	r2, [pc, #320]	; (80041b8 <HAL_GPIO_Init+0x344>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00d      	beq.n	8004096 <HAL_GPIO_Init+0x222>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a4f      	ldr	r2, [pc, #316]	; (80041bc <HAL_GPIO_Init+0x348>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d007      	beq.n	8004092 <HAL_GPIO_Init+0x21e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a4e      	ldr	r2, [pc, #312]	; (80041c0 <HAL_GPIO_Init+0x34c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d101      	bne.n	800408e <HAL_GPIO_Init+0x21a>
 800408a:	2309      	movs	r3, #9
 800408c:	e012      	b.n	80040b4 <HAL_GPIO_Init+0x240>
 800408e:	230a      	movs	r3, #10
 8004090:	e010      	b.n	80040b4 <HAL_GPIO_Init+0x240>
 8004092:	2308      	movs	r3, #8
 8004094:	e00e      	b.n	80040b4 <HAL_GPIO_Init+0x240>
 8004096:	2307      	movs	r3, #7
 8004098:	e00c      	b.n	80040b4 <HAL_GPIO_Init+0x240>
 800409a:	2306      	movs	r3, #6
 800409c:	e00a      	b.n	80040b4 <HAL_GPIO_Init+0x240>
 800409e:	2305      	movs	r3, #5
 80040a0:	e008      	b.n	80040b4 <HAL_GPIO_Init+0x240>
 80040a2:	2304      	movs	r3, #4
 80040a4:	e006      	b.n	80040b4 <HAL_GPIO_Init+0x240>
 80040a6:	2303      	movs	r3, #3
 80040a8:	e004      	b.n	80040b4 <HAL_GPIO_Init+0x240>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e002      	b.n	80040b4 <HAL_GPIO_Init+0x240>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <HAL_GPIO_Init+0x240>
 80040b2:	2300      	movs	r3, #0
 80040b4:	69fa      	ldr	r2, [r7, #28]
 80040b6:	f002 0203 	and.w	r2, r2, #3
 80040ba:	0092      	lsls	r2, r2, #2
 80040bc:	4093      	lsls	r3, r2
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040c4:	4934      	ldr	r1, [pc, #208]	; (8004198 <HAL_GPIO_Init+0x324>)
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	089b      	lsrs	r3, r3, #2
 80040ca:	3302      	adds	r3, #2
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040d2:	4b3c      	ldr	r3, [pc, #240]	; (80041c4 <HAL_GPIO_Init+0x350>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	43db      	mvns	r3, r3
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4013      	ands	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040f6:	4a33      	ldr	r2, [pc, #204]	; (80041c4 <HAL_GPIO_Init+0x350>)
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040fc:	4b31      	ldr	r3, [pc, #196]	; (80041c4 <HAL_GPIO_Init+0x350>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	43db      	mvns	r3, r3
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	4013      	ands	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004120:	4a28      	ldr	r2, [pc, #160]	; (80041c4 <HAL_GPIO_Init+0x350>)
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004126:	4b27      	ldr	r3, [pc, #156]	; (80041c4 <HAL_GPIO_Init+0x350>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	43db      	mvns	r3, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4013      	ands	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800414a:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <HAL_GPIO_Init+0x350>)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004150:	4b1c      	ldr	r3, [pc, #112]	; (80041c4 <HAL_GPIO_Init+0x350>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	43db      	mvns	r3, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4013      	ands	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004174:	4a13      	ldr	r2, [pc, #76]	; (80041c4 <HAL_GPIO_Init+0x350>)
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	3301      	adds	r3, #1
 800417e:	61fb      	str	r3, [r7, #28]
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	2b0f      	cmp	r3, #15
 8004184:	f67f ae84 	bls.w	8003e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004188:	bf00      	nop
 800418a:	3724      	adds	r7, #36	; 0x24
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	40023800 	.word	0x40023800
 8004198:	40013800 	.word	0x40013800
 800419c:	40020000 	.word	0x40020000
 80041a0:	40020400 	.word	0x40020400
 80041a4:	40020800 	.word	0x40020800
 80041a8:	40020c00 	.word	0x40020c00
 80041ac:	40021000 	.word	0x40021000
 80041b0:	40021400 	.word	0x40021400
 80041b4:	40021800 	.word	0x40021800
 80041b8:	40021c00 	.word	0x40021c00
 80041bc:	40022000 	.word	0x40022000
 80041c0:	40022400 	.word	0x40022400
 80041c4:	40013c00 	.word	0x40013c00

080041c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80041da:	2300      	movs	r3, #0
 80041dc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041de:	2300      	movs	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]
 80041e2:	e0d9      	b.n	8004398 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041e4:	2201      	movs	r2, #1
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	4013      	ands	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	f040 80c9 	bne.w	8004392 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004200:	4a6a      	ldr	r2, [pc, #424]	; (80043ac <HAL_GPIO_DeInit+0x1e4>)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	089b      	lsrs	r3, r3, #2
 8004206:	3302      	adds	r3, #2
 8004208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800420c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	220f      	movs	r2, #15
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	4013      	ands	r3, r2
 8004220:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a62      	ldr	r2, [pc, #392]	; (80043b0 <HAL_GPIO_DeInit+0x1e8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d037      	beq.n	800429a <HAL_GPIO_DeInit+0xd2>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a61      	ldr	r2, [pc, #388]	; (80043b4 <HAL_GPIO_DeInit+0x1ec>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d031      	beq.n	8004296 <HAL_GPIO_DeInit+0xce>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a60      	ldr	r2, [pc, #384]	; (80043b8 <HAL_GPIO_DeInit+0x1f0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d02b      	beq.n	8004292 <HAL_GPIO_DeInit+0xca>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a5f      	ldr	r2, [pc, #380]	; (80043bc <HAL_GPIO_DeInit+0x1f4>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d025      	beq.n	800428e <HAL_GPIO_DeInit+0xc6>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a5e      	ldr	r2, [pc, #376]	; (80043c0 <HAL_GPIO_DeInit+0x1f8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d01f      	beq.n	800428a <HAL_GPIO_DeInit+0xc2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a5d      	ldr	r2, [pc, #372]	; (80043c4 <HAL_GPIO_DeInit+0x1fc>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d019      	beq.n	8004286 <HAL_GPIO_DeInit+0xbe>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a5c      	ldr	r2, [pc, #368]	; (80043c8 <HAL_GPIO_DeInit+0x200>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d013      	beq.n	8004282 <HAL_GPIO_DeInit+0xba>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a5b      	ldr	r2, [pc, #364]	; (80043cc <HAL_GPIO_DeInit+0x204>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d00d      	beq.n	800427e <HAL_GPIO_DeInit+0xb6>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a5a      	ldr	r2, [pc, #360]	; (80043d0 <HAL_GPIO_DeInit+0x208>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d007      	beq.n	800427a <HAL_GPIO_DeInit+0xb2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a59      	ldr	r2, [pc, #356]	; (80043d4 <HAL_GPIO_DeInit+0x20c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d101      	bne.n	8004276 <HAL_GPIO_DeInit+0xae>
 8004272:	2309      	movs	r3, #9
 8004274:	e012      	b.n	800429c <HAL_GPIO_DeInit+0xd4>
 8004276:	230a      	movs	r3, #10
 8004278:	e010      	b.n	800429c <HAL_GPIO_DeInit+0xd4>
 800427a:	2308      	movs	r3, #8
 800427c:	e00e      	b.n	800429c <HAL_GPIO_DeInit+0xd4>
 800427e:	2307      	movs	r3, #7
 8004280:	e00c      	b.n	800429c <HAL_GPIO_DeInit+0xd4>
 8004282:	2306      	movs	r3, #6
 8004284:	e00a      	b.n	800429c <HAL_GPIO_DeInit+0xd4>
 8004286:	2305      	movs	r3, #5
 8004288:	e008      	b.n	800429c <HAL_GPIO_DeInit+0xd4>
 800428a:	2304      	movs	r3, #4
 800428c:	e006      	b.n	800429c <HAL_GPIO_DeInit+0xd4>
 800428e:	2303      	movs	r3, #3
 8004290:	e004      	b.n	800429c <HAL_GPIO_DeInit+0xd4>
 8004292:	2302      	movs	r3, #2
 8004294:	e002      	b.n	800429c <HAL_GPIO_DeInit+0xd4>
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <HAL_GPIO_DeInit+0xd4>
 800429a:	2300      	movs	r3, #0
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	f002 0203 	and.w	r2, r2, #3
 80042a2:	0092      	lsls	r2, r2, #2
 80042a4:	4093      	lsls	r3, r2
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d132      	bne.n	8004312 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80042ac:	4b4a      	ldr	r3, [pc, #296]	; (80043d8 <HAL_GPIO_DeInit+0x210>)
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	43db      	mvns	r3, r3
 80042b4:	4948      	ldr	r1, [pc, #288]	; (80043d8 <HAL_GPIO_DeInit+0x210>)
 80042b6:	4013      	ands	r3, r2
 80042b8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80042ba:	4b47      	ldr	r3, [pc, #284]	; (80043d8 <HAL_GPIO_DeInit+0x210>)
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	43db      	mvns	r3, r3
 80042c2:	4945      	ldr	r1, [pc, #276]	; (80043d8 <HAL_GPIO_DeInit+0x210>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80042c8:	4b43      	ldr	r3, [pc, #268]	; (80043d8 <HAL_GPIO_DeInit+0x210>)
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	43db      	mvns	r3, r3
 80042d0:	4941      	ldr	r1, [pc, #260]	; (80043d8 <HAL_GPIO_DeInit+0x210>)
 80042d2:	4013      	ands	r3, r2
 80042d4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80042d6:	4b40      	ldr	r3, [pc, #256]	; (80043d8 <HAL_GPIO_DeInit+0x210>)
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	43db      	mvns	r3, r3
 80042de:	493e      	ldr	r1, [pc, #248]	; (80043d8 <HAL_GPIO_DeInit+0x210>)
 80042e0:	4013      	ands	r3, r2
 80042e2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	220f      	movs	r2, #15
 80042ee:	fa02 f303 	lsl.w	r3, r2, r3
 80042f2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80042f4:	4a2d      	ldr	r2, [pc, #180]	; (80043ac <HAL_GPIO_DeInit+0x1e4>)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	089b      	lsrs	r3, r3, #2
 80042fa:	3302      	adds	r3, #2
 80042fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	43da      	mvns	r2, r3
 8004304:	4829      	ldr	r0, [pc, #164]	; (80043ac <HAL_GPIO_DeInit+0x1e4>)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	089b      	lsrs	r3, r3, #2
 800430a:	400a      	ands	r2, r1
 800430c:	3302      	adds	r3, #2
 800430e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	2103      	movs	r1, #3
 800431c:	fa01 f303 	lsl.w	r3, r1, r3
 8004320:	43db      	mvns	r3, r3
 8004322:	401a      	ands	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	08da      	lsrs	r2, r3, #3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3208      	adds	r2, #8
 8004330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	220f      	movs	r2, #15
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	43db      	mvns	r3, r3
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	08d2      	lsrs	r2, r2, #3
 8004348:	4019      	ands	r1, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	3208      	adds	r2, #8
 800434e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	2103      	movs	r1, #3
 800435c:	fa01 f303 	lsl.w	r3, r1, r3
 8004360:	43db      	mvns	r3, r3
 8004362:	401a      	ands	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	2101      	movs	r1, #1
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	fa01 f303 	lsl.w	r3, r1, r3
 8004374:	43db      	mvns	r3, r3
 8004376:	401a      	ands	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	2103      	movs	r1, #3
 8004386:	fa01 f303 	lsl.w	r3, r1, r3
 800438a:	43db      	mvns	r3, r3
 800438c:	401a      	ands	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	3301      	adds	r3, #1
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2b0f      	cmp	r3, #15
 800439c:	f67f af22 	bls.w	80041e4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80043a0:	bf00      	nop
 80043a2:	371c      	adds	r7, #28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	40013800 	.word	0x40013800
 80043b0:	40020000 	.word	0x40020000
 80043b4:	40020400 	.word	0x40020400
 80043b8:	40020800 	.word	0x40020800
 80043bc:	40020c00 	.word	0x40020c00
 80043c0:	40021000 	.word	0x40021000
 80043c4:	40021400 	.word	0x40021400
 80043c8:	40021800 	.word	0x40021800
 80043cc:	40021c00 	.word	0x40021c00
 80043d0:	40022000 	.word	0x40022000
 80043d4:	40022400 	.word	0x40022400
 80043d8:	40013c00 	.word	0x40013c00

080043dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	807b      	strh	r3, [r7, #2]
 80043e8:	4613      	mov	r3, r2
 80043ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043ec:	787b      	ldrb	r3, [r7, #1]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043f2:	887a      	ldrh	r2, [r7, #2]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043f8:	e003      	b.n	8004402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043fa:	887b      	ldrh	r3, [r7, #2]
 80043fc:	041a      	lsls	r2, r3, #16
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	619a      	str	r2, [r3, #24]
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
	...

08004410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e11f      	b.n	8004662 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7fe fb74 	bl	8002b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2224      	movs	r2, #36	; 0x24
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0201 	bic.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004462:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004472:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004474:	f001 f8b4 	bl	80055e0 <HAL_RCC_GetPCLK1Freq>
 8004478:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	4a7b      	ldr	r2, [pc, #492]	; (800466c <HAL_I2C_Init+0x25c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d807      	bhi.n	8004494 <HAL_I2C_Init+0x84>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4a7a      	ldr	r2, [pc, #488]	; (8004670 <HAL_I2C_Init+0x260>)
 8004488:	4293      	cmp	r3, r2
 800448a:	bf94      	ite	ls
 800448c:	2301      	movls	r3, #1
 800448e:	2300      	movhi	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	e006      	b.n	80044a2 <HAL_I2C_Init+0x92>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4a77      	ldr	r2, [pc, #476]	; (8004674 <HAL_I2C_Init+0x264>)
 8004498:	4293      	cmp	r3, r2
 800449a:	bf94      	ite	ls
 800449c:	2301      	movls	r3, #1
 800449e:	2300      	movhi	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e0db      	b.n	8004662 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4a72      	ldr	r2, [pc, #456]	; (8004678 <HAL_I2C_Init+0x268>)
 80044ae:	fba2 2303 	umull	r2, r3, r2, r3
 80044b2:	0c9b      	lsrs	r3, r3, #18
 80044b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	4a64      	ldr	r2, [pc, #400]	; (800466c <HAL_I2C_Init+0x25c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d802      	bhi.n	80044e4 <HAL_I2C_Init+0xd4>
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	3301      	adds	r3, #1
 80044e2:	e009      	b.n	80044f8 <HAL_I2C_Init+0xe8>
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80044ea:	fb02 f303 	mul.w	r3, r2, r3
 80044ee:	4a63      	ldr	r2, [pc, #396]	; (800467c <HAL_I2C_Init+0x26c>)
 80044f0:	fba2 2303 	umull	r2, r3, r2, r3
 80044f4:	099b      	lsrs	r3, r3, #6
 80044f6:	3301      	adds	r3, #1
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6812      	ldr	r2, [r2, #0]
 80044fc:	430b      	orrs	r3, r1
 80044fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800450a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	4956      	ldr	r1, [pc, #344]	; (800466c <HAL_I2C_Init+0x25c>)
 8004514:	428b      	cmp	r3, r1
 8004516:	d80d      	bhi.n	8004534 <HAL_I2C_Init+0x124>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	1e59      	subs	r1, r3, #1
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	fbb1 f3f3 	udiv	r3, r1, r3
 8004526:	3301      	adds	r3, #1
 8004528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800452c:	2b04      	cmp	r3, #4
 800452e:	bf38      	it	cc
 8004530:	2304      	movcc	r3, #4
 8004532:	e04f      	b.n	80045d4 <HAL_I2C_Init+0x1c4>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d111      	bne.n	8004560 <HAL_I2C_Init+0x150>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	1e58      	subs	r0, r3, #1
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6859      	ldr	r1, [r3, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	440b      	add	r3, r1
 800454a:	fbb0 f3f3 	udiv	r3, r0, r3
 800454e:	3301      	adds	r3, #1
 8004550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004554:	2b00      	cmp	r3, #0
 8004556:	bf0c      	ite	eq
 8004558:	2301      	moveq	r3, #1
 800455a:	2300      	movne	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	e012      	b.n	8004586 <HAL_I2C_Init+0x176>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	1e58      	subs	r0, r3, #1
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6859      	ldr	r1, [r3, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	0099      	lsls	r1, r3, #2
 8004570:	440b      	add	r3, r1
 8004572:	fbb0 f3f3 	udiv	r3, r0, r3
 8004576:	3301      	adds	r3, #1
 8004578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800457c:	2b00      	cmp	r3, #0
 800457e:	bf0c      	ite	eq
 8004580:	2301      	moveq	r3, #1
 8004582:	2300      	movne	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <HAL_I2C_Init+0x17e>
 800458a:	2301      	movs	r3, #1
 800458c:	e022      	b.n	80045d4 <HAL_I2C_Init+0x1c4>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10e      	bne.n	80045b4 <HAL_I2C_Init+0x1a4>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	1e58      	subs	r0, r3, #1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6859      	ldr	r1, [r3, #4]
 800459e:	460b      	mov	r3, r1
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	440b      	add	r3, r1
 80045a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80045a8:	3301      	adds	r3, #1
 80045aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045b2:	e00f      	b.n	80045d4 <HAL_I2C_Init+0x1c4>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	1e58      	subs	r0, r3, #1
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6859      	ldr	r1, [r3, #4]
 80045bc:	460b      	mov	r3, r1
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	0099      	lsls	r1, r3, #2
 80045c4:	440b      	add	r3, r1
 80045c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045ca:	3301      	adds	r3, #1
 80045cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	6809      	ldr	r1, [r1, #0]
 80045d8:	4313      	orrs	r3, r2
 80045da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69da      	ldr	r2, [r3, #28]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004602:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6911      	ldr	r1, [r2, #16]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	68d2      	ldr	r2, [r2, #12]
 800460e:	4311      	orrs	r1, r2
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	430b      	orrs	r3, r1
 8004616:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695a      	ldr	r2, [r3, #20]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	000186a0 	.word	0x000186a0
 8004670:	001e847f 	.word	0x001e847f
 8004674:	003d08ff 	.word	0x003d08ff
 8004678:	431bde83 	.word	0x431bde83
 800467c:	10624dd3 	.word	0x10624dd3

08004680 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b20      	cmp	r3, #32
 8004694:	d129      	bne.n	80046ea <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2224      	movs	r2, #36	; 0x24
 800469a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0201 	bic.w	r2, r2, #1
 80046ac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0210 	bic.w	r2, r2, #16
 80046bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f042 0201 	orr.w	r2, r2, #1
 80046dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	e000      	b.n	80046ec <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80046ea:	2302      	movs	r3, #2
  }
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004702:	2300      	movs	r3, #0
 8004704:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b20      	cmp	r3, #32
 8004710:	d12a      	bne.n	8004768 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2224      	movs	r2, #36	; 0x24
 8004716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0201 	bic.w	r2, r2, #1
 8004728:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004732:	89fb      	ldrh	r3, [r7, #14]
 8004734:	f023 030f 	bic.w	r3, r3, #15
 8004738:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	b29a      	uxth	r2, r3
 800473e:	89fb      	ldrh	r3, [r7, #14]
 8004740:	4313      	orrs	r3, r2
 8004742:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	89fa      	ldrh	r2, [r7, #14]
 800474a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0201 	orr.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004764:	2300      	movs	r3, #0
 8004766:	e000      	b.n	800476a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004768:	2302      	movs	r3, #2
  }
}
 800476a:	4618      	mov	r0, r3
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
	...

08004778 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e0bf      	b.n	800490a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d106      	bne.n	80047a4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7fe fa2a 	bl	8002bf8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699a      	ldr	r2, [r3, #24]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80047ba:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6999      	ldr	r1, [r3, #24]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80047d0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6899      	ldr	r1, [r3, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	4b4a      	ldr	r3, [pc, #296]	; (8004914 <HAL_LTDC_Init+0x19c>)
 80047ec:	400b      	ands	r3, r1
 80047ee:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	041b      	lsls	r3, r3, #16
 80047f6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6899      	ldr	r1, [r3, #8]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699a      	ldr	r2, [r3, #24]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68d9      	ldr	r1, [r3, #12]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	4b3e      	ldr	r3, [pc, #248]	; (8004914 <HAL_LTDC_Init+0x19c>)
 800481a:	400b      	ands	r3, r1
 800481c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	041b      	lsls	r3, r3, #16
 8004824:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68d9      	ldr	r1, [r3, #12]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a1a      	ldr	r2, [r3, #32]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6919      	ldr	r1, [r3, #16]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4b33      	ldr	r3, [pc, #204]	; (8004914 <HAL_LTDC_Init+0x19c>)
 8004848:	400b      	ands	r3, r1
 800484a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	041b      	lsls	r3, r3, #16
 8004852:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6919      	ldr	r1, [r3, #16]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6959      	ldr	r1, [r3, #20]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	4b27      	ldr	r3, [pc, #156]	; (8004914 <HAL_LTDC_Init+0x19c>)
 8004876:	400b      	ands	r3, r1
 8004878:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487e:	041b      	lsls	r3, r3, #16
 8004880:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6959      	ldr	r1, [r3, #20]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800489e:	021b      	lsls	r3, r3, #8
 80048a0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80048a8:	041b      	lsls	r3, r3, #16
 80048aa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80048ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0206 	orr.w	r2, r2, #6
 80048e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699a      	ldr	r2, [r3, #24]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	f000f800 	.word	0xf000f800

08004918 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004918:	b5b0      	push	{r4, r5, r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800492a:	2b01      	cmp	r3, #1
 800492c:	d101      	bne.n	8004932 <HAL_LTDC_ConfigLayer+0x1a>
 800492e:	2302      	movs	r3, #2
 8004930:	e02c      	b.n	800498c <HAL_LTDC_ConfigLayer+0x74>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2202      	movs	r2, #2
 800493e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2134      	movs	r1, #52	; 0x34
 8004948:	fb01 f303 	mul.w	r3, r1, r3
 800494c:	4413      	add	r3, r2
 800494e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	4614      	mov	r4, r2
 8004956:	461d      	mov	r5, r3
 8004958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800495a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800495c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800495e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004964:	682b      	ldr	r3, [r5, #0]
 8004966:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	68b9      	ldr	r1, [r7, #8]
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 f83b 	bl	80049e8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2201      	movs	r2, #1
 8004978:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bdb0      	pop	{r4, r5, r7, pc}

08004994 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d101      	bne.n	80049aa <HAL_LTDC_EnableDither+0x16>
 80049a6:	2302      	movs	r3, #2
 80049a8:	e016      	b.n	80049d8 <HAL_LTDC_EnableDither+0x44>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2202      	movs	r2, #2
 80049b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80049ba:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <HAL_LTDC_EnableDither+0x50>)
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	4a09      	ldr	r2, [pc, #36]	; (80049e4 <HAL_LTDC_EnableDither+0x50>)
 80049c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c4:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	40016800 	.word	0x40016800

080049e8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b089      	sub	sp, #36	; 0x24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	0c1b      	lsrs	r3, r3, #16
 8004a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a04:	4413      	add	r3, r2
 8004a06:	041b      	lsls	r3, r3, #16
 8004a08:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	01db      	lsls	r3, r3, #7
 8004a14:	4413      	add	r3, r2
 8004a16:	3384      	adds	r3, #132	; 0x84
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	6812      	ldr	r2, [r2, #0]
 8004a1e:	4611      	mov	r1, r2
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	01d2      	lsls	r2, r2, #7
 8004a24:	440a      	add	r2, r1
 8004a26:	3284      	adds	r2, #132	; 0x84
 8004a28:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004a2c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	0c1b      	lsrs	r3, r3, #16
 8004a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a3e:	4413      	add	r3, r2
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4619      	mov	r1, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	01db      	lsls	r3, r3, #7
 8004a4c:	440b      	add	r3, r1
 8004a4e:	3384      	adds	r3, #132	; 0x84
 8004a50:	4619      	mov	r1, r3
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a66:	4413      	add	r3, r2
 8004a68:	041b      	lsls	r3, r3, #16
 8004a6a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	01db      	lsls	r3, r3, #7
 8004a76:	4413      	add	r3, r2
 8004a78:	3384      	adds	r3, #132	; 0x84
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	4611      	mov	r1, r2
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	01d2      	lsls	r2, r2, #7
 8004a86:	440a      	add	r2, r1
 8004a88:	3284      	adds	r2, #132	; 0x84
 8004a8a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004a8e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a9e:	4413      	add	r3, r2
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	01db      	lsls	r3, r3, #7
 8004aac:	440b      	add	r3, r1
 8004aae:	3384      	adds	r3, #132	; 0x84
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	01db      	lsls	r3, r3, #7
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3384      	adds	r3, #132	; 0x84
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	6812      	ldr	r2, [r2, #0]
 8004acc:	4611      	mov	r1, r2
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	01d2      	lsls	r2, r2, #7
 8004ad2:	440a      	add	r2, r1
 8004ad4:	3284      	adds	r2, #132	; 0x84
 8004ad6:	f023 0307 	bic.w	r3, r3, #7
 8004ada:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	01db      	lsls	r3, r3, #7
 8004ae6:	4413      	add	r3, r2
 8004ae8:	3384      	adds	r3, #132	; 0x84
 8004aea:	461a      	mov	r2, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004af8:	021b      	lsls	r3, r3, #8
 8004afa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004b02:	041b      	lsls	r3, r3, #16
 8004b04:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	061b      	lsls	r3, r3, #24
 8004b0c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	461a      	mov	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	01db      	lsls	r3, r3, #7
 8004b18:	4413      	add	r3, r2
 8004b1a:	3384      	adds	r3, #132	; 0x84
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	461a      	mov	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	01db      	lsls	r3, r3, #7
 8004b28:	4413      	add	r3, r2
 8004b2a:	3384      	adds	r3, #132	; 0x84
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	2300      	movs	r3, #0
 8004b30:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b38:	461a      	mov	r2, r3
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	431a      	orrs	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4619      	mov	r1, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	01db      	lsls	r3, r3, #7
 8004b4c:	440b      	add	r3, r1
 8004b4e:	3384      	adds	r3, #132	; 0x84
 8004b50:	4619      	mov	r1, r3
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	01db      	lsls	r3, r3, #7
 8004b62:	4413      	add	r3, r2
 8004b64:	3384      	adds	r3, #132	; 0x84
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	6812      	ldr	r2, [r2, #0]
 8004b6c:	4611      	mov	r1, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	01d2      	lsls	r2, r2, #7
 8004b72:	440a      	add	r2, r1
 8004b74:	3284      	adds	r2, #132	; 0x84
 8004b76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b7a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	461a      	mov	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	01db      	lsls	r3, r3, #7
 8004b86:	4413      	add	r3, r2
 8004b88:	3384      	adds	r3, #132	; 0x84
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	461a      	mov	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	01db      	lsls	r3, r3, #7
 8004b9c:	4413      	add	r3, r2
 8004b9e:	3384      	adds	r3, #132	; 0x84
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	6812      	ldr	r2, [r2, #0]
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	01d2      	lsls	r2, r2, #7
 8004bac:	440a      	add	r2, r1
 8004bae:	3284      	adds	r2, #132	; 0x84
 8004bb0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004bb4:	f023 0307 	bic.w	r3, r3, #7
 8004bb8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	69da      	ldr	r2, [r3, #28]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	68f9      	ldr	r1, [r7, #12]
 8004bc4:	6809      	ldr	r1, [r1, #0]
 8004bc6:	4608      	mov	r0, r1
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	01c9      	lsls	r1, r1, #7
 8004bcc:	4401      	add	r1, r0
 8004bce:	3184      	adds	r1, #132	; 0x84
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	01db      	lsls	r3, r3, #7
 8004bde:	4413      	add	r3, r2
 8004be0:	3384      	adds	r3, #132	; 0x84
 8004be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	461a      	mov	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	01db      	lsls	r3, r3, #7
 8004bee:	4413      	add	r3, r2
 8004bf0:	3384      	adds	r3, #132	; 0x84
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	01db      	lsls	r3, r3, #7
 8004c02:	4413      	add	r3, r2
 8004c04:	3384      	adds	r3, #132	; 0x84
 8004c06:	461a      	mov	r2, r3
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d102      	bne.n	8004c1c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004c16:	2304      	movs	r3, #4
 8004c18:	61fb      	str	r3, [r7, #28]
 8004c1a:	e01b      	b.n	8004c54 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d102      	bne.n	8004c2a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004c24:	2303      	movs	r3, #3
 8004c26:	61fb      	str	r3, [r7, #28]
 8004c28:	e014      	b.n	8004c54 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d00b      	beq.n	8004c4a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d007      	beq.n	8004c4a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004c3e:	2b03      	cmp	r3, #3
 8004c40:	d003      	beq.n	8004c4a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004c46:	2b07      	cmp	r3, #7
 8004c48:	d102      	bne.n	8004c50 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	61fb      	str	r3, [r7, #28]
 8004c4e:	e001      	b.n	8004c54 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004c50:	2301      	movs	r3, #1
 8004c52:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	01db      	lsls	r3, r3, #7
 8004c5e:	4413      	add	r3, r2
 8004c60:	3384      	adds	r3, #132	; 0x84
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	6812      	ldr	r2, [r2, #0]
 8004c68:	4611      	mov	r1, r2
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	01d2      	lsls	r2, r2, #7
 8004c6e:	440a      	add	r2, r1
 8004c70:	3284      	adds	r2, #132	; 0x84
 8004c72:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004c76:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7c:	69fa      	ldr	r2, [r7, #28]
 8004c7e:	fb02 f303 	mul.w	r3, r2, r3
 8004c82:	041a      	lsls	r2, r3, #16
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	6859      	ldr	r1, [r3, #4]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	1acb      	subs	r3, r1, r3
 8004c8e:	69f9      	ldr	r1, [r7, #28]
 8004c90:	fb01 f303 	mul.w	r3, r1, r3
 8004c94:	3303      	adds	r3, #3
 8004c96:	68f9      	ldr	r1, [r7, #12]
 8004c98:	6809      	ldr	r1, [r1, #0]
 8004c9a:	4608      	mov	r0, r1
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	01c9      	lsls	r1, r1, #7
 8004ca0:	4401      	add	r1, r0
 8004ca2:	3184      	adds	r1, #132	; 0x84
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	461a      	mov	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	01db      	lsls	r3, r3, #7
 8004cb2:	4413      	add	r3, r2
 8004cb4:	3384      	adds	r3, #132	; 0x84
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	6812      	ldr	r2, [r2, #0]
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	01d2      	lsls	r2, r2, #7
 8004cc2:	440a      	add	r2, r1
 8004cc4:	3284      	adds	r2, #132	; 0x84
 8004cc6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004cca:	f023 0307 	bic.w	r3, r3, #7
 8004cce:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	01db      	lsls	r3, r3, #7
 8004cda:	4413      	add	r3, r2
 8004cdc:	3384      	adds	r3, #132	; 0x84
 8004cde:	461a      	mov	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	461a      	mov	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	01db      	lsls	r3, r3, #7
 8004cf0:	4413      	add	r3, r2
 8004cf2:	3384      	adds	r3, #132	; 0x84
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	4611      	mov	r1, r2
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	01d2      	lsls	r2, r2, #7
 8004d00:	440a      	add	r2, r1
 8004d02:	3284      	adds	r2, #132	; 0x84
 8004d04:	f043 0301 	orr.w	r3, r3, #1
 8004d08:	6013      	str	r3, [r2, #0]
}
 8004d0a:	bf00      	nop
 8004d0c:	3724      	adds	r7, #36	; 0x24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
	...

08004d18 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d22:	2300      	movs	r3, #0
 8004d24:	603b      	str	r3, [r7, #0]
 8004d26:	4b20      	ldr	r3, [pc, #128]	; (8004da8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	4a1f      	ldr	r2, [pc, #124]	; (8004da8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d30:	6413      	str	r3, [r2, #64]	; 0x40
 8004d32:	4b1d      	ldr	r3, [pc, #116]	; (8004da8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004d3e:	4b1b      	ldr	r3, [pc, #108]	; (8004dac <HAL_PWREx_EnableOverDrive+0x94>)
 8004d40:	2201      	movs	r2, #1
 8004d42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d44:	f7fe fb0e 	bl	8003364 <HAL_GetTick>
 8004d48:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d4a:	e009      	b.n	8004d60 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d4c:	f7fe fb0a 	bl	8003364 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d5a:	d901      	bls.n	8004d60 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e01f      	b.n	8004da0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d60:	4b13      	ldr	r3, [pc, #76]	; (8004db0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6c:	d1ee      	bne.n	8004d4c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004d6e:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d70:	2201      	movs	r2, #1
 8004d72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d74:	f7fe faf6 	bl	8003364 <HAL_GetTick>
 8004d78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d7a:	e009      	b.n	8004d90 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d7c:	f7fe faf2 	bl	8003364 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d8a:	d901      	bls.n	8004d90 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e007      	b.n	8004da0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d90:	4b07      	ldr	r3, [pc, #28]	; (8004db0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d9c:	d1ee      	bne.n	8004d7c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40023800 	.word	0x40023800
 8004dac:	420e0040 	.word	0x420e0040
 8004db0:	40007000 	.word	0x40007000
 8004db4:	420e0044 	.word	0x420e0044

08004db8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e25b      	b.n	8005282 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d075      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dd6:	4ba3      	ldr	r3, [pc, #652]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 030c 	and.w	r3, r3, #12
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d00c      	beq.n	8004dfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004de2:	4ba0      	ldr	r3, [pc, #640]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dea:	2b08      	cmp	r3, #8
 8004dec:	d112      	bne.n	8004e14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dee:	4b9d      	ldr	r3, [pc, #628]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dfa:	d10b      	bne.n	8004e14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dfc:	4b99      	ldr	r3, [pc, #612]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d05b      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x108>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d157      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e236      	b.n	8005282 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e1c:	d106      	bne.n	8004e2c <HAL_RCC_OscConfig+0x74>
 8004e1e:	4b91      	ldr	r3, [pc, #580]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a90      	ldr	r2, [pc, #576]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	e01d      	b.n	8004e68 <HAL_RCC_OscConfig+0xb0>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e34:	d10c      	bne.n	8004e50 <HAL_RCC_OscConfig+0x98>
 8004e36:	4b8b      	ldr	r3, [pc, #556]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a8a      	ldr	r2, [pc, #552]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e40:	6013      	str	r3, [r2, #0]
 8004e42:	4b88      	ldr	r3, [pc, #544]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a87      	ldr	r2, [pc, #540]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	e00b      	b.n	8004e68 <HAL_RCC_OscConfig+0xb0>
 8004e50:	4b84      	ldr	r3, [pc, #528]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a83      	ldr	r2, [pc, #524]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e5a:	6013      	str	r3, [r2, #0]
 8004e5c:	4b81      	ldr	r3, [pc, #516]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a80      	ldr	r2, [pc, #512]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d013      	beq.n	8004e98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e70:	f7fe fa78 	bl	8003364 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e78:	f7fe fa74 	bl	8003364 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b64      	cmp	r3, #100	; 0x64
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e1fb      	b.n	8005282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e8a:	4b76      	ldr	r3, [pc, #472]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0f0      	beq.n	8004e78 <HAL_RCC_OscConfig+0xc0>
 8004e96:	e014      	b.n	8004ec2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e98:	f7fe fa64 	bl	8003364 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ea0:	f7fe fa60 	bl	8003364 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b64      	cmp	r3, #100	; 0x64
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e1e7      	b.n	8005282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eb2:	4b6c      	ldr	r3, [pc, #432]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f0      	bne.n	8004ea0 <HAL_RCC_OscConfig+0xe8>
 8004ebe:	e000      	b.n	8004ec2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d063      	beq.n	8004f96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ece:	4b65      	ldr	r3, [pc, #404]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 030c 	and.w	r3, r3, #12
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00b      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eda:	4b62      	ldr	r3, [pc, #392]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ee2:	2b08      	cmp	r3, #8
 8004ee4:	d11c      	bne.n	8004f20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ee6:	4b5f      	ldr	r3, [pc, #380]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d116      	bne.n	8004f20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ef2:	4b5c      	ldr	r3, [pc, #368]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d005      	beq.n	8004f0a <HAL_RCC_OscConfig+0x152>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d001      	beq.n	8004f0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e1bb      	b.n	8005282 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f0a:	4b56      	ldr	r3, [pc, #344]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	4952      	ldr	r1, [pc, #328]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f1e:	e03a      	b.n	8004f96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d020      	beq.n	8004f6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f28:	4b4f      	ldr	r3, [pc, #316]	; (8005068 <HAL_RCC_OscConfig+0x2b0>)
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2e:	f7fe fa19 	bl	8003364 <HAL_GetTick>
 8004f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f34:	e008      	b.n	8004f48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f36:	f7fe fa15 	bl	8003364 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e19c      	b.n	8005282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f48:	4b46      	ldr	r3, [pc, #280]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0f0      	beq.n	8004f36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f54:	4b43      	ldr	r3, [pc, #268]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	4940      	ldr	r1, [pc, #256]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	600b      	str	r3, [r1, #0]
 8004f68:	e015      	b.n	8004f96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f6a:	4b3f      	ldr	r3, [pc, #252]	; (8005068 <HAL_RCC_OscConfig+0x2b0>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f70:	f7fe f9f8 	bl	8003364 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f78:	f7fe f9f4 	bl	8003364 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e17b      	b.n	8005282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f8a:	4b36      	ldr	r3, [pc, #216]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1f0      	bne.n	8004f78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d030      	beq.n	8005004 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d016      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004faa:	4b30      	ldr	r3, [pc, #192]	; (800506c <HAL_RCC_OscConfig+0x2b4>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb0:	f7fe f9d8 	bl	8003364 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fb8:	f7fe f9d4 	bl	8003364 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e15b      	b.n	8005282 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fca:	4b26      	ldr	r3, [pc, #152]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0f0      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x200>
 8004fd6:	e015      	b.n	8005004 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fd8:	4b24      	ldr	r3, [pc, #144]	; (800506c <HAL_RCC_OscConfig+0x2b4>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fde:	f7fe f9c1 	bl	8003364 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fe6:	f7fe f9bd 	bl	8003364 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e144      	b.n	8005282 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ff8:	4b1a      	ldr	r3, [pc, #104]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8004ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1f0      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 80a0 	beq.w	8005152 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005012:	2300      	movs	r3, #0
 8005014:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005016:	4b13      	ldr	r3, [pc, #76]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10f      	bne.n	8005042 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005022:	2300      	movs	r3, #0
 8005024:	60bb      	str	r3, [r7, #8]
 8005026:	4b0f      	ldr	r3, [pc, #60]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	4a0e      	ldr	r2, [pc, #56]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 800502c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005030:	6413      	str	r3, [r2, #64]	; 0x40
 8005032:	4b0c      	ldr	r3, [pc, #48]	; (8005064 <HAL_RCC_OscConfig+0x2ac>)
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800503a:	60bb      	str	r3, [r7, #8]
 800503c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800503e:	2301      	movs	r3, #1
 8005040:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005042:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <HAL_RCC_OscConfig+0x2b8>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800504a:	2b00      	cmp	r3, #0
 800504c:	d121      	bne.n	8005092 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800504e:	4b08      	ldr	r3, [pc, #32]	; (8005070 <HAL_RCC_OscConfig+0x2b8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a07      	ldr	r2, [pc, #28]	; (8005070 <HAL_RCC_OscConfig+0x2b8>)
 8005054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800505a:	f7fe f983 	bl	8003364 <HAL_GetTick>
 800505e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005060:	e011      	b.n	8005086 <HAL_RCC_OscConfig+0x2ce>
 8005062:	bf00      	nop
 8005064:	40023800 	.word	0x40023800
 8005068:	42470000 	.word	0x42470000
 800506c:	42470e80 	.word	0x42470e80
 8005070:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005074:	f7fe f976 	bl	8003364 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e0fd      	b.n	8005282 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005086:	4b81      	ldr	r3, [pc, #516]	; (800528c <HAL_RCC_OscConfig+0x4d4>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0f0      	beq.n	8005074 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d106      	bne.n	80050a8 <HAL_RCC_OscConfig+0x2f0>
 800509a:	4b7d      	ldr	r3, [pc, #500]	; (8005290 <HAL_RCC_OscConfig+0x4d8>)
 800509c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509e:	4a7c      	ldr	r2, [pc, #496]	; (8005290 <HAL_RCC_OscConfig+0x4d8>)
 80050a0:	f043 0301 	orr.w	r3, r3, #1
 80050a4:	6713      	str	r3, [r2, #112]	; 0x70
 80050a6:	e01c      	b.n	80050e2 <HAL_RCC_OscConfig+0x32a>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	2b05      	cmp	r3, #5
 80050ae:	d10c      	bne.n	80050ca <HAL_RCC_OscConfig+0x312>
 80050b0:	4b77      	ldr	r3, [pc, #476]	; (8005290 <HAL_RCC_OscConfig+0x4d8>)
 80050b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b4:	4a76      	ldr	r2, [pc, #472]	; (8005290 <HAL_RCC_OscConfig+0x4d8>)
 80050b6:	f043 0304 	orr.w	r3, r3, #4
 80050ba:	6713      	str	r3, [r2, #112]	; 0x70
 80050bc:	4b74      	ldr	r3, [pc, #464]	; (8005290 <HAL_RCC_OscConfig+0x4d8>)
 80050be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c0:	4a73      	ldr	r2, [pc, #460]	; (8005290 <HAL_RCC_OscConfig+0x4d8>)
 80050c2:	f043 0301 	orr.w	r3, r3, #1
 80050c6:	6713      	str	r3, [r2, #112]	; 0x70
 80050c8:	e00b      	b.n	80050e2 <HAL_RCC_OscConfig+0x32a>
 80050ca:	4b71      	ldr	r3, [pc, #452]	; (8005290 <HAL_RCC_OscConfig+0x4d8>)
 80050cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ce:	4a70      	ldr	r2, [pc, #448]	; (8005290 <HAL_RCC_OscConfig+0x4d8>)
 80050d0:	f023 0301 	bic.w	r3, r3, #1
 80050d4:	6713      	str	r3, [r2, #112]	; 0x70
 80050d6:	4b6e      	ldr	r3, [pc, #440]	; (8005290 <HAL_RCC_OscConfig+0x4d8>)
 80050d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050da:	4a6d      	ldr	r2, [pc, #436]	; (8005290 <HAL_RCC_OscConfig+0x4d8>)
 80050dc:	f023 0304 	bic.w	r3, r3, #4
 80050e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d015      	beq.n	8005116 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ea:	f7fe f93b 	bl	8003364 <HAL_GetTick>
 80050ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050f0:	e00a      	b.n	8005108 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050f2:	f7fe f937 	bl	8003364 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005100:	4293      	cmp	r3, r2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e0bc      	b.n	8005282 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005108:	4b61      	ldr	r3, [pc, #388]	; (8005290 <HAL_RCC_OscConfig+0x4d8>)
 800510a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0ee      	beq.n	80050f2 <HAL_RCC_OscConfig+0x33a>
 8005114:	e014      	b.n	8005140 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005116:	f7fe f925 	bl	8003364 <HAL_GetTick>
 800511a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800511c:	e00a      	b.n	8005134 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800511e:	f7fe f921 	bl	8003364 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	f241 3288 	movw	r2, #5000	; 0x1388
 800512c:	4293      	cmp	r3, r2
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e0a6      	b.n	8005282 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005134:	4b56      	ldr	r3, [pc, #344]	; (8005290 <HAL_RCC_OscConfig+0x4d8>)
 8005136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1ee      	bne.n	800511e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005140:	7dfb      	ldrb	r3, [r7, #23]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d105      	bne.n	8005152 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005146:	4b52      	ldr	r3, [pc, #328]	; (8005290 <HAL_RCC_OscConfig+0x4d8>)
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	4a51      	ldr	r2, [pc, #324]	; (8005290 <HAL_RCC_OscConfig+0x4d8>)
 800514c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005150:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 8092 	beq.w	8005280 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800515c:	4b4c      	ldr	r3, [pc, #304]	; (8005290 <HAL_RCC_OscConfig+0x4d8>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 030c 	and.w	r3, r3, #12
 8005164:	2b08      	cmp	r3, #8
 8005166:	d05c      	beq.n	8005222 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	2b02      	cmp	r3, #2
 800516e:	d141      	bne.n	80051f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005170:	4b48      	ldr	r3, [pc, #288]	; (8005294 <HAL_RCC_OscConfig+0x4dc>)
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005176:	f7fe f8f5 	bl	8003364 <HAL_GetTick>
 800517a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800517c:	e008      	b.n	8005190 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800517e:	f7fe f8f1 	bl	8003364 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e078      	b.n	8005282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005190:	4b3f      	ldr	r3, [pc, #252]	; (8005290 <HAL_RCC_OscConfig+0x4d8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1f0      	bne.n	800517e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	69da      	ldr	r2, [r3, #28]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	431a      	orrs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	019b      	lsls	r3, r3, #6
 80051ac:	431a      	orrs	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b2:	085b      	lsrs	r3, r3, #1
 80051b4:	3b01      	subs	r3, #1
 80051b6:	041b      	lsls	r3, r3, #16
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051be:	061b      	lsls	r3, r3, #24
 80051c0:	4933      	ldr	r1, [pc, #204]	; (8005290 <HAL_RCC_OscConfig+0x4d8>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051c6:	4b33      	ldr	r3, [pc, #204]	; (8005294 <HAL_RCC_OscConfig+0x4dc>)
 80051c8:	2201      	movs	r2, #1
 80051ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051cc:	f7fe f8ca 	bl	8003364 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051d4:	f7fe f8c6 	bl	8003364 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e04d      	b.n	8005282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051e6:	4b2a      	ldr	r3, [pc, #168]	; (8005290 <HAL_RCC_OscConfig+0x4d8>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d0f0      	beq.n	80051d4 <HAL_RCC_OscConfig+0x41c>
 80051f2:	e045      	b.n	8005280 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051f4:	4b27      	ldr	r3, [pc, #156]	; (8005294 <HAL_RCC_OscConfig+0x4dc>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fa:	f7fe f8b3 	bl	8003364 <HAL_GetTick>
 80051fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005200:	e008      	b.n	8005214 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005202:	f7fe f8af 	bl	8003364 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d901      	bls.n	8005214 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e036      	b.n	8005282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005214:	4b1e      	ldr	r3, [pc, #120]	; (8005290 <HAL_RCC_OscConfig+0x4d8>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1f0      	bne.n	8005202 <HAL_RCC_OscConfig+0x44a>
 8005220:	e02e      	b.n	8005280 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d101      	bne.n	800522e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e029      	b.n	8005282 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800522e:	4b18      	ldr	r3, [pc, #96]	; (8005290 <HAL_RCC_OscConfig+0x4d8>)
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	429a      	cmp	r2, r3
 8005240:	d11c      	bne.n	800527c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800524c:	429a      	cmp	r2, r3
 800524e:	d115      	bne.n	800527c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005256:	4013      	ands	r3, r2
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800525c:	4293      	cmp	r3, r2
 800525e:	d10d      	bne.n	800527c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800526a:	429a      	cmp	r2, r3
 800526c:	d106      	bne.n	800527c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005278:	429a      	cmp	r2, r3
 800527a:	d001      	beq.n	8005280 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e000      	b.n	8005282 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3718      	adds	r7, #24
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	40007000 	.word	0x40007000
 8005290:	40023800 	.word	0x40023800
 8005294:	42470060 	.word	0x42470060

08005298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e0cc      	b.n	8005446 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052ac:	4b68      	ldr	r3, [pc, #416]	; (8005450 <HAL_RCC_ClockConfig+0x1b8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d90c      	bls.n	80052d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ba:	4b65      	ldr	r3, [pc, #404]	; (8005450 <HAL_RCC_ClockConfig+0x1b8>)
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052c2:	4b63      	ldr	r3, [pc, #396]	; (8005450 <HAL_RCC_ClockConfig+0x1b8>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d001      	beq.n	80052d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e0b8      	b.n	8005446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d020      	beq.n	8005322 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d005      	beq.n	80052f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052ec:	4b59      	ldr	r3, [pc, #356]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	4a58      	ldr	r2, [pc, #352]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 80052f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0308 	and.w	r3, r3, #8
 8005300:	2b00      	cmp	r3, #0
 8005302:	d005      	beq.n	8005310 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005304:	4b53      	ldr	r3, [pc, #332]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	4a52      	ldr	r2, [pc, #328]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800530e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005310:	4b50      	ldr	r3, [pc, #320]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	494d      	ldr	r1, [pc, #308]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 800531e:	4313      	orrs	r3, r2
 8005320:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d044      	beq.n	80053b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d107      	bne.n	8005346 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005336:	4b47      	ldr	r3, [pc, #284]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d119      	bne.n	8005376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e07f      	b.n	8005446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2b02      	cmp	r3, #2
 800534c:	d003      	beq.n	8005356 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005352:	2b03      	cmp	r3, #3
 8005354:	d107      	bne.n	8005366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005356:	4b3f      	ldr	r3, [pc, #252]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d109      	bne.n	8005376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e06f      	b.n	8005446 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005366:	4b3b      	ldr	r3, [pc, #236]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e067      	b.n	8005446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005376:	4b37      	ldr	r3, [pc, #220]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f023 0203 	bic.w	r2, r3, #3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	4934      	ldr	r1, [pc, #208]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 8005384:	4313      	orrs	r3, r2
 8005386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005388:	f7fd ffec 	bl	8003364 <HAL_GetTick>
 800538c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800538e:	e00a      	b.n	80053a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005390:	f7fd ffe8 	bl	8003364 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	f241 3288 	movw	r2, #5000	; 0x1388
 800539e:	4293      	cmp	r3, r2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e04f      	b.n	8005446 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053a6:	4b2b      	ldr	r3, [pc, #172]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 020c 	and.w	r2, r3, #12
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d1eb      	bne.n	8005390 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053b8:	4b25      	ldr	r3, [pc, #148]	; (8005450 <HAL_RCC_ClockConfig+0x1b8>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 030f 	and.w	r3, r3, #15
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d20c      	bcs.n	80053e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053c6:	4b22      	ldr	r3, [pc, #136]	; (8005450 <HAL_RCC_ClockConfig+0x1b8>)
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	b2d2      	uxtb	r2, r2
 80053cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ce:	4b20      	ldr	r3, [pc, #128]	; (8005450 <HAL_RCC_ClockConfig+0x1b8>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d001      	beq.n	80053e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e032      	b.n	8005446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d008      	beq.n	80053fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053ec:	4b19      	ldr	r3, [pc, #100]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	4916      	ldr	r1, [pc, #88]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0308 	and.w	r3, r3, #8
 8005406:	2b00      	cmp	r3, #0
 8005408:	d009      	beq.n	800541e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800540a:	4b12      	ldr	r3, [pc, #72]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	490e      	ldr	r1, [pc, #56]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 800541a:	4313      	orrs	r3, r2
 800541c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800541e:	f000 f821 	bl	8005464 <HAL_RCC_GetSysClockFreq>
 8005422:	4601      	mov	r1, r0
 8005424:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	091b      	lsrs	r3, r3, #4
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	4a0a      	ldr	r2, [pc, #40]	; (8005458 <HAL_RCC_ClockConfig+0x1c0>)
 8005430:	5cd3      	ldrb	r3, [r2, r3]
 8005432:	fa21 f303 	lsr.w	r3, r1, r3
 8005436:	4a09      	ldr	r2, [pc, #36]	; (800545c <HAL_RCC_ClockConfig+0x1c4>)
 8005438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800543a:	4b09      	ldr	r3, [pc, #36]	; (8005460 <HAL_RCC_ClockConfig+0x1c8>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f7fd ff4c 	bl	80032dc <HAL_InitTick>

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	40023c00 	.word	0x40023c00
 8005454:	40023800 	.word	0x40023800
 8005458:	08009304 	.word	0x08009304
 800545c:	20000044 	.word	0x20000044
 8005460:	20000048 	.word	0x20000048

08005464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	607b      	str	r3, [r7, #4]
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
 8005472:	2300      	movs	r3, #0
 8005474:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005476:	2300      	movs	r3, #0
 8005478:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800547a:	4b50      	ldr	r3, [pc, #320]	; (80055bc <HAL_RCC_GetSysClockFreq+0x158>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 030c 	and.w	r3, r3, #12
 8005482:	2b04      	cmp	r3, #4
 8005484:	d007      	beq.n	8005496 <HAL_RCC_GetSysClockFreq+0x32>
 8005486:	2b08      	cmp	r3, #8
 8005488:	d008      	beq.n	800549c <HAL_RCC_GetSysClockFreq+0x38>
 800548a:	2b00      	cmp	r3, #0
 800548c:	f040 808d 	bne.w	80055aa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005490:	4b4b      	ldr	r3, [pc, #300]	; (80055c0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005492:	60bb      	str	r3, [r7, #8]
       break;
 8005494:	e08c      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005496:	4b4b      	ldr	r3, [pc, #300]	; (80055c4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005498:	60bb      	str	r3, [r7, #8]
      break;
 800549a:	e089      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800549c:	4b47      	ldr	r3, [pc, #284]	; (80055bc <HAL_RCC_GetSysClockFreq+0x158>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054a6:	4b45      	ldr	r3, [pc, #276]	; (80055bc <HAL_RCC_GetSysClockFreq+0x158>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d023      	beq.n	80054fa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054b2:	4b42      	ldr	r3, [pc, #264]	; (80055bc <HAL_RCC_GetSysClockFreq+0x158>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	099b      	lsrs	r3, r3, #6
 80054b8:	f04f 0400 	mov.w	r4, #0
 80054bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80054c0:	f04f 0200 	mov.w	r2, #0
 80054c4:	ea03 0501 	and.w	r5, r3, r1
 80054c8:	ea04 0602 	and.w	r6, r4, r2
 80054cc:	4a3d      	ldr	r2, [pc, #244]	; (80055c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80054ce:	fb02 f106 	mul.w	r1, r2, r6
 80054d2:	2200      	movs	r2, #0
 80054d4:	fb02 f205 	mul.w	r2, r2, r5
 80054d8:	440a      	add	r2, r1
 80054da:	493a      	ldr	r1, [pc, #232]	; (80055c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80054dc:	fba5 0101 	umull	r0, r1, r5, r1
 80054e0:	1853      	adds	r3, r2, r1
 80054e2:	4619      	mov	r1, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f04f 0400 	mov.w	r4, #0
 80054ea:	461a      	mov	r2, r3
 80054ec:	4623      	mov	r3, r4
 80054ee:	f7fa fe7d 	bl	80001ec <__aeabi_uldivmod>
 80054f2:	4603      	mov	r3, r0
 80054f4:	460c      	mov	r4, r1
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	e049      	b.n	800558e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054fa:	4b30      	ldr	r3, [pc, #192]	; (80055bc <HAL_RCC_GetSysClockFreq+0x158>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	099b      	lsrs	r3, r3, #6
 8005500:	f04f 0400 	mov.w	r4, #0
 8005504:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	ea03 0501 	and.w	r5, r3, r1
 8005510:	ea04 0602 	and.w	r6, r4, r2
 8005514:	4629      	mov	r1, r5
 8005516:	4632      	mov	r2, r6
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	f04f 0400 	mov.w	r4, #0
 8005520:	0154      	lsls	r4, r2, #5
 8005522:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005526:	014b      	lsls	r3, r1, #5
 8005528:	4619      	mov	r1, r3
 800552a:	4622      	mov	r2, r4
 800552c:	1b49      	subs	r1, r1, r5
 800552e:	eb62 0206 	sbc.w	r2, r2, r6
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	f04f 0400 	mov.w	r4, #0
 800553a:	0194      	lsls	r4, r2, #6
 800553c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005540:	018b      	lsls	r3, r1, #6
 8005542:	1a5b      	subs	r3, r3, r1
 8005544:	eb64 0402 	sbc.w	r4, r4, r2
 8005548:	f04f 0100 	mov.w	r1, #0
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	00e2      	lsls	r2, r4, #3
 8005552:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005556:	00d9      	lsls	r1, r3, #3
 8005558:	460b      	mov	r3, r1
 800555a:	4614      	mov	r4, r2
 800555c:	195b      	adds	r3, r3, r5
 800555e:	eb44 0406 	adc.w	r4, r4, r6
 8005562:	f04f 0100 	mov.w	r1, #0
 8005566:	f04f 0200 	mov.w	r2, #0
 800556a:	02a2      	lsls	r2, r4, #10
 800556c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005570:	0299      	lsls	r1, r3, #10
 8005572:	460b      	mov	r3, r1
 8005574:	4614      	mov	r4, r2
 8005576:	4618      	mov	r0, r3
 8005578:	4621      	mov	r1, r4
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f04f 0400 	mov.w	r4, #0
 8005580:	461a      	mov	r2, r3
 8005582:	4623      	mov	r3, r4
 8005584:	f7fa fe32 	bl	80001ec <__aeabi_uldivmod>
 8005588:	4603      	mov	r3, r0
 800558a:	460c      	mov	r4, r1
 800558c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800558e:	4b0b      	ldr	r3, [pc, #44]	; (80055bc <HAL_RCC_GetSysClockFreq+0x158>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	0c1b      	lsrs	r3, r3, #16
 8005594:	f003 0303 	and.w	r3, r3, #3
 8005598:	3301      	adds	r3, #1
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a6:	60bb      	str	r3, [r7, #8]
      break;
 80055a8:	e002      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055aa:	4b05      	ldr	r3, [pc, #20]	; (80055c0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80055ac:	60bb      	str	r3, [r7, #8]
      break;
 80055ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055b0:	68bb      	ldr	r3, [r7, #8]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055ba:	bf00      	nop
 80055bc:	40023800 	.word	0x40023800
 80055c0:	00f42400 	.word	0x00f42400
 80055c4:	017d7840 	.word	0x017d7840

080055c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055cc:	4b03      	ldr	r3, [pc, #12]	; (80055dc <HAL_RCC_GetHCLKFreq+0x14>)
 80055ce:	681b      	ldr	r3, [r3, #0]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	20000044 	.word	0x20000044

080055e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055e4:	f7ff fff0 	bl	80055c8 <HAL_RCC_GetHCLKFreq>
 80055e8:	4601      	mov	r1, r0
 80055ea:	4b05      	ldr	r3, [pc, #20]	; (8005600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	0a9b      	lsrs	r3, r3, #10
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	4a03      	ldr	r2, [pc, #12]	; (8005604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055f6:	5cd3      	ldrb	r3, [r2, r3]
 80055f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40023800 	.word	0x40023800
 8005604:	08009314 	.word	0x08009314

08005608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800560c:	f7ff ffdc 	bl	80055c8 <HAL_RCC_GetHCLKFreq>
 8005610:	4601      	mov	r1, r0
 8005612:	4b05      	ldr	r3, [pc, #20]	; (8005628 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	0b5b      	lsrs	r3, r3, #13
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	4a03      	ldr	r2, [pc, #12]	; (800562c <HAL_RCC_GetPCLK2Freq+0x24>)
 800561e:	5cd3      	ldrb	r3, [r2, r3]
 8005620:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005624:	4618      	mov	r0, r3
 8005626:	bd80      	pop	{r7, pc}
 8005628:	40023800 	.word	0x40023800
 800562c:	08009314 	.word	0x08009314

08005630 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10b      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005654:	2b00      	cmp	r3, #0
 8005656:	d105      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005660:	2b00      	cmp	r3, #0
 8005662:	d075      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005664:	4bad      	ldr	r3, [pc, #692]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005666:	2200      	movs	r2, #0
 8005668:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800566a:	f7fd fe7b 	bl	8003364 <HAL_GetTick>
 800566e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005670:	e008      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005672:	f7fd fe77 	bl	8003364 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e18b      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005684:	4ba6      	ldr	r3, [pc, #664]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1f0      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b00      	cmp	r3, #0
 800569a:	d009      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	019a      	lsls	r2, r3, #6
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	071b      	lsls	r3, r3, #28
 80056a8:	499d      	ldr	r1, [pc, #628]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d01f      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056bc:	4b98      	ldr	r3, [pc, #608]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056c2:	0f1b      	lsrs	r3, r3, #28
 80056c4:	f003 0307 	and.w	r3, r3, #7
 80056c8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	019a      	lsls	r2, r3, #6
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	061b      	lsls	r3, r3, #24
 80056d6:	431a      	orrs	r2, r3
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	071b      	lsls	r3, r3, #28
 80056dc:	4990      	ldr	r1, [pc, #576]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056e4:	4b8e      	ldr	r3, [pc, #568]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056ea:	f023 021f 	bic.w	r2, r3, #31
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	498a      	ldr	r1, [pc, #552]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00d      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	019a      	lsls	r2, r3, #6
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	061b      	lsls	r3, r3, #24
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	071b      	lsls	r3, r3, #28
 800571c:	4980      	ldr	r1, [pc, #512]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800571e:	4313      	orrs	r3, r2
 8005720:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005724:	4b7d      	ldr	r3, [pc, #500]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005726:	2201      	movs	r2, #1
 8005728:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800572a:	f7fd fe1b 	bl	8003364 <HAL_GetTick>
 800572e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005730:	e008      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005732:	f7fd fe17 	bl	8003364 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e12b      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005744:	4b76      	ldr	r3, [pc, #472]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0f0      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b00      	cmp	r3, #0
 800575a:	d105      	bne.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005764:	2b00      	cmp	r3, #0
 8005766:	d079      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005768:	4b6e      	ldr	r3, [pc, #440]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800576a:	2200      	movs	r2, #0
 800576c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800576e:	f7fd fdf9 	bl	8003364 <HAL_GetTick>
 8005772:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005774:	e008      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005776:	f7fd fdf5 	bl	8003364 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b02      	cmp	r3, #2
 8005782:	d901      	bls.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e109      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005788:	4b65      	ldr	r3, [pc, #404]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005794:	d0ef      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0304 	and.w	r3, r3, #4
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d020      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057a2:	4b5f      	ldr	r3, [pc, #380]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a8:	0f1b      	lsrs	r3, r3, #28
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	019a      	lsls	r2, r3, #6
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	061b      	lsls	r3, r3, #24
 80057bc:	431a      	orrs	r2, r3
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	071b      	lsls	r3, r3, #28
 80057c2:	4957      	ldr	r1, [pc, #348]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057ca:	4b55      	ldr	r3, [pc, #340]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	3b01      	subs	r3, #1
 80057da:	021b      	lsls	r3, r3, #8
 80057dc:	4950      	ldr	r1, [pc, #320]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0308 	and.w	r3, r3, #8
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d01e      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80057f0:	4b4b      	ldr	r3, [pc, #300]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f6:	0e1b      	lsrs	r3, r3, #24
 80057f8:	f003 030f 	and.w	r3, r3, #15
 80057fc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	019a      	lsls	r2, r3, #6
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	061b      	lsls	r3, r3, #24
 8005808:	431a      	orrs	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	071b      	lsls	r3, r3, #28
 8005810:	4943      	ldr	r1, [pc, #268]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005818:	4b41      	ldr	r3, [pc, #260]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800581a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800581e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005826:	493e      	ldr	r1, [pc, #248]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005828:	4313      	orrs	r3, r2
 800582a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800582e:	4b3d      	ldr	r3, [pc, #244]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005830:	2201      	movs	r2, #1
 8005832:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005834:	f7fd fd96 	bl	8003364 <HAL_GetTick>
 8005838:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800583a:	e008      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800583c:	f7fd fd92 	bl	8003364 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e0a6      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800584e:	4b34      	ldr	r3, [pc, #208]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800585a:	d1ef      	bne.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0320 	and.w	r3, r3, #32
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 808d 	beq.w	8005984 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800586a:	2300      	movs	r3, #0
 800586c:	60fb      	str	r3, [r7, #12]
 800586e:	4b2c      	ldr	r3, [pc, #176]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	4a2b      	ldr	r2, [pc, #172]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005878:	6413      	str	r3, [r2, #64]	; 0x40
 800587a:	4b29      	ldr	r3, [pc, #164]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800587c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005886:	4b28      	ldr	r3, [pc, #160]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a27      	ldr	r2, [pc, #156]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800588c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005890:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005892:	f7fd fd67 	bl	8003364 <HAL_GetTick>
 8005896:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005898:	e008      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800589a:	f7fd fd63 	bl	8003364 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e077      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058ac:	4b1e      	ldr	r3, [pc, #120]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0f0      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058b8:	4b19      	ldr	r3, [pc, #100]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80058ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058c0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d039      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d032      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058d6:	4b12      	ldr	r3, [pc, #72]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80058d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058e0:	4b12      	ldr	r3, [pc, #72]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80058e2:	2201      	movs	r2, #1
 80058e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058e6:	4b11      	ldr	r3, [pc, #68]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80058ec:	4a0c      	ldr	r2, [pc, #48]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80058f2:	4b0b      	ldr	r3, [pc, #44]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80058f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d11e      	bne.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80058fe:	f7fd fd31 	bl	8003364 <HAL_GetTick>
 8005902:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005904:	e014      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005906:	f7fd fd2d 	bl	8003364 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	f241 3288 	movw	r2, #5000	; 0x1388
 8005914:	4293      	cmp	r3, r2
 8005916:	d90b      	bls.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e03f      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800591c:	42470068 	.word	0x42470068
 8005920:	40023800 	.word	0x40023800
 8005924:	42470070 	.word	0x42470070
 8005928:	40007000 	.word	0x40007000
 800592c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005930:	4b1c      	ldr	r3, [pc, #112]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d0e4      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005940:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005944:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005948:	d10d      	bne.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800594a:	4b16      	ldr	r3, [pc, #88]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005956:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800595a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800595e:	4911      	ldr	r1, [pc, #68]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005960:	4313      	orrs	r3, r2
 8005962:	608b      	str	r3, [r1, #8]
 8005964:	e005      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005966:	4b0f      	ldr	r3, [pc, #60]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	4a0e      	ldr	r2, [pc, #56]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800596c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005970:	6093      	str	r3, [r2, #8]
 8005972:	4b0c      	ldr	r3, [pc, #48]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005974:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800597e:	4909      	ldr	r1, [pc, #36]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005980:	4313      	orrs	r3, r2
 8005982:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0310 	and.w	r3, r3, #16
 800598c:	2b00      	cmp	r3, #0
 800598e:	d004      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005996:	4b04      	ldr	r3, [pc, #16]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005998:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3718      	adds	r7, #24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	40023800 	.word	0x40023800
 80059a8:	424711e0 	.word	0x424711e0

080059ac <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e025      	b.n	8005a0c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d106      	bne.n	80059da <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f7fd fb85 	bl	80030e4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2202      	movs	r2, #2
 80059de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	3304      	adds	r3, #4
 80059ea:	4619      	mov	r1, r3
 80059ec:	4610      	mov	r0, r2
 80059ee:	f001 fc47 	bl	8007280 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6818      	ldr	r0, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	461a      	mov	r2, r3
 80059fc:	6839      	ldr	r1, [r7, #0]
 80059fe:	f001 fcb2 	bl	8007366 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d101      	bne.n	8005a30 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	e018      	b.n	8005a62 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	68b9      	ldr	r1, [r7, #8]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f001 fd0f 	bl	8007464 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d104      	bne.n	8005a58 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2205      	movs	r2, #5
 8005a52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005a56:	e003      	b.n	8005a60 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b082      	sub	sp, #8
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d101      	bne.n	8005a84 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005a80:	2302      	movs	r3, #2
 8005a82:	e00e      	b.n	8005aa2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6839      	ldr	r1, [r7, #0]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f001 fd22 	bl	80074dc <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b082      	sub	sp, #8
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e056      	b.n	8005b6a <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7fd f99c 	bl	8002e14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005af2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	431a      	orrs	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	431a      	orrs	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	ea42 0103 	orr.w	r1, r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	0c1b      	lsrs	r3, r3, #16
 8005b3a:	f003 0104 	and.w	r1, r3, #4
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	69da      	ldr	r2, [r3, #28]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b082      	sub	sp, #8
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e01a      	b.n	8005bba <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b9a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7fd f981 	bl	8002ea4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b088      	sub	sp, #32
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	603b      	str	r3, [r7, #0]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d101      	bne.n	8005be4 <HAL_SPI_Transmit+0x22>
 8005be0:	2302      	movs	r3, #2
 8005be2:	e11e      	b.n	8005e22 <HAL_SPI_Transmit+0x260>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bec:	f7fd fbba 	bl	8003364 <HAL_GetTick>
 8005bf0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005bf2:	88fb      	ldrh	r3, [r7, #6]
 8005bf4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d002      	beq.n	8005c08 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c02:	2302      	movs	r3, #2
 8005c04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c06:	e103      	b.n	8005e10 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <HAL_SPI_Transmit+0x52>
 8005c0e:	88fb      	ldrh	r3, [r7, #6]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d102      	bne.n	8005c1a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c18:	e0fa      	b.n	8005e10 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2203      	movs	r2, #3
 8005c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	88fa      	ldrh	r2, [r7, #6]
 8005c32:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	88fa      	ldrh	r2, [r7, #6]
 8005c38:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c60:	d107      	bne.n	8005c72 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7c:	2b40      	cmp	r3, #64	; 0x40
 8005c7e:	d007      	beq.n	8005c90 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c98:	d14b      	bne.n	8005d32 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <HAL_SPI_Transmit+0xe6>
 8005ca2:	8afb      	ldrh	r3, [r7, #22]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d13e      	bne.n	8005d26 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cac:	881a      	ldrh	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb8:	1c9a      	adds	r2, r3, #2
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ccc:	e02b      	b.n	8005d26 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d112      	bne.n	8005d02 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce0:	881a      	ldrh	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cec:	1c9a      	adds	r2, r3, #2
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d00:	e011      	b.n	8005d26 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d02:	f7fd fb2f 	bl	8003364 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d803      	bhi.n	8005d1a <HAL_SPI_Transmit+0x158>
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d18:	d102      	bne.n	8005d20 <HAL_SPI_Transmit+0x15e>
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d102      	bne.n	8005d26 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d24:	e074      	b.n	8005e10 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1ce      	bne.n	8005cce <HAL_SPI_Transmit+0x10c>
 8005d30:	e04c      	b.n	8005dcc <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d002      	beq.n	8005d40 <HAL_SPI_Transmit+0x17e>
 8005d3a:	8afb      	ldrh	r3, [r7, #22]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d140      	bne.n	8005dc2 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	330c      	adds	r3, #12
 8005d4a:	7812      	ldrb	r2, [r2, #0]
 8005d4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d52:	1c5a      	adds	r2, r3, #1
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d66:	e02c      	b.n	8005dc2 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d113      	bne.n	8005d9e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	330c      	adds	r3, #12
 8005d80:	7812      	ldrb	r2, [r2, #0]
 8005d82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d9c:	e011      	b.n	8005dc2 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d9e:	f7fd fae1 	bl	8003364 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d803      	bhi.n	8005db6 <HAL_SPI_Transmit+0x1f4>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db4:	d102      	bne.n	8005dbc <HAL_SPI_Transmit+0x1fa>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d102      	bne.n	8005dc2 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005dc0:	e026      	b.n	8005e10 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1cd      	bne.n	8005d68 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	6839      	ldr	r1, [r7, #0]
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 fbb3 	bl	800653c <SPI_EndRxTxTransaction>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2220      	movs	r2, #32
 8005de0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10a      	bne.n	8005e00 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dea:	2300      	movs	r3, #0
 8005dec:	613b      	str	r3, [r7, #16]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	613b      	str	r3, [r7, #16]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	613b      	str	r3, [r7, #16]
 8005dfe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d002      	beq.n	8005e0e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	77fb      	strb	r3, [r7, #31]
 8005e0c:	e000      	b.n	8005e10 <HAL_SPI_Transmit+0x24e>
  }

error:
 8005e0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e20:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3720      	adds	r7, #32
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b088      	sub	sp, #32
 8005e2e:	af02      	add	r7, sp, #8
 8005e30:	60f8      	str	r0, [r7, #12]
 8005e32:	60b9      	str	r1, [r7, #8]
 8005e34:	603b      	str	r3, [r7, #0]
 8005e36:	4613      	mov	r3, r2
 8005e38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e46:	d112      	bne.n	8005e6e <HAL_SPI_Receive+0x44>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10e      	bne.n	8005e6e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2204      	movs	r2, #4
 8005e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005e58:	88fa      	ldrh	r2, [r7, #6]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	68b9      	ldr	r1, [r7, #8]
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 f8e9 	bl	800603c <HAL_SPI_TransmitReceive>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	e0e2      	b.n	8006034 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d101      	bne.n	8005e7c <HAL_SPI_Receive+0x52>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	e0db      	b.n	8006034 <HAL_SPI_Receive+0x20a>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e84:	f7fd fa6e 	bl	8003364 <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d002      	beq.n	8005e9c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005e96:	2302      	movs	r3, #2
 8005e98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e9a:	e0c2      	b.n	8006022 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d002      	beq.n	8005ea8 <HAL_SPI_Receive+0x7e>
 8005ea2:	88fb      	ldrh	r3, [r7, #6]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d102      	bne.n	8005eae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005eac:	e0b9      	b.n	8006022 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2204      	movs	r2, #4
 8005eb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	88fa      	ldrh	r2, [r7, #6]
 8005ec6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	88fa      	ldrh	r2, [r7, #6]
 8005ecc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ef4:	d107      	bne.n	8005f06 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f04:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f10:	2b40      	cmp	r3, #64	; 0x40
 8005f12:	d007      	beq.n	8005f24 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f22:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d162      	bne.n	8005ff2 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005f2c:	e02e      	b.n	8005f8c <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d115      	bne.n	8005f68 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f103 020c 	add.w	r2, r3, #12
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f48:	7812      	ldrb	r2, [r2, #0]
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f66:	e011      	b.n	8005f8c <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f68:	f7fd f9fc 	bl	8003364 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d803      	bhi.n	8005f80 <HAL_SPI_Receive+0x156>
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7e:	d102      	bne.n	8005f86 <HAL_SPI_Receive+0x15c>
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d102      	bne.n	8005f8c <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005f8a:	e04a      	b.n	8006022 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1cb      	bne.n	8005f2e <HAL_SPI_Receive+0x104>
 8005f96:	e031      	b.n	8005ffc <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d113      	bne.n	8005fce <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb0:	b292      	uxth	r2, r2
 8005fb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb8:	1c9a      	adds	r2, r3, #2
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fcc:	e011      	b.n	8005ff2 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fce:	f7fd f9c9 	bl	8003364 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d803      	bhi.n	8005fe6 <HAL_SPI_Receive+0x1bc>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe4:	d102      	bne.n	8005fec <HAL_SPI_Receive+0x1c2>
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d102      	bne.n	8005ff2 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005ff0:	e017      	b.n	8006022 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1cd      	bne.n	8005f98 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	6839      	ldr	r1, [r7, #0]
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 fa35 	bl	8006470 <SPI_EndRxTransaction>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d002      	beq.n	8006012 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2220      	movs	r2, #32
 8006010:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006016:	2b00      	cmp	r3, #0
 8006018:	d002      	beq.n	8006020 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	75fb      	strb	r3, [r7, #23]
 800601e:	e000      	b.n	8006022 <HAL_SPI_Receive+0x1f8>
  }

error :
 8006020:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006032:	7dfb      	ldrb	r3, [r7, #23]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3718      	adds	r7, #24
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b08c      	sub	sp, #48	; 0x30
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800604a:	2301      	movs	r3, #1
 800604c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <HAL_SPI_TransmitReceive+0x26>
 800605e:	2302      	movs	r3, #2
 8006060:	e18a      	b.n	8006378 <HAL_SPI_TransmitReceive+0x33c>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800606a:	f7fd f97b 	bl	8003364 <HAL_GetTick>
 800606e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006080:	887b      	ldrh	r3, [r7, #2]
 8006082:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006084:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006088:	2b01      	cmp	r3, #1
 800608a:	d00f      	beq.n	80060ac <HAL_SPI_TransmitReceive+0x70>
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006092:	d107      	bne.n	80060a4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d103      	bne.n	80060a4 <HAL_SPI_TransmitReceive+0x68>
 800609c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060a0:	2b04      	cmp	r3, #4
 80060a2:	d003      	beq.n	80060ac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80060a4:	2302      	movs	r3, #2
 80060a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80060aa:	e15b      	b.n	8006364 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d005      	beq.n	80060be <HAL_SPI_TransmitReceive+0x82>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <HAL_SPI_TransmitReceive+0x82>
 80060b8:	887b      	ldrh	r3, [r7, #2]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d103      	bne.n	80060c6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80060c4:	e14e      	b.n	8006364 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d003      	beq.n	80060da <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2205      	movs	r2, #5
 80060d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	887a      	ldrh	r2, [r7, #2]
 80060ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	887a      	ldrh	r2, [r7, #2]
 80060f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	887a      	ldrh	r2, [r7, #2]
 80060fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	887a      	ldrh	r2, [r7, #2]
 8006102:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611a:	2b40      	cmp	r3, #64	; 0x40
 800611c:	d007      	beq.n	800612e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800612c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006136:	d178      	bne.n	800622a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <HAL_SPI_TransmitReceive+0x10a>
 8006140:	8b7b      	ldrh	r3, [r7, #26]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d166      	bne.n	8006214 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614a:	881a      	ldrh	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006156:	1c9a      	adds	r2, r3, #2
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006160:	b29b      	uxth	r3, r3
 8006162:	3b01      	subs	r3, #1
 8006164:	b29a      	uxth	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800616a:	e053      	b.n	8006214 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b02      	cmp	r3, #2
 8006178:	d11b      	bne.n	80061b2 <HAL_SPI_TransmitReceive+0x176>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800617e:	b29b      	uxth	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d016      	beq.n	80061b2 <HAL_SPI_TransmitReceive+0x176>
 8006184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006186:	2b01      	cmp	r3, #1
 8006188:	d113      	bne.n	80061b2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618e:	881a      	ldrh	r2, [r3, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619a:	1c9a      	adds	r2, r3, #2
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	3b01      	subs	r3, #1
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d119      	bne.n	80061f4 <HAL_SPI_TransmitReceive+0x1b8>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d014      	beq.n	80061f4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68da      	ldr	r2, [r3, #12]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d4:	b292      	uxth	r2, r2
 80061d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061dc:	1c9a      	adds	r2, r3, #2
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	3b01      	subs	r3, #1
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061f0:	2301      	movs	r3, #1
 80061f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80061f4:	f7fd f8b6 	bl	8003364 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006200:	429a      	cmp	r2, r3
 8006202:	d807      	bhi.n	8006214 <HAL_SPI_TransmitReceive+0x1d8>
 8006204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620a:	d003      	beq.n	8006214 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006212:	e0a7      	b.n	8006364 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006218:	b29b      	uxth	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1a6      	bne.n	800616c <HAL_SPI_TransmitReceive+0x130>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006222:	b29b      	uxth	r3, r3
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1a1      	bne.n	800616c <HAL_SPI_TransmitReceive+0x130>
 8006228:	e07c      	b.n	8006324 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <HAL_SPI_TransmitReceive+0x1fc>
 8006232:	8b7b      	ldrh	r3, [r7, #26]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d16b      	bne.n	8006310 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	330c      	adds	r3, #12
 8006242:	7812      	ldrb	r2, [r2, #0]
 8006244:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006254:	b29b      	uxth	r3, r3
 8006256:	3b01      	subs	r3, #1
 8006258:	b29a      	uxth	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800625e:	e057      	b.n	8006310 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b02      	cmp	r3, #2
 800626c:	d11c      	bne.n	80062a8 <HAL_SPI_TransmitReceive+0x26c>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006272:	b29b      	uxth	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d017      	beq.n	80062a8 <HAL_SPI_TransmitReceive+0x26c>
 8006278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627a:	2b01      	cmp	r3, #1
 800627c:	d114      	bne.n	80062a8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	330c      	adds	r3, #12
 8006288:	7812      	ldrb	r2, [r2, #0]
 800628a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800629a:	b29b      	uxth	r3, r3
 800629c:	3b01      	subs	r3, #1
 800629e:	b29a      	uxth	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d119      	bne.n	80062ea <HAL_SPI_TransmitReceive+0x2ae>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d014      	beq.n	80062ea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d2:	1c5a      	adds	r2, r3, #1
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062dc:	b29b      	uxth	r3, r3
 80062de:	3b01      	subs	r3, #1
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062e6:	2301      	movs	r3, #1
 80062e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80062ea:	f7fd f83b 	bl	8003364 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d803      	bhi.n	8006302 <HAL_SPI_TransmitReceive+0x2c6>
 80062fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006300:	d102      	bne.n	8006308 <HAL_SPI_TransmitReceive+0x2cc>
 8006302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006304:	2b00      	cmp	r3, #0
 8006306:	d103      	bne.n	8006310 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800630e:	e029      	b.n	8006364 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006314:	b29b      	uxth	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1a2      	bne.n	8006260 <HAL_SPI_TransmitReceive+0x224>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800631e:	b29b      	uxth	r3, r3
 8006320:	2b00      	cmp	r3, #0
 8006322:	d19d      	bne.n	8006260 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006326:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f000 f907 	bl	800653c <SPI_EndRxTxTransaction>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d006      	beq.n	8006342 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2220      	movs	r2, #32
 800633e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006340:	e010      	b.n	8006364 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10b      	bne.n	8006362 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800634a:	2300      	movs	r3, #0
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	617b      	str	r3, [r7, #20]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	617b      	str	r3, [r7, #20]
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	e000      	b.n	8006364 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006362:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006374:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006378:	4618      	mov	r0, r3
 800637a:	3730      	adds	r7, #48	; 0x30
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800638e:	b2db      	uxtb	r3, r3
}
 8006390:	4618      	mov	r0, r3
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	603b      	str	r3, [r7, #0]
 80063a8:	4613      	mov	r3, r2
 80063aa:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063ac:	e04c      	b.n	8006448 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b4:	d048      	beq.n	8006448 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80063b6:	f7fc ffd5 	bl	8003364 <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	683a      	ldr	r2, [r7, #0]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d902      	bls.n	80063cc <SPI_WaitFlagStateUntilTimeout+0x30>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d13d      	bne.n	8006448 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80063da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063e4:	d111      	bne.n	800640a <SPI_WaitFlagStateUntilTimeout+0x6e>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063ee:	d004      	beq.n	80063fa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063f8:	d107      	bne.n	800640a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006408:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006412:	d10f      	bne.n	8006434 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006432:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e00f      	b.n	8006468 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	4013      	ands	r3, r2
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	429a      	cmp	r2, r3
 8006456:	bf0c      	ite	eq
 8006458:	2301      	moveq	r3, #1
 800645a:	2300      	movne	r3, #0
 800645c:	b2db      	uxtb	r3, r3
 800645e:	461a      	mov	r2, r3
 8006460:	79fb      	ldrb	r3, [r7, #7]
 8006462:	429a      	cmp	r2, r3
 8006464:	d1a3      	bne.n	80063ae <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af02      	add	r7, sp, #8
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006484:	d111      	bne.n	80064aa <SPI_EndRxTransaction+0x3a>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800648e:	d004      	beq.n	800649a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006498:	d107      	bne.n	80064aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064b2:	d12a      	bne.n	800650a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064bc:	d012      	beq.n	80064e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	2200      	movs	r2, #0
 80064c6:	2180      	movs	r1, #128	; 0x80
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f7ff ff67 	bl	800639c <SPI_WaitFlagStateUntilTimeout>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d02d      	beq.n	8006530 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d8:	f043 0220 	orr.w	r2, r3, #32
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e026      	b.n	8006532 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	2200      	movs	r2, #0
 80064ec:	2101      	movs	r1, #1
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f7ff ff54 	bl	800639c <SPI_WaitFlagStateUntilTimeout>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d01a      	beq.n	8006530 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064fe:	f043 0220 	orr.w	r2, r3, #32
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e013      	b.n	8006532 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2200      	movs	r2, #0
 8006512:	2101      	movs	r1, #1
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f7ff ff41 	bl	800639c <SPI_WaitFlagStateUntilTimeout>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d007      	beq.n	8006530 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006524:	f043 0220 	orr.w	r2, r3, #32
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e000      	b.n	8006532 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b088      	sub	sp, #32
 8006540:	af02      	add	r7, sp, #8
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006548:	4b1b      	ldr	r3, [pc, #108]	; (80065b8 <SPI_EndRxTxTransaction+0x7c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a1b      	ldr	r2, [pc, #108]	; (80065bc <SPI_EndRxTxTransaction+0x80>)
 800654e:	fba2 2303 	umull	r2, r3, r2, r3
 8006552:	0d5b      	lsrs	r3, r3, #21
 8006554:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006558:	fb02 f303 	mul.w	r3, r2, r3
 800655c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006566:	d112      	bne.n	800658e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2200      	movs	r2, #0
 8006570:	2180      	movs	r1, #128	; 0x80
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f7ff ff12 	bl	800639c <SPI_WaitFlagStateUntilTimeout>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d016      	beq.n	80065ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006582:	f043 0220 	orr.w	r2, r3, #32
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e00f      	b.n	80065ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00a      	beq.n	80065aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	3b01      	subs	r3, #1
 8006598:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a4:	2b80      	cmp	r3, #128	; 0x80
 80065a6:	d0f2      	beq.n	800658e <SPI_EndRxTxTransaction+0x52>
 80065a8:	e000      	b.n	80065ac <SPI_EndRxTxTransaction+0x70>
        break;
 80065aa:	bf00      	nop
  }

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20000044 	.word	0x20000044
 80065bc:	165e9f81 	.word	0x165e9f81

080065c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e01d      	b.n	800660e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d106      	bne.n	80065ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fc fc7a 	bl	8002ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3304      	adds	r3, #4
 80065fc:	4619      	mov	r1, r3
 80065fe:	4610      	mov	r0, r2
 8006600:	f000 f944 	bl	800688c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b082      	sub	sp, #8
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b02      	cmp	r3, #2
 800662a:	d122      	bne.n	8006672 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	2b02      	cmp	r3, #2
 8006638:	d11b      	bne.n	8006672 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f06f 0202 	mvn.w	r2, #2
 8006642:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	f003 0303 	and.w	r3, r3, #3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f8f8 	bl	800684e <HAL_TIM_IC_CaptureCallback>
 800665e:	e005      	b.n	800666c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f8ea 	bl	800683a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f8fb 	bl	8006862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	f003 0304 	and.w	r3, r3, #4
 800667c:	2b04      	cmp	r3, #4
 800667e:	d122      	bne.n	80066c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f003 0304 	and.w	r3, r3, #4
 800668a:	2b04      	cmp	r3, #4
 800668c:	d11b      	bne.n	80066c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f06f 0204 	mvn.w	r2, #4
 8006696:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d003      	beq.n	80066b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f8ce 	bl	800684e <HAL_TIM_IC_CaptureCallback>
 80066b2:	e005      	b.n	80066c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f8c0 	bl	800683a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f8d1 	bl	8006862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	f003 0308 	and.w	r3, r3, #8
 80066d0:	2b08      	cmp	r3, #8
 80066d2:	d122      	bne.n	800671a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	f003 0308 	and.w	r3, r3, #8
 80066de:	2b08      	cmp	r3, #8
 80066e0:	d11b      	bne.n	800671a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f06f 0208 	mvn.w	r2, #8
 80066ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2204      	movs	r2, #4
 80066f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	f003 0303 	and.w	r3, r3, #3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f8a4 	bl	800684e <HAL_TIM_IC_CaptureCallback>
 8006706:	e005      	b.n	8006714 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f896 	bl	800683a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f8a7 	bl	8006862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	f003 0310 	and.w	r3, r3, #16
 8006724:	2b10      	cmp	r3, #16
 8006726:	d122      	bne.n	800676e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f003 0310 	and.w	r3, r3, #16
 8006732:	2b10      	cmp	r3, #16
 8006734:	d11b      	bne.n	800676e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f06f 0210 	mvn.w	r2, #16
 800673e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2208      	movs	r2, #8
 8006744:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	69db      	ldr	r3, [r3, #28]
 800674c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006750:	2b00      	cmp	r3, #0
 8006752:	d003      	beq.n	800675c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f87a 	bl	800684e <HAL_TIM_IC_CaptureCallback>
 800675a:	e005      	b.n	8006768 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f86c 	bl	800683a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f87d 	bl	8006862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b01      	cmp	r3, #1
 800677a:	d10e      	bne.n	800679a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b01      	cmp	r3, #1
 8006788:	d107      	bne.n	800679a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f06f 0201 	mvn.w	r2, #1
 8006792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f846 	bl	8006826 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a4:	2b80      	cmp	r3, #128	; 0x80
 80067a6:	d10e      	bne.n	80067c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b2:	2b80      	cmp	r3, #128	; 0x80
 80067b4:	d107      	bne.n	80067c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f989 	bl	8006ad8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d0:	2b40      	cmp	r3, #64	; 0x40
 80067d2:	d10e      	bne.n	80067f2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067de:	2b40      	cmp	r3, #64	; 0x40
 80067e0:	d107      	bne.n	80067f2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 f842 	bl	8006876 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	f003 0320 	and.w	r3, r3, #32
 80067fc:	2b20      	cmp	r3, #32
 80067fe:	d10e      	bne.n	800681e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f003 0320 	and.w	r3, r3, #32
 800680a:	2b20      	cmp	r3, #32
 800680c:	d107      	bne.n	800681e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f06f 0220 	mvn.w	r2, #32
 8006816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 f953 	bl	8006ac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800681e:	bf00      	nop
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800682e:	bf00      	nop
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800683a:	b480      	push	{r7}
 800683c:	b083      	sub	sp, #12
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006842:	bf00      	nop
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006862:	b480      	push	{r7}
 8006864:	b083      	sub	sp, #12
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800686a:	bf00      	nop
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800687e:	bf00      	nop
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
	...

0800688c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a40      	ldr	r2, [pc, #256]	; (80069a0 <TIM_Base_SetConfig+0x114>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d013      	beq.n	80068cc <TIM_Base_SetConfig+0x40>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068aa:	d00f      	beq.n	80068cc <TIM_Base_SetConfig+0x40>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a3d      	ldr	r2, [pc, #244]	; (80069a4 <TIM_Base_SetConfig+0x118>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00b      	beq.n	80068cc <TIM_Base_SetConfig+0x40>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a3c      	ldr	r2, [pc, #240]	; (80069a8 <TIM_Base_SetConfig+0x11c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d007      	beq.n	80068cc <TIM_Base_SetConfig+0x40>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a3b      	ldr	r2, [pc, #236]	; (80069ac <TIM_Base_SetConfig+0x120>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d003      	beq.n	80068cc <TIM_Base_SetConfig+0x40>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a3a      	ldr	r2, [pc, #232]	; (80069b0 <TIM_Base_SetConfig+0x124>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d108      	bne.n	80068de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	4313      	orrs	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a2f      	ldr	r2, [pc, #188]	; (80069a0 <TIM_Base_SetConfig+0x114>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d02b      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ec:	d027      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a2c      	ldr	r2, [pc, #176]	; (80069a4 <TIM_Base_SetConfig+0x118>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d023      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a2b      	ldr	r2, [pc, #172]	; (80069a8 <TIM_Base_SetConfig+0x11c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d01f      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a2a      	ldr	r2, [pc, #168]	; (80069ac <TIM_Base_SetConfig+0x120>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d01b      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a29      	ldr	r2, [pc, #164]	; (80069b0 <TIM_Base_SetConfig+0x124>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d017      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a28      	ldr	r2, [pc, #160]	; (80069b4 <TIM_Base_SetConfig+0x128>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d013      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a27      	ldr	r2, [pc, #156]	; (80069b8 <TIM_Base_SetConfig+0x12c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d00f      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a26      	ldr	r2, [pc, #152]	; (80069bc <TIM_Base_SetConfig+0x130>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00b      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a25      	ldr	r2, [pc, #148]	; (80069c0 <TIM_Base_SetConfig+0x134>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d007      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a24      	ldr	r2, [pc, #144]	; (80069c4 <TIM_Base_SetConfig+0x138>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d003      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a23      	ldr	r2, [pc, #140]	; (80069c8 <TIM_Base_SetConfig+0x13c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d108      	bne.n	8006950 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	4313      	orrs	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a0a      	ldr	r2, [pc, #40]	; (80069a0 <TIM_Base_SetConfig+0x114>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d003      	beq.n	8006984 <TIM_Base_SetConfig+0xf8>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a0c      	ldr	r2, [pc, #48]	; (80069b0 <TIM_Base_SetConfig+0x124>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d103      	bne.n	800698c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	691a      	ldr	r2, [r3, #16]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	615a      	str	r2, [r3, #20]
}
 8006992:	bf00      	nop
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	40010000 	.word	0x40010000
 80069a4:	40000400 	.word	0x40000400
 80069a8:	40000800 	.word	0x40000800
 80069ac:	40000c00 	.word	0x40000c00
 80069b0:	40010400 	.word	0x40010400
 80069b4:	40014000 	.word	0x40014000
 80069b8:	40014400 	.word	0x40014400
 80069bc:	40014800 	.word	0x40014800
 80069c0:	40001800 	.word	0x40001800
 80069c4:	40001c00 	.word	0x40001c00
 80069c8:	40002000 	.word	0x40002000

080069cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d101      	bne.n	80069e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069e0:	2302      	movs	r3, #2
 80069e2:	e05a      	b.n	8006a9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a21      	ldr	r2, [pc, #132]	; (8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d022      	beq.n	8006a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a30:	d01d      	beq.n	8006a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a1d      	ldr	r2, [pc, #116]	; (8006aac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d018      	beq.n	8006a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a1b      	ldr	r2, [pc, #108]	; (8006ab0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d013      	beq.n	8006a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a1a      	ldr	r2, [pc, #104]	; (8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d00e      	beq.n	8006a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a18      	ldr	r2, [pc, #96]	; (8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d009      	beq.n	8006a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a17      	ldr	r2, [pc, #92]	; (8006abc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d004      	beq.n	8006a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a15      	ldr	r2, [pc, #84]	; (8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d10c      	bne.n	8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	40010000 	.word	0x40010000
 8006aac:	40000400 	.word	0x40000400
 8006ab0:	40000800 	.word	0x40000800
 8006ab4:	40000c00 	.word	0x40000c00
 8006ab8:	40010400 	.word	0x40010400
 8006abc:	40014000 	.word	0x40014000
 8006ac0:	40001800 	.word	0x40001800

08006ac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e03f      	b.n	8006b7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d106      	bne.n	8006b18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7fc fa0c 	bl	8002f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2224      	movs	r2, #36	; 0x24
 8006b1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68da      	ldr	r2, [r3, #12]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f829 	bl	8006b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	691a      	ldr	r2, [r3, #16]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	695a      	ldr	r2, [r3, #20]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68da      	ldr	r2, [r3, #12]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2220      	movs	r2, #32
 8006b78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b8c:	b085      	sub	sp, #20
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68da      	ldr	r2, [r3, #12]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	689a      	ldr	r2, [r3, #8]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	431a      	orrs	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006bca:	f023 030c 	bic.w	r3, r3, #12
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	6812      	ldr	r2, [r2, #0]
 8006bd2:	68f9      	ldr	r1, [r7, #12]
 8006bd4:	430b      	orrs	r3, r1
 8006bd6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699a      	ldr	r2, [r3, #24]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bf6:	f040 818b 	bne.w	8006f10 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4ac1      	ldr	r2, [pc, #772]	; (8006f04 <UART_SetConfig+0x37c>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d005      	beq.n	8006c10 <UART_SetConfig+0x88>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4abf      	ldr	r2, [pc, #764]	; (8006f08 <UART_SetConfig+0x380>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	f040 80bd 	bne.w	8006d8a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c10:	f7fe fcfa 	bl	8005608 <HAL_RCC_GetPCLK2Freq>
 8006c14:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	461d      	mov	r5, r3
 8006c1a:	f04f 0600 	mov.w	r6, #0
 8006c1e:	46a8      	mov	r8, r5
 8006c20:	46b1      	mov	r9, r6
 8006c22:	eb18 0308 	adds.w	r3, r8, r8
 8006c26:	eb49 0409 	adc.w	r4, r9, r9
 8006c2a:	4698      	mov	r8, r3
 8006c2c:	46a1      	mov	r9, r4
 8006c2e:	eb18 0805 	adds.w	r8, r8, r5
 8006c32:	eb49 0906 	adc.w	r9, r9, r6
 8006c36:	f04f 0100 	mov.w	r1, #0
 8006c3a:	f04f 0200 	mov.w	r2, #0
 8006c3e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006c42:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006c46:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006c4a:	4688      	mov	r8, r1
 8006c4c:	4691      	mov	r9, r2
 8006c4e:	eb18 0005 	adds.w	r0, r8, r5
 8006c52:	eb49 0106 	adc.w	r1, r9, r6
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	461d      	mov	r5, r3
 8006c5c:	f04f 0600 	mov.w	r6, #0
 8006c60:	196b      	adds	r3, r5, r5
 8006c62:	eb46 0406 	adc.w	r4, r6, r6
 8006c66:	461a      	mov	r2, r3
 8006c68:	4623      	mov	r3, r4
 8006c6a:	f7f9 fabf 	bl	80001ec <__aeabi_uldivmod>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	460c      	mov	r4, r1
 8006c72:	461a      	mov	r2, r3
 8006c74:	4ba5      	ldr	r3, [pc, #660]	; (8006f0c <UART_SetConfig+0x384>)
 8006c76:	fba3 2302 	umull	r2, r3, r3, r2
 8006c7a:	095b      	lsrs	r3, r3, #5
 8006c7c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	461d      	mov	r5, r3
 8006c84:	f04f 0600 	mov.w	r6, #0
 8006c88:	46a9      	mov	r9, r5
 8006c8a:	46b2      	mov	sl, r6
 8006c8c:	eb19 0309 	adds.w	r3, r9, r9
 8006c90:	eb4a 040a 	adc.w	r4, sl, sl
 8006c94:	4699      	mov	r9, r3
 8006c96:	46a2      	mov	sl, r4
 8006c98:	eb19 0905 	adds.w	r9, r9, r5
 8006c9c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006ca0:	f04f 0100 	mov.w	r1, #0
 8006ca4:	f04f 0200 	mov.w	r2, #0
 8006ca8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cb0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cb4:	4689      	mov	r9, r1
 8006cb6:	4692      	mov	sl, r2
 8006cb8:	eb19 0005 	adds.w	r0, r9, r5
 8006cbc:	eb4a 0106 	adc.w	r1, sl, r6
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	461d      	mov	r5, r3
 8006cc6:	f04f 0600 	mov.w	r6, #0
 8006cca:	196b      	adds	r3, r5, r5
 8006ccc:	eb46 0406 	adc.w	r4, r6, r6
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	4623      	mov	r3, r4
 8006cd4:	f7f9 fa8a 	bl	80001ec <__aeabi_uldivmod>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	460c      	mov	r4, r1
 8006cdc:	461a      	mov	r2, r3
 8006cde:	4b8b      	ldr	r3, [pc, #556]	; (8006f0c <UART_SetConfig+0x384>)
 8006ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ce4:	095b      	lsrs	r3, r3, #5
 8006ce6:	2164      	movs	r1, #100	; 0x64
 8006ce8:	fb01 f303 	mul.w	r3, r1, r3
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	3332      	adds	r3, #50	; 0x32
 8006cf2:	4a86      	ldr	r2, [pc, #536]	; (8006f0c <UART_SetConfig+0x384>)
 8006cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf8:	095b      	lsrs	r3, r3, #5
 8006cfa:	005b      	lsls	r3, r3, #1
 8006cfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d00:	4498      	add	r8, r3
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	461d      	mov	r5, r3
 8006d06:	f04f 0600 	mov.w	r6, #0
 8006d0a:	46a9      	mov	r9, r5
 8006d0c:	46b2      	mov	sl, r6
 8006d0e:	eb19 0309 	adds.w	r3, r9, r9
 8006d12:	eb4a 040a 	adc.w	r4, sl, sl
 8006d16:	4699      	mov	r9, r3
 8006d18:	46a2      	mov	sl, r4
 8006d1a:	eb19 0905 	adds.w	r9, r9, r5
 8006d1e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d22:	f04f 0100 	mov.w	r1, #0
 8006d26:	f04f 0200 	mov.w	r2, #0
 8006d2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d36:	4689      	mov	r9, r1
 8006d38:	4692      	mov	sl, r2
 8006d3a:	eb19 0005 	adds.w	r0, r9, r5
 8006d3e:	eb4a 0106 	adc.w	r1, sl, r6
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	461d      	mov	r5, r3
 8006d48:	f04f 0600 	mov.w	r6, #0
 8006d4c:	196b      	adds	r3, r5, r5
 8006d4e:	eb46 0406 	adc.w	r4, r6, r6
 8006d52:	461a      	mov	r2, r3
 8006d54:	4623      	mov	r3, r4
 8006d56:	f7f9 fa49 	bl	80001ec <__aeabi_uldivmod>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	460c      	mov	r4, r1
 8006d5e:	461a      	mov	r2, r3
 8006d60:	4b6a      	ldr	r3, [pc, #424]	; (8006f0c <UART_SetConfig+0x384>)
 8006d62:	fba3 1302 	umull	r1, r3, r3, r2
 8006d66:	095b      	lsrs	r3, r3, #5
 8006d68:	2164      	movs	r1, #100	; 0x64
 8006d6a:	fb01 f303 	mul.w	r3, r1, r3
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	00db      	lsls	r3, r3, #3
 8006d72:	3332      	adds	r3, #50	; 0x32
 8006d74:	4a65      	ldr	r2, [pc, #404]	; (8006f0c <UART_SetConfig+0x384>)
 8006d76:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7a:	095b      	lsrs	r3, r3, #5
 8006d7c:	f003 0207 	and.w	r2, r3, #7
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4442      	add	r2, r8
 8006d86:	609a      	str	r2, [r3, #8]
 8006d88:	e26f      	b.n	800726a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d8a:	f7fe fc29 	bl	80055e0 <HAL_RCC_GetPCLK1Freq>
 8006d8e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	461d      	mov	r5, r3
 8006d94:	f04f 0600 	mov.w	r6, #0
 8006d98:	46a8      	mov	r8, r5
 8006d9a:	46b1      	mov	r9, r6
 8006d9c:	eb18 0308 	adds.w	r3, r8, r8
 8006da0:	eb49 0409 	adc.w	r4, r9, r9
 8006da4:	4698      	mov	r8, r3
 8006da6:	46a1      	mov	r9, r4
 8006da8:	eb18 0805 	adds.w	r8, r8, r5
 8006dac:	eb49 0906 	adc.w	r9, r9, r6
 8006db0:	f04f 0100 	mov.w	r1, #0
 8006db4:	f04f 0200 	mov.w	r2, #0
 8006db8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006dbc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006dc0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006dc4:	4688      	mov	r8, r1
 8006dc6:	4691      	mov	r9, r2
 8006dc8:	eb18 0005 	adds.w	r0, r8, r5
 8006dcc:	eb49 0106 	adc.w	r1, r9, r6
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	461d      	mov	r5, r3
 8006dd6:	f04f 0600 	mov.w	r6, #0
 8006dda:	196b      	adds	r3, r5, r5
 8006ddc:	eb46 0406 	adc.w	r4, r6, r6
 8006de0:	461a      	mov	r2, r3
 8006de2:	4623      	mov	r3, r4
 8006de4:	f7f9 fa02 	bl	80001ec <__aeabi_uldivmod>
 8006de8:	4603      	mov	r3, r0
 8006dea:	460c      	mov	r4, r1
 8006dec:	461a      	mov	r2, r3
 8006dee:	4b47      	ldr	r3, [pc, #284]	; (8006f0c <UART_SetConfig+0x384>)
 8006df0:	fba3 2302 	umull	r2, r3, r3, r2
 8006df4:	095b      	lsrs	r3, r3, #5
 8006df6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	461d      	mov	r5, r3
 8006dfe:	f04f 0600 	mov.w	r6, #0
 8006e02:	46a9      	mov	r9, r5
 8006e04:	46b2      	mov	sl, r6
 8006e06:	eb19 0309 	adds.w	r3, r9, r9
 8006e0a:	eb4a 040a 	adc.w	r4, sl, sl
 8006e0e:	4699      	mov	r9, r3
 8006e10:	46a2      	mov	sl, r4
 8006e12:	eb19 0905 	adds.w	r9, r9, r5
 8006e16:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e1a:	f04f 0100 	mov.w	r1, #0
 8006e1e:	f04f 0200 	mov.w	r2, #0
 8006e22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e2e:	4689      	mov	r9, r1
 8006e30:	4692      	mov	sl, r2
 8006e32:	eb19 0005 	adds.w	r0, r9, r5
 8006e36:	eb4a 0106 	adc.w	r1, sl, r6
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	461d      	mov	r5, r3
 8006e40:	f04f 0600 	mov.w	r6, #0
 8006e44:	196b      	adds	r3, r5, r5
 8006e46:	eb46 0406 	adc.w	r4, r6, r6
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	4623      	mov	r3, r4
 8006e4e:	f7f9 f9cd 	bl	80001ec <__aeabi_uldivmod>
 8006e52:	4603      	mov	r3, r0
 8006e54:	460c      	mov	r4, r1
 8006e56:	461a      	mov	r2, r3
 8006e58:	4b2c      	ldr	r3, [pc, #176]	; (8006f0c <UART_SetConfig+0x384>)
 8006e5a:	fba3 1302 	umull	r1, r3, r3, r2
 8006e5e:	095b      	lsrs	r3, r3, #5
 8006e60:	2164      	movs	r1, #100	; 0x64
 8006e62:	fb01 f303 	mul.w	r3, r1, r3
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	00db      	lsls	r3, r3, #3
 8006e6a:	3332      	adds	r3, #50	; 0x32
 8006e6c:	4a27      	ldr	r2, [pc, #156]	; (8006f0c <UART_SetConfig+0x384>)
 8006e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e72:	095b      	lsrs	r3, r3, #5
 8006e74:	005b      	lsls	r3, r3, #1
 8006e76:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e7a:	4498      	add	r8, r3
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	461d      	mov	r5, r3
 8006e80:	f04f 0600 	mov.w	r6, #0
 8006e84:	46a9      	mov	r9, r5
 8006e86:	46b2      	mov	sl, r6
 8006e88:	eb19 0309 	adds.w	r3, r9, r9
 8006e8c:	eb4a 040a 	adc.w	r4, sl, sl
 8006e90:	4699      	mov	r9, r3
 8006e92:	46a2      	mov	sl, r4
 8006e94:	eb19 0905 	adds.w	r9, r9, r5
 8006e98:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e9c:	f04f 0100 	mov.w	r1, #0
 8006ea0:	f04f 0200 	mov.w	r2, #0
 8006ea4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ea8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006eac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006eb0:	4689      	mov	r9, r1
 8006eb2:	4692      	mov	sl, r2
 8006eb4:	eb19 0005 	adds.w	r0, r9, r5
 8006eb8:	eb4a 0106 	adc.w	r1, sl, r6
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	461d      	mov	r5, r3
 8006ec2:	f04f 0600 	mov.w	r6, #0
 8006ec6:	196b      	adds	r3, r5, r5
 8006ec8:	eb46 0406 	adc.w	r4, r6, r6
 8006ecc:	461a      	mov	r2, r3
 8006ece:	4623      	mov	r3, r4
 8006ed0:	f7f9 f98c 	bl	80001ec <__aeabi_uldivmod>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	461a      	mov	r2, r3
 8006eda:	4b0c      	ldr	r3, [pc, #48]	; (8006f0c <UART_SetConfig+0x384>)
 8006edc:	fba3 1302 	umull	r1, r3, r3, r2
 8006ee0:	095b      	lsrs	r3, r3, #5
 8006ee2:	2164      	movs	r1, #100	; 0x64
 8006ee4:	fb01 f303 	mul.w	r3, r1, r3
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	00db      	lsls	r3, r3, #3
 8006eec:	3332      	adds	r3, #50	; 0x32
 8006eee:	4a07      	ldr	r2, [pc, #28]	; (8006f0c <UART_SetConfig+0x384>)
 8006ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef4:	095b      	lsrs	r3, r3, #5
 8006ef6:	f003 0207 	and.w	r2, r3, #7
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4442      	add	r2, r8
 8006f00:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006f02:	e1b2      	b.n	800726a <UART_SetConfig+0x6e2>
 8006f04:	40011000 	.word	0x40011000
 8006f08:	40011400 	.word	0x40011400
 8006f0c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4ad7      	ldr	r2, [pc, #860]	; (8007274 <UART_SetConfig+0x6ec>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d005      	beq.n	8006f26 <UART_SetConfig+0x39e>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4ad6      	ldr	r2, [pc, #856]	; (8007278 <UART_SetConfig+0x6f0>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	f040 80d1 	bne.w	80070c8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f26:	f7fe fb6f 	bl	8005608 <HAL_RCC_GetPCLK2Freq>
 8006f2a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	469a      	mov	sl, r3
 8006f30:	f04f 0b00 	mov.w	fp, #0
 8006f34:	46d0      	mov	r8, sl
 8006f36:	46d9      	mov	r9, fp
 8006f38:	eb18 0308 	adds.w	r3, r8, r8
 8006f3c:	eb49 0409 	adc.w	r4, r9, r9
 8006f40:	4698      	mov	r8, r3
 8006f42:	46a1      	mov	r9, r4
 8006f44:	eb18 080a 	adds.w	r8, r8, sl
 8006f48:	eb49 090b 	adc.w	r9, r9, fp
 8006f4c:	f04f 0100 	mov.w	r1, #0
 8006f50:	f04f 0200 	mov.w	r2, #0
 8006f54:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006f58:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006f5c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006f60:	4688      	mov	r8, r1
 8006f62:	4691      	mov	r9, r2
 8006f64:	eb1a 0508 	adds.w	r5, sl, r8
 8006f68:	eb4b 0609 	adc.w	r6, fp, r9
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	4619      	mov	r1, r3
 8006f72:	f04f 0200 	mov.w	r2, #0
 8006f76:	f04f 0300 	mov.w	r3, #0
 8006f7a:	f04f 0400 	mov.w	r4, #0
 8006f7e:	0094      	lsls	r4, r2, #2
 8006f80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f84:	008b      	lsls	r3, r1, #2
 8006f86:	461a      	mov	r2, r3
 8006f88:	4623      	mov	r3, r4
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	4631      	mov	r1, r6
 8006f8e:	f7f9 f92d 	bl	80001ec <__aeabi_uldivmod>
 8006f92:	4603      	mov	r3, r0
 8006f94:	460c      	mov	r4, r1
 8006f96:	461a      	mov	r2, r3
 8006f98:	4bb8      	ldr	r3, [pc, #736]	; (800727c <UART_SetConfig+0x6f4>)
 8006f9a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f9e:	095b      	lsrs	r3, r3, #5
 8006fa0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	469b      	mov	fp, r3
 8006fa8:	f04f 0c00 	mov.w	ip, #0
 8006fac:	46d9      	mov	r9, fp
 8006fae:	46e2      	mov	sl, ip
 8006fb0:	eb19 0309 	adds.w	r3, r9, r9
 8006fb4:	eb4a 040a 	adc.w	r4, sl, sl
 8006fb8:	4699      	mov	r9, r3
 8006fba:	46a2      	mov	sl, r4
 8006fbc:	eb19 090b 	adds.w	r9, r9, fp
 8006fc0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006fc4:	f04f 0100 	mov.w	r1, #0
 8006fc8:	f04f 0200 	mov.w	r2, #0
 8006fcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fd0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006fd4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006fd8:	4689      	mov	r9, r1
 8006fda:	4692      	mov	sl, r2
 8006fdc:	eb1b 0509 	adds.w	r5, fp, r9
 8006fe0:	eb4c 060a 	adc.w	r6, ip, sl
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	4619      	mov	r1, r3
 8006fea:	f04f 0200 	mov.w	r2, #0
 8006fee:	f04f 0300 	mov.w	r3, #0
 8006ff2:	f04f 0400 	mov.w	r4, #0
 8006ff6:	0094      	lsls	r4, r2, #2
 8006ff8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ffc:	008b      	lsls	r3, r1, #2
 8006ffe:	461a      	mov	r2, r3
 8007000:	4623      	mov	r3, r4
 8007002:	4628      	mov	r0, r5
 8007004:	4631      	mov	r1, r6
 8007006:	f7f9 f8f1 	bl	80001ec <__aeabi_uldivmod>
 800700a:	4603      	mov	r3, r0
 800700c:	460c      	mov	r4, r1
 800700e:	461a      	mov	r2, r3
 8007010:	4b9a      	ldr	r3, [pc, #616]	; (800727c <UART_SetConfig+0x6f4>)
 8007012:	fba3 1302 	umull	r1, r3, r3, r2
 8007016:	095b      	lsrs	r3, r3, #5
 8007018:	2164      	movs	r1, #100	; 0x64
 800701a:	fb01 f303 	mul.w	r3, r1, r3
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	011b      	lsls	r3, r3, #4
 8007022:	3332      	adds	r3, #50	; 0x32
 8007024:	4a95      	ldr	r2, [pc, #596]	; (800727c <UART_SetConfig+0x6f4>)
 8007026:	fba2 2303 	umull	r2, r3, r2, r3
 800702a:	095b      	lsrs	r3, r3, #5
 800702c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007030:	4498      	add	r8, r3
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	469b      	mov	fp, r3
 8007036:	f04f 0c00 	mov.w	ip, #0
 800703a:	46d9      	mov	r9, fp
 800703c:	46e2      	mov	sl, ip
 800703e:	eb19 0309 	adds.w	r3, r9, r9
 8007042:	eb4a 040a 	adc.w	r4, sl, sl
 8007046:	4699      	mov	r9, r3
 8007048:	46a2      	mov	sl, r4
 800704a:	eb19 090b 	adds.w	r9, r9, fp
 800704e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007052:	f04f 0100 	mov.w	r1, #0
 8007056:	f04f 0200 	mov.w	r2, #0
 800705a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800705e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007062:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007066:	4689      	mov	r9, r1
 8007068:	4692      	mov	sl, r2
 800706a:	eb1b 0509 	adds.w	r5, fp, r9
 800706e:	eb4c 060a 	adc.w	r6, ip, sl
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	4619      	mov	r1, r3
 8007078:	f04f 0200 	mov.w	r2, #0
 800707c:	f04f 0300 	mov.w	r3, #0
 8007080:	f04f 0400 	mov.w	r4, #0
 8007084:	0094      	lsls	r4, r2, #2
 8007086:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800708a:	008b      	lsls	r3, r1, #2
 800708c:	461a      	mov	r2, r3
 800708e:	4623      	mov	r3, r4
 8007090:	4628      	mov	r0, r5
 8007092:	4631      	mov	r1, r6
 8007094:	f7f9 f8aa 	bl	80001ec <__aeabi_uldivmod>
 8007098:	4603      	mov	r3, r0
 800709a:	460c      	mov	r4, r1
 800709c:	461a      	mov	r2, r3
 800709e:	4b77      	ldr	r3, [pc, #476]	; (800727c <UART_SetConfig+0x6f4>)
 80070a0:	fba3 1302 	umull	r1, r3, r3, r2
 80070a4:	095b      	lsrs	r3, r3, #5
 80070a6:	2164      	movs	r1, #100	; 0x64
 80070a8:	fb01 f303 	mul.w	r3, r1, r3
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	011b      	lsls	r3, r3, #4
 80070b0:	3332      	adds	r3, #50	; 0x32
 80070b2:	4a72      	ldr	r2, [pc, #456]	; (800727c <UART_SetConfig+0x6f4>)
 80070b4:	fba2 2303 	umull	r2, r3, r2, r3
 80070b8:	095b      	lsrs	r3, r3, #5
 80070ba:	f003 020f 	and.w	r2, r3, #15
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4442      	add	r2, r8
 80070c4:	609a      	str	r2, [r3, #8]
 80070c6:	e0d0      	b.n	800726a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80070c8:	f7fe fa8a 	bl	80055e0 <HAL_RCC_GetPCLK1Freq>
 80070cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	469a      	mov	sl, r3
 80070d2:	f04f 0b00 	mov.w	fp, #0
 80070d6:	46d0      	mov	r8, sl
 80070d8:	46d9      	mov	r9, fp
 80070da:	eb18 0308 	adds.w	r3, r8, r8
 80070de:	eb49 0409 	adc.w	r4, r9, r9
 80070e2:	4698      	mov	r8, r3
 80070e4:	46a1      	mov	r9, r4
 80070e6:	eb18 080a 	adds.w	r8, r8, sl
 80070ea:	eb49 090b 	adc.w	r9, r9, fp
 80070ee:	f04f 0100 	mov.w	r1, #0
 80070f2:	f04f 0200 	mov.w	r2, #0
 80070f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80070fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80070fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007102:	4688      	mov	r8, r1
 8007104:	4691      	mov	r9, r2
 8007106:	eb1a 0508 	adds.w	r5, sl, r8
 800710a:	eb4b 0609 	adc.w	r6, fp, r9
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	4619      	mov	r1, r3
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	f04f 0300 	mov.w	r3, #0
 800711c:	f04f 0400 	mov.w	r4, #0
 8007120:	0094      	lsls	r4, r2, #2
 8007122:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007126:	008b      	lsls	r3, r1, #2
 8007128:	461a      	mov	r2, r3
 800712a:	4623      	mov	r3, r4
 800712c:	4628      	mov	r0, r5
 800712e:	4631      	mov	r1, r6
 8007130:	f7f9 f85c 	bl	80001ec <__aeabi_uldivmod>
 8007134:	4603      	mov	r3, r0
 8007136:	460c      	mov	r4, r1
 8007138:	461a      	mov	r2, r3
 800713a:	4b50      	ldr	r3, [pc, #320]	; (800727c <UART_SetConfig+0x6f4>)
 800713c:	fba3 2302 	umull	r2, r3, r3, r2
 8007140:	095b      	lsrs	r3, r3, #5
 8007142:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	469b      	mov	fp, r3
 800714a:	f04f 0c00 	mov.w	ip, #0
 800714e:	46d9      	mov	r9, fp
 8007150:	46e2      	mov	sl, ip
 8007152:	eb19 0309 	adds.w	r3, r9, r9
 8007156:	eb4a 040a 	adc.w	r4, sl, sl
 800715a:	4699      	mov	r9, r3
 800715c:	46a2      	mov	sl, r4
 800715e:	eb19 090b 	adds.w	r9, r9, fp
 8007162:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007166:	f04f 0100 	mov.w	r1, #0
 800716a:	f04f 0200 	mov.w	r2, #0
 800716e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007172:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007176:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800717a:	4689      	mov	r9, r1
 800717c:	4692      	mov	sl, r2
 800717e:	eb1b 0509 	adds.w	r5, fp, r9
 8007182:	eb4c 060a 	adc.w	r6, ip, sl
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	4619      	mov	r1, r3
 800718c:	f04f 0200 	mov.w	r2, #0
 8007190:	f04f 0300 	mov.w	r3, #0
 8007194:	f04f 0400 	mov.w	r4, #0
 8007198:	0094      	lsls	r4, r2, #2
 800719a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800719e:	008b      	lsls	r3, r1, #2
 80071a0:	461a      	mov	r2, r3
 80071a2:	4623      	mov	r3, r4
 80071a4:	4628      	mov	r0, r5
 80071a6:	4631      	mov	r1, r6
 80071a8:	f7f9 f820 	bl	80001ec <__aeabi_uldivmod>
 80071ac:	4603      	mov	r3, r0
 80071ae:	460c      	mov	r4, r1
 80071b0:	461a      	mov	r2, r3
 80071b2:	4b32      	ldr	r3, [pc, #200]	; (800727c <UART_SetConfig+0x6f4>)
 80071b4:	fba3 1302 	umull	r1, r3, r3, r2
 80071b8:	095b      	lsrs	r3, r3, #5
 80071ba:	2164      	movs	r1, #100	; 0x64
 80071bc:	fb01 f303 	mul.w	r3, r1, r3
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	011b      	lsls	r3, r3, #4
 80071c4:	3332      	adds	r3, #50	; 0x32
 80071c6:	4a2d      	ldr	r2, [pc, #180]	; (800727c <UART_SetConfig+0x6f4>)
 80071c8:	fba2 2303 	umull	r2, r3, r2, r3
 80071cc:	095b      	lsrs	r3, r3, #5
 80071ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071d2:	4498      	add	r8, r3
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	469b      	mov	fp, r3
 80071d8:	f04f 0c00 	mov.w	ip, #0
 80071dc:	46d9      	mov	r9, fp
 80071de:	46e2      	mov	sl, ip
 80071e0:	eb19 0309 	adds.w	r3, r9, r9
 80071e4:	eb4a 040a 	adc.w	r4, sl, sl
 80071e8:	4699      	mov	r9, r3
 80071ea:	46a2      	mov	sl, r4
 80071ec:	eb19 090b 	adds.w	r9, r9, fp
 80071f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80071f4:	f04f 0100 	mov.w	r1, #0
 80071f8:	f04f 0200 	mov.w	r2, #0
 80071fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007200:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007204:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007208:	4689      	mov	r9, r1
 800720a:	4692      	mov	sl, r2
 800720c:	eb1b 0509 	adds.w	r5, fp, r9
 8007210:	eb4c 060a 	adc.w	r6, ip, sl
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	4619      	mov	r1, r3
 800721a:	f04f 0200 	mov.w	r2, #0
 800721e:	f04f 0300 	mov.w	r3, #0
 8007222:	f04f 0400 	mov.w	r4, #0
 8007226:	0094      	lsls	r4, r2, #2
 8007228:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800722c:	008b      	lsls	r3, r1, #2
 800722e:	461a      	mov	r2, r3
 8007230:	4623      	mov	r3, r4
 8007232:	4628      	mov	r0, r5
 8007234:	4631      	mov	r1, r6
 8007236:	f7f8 ffd9 	bl	80001ec <__aeabi_uldivmod>
 800723a:	4603      	mov	r3, r0
 800723c:	460c      	mov	r4, r1
 800723e:	461a      	mov	r2, r3
 8007240:	4b0e      	ldr	r3, [pc, #56]	; (800727c <UART_SetConfig+0x6f4>)
 8007242:	fba3 1302 	umull	r1, r3, r3, r2
 8007246:	095b      	lsrs	r3, r3, #5
 8007248:	2164      	movs	r1, #100	; 0x64
 800724a:	fb01 f303 	mul.w	r3, r1, r3
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	011b      	lsls	r3, r3, #4
 8007252:	3332      	adds	r3, #50	; 0x32
 8007254:	4a09      	ldr	r2, [pc, #36]	; (800727c <UART_SetConfig+0x6f4>)
 8007256:	fba2 2303 	umull	r2, r3, r2, r3
 800725a:	095b      	lsrs	r3, r3, #5
 800725c:	f003 020f 	and.w	r2, r3, #15
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4442      	add	r2, r8
 8007266:	609a      	str	r2, [r3, #8]
}
 8007268:	e7ff      	b.n	800726a <UART_SetConfig+0x6e2>
 800726a:	bf00      	nop
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007274:	40011000 	.word	0x40011000
 8007278:	40011400 	.word	0x40011400
 800727c:	51eb851f 	.word	0x51eb851f

08007280 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800728a:	2300      	movs	r3, #0
 800728c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800728e:	2300      	movs	r3, #0
 8007290:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d029      	beq.n	80072ee <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80072a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072aa:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80072b4:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80072ba:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80072c0:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80072c6:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80072cc:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80072d2:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80072d8:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80072de:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	601a      	str	r2, [r3, #0]
 80072ec:	e034      	b.n	8007358 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072fa:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007304:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800730a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	4313      	orrs	r3, r2
 8007310:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800731e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007322:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800732c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8007332:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8007338:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800733e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8007344:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	4313      	orrs	r3, r2
 800734a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3714      	adds	r7, #20
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007366:	b480      	push	{r7}
 8007368:	b087      	sub	sp, #28
 800736a:	af00      	add	r7, sp, #0
 800736c:	60f8      	str	r0, [r7, #12]
 800736e:	60b9      	str	r1, [r7, #8]
 8007370:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d02e      	beq.n	80073de <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800738c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	3b01      	subs	r3, #1
 800739a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800739c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	3b01      	subs	r3, #1
 80073a4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80073a6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	3b01      	subs	r3, #1
 80073ae:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80073b0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	3b01      	subs	r3, #1
 80073b8:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80073ba:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	695b      	ldr	r3, [r3, #20]
 80073c0:	3b01      	subs	r3, #1
 80073c2:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80073c4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	3b01      	subs	r3, #1
 80073cc:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80073ce:	4313      	orrs	r3, r2
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	609a      	str	r2, [r3, #8]
 80073dc:	e03b      	b.n	8007456 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80073ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073ee:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	3b01      	subs	r3, #1
 80073f6:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	695b      	ldr	r3, [r3, #20]
 80073fc:	3b01      	subs	r3, #1
 80073fe:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007400:	4313      	orrs	r3, r2
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	4313      	orrs	r3, r2
 8007406:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007414:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	3b01      	subs	r3, #1
 8007422:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007424:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	3b01      	subs	r3, #1
 800742c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800742e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	3b01      	subs	r3, #1
 8007436:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007438:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	3b01      	subs	r3, #1
 8007440:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007442:	4313      	orrs	r3, r2
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	4313      	orrs	r3, r2
 8007448:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	693a      	ldr	r2, [r7, #16]
 8007454:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	371c      	adds	r7, #28
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8007470:	2300      	movs	r3, #0
 8007472:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8007474:	2300      	movs	r3, #0
 8007476:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007480:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	3b01      	subs	r3, #1
 8007488:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800748a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007492:	4313      	orrs	r3, r2
 8007494:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800749c:	f7fb ff62 	bl	8003364 <HAL_GetTick>
 80074a0:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80074a2:	e010      	b.n	80074c6 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074aa:	d00c      	beq.n	80074c6 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d007      	beq.n	80074c2 <FMC_SDRAM_SendCommand+0x5e>
 80074b2:	f7fb ff57 	bl	8003364 <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d201      	bcs.n	80074c6 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e006      	b.n	80074d4 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	f003 0320 	and.w	r3, r3, #32
 80074ce:	2b20      	cmp	r3, #32
 80074d0:	d0e8      	beq.n	80074a4 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3718      	adds	r7, #24
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	695a      	ldr	r2, [r3, #20]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	005b      	lsls	r3, r3, #1
 80074ee:	431a      	orrs	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 8007502:	b480      	push	{r7}
 8007504:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 8007506:	bf00      	nop
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <_ZdlPvj>:
 8007510:	f000 b81a 	b.w	8007548 <_ZdlPv>

08007514 <_Znwj>:
 8007514:	b510      	push	{r4, lr}
 8007516:	2800      	cmp	r0, #0
 8007518:	bf14      	ite	ne
 800751a:	4604      	movne	r4, r0
 800751c:	2401      	moveq	r4, #1
 800751e:	4620      	mov	r0, r4
 8007520:	f000 f848 	bl	80075b4 <malloc>
 8007524:	b930      	cbnz	r0, 8007534 <_Znwj+0x20>
 8007526:	f000 f807 	bl	8007538 <_ZSt15get_new_handlerv>
 800752a:	b908      	cbnz	r0, 8007530 <_Znwj+0x1c>
 800752c:	f000 f811 	bl	8007552 <abort>
 8007530:	4780      	blx	r0
 8007532:	e7f4      	b.n	800751e <_Znwj+0xa>
 8007534:	bd10      	pop	{r4, pc}
	...

08007538 <_ZSt15get_new_handlerv>:
 8007538:	4b02      	ldr	r3, [pc, #8]	; (8007544 <_ZSt15get_new_handlerv+0xc>)
 800753a:	6818      	ldr	r0, [r3, #0]
 800753c:	f3bf 8f5b 	dmb	ish
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	20000574 	.word	0x20000574

08007548 <_ZdlPv>:
 8007548:	f000 b83c 	b.w	80075c4 <free>

0800754c <_ZSt17__throw_bad_allocv>:
 800754c:	b508      	push	{r3, lr}
 800754e:	f000 f800 	bl	8007552 <abort>

08007552 <abort>:
 8007552:	b508      	push	{r3, lr}
 8007554:	2006      	movs	r0, #6
 8007556:	f000 f93f 	bl	80077d8 <raise>
 800755a:	2001      	movs	r0, #1
 800755c:	f7fb fe1c 	bl	8003198 <_exit>

08007560 <__errno>:
 8007560:	4b01      	ldr	r3, [pc, #4]	; (8007568 <__errno+0x8>)
 8007562:	6818      	ldr	r0, [r3, #0]
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	20000050 	.word	0x20000050

0800756c <__libc_init_array>:
 800756c:	b570      	push	{r4, r5, r6, lr}
 800756e:	4e0d      	ldr	r6, [pc, #52]	; (80075a4 <__libc_init_array+0x38>)
 8007570:	4c0d      	ldr	r4, [pc, #52]	; (80075a8 <__libc_init_array+0x3c>)
 8007572:	1ba4      	subs	r4, r4, r6
 8007574:	10a4      	asrs	r4, r4, #2
 8007576:	2500      	movs	r5, #0
 8007578:	42a5      	cmp	r5, r4
 800757a:	d109      	bne.n	8007590 <__libc_init_array+0x24>
 800757c:	4e0b      	ldr	r6, [pc, #44]	; (80075ac <__libc_init_array+0x40>)
 800757e:	4c0c      	ldr	r4, [pc, #48]	; (80075b0 <__libc_init_array+0x44>)
 8007580:	f000 f948 	bl	8007814 <_init>
 8007584:	1ba4      	subs	r4, r4, r6
 8007586:	10a4      	asrs	r4, r4, #2
 8007588:	2500      	movs	r5, #0
 800758a:	42a5      	cmp	r5, r4
 800758c:	d105      	bne.n	800759a <__libc_init_array+0x2e>
 800758e:	bd70      	pop	{r4, r5, r6, pc}
 8007590:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007594:	4798      	blx	r3
 8007596:	3501      	adds	r5, #1
 8007598:	e7ee      	b.n	8007578 <__libc_init_array+0xc>
 800759a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800759e:	4798      	blx	r3
 80075a0:	3501      	adds	r5, #1
 80075a2:	e7f2      	b.n	800758a <__libc_init_array+0x1e>
 80075a4:	0800932c 	.word	0x0800932c
 80075a8:	0800932c 	.word	0x0800932c
 80075ac:	0800932c 	.word	0x0800932c
 80075b0:	08009330 	.word	0x08009330

080075b4 <malloc>:
 80075b4:	4b02      	ldr	r3, [pc, #8]	; (80075c0 <malloc+0xc>)
 80075b6:	4601      	mov	r1, r0
 80075b8:	6818      	ldr	r0, [r3, #0]
 80075ba:	f000 b87b 	b.w	80076b4 <_malloc_r>
 80075be:	bf00      	nop
 80075c0:	20000050 	.word	0x20000050

080075c4 <free>:
 80075c4:	4b02      	ldr	r3, [pc, #8]	; (80075d0 <free+0xc>)
 80075c6:	4601      	mov	r1, r0
 80075c8:	6818      	ldr	r0, [r3, #0]
 80075ca:	f000 b825 	b.w	8007618 <_free_r>
 80075ce:	bf00      	nop
 80075d0:	20000050 	.word	0x20000050

080075d4 <memmove>:
 80075d4:	4288      	cmp	r0, r1
 80075d6:	b510      	push	{r4, lr}
 80075d8:	eb01 0302 	add.w	r3, r1, r2
 80075dc:	d807      	bhi.n	80075ee <memmove+0x1a>
 80075de:	1e42      	subs	r2, r0, #1
 80075e0:	4299      	cmp	r1, r3
 80075e2:	d00a      	beq.n	80075fa <memmove+0x26>
 80075e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075e8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80075ec:	e7f8      	b.n	80075e0 <memmove+0xc>
 80075ee:	4283      	cmp	r3, r0
 80075f0:	d9f5      	bls.n	80075de <memmove+0xa>
 80075f2:	1881      	adds	r1, r0, r2
 80075f4:	1ad2      	subs	r2, r2, r3
 80075f6:	42d3      	cmn	r3, r2
 80075f8:	d100      	bne.n	80075fc <memmove+0x28>
 80075fa:	bd10      	pop	{r4, pc}
 80075fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007600:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007604:	e7f7      	b.n	80075f6 <memmove+0x22>

08007606 <memset>:
 8007606:	4402      	add	r2, r0
 8007608:	4603      	mov	r3, r0
 800760a:	4293      	cmp	r3, r2
 800760c:	d100      	bne.n	8007610 <memset+0xa>
 800760e:	4770      	bx	lr
 8007610:	f803 1b01 	strb.w	r1, [r3], #1
 8007614:	e7f9      	b.n	800760a <memset+0x4>
	...

08007618 <_free_r>:
 8007618:	b538      	push	{r3, r4, r5, lr}
 800761a:	4605      	mov	r5, r0
 800761c:	2900      	cmp	r1, #0
 800761e:	d045      	beq.n	80076ac <_free_r+0x94>
 8007620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007624:	1f0c      	subs	r4, r1, #4
 8007626:	2b00      	cmp	r3, #0
 8007628:	bfb8      	it	lt
 800762a:	18e4      	addlt	r4, r4, r3
 800762c:	f000 f8f0 	bl	8007810 <__malloc_lock>
 8007630:	4a1f      	ldr	r2, [pc, #124]	; (80076b0 <_free_r+0x98>)
 8007632:	6813      	ldr	r3, [r2, #0]
 8007634:	4610      	mov	r0, r2
 8007636:	b933      	cbnz	r3, 8007646 <_free_r+0x2e>
 8007638:	6063      	str	r3, [r4, #4]
 800763a:	6014      	str	r4, [r2, #0]
 800763c:	4628      	mov	r0, r5
 800763e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007642:	f000 b8e6 	b.w	8007812 <__malloc_unlock>
 8007646:	42a3      	cmp	r3, r4
 8007648:	d90c      	bls.n	8007664 <_free_r+0x4c>
 800764a:	6821      	ldr	r1, [r4, #0]
 800764c:	1862      	adds	r2, r4, r1
 800764e:	4293      	cmp	r3, r2
 8007650:	bf04      	itt	eq
 8007652:	681a      	ldreq	r2, [r3, #0]
 8007654:	685b      	ldreq	r3, [r3, #4]
 8007656:	6063      	str	r3, [r4, #4]
 8007658:	bf04      	itt	eq
 800765a:	1852      	addeq	r2, r2, r1
 800765c:	6022      	streq	r2, [r4, #0]
 800765e:	6004      	str	r4, [r0, #0]
 8007660:	e7ec      	b.n	800763c <_free_r+0x24>
 8007662:	4613      	mov	r3, r2
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	b10a      	cbz	r2, 800766c <_free_r+0x54>
 8007668:	42a2      	cmp	r2, r4
 800766a:	d9fa      	bls.n	8007662 <_free_r+0x4a>
 800766c:	6819      	ldr	r1, [r3, #0]
 800766e:	1858      	adds	r0, r3, r1
 8007670:	42a0      	cmp	r0, r4
 8007672:	d10b      	bne.n	800768c <_free_r+0x74>
 8007674:	6820      	ldr	r0, [r4, #0]
 8007676:	4401      	add	r1, r0
 8007678:	1858      	adds	r0, r3, r1
 800767a:	4282      	cmp	r2, r0
 800767c:	6019      	str	r1, [r3, #0]
 800767e:	d1dd      	bne.n	800763c <_free_r+0x24>
 8007680:	6810      	ldr	r0, [r2, #0]
 8007682:	6852      	ldr	r2, [r2, #4]
 8007684:	605a      	str	r2, [r3, #4]
 8007686:	4401      	add	r1, r0
 8007688:	6019      	str	r1, [r3, #0]
 800768a:	e7d7      	b.n	800763c <_free_r+0x24>
 800768c:	d902      	bls.n	8007694 <_free_r+0x7c>
 800768e:	230c      	movs	r3, #12
 8007690:	602b      	str	r3, [r5, #0]
 8007692:	e7d3      	b.n	800763c <_free_r+0x24>
 8007694:	6820      	ldr	r0, [r4, #0]
 8007696:	1821      	adds	r1, r4, r0
 8007698:	428a      	cmp	r2, r1
 800769a:	bf04      	itt	eq
 800769c:	6811      	ldreq	r1, [r2, #0]
 800769e:	6852      	ldreq	r2, [r2, #4]
 80076a0:	6062      	str	r2, [r4, #4]
 80076a2:	bf04      	itt	eq
 80076a4:	1809      	addeq	r1, r1, r0
 80076a6:	6021      	streq	r1, [r4, #0]
 80076a8:	605c      	str	r4, [r3, #4]
 80076aa:	e7c7      	b.n	800763c <_free_r+0x24>
 80076ac:	bd38      	pop	{r3, r4, r5, pc}
 80076ae:	bf00      	nop
 80076b0:	20000578 	.word	0x20000578

080076b4 <_malloc_r>:
 80076b4:	b570      	push	{r4, r5, r6, lr}
 80076b6:	1ccd      	adds	r5, r1, #3
 80076b8:	f025 0503 	bic.w	r5, r5, #3
 80076bc:	3508      	adds	r5, #8
 80076be:	2d0c      	cmp	r5, #12
 80076c0:	bf38      	it	cc
 80076c2:	250c      	movcc	r5, #12
 80076c4:	2d00      	cmp	r5, #0
 80076c6:	4606      	mov	r6, r0
 80076c8:	db01      	blt.n	80076ce <_malloc_r+0x1a>
 80076ca:	42a9      	cmp	r1, r5
 80076cc:	d903      	bls.n	80076d6 <_malloc_r+0x22>
 80076ce:	230c      	movs	r3, #12
 80076d0:	6033      	str	r3, [r6, #0]
 80076d2:	2000      	movs	r0, #0
 80076d4:	bd70      	pop	{r4, r5, r6, pc}
 80076d6:	f000 f89b 	bl	8007810 <__malloc_lock>
 80076da:	4a21      	ldr	r2, [pc, #132]	; (8007760 <_malloc_r+0xac>)
 80076dc:	6814      	ldr	r4, [r2, #0]
 80076de:	4621      	mov	r1, r4
 80076e0:	b991      	cbnz	r1, 8007708 <_malloc_r+0x54>
 80076e2:	4c20      	ldr	r4, [pc, #128]	; (8007764 <_malloc_r+0xb0>)
 80076e4:	6823      	ldr	r3, [r4, #0]
 80076e6:	b91b      	cbnz	r3, 80076f0 <_malloc_r+0x3c>
 80076e8:	4630      	mov	r0, r6
 80076ea:	f000 f83d 	bl	8007768 <_sbrk_r>
 80076ee:	6020      	str	r0, [r4, #0]
 80076f0:	4629      	mov	r1, r5
 80076f2:	4630      	mov	r0, r6
 80076f4:	f000 f838 	bl	8007768 <_sbrk_r>
 80076f8:	1c43      	adds	r3, r0, #1
 80076fa:	d124      	bne.n	8007746 <_malloc_r+0x92>
 80076fc:	230c      	movs	r3, #12
 80076fe:	6033      	str	r3, [r6, #0]
 8007700:	4630      	mov	r0, r6
 8007702:	f000 f886 	bl	8007812 <__malloc_unlock>
 8007706:	e7e4      	b.n	80076d2 <_malloc_r+0x1e>
 8007708:	680b      	ldr	r3, [r1, #0]
 800770a:	1b5b      	subs	r3, r3, r5
 800770c:	d418      	bmi.n	8007740 <_malloc_r+0x8c>
 800770e:	2b0b      	cmp	r3, #11
 8007710:	d90f      	bls.n	8007732 <_malloc_r+0x7e>
 8007712:	600b      	str	r3, [r1, #0]
 8007714:	50cd      	str	r5, [r1, r3]
 8007716:	18cc      	adds	r4, r1, r3
 8007718:	4630      	mov	r0, r6
 800771a:	f000 f87a 	bl	8007812 <__malloc_unlock>
 800771e:	f104 000b 	add.w	r0, r4, #11
 8007722:	1d23      	adds	r3, r4, #4
 8007724:	f020 0007 	bic.w	r0, r0, #7
 8007728:	1ac3      	subs	r3, r0, r3
 800772a:	d0d3      	beq.n	80076d4 <_malloc_r+0x20>
 800772c:	425a      	negs	r2, r3
 800772e:	50e2      	str	r2, [r4, r3]
 8007730:	e7d0      	b.n	80076d4 <_malloc_r+0x20>
 8007732:	428c      	cmp	r4, r1
 8007734:	684b      	ldr	r3, [r1, #4]
 8007736:	bf16      	itet	ne
 8007738:	6063      	strne	r3, [r4, #4]
 800773a:	6013      	streq	r3, [r2, #0]
 800773c:	460c      	movne	r4, r1
 800773e:	e7eb      	b.n	8007718 <_malloc_r+0x64>
 8007740:	460c      	mov	r4, r1
 8007742:	6849      	ldr	r1, [r1, #4]
 8007744:	e7cc      	b.n	80076e0 <_malloc_r+0x2c>
 8007746:	1cc4      	adds	r4, r0, #3
 8007748:	f024 0403 	bic.w	r4, r4, #3
 800774c:	42a0      	cmp	r0, r4
 800774e:	d005      	beq.n	800775c <_malloc_r+0xa8>
 8007750:	1a21      	subs	r1, r4, r0
 8007752:	4630      	mov	r0, r6
 8007754:	f000 f808 	bl	8007768 <_sbrk_r>
 8007758:	3001      	adds	r0, #1
 800775a:	d0cf      	beq.n	80076fc <_malloc_r+0x48>
 800775c:	6025      	str	r5, [r4, #0]
 800775e:	e7db      	b.n	8007718 <_malloc_r+0x64>
 8007760:	20000578 	.word	0x20000578
 8007764:	2000057c 	.word	0x2000057c

08007768 <_sbrk_r>:
 8007768:	b538      	push	{r3, r4, r5, lr}
 800776a:	4c06      	ldr	r4, [pc, #24]	; (8007784 <_sbrk_r+0x1c>)
 800776c:	2300      	movs	r3, #0
 800776e:	4605      	mov	r5, r0
 8007770:	4608      	mov	r0, r1
 8007772:	6023      	str	r3, [r4, #0]
 8007774:	f7fb fd1a 	bl	80031ac <_sbrk>
 8007778:	1c43      	adds	r3, r0, #1
 800777a:	d102      	bne.n	8007782 <_sbrk_r+0x1a>
 800777c:	6823      	ldr	r3, [r4, #0]
 800777e:	b103      	cbz	r3, 8007782 <_sbrk_r+0x1a>
 8007780:	602b      	str	r3, [r5, #0]
 8007782:	bd38      	pop	{r3, r4, r5, pc}
 8007784:	20000588 	.word	0x20000588

08007788 <_raise_r>:
 8007788:	291f      	cmp	r1, #31
 800778a:	b538      	push	{r3, r4, r5, lr}
 800778c:	4604      	mov	r4, r0
 800778e:	460d      	mov	r5, r1
 8007790:	d904      	bls.n	800779c <_raise_r+0x14>
 8007792:	2316      	movs	r3, #22
 8007794:	6003      	str	r3, [r0, #0]
 8007796:	f04f 30ff 	mov.w	r0, #4294967295
 800779a:	bd38      	pop	{r3, r4, r5, pc}
 800779c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800779e:	b112      	cbz	r2, 80077a6 <_raise_r+0x1e>
 80077a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80077a4:	b94b      	cbnz	r3, 80077ba <_raise_r+0x32>
 80077a6:	4620      	mov	r0, r4
 80077a8:	f000 f830 	bl	800780c <_getpid_r>
 80077ac:	462a      	mov	r2, r5
 80077ae:	4601      	mov	r1, r0
 80077b0:	4620      	mov	r0, r4
 80077b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077b6:	f000 b817 	b.w	80077e8 <_kill_r>
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d00a      	beq.n	80077d4 <_raise_r+0x4c>
 80077be:	1c59      	adds	r1, r3, #1
 80077c0:	d103      	bne.n	80077ca <_raise_r+0x42>
 80077c2:	2316      	movs	r3, #22
 80077c4:	6003      	str	r3, [r0, #0]
 80077c6:	2001      	movs	r0, #1
 80077c8:	e7e7      	b.n	800779a <_raise_r+0x12>
 80077ca:	2400      	movs	r4, #0
 80077cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80077d0:	4628      	mov	r0, r5
 80077d2:	4798      	blx	r3
 80077d4:	2000      	movs	r0, #0
 80077d6:	e7e0      	b.n	800779a <_raise_r+0x12>

080077d8 <raise>:
 80077d8:	4b02      	ldr	r3, [pc, #8]	; (80077e4 <raise+0xc>)
 80077da:	4601      	mov	r1, r0
 80077dc:	6818      	ldr	r0, [r3, #0]
 80077de:	f7ff bfd3 	b.w	8007788 <_raise_r>
 80077e2:	bf00      	nop
 80077e4:	20000050 	.word	0x20000050

080077e8 <_kill_r>:
 80077e8:	b538      	push	{r3, r4, r5, lr}
 80077ea:	4c07      	ldr	r4, [pc, #28]	; (8007808 <_kill_r+0x20>)
 80077ec:	2300      	movs	r3, #0
 80077ee:	4605      	mov	r5, r0
 80077f0:	4608      	mov	r0, r1
 80077f2:	4611      	mov	r1, r2
 80077f4:	6023      	str	r3, [r4, #0]
 80077f6:	f7fb fcbf 	bl	8003178 <_kill>
 80077fa:	1c43      	adds	r3, r0, #1
 80077fc:	d102      	bne.n	8007804 <_kill_r+0x1c>
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	b103      	cbz	r3, 8007804 <_kill_r+0x1c>
 8007802:	602b      	str	r3, [r5, #0]
 8007804:	bd38      	pop	{r3, r4, r5, pc}
 8007806:	bf00      	nop
 8007808:	20000588 	.word	0x20000588

0800780c <_getpid_r>:
 800780c:	f7fb bcac 	b.w	8003168 <_getpid>

08007810 <__malloc_lock>:
 8007810:	4770      	bx	lr

08007812 <__malloc_unlock>:
 8007812:	4770      	bx	lr

08007814 <_init>:
 8007814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007816:	bf00      	nop
 8007818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800781a:	bc08      	pop	{r3}
 800781c:	469e      	mov	lr, r3
 800781e:	4770      	bx	lr

08007820 <_fini>:
 8007820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007822:	bf00      	nop
 8007824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007826:	bc08      	pop	{r3}
 8007828:	469e      	mov	lr, r3
 800782a:	4770      	bx	lr
