
Animacje_Nowy_Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007984  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001af8  08007b30  08007b30  00017b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009628  08009628  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  08009628  08009628  00019628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009630  08009630  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009630  08009630  00019630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009634  08009634  00019634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08009638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  200000b4  080096ec  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  080096ec  0002058c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002475a  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004f25  00000000  00000000  0004483e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001be8  00000000  00000000  00049768  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019f8  00000000  00000000  0004b350  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002abf6  00000000  00000000  0004cd48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001983a  00000000  00000000  0007793e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eef51  00000000  00000000  00091178  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001800c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a90  00000000  00000000  00180144  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000b4 	.word	0x200000b4
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007b18 	.word	0x08007b18

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200000b8 	.word	0x200000b8
 80001e8:	08007b18 	.word	0x08007b18

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <_ZN6CircleC1Ei>:
 *  Created on: May 24, 2021
 *      Author: michal
 */
#include <Circle.h>

Circle::Circle(int r)
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	6039      	str	r1, [r7, #0]
{
	this->r = r;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	683a      	ldr	r2, [r7, #0]
 80004fa:	601a      	str	r2, [r3, #0]
}
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4618      	mov	r0, r3
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr

0800050a <_ZN6Circle10drawCircleEiiP5Stage>:


void Circle::drawCircle(int x, int y, Stage* stage)
{
 800050a:	b480      	push	{r7}
 800050c:	b089      	sub	sp, #36	; 0x24
 800050e:	af00      	add	r7, sp, #0
 8000510:	60f8      	str	r0, [r7, #12]
 8000512:	60b9      	str	r1, [r7, #8]
 8000514:	607a      	str	r2, [r7, #4]
 8000516:	603b      	str	r3, [r7, #0]
    int d = 1 - this->r;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f1c3 0301 	rsb	r3, r3, #1
 8000520:	61fb      	str	r3, [r7, #28]
    int x_t, y_t;
    x_t = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	61bb      	str	r3, [r7, #24]
    y_t = r;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	617b      	str	r3, [r7, #20]

    for(int i = 1; x_t < y_t; i++)
 800052c:	2301      	movs	r3, #1
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	69ba      	ldr	r2, [r7, #24]
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	429a      	cmp	r2, r3
 8000536:	f280 813f 	bge.w	80007b8 <_ZN6Circle10drawCircleEiiP5Stage+0x2ae>
    {
        if(d < 0)
 800053a:	69fb      	ldr	r3, [r7, #28]
 800053c:	2b00      	cmp	r3, #0
 800053e:	da09      	bge.n	8000554 <_ZN6Circle10drawCircleEiiP5Stage+0x4a>
        {
            x_t++;
 8000540:	69bb      	ldr	r3, [r7, #24]
 8000542:	3301      	adds	r3, #1
 8000544:	61bb      	str	r3, [r7, #24]
            d += 2*x_t+3;
 8000546:	69bb      	ldr	r3, [r7, #24]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	3303      	adds	r3, #3
 800054c:	69fa      	ldr	r2, [r7, #28]
 800054e:	4413      	add	r3, r2
 8000550:	61fb      	str	r3, [r7, #28]
 8000552:	e00d      	b.n	8000570 <_ZN6Circle10drawCircleEiiP5Stage+0x66>
        }
        else
        {
            x_t++;
 8000554:	69bb      	ldr	r3, [r7, #24]
 8000556:	3301      	adds	r3, #1
 8000558:	61bb      	str	r3, [r7, #24]
            y_t--;
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	3b01      	subs	r3, #1
 800055e:	617b      	str	r3, [r7, #20]
            d +=  2*(x_t - y_t)+5;
 8000560:	69ba      	ldr	r2, [r7, #24]
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	3305      	adds	r3, #5
 800056a:	69fa      	ldr	r2, [r7, #28]
 800056c:	4413      	add	r3, r2
 800056e:	61fb      	str	r3, [r7, #28]
        }
        if (x_t+x > 0 && x_t+x < 240 && y_t+y > 0 && y_t+y < 320)
 8000570:	69ba      	ldr	r2, [r7, #24]
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	4413      	add	r3, r2
 8000576:	2b00      	cmp	r3, #0
 8000578:	dd1e      	ble.n	80005b8 <_ZN6Circle10drawCircleEiiP5Stage+0xae>
 800057a:	69ba      	ldr	r2, [r7, #24]
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	4413      	add	r3, r2
 8000580:	2bef      	cmp	r3, #239	; 0xef
 8000582:	dc19      	bgt.n	80005b8 <_ZN6Circle10drawCircleEiiP5Stage+0xae>
 8000584:	697a      	ldr	r2, [r7, #20]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4413      	add	r3, r2
 800058a:	2b00      	cmp	r3, #0
 800058c:	dd14      	ble.n	80005b8 <_ZN6Circle10drawCircleEiiP5Stage+0xae>
 800058e:	697a      	ldr	r2, [r7, #20]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4413      	add	r3, r2
 8000594:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000598:	da0e      	bge.n	80005b8 <_ZN6Circle10drawCircleEiiP5Stage+0xae>
        	stage->p[x_t+x][y_t+y] = 1;
 800059a:	69ba      	ldr	r2, [r7, #24]
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	441a      	add	r2, r3
 80005a0:	6979      	ldr	r1, [r7, #20]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4419      	add	r1, r3
 80005a6:	6838      	ldr	r0, [r7, #0]
 80005a8:	4613      	mov	r3, r2
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	4413      	add	r3, r2
 80005ae:	019b      	lsls	r3, r3, #6
 80005b0:	4403      	add	r3, r0
 80005b2:	440b      	add	r3, r1
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
        if (x_t+x > 0 && x_t+x < 240 && -y_t+y > 0 && -y_t+y < 320)
 80005b8:	69ba      	ldr	r2, [r7, #24]
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	4413      	add	r3, r2
 80005be:	2b00      	cmp	r3, #0
 80005c0:	dd1e      	ble.n	8000600 <_ZN6Circle10drawCircleEiiP5Stage+0xf6>
 80005c2:	69ba      	ldr	r2, [r7, #24]
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	4413      	add	r3, r2
 80005c8:	2bef      	cmp	r3, #239	; 0xef
 80005ca:	dc19      	bgt.n	8000600 <_ZN6Circle10drawCircleEiiP5Stage+0xf6>
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dd14      	ble.n	8000600 <_ZN6Circle10drawCircleEiiP5Stage+0xf6>
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80005e0:	da0e      	bge.n	8000600 <_ZN6Circle10drawCircleEiiP5Stage+0xf6>
        	stage->p[x_t+x][-y_t+y] = 1;
 80005e2:	69ba      	ldr	r2, [r7, #24]
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	441a      	add	r2, r3
 80005e8:	6879      	ldr	r1, [r7, #4]
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	1ac9      	subs	r1, r1, r3
 80005ee:	6838      	ldr	r0, [r7, #0]
 80005f0:	4613      	mov	r3, r2
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	4413      	add	r3, r2
 80005f6:	019b      	lsls	r3, r3, #6
 80005f8:	4403      	add	r3, r0
 80005fa:	440b      	add	r3, r1
 80005fc:	2201      	movs	r2, #1
 80005fe:	701a      	strb	r2, [r3, #0]
        if (-x_t+x > 0 && -x_t+x < 240 && y_t+y > 0 && y_t+y < 320)
 8000600:	68ba      	ldr	r2, [r7, #8]
 8000602:	69bb      	ldr	r3, [r7, #24]
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	dd1e      	ble.n	8000648 <_ZN6Circle10drawCircleEiiP5Stage+0x13e>
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	2bef      	cmp	r3, #239	; 0xef
 8000612:	dc19      	bgt.n	8000648 <_ZN6Circle10drawCircleEiiP5Stage+0x13e>
 8000614:	697a      	ldr	r2, [r7, #20]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	2b00      	cmp	r3, #0
 800061c:	dd14      	ble.n	8000648 <_ZN6Circle10drawCircleEiiP5Stage+0x13e>
 800061e:	697a      	ldr	r2, [r7, #20]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4413      	add	r3, r2
 8000624:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000628:	da0e      	bge.n	8000648 <_ZN6Circle10drawCircleEiiP5Stage+0x13e>
        	stage->p[-x_t+x][y_t+y] = 1;
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	1ad2      	subs	r2, r2, r3
 8000630:	6979      	ldr	r1, [r7, #20]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4419      	add	r1, r3
 8000636:	6838      	ldr	r0, [r7, #0]
 8000638:	4613      	mov	r3, r2
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	4413      	add	r3, r2
 800063e:	019b      	lsls	r3, r3, #6
 8000640:	4403      	add	r3, r0
 8000642:	440b      	add	r3, r1
 8000644:	2201      	movs	r2, #1
 8000646:	701a      	strb	r2, [r3, #0]
        if (-x_t+x > 0 && -x_t+x < 240 && -y_t+y > 0 && -y_t+y < 320)
 8000648:	68ba      	ldr	r2, [r7, #8]
 800064a:	69bb      	ldr	r3, [r7, #24]
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	2b00      	cmp	r3, #0
 8000650:	dd1e      	ble.n	8000690 <_ZN6Circle10drawCircleEiiP5Stage+0x186>
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	2bef      	cmp	r3, #239	; 0xef
 800065a:	dc19      	bgt.n	8000690 <_ZN6Circle10drawCircleEiiP5Stage+0x186>
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	dd14      	ble.n	8000690 <_ZN6Circle10drawCircleEiiP5Stage+0x186>
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	1ad3      	subs	r3, r2, r3
 800066c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000670:	da0e      	bge.n	8000690 <_ZN6Circle10drawCircleEiiP5Stage+0x186>
        	stage->p[-x_t+x][-y_t+y] = 1;
 8000672:	68ba      	ldr	r2, [r7, #8]
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	1ad2      	subs	r2, r2, r3
 8000678:	6879      	ldr	r1, [r7, #4]
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	1ac9      	subs	r1, r1, r3
 800067e:	6838      	ldr	r0, [r7, #0]
 8000680:	4613      	mov	r3, r2
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	4413      	add	r3, r2
 8000686:	019b      	lsls	r3, r3, #6
 8000688:	4403      	add	r3, r0
 800068a:	440b      	add	r3, r1
 800068c:	2201      	movs	r2, #1
 800068e:	701a      	strb	r2, [r3, #0]
        if (x_t+x > 0 && x_t+x < 320 && y_t+y > 0 && y_t+y < 240)
 8000690:	69ba      	ldr	r2, [r7, #24]
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	4413      	add	r3, r2
 8000696:	2b00      	cmp	r3, #0
 8000698:	dd1e      	ble.n	80006d8 <_ZN6Circle10drawCircleEiiP5Stage+0x1ce>
 800069a:	69ba      	ldr	r2, [r7, #24]
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	4413      	add	r3, r2
 80006a0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80006a4:	da18      	bge.n	80006d8 <_ZN6Circle10drawCircleEiiP5Stage+0x1ce>
 80006a6:	697a      	ldr	r2, [r7, #20]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4413      	add	r3, r2
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	dd13      	ble.n	80006d8 <_ZN6Circle10drawCircleEiiP5Stage+0x1ce>
 80006b0:	697a      	ldr	r2, [r7, #20]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4413      	add	r3, r2
 80006b6:	2bef      	cmp	r3, #239	; 0xef
 80006b8:	dc0e      	bgt.n	80006d8 <_ZN6Circle10drawCircleEiiP5Stage+0x1ce>
        	stage->p[y_t+x][x_t+y] = 1;
 80006ba:	697a      	ldr	r2, [r7, #20]
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	441a      	add	r2, r3
 80006c0:	69b9      	ldr	r1, [r7, #24]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4419      	add	r1, r3
 80006c6:	6838      	ldr	r0, [r7, #0]
 80006c8:	4613      	mov	r3, r2
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	4413      	add	r3, r2
 80006ce:	019b      	lsls	r3, r3, #6
 80006d0:	4403      	add	r3, r0
 80006d2:	440b      	add	r3, r1
 80006d4:	2201      	movs	r2, #1
 80006d6:	701a      	strb	r2, [r3, #0]
        if (-x_t+x > 0 && -x_t+x < 320 && y_t+y > 0 && y_t+y < 240)
 80006d8:	68ba      	ldr	r2, [r7, #8]
 80006da:	69bb      	ldr	r3, [r7, #24]
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	dd1e      	ble.n	8000720 <_ZN6Circle10drawCircleEiiP5Stage+0x216>
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	1ad3      	subs	r3, r2, r3
 80006e8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80006ec:	da18      	bge.n	8000720 <_ZN6Circle10drawCircleEiiP5Stage+0x216>
 80006ee:	697a      	ldr	r2, [r7, #20]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4413      	add	r3, r2
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	dd13      	ble.n	8000720 <_ZN6Circle10drawCircleEiiP5Stage+0x216>
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4413      	add	r3, r2
 80006fe:	2bef      	cmp	r3, #239	; 0xef
 8000700:	dc0e      	bgt.n	8000720 <_ZN6Circle10drawCircleEiiP5Stage+0x216>
        	stage->p[y_t+x][-x_t+y] = 1;
 8000702:	697a      	ldr	r2, [r7, #20]
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	441a      	add	r2, r3
 8000708:	6879      	ldr	r1, [r7, #4]
 800070a:	69bb      	ldr	r3, [r7, #24]
 800070c:	1ac9      	subs	r1, r1, r3
 800070e:	6838      	ldr	r0, [r7, #0]
 8000710:	4613      	mov	r3, r2
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	4413      	add	r3, r2
 8000716:	019b      	lsls	r3, r3, #6
 8000718:	4403      	add	r3, r0
 800071a:	440b      	add	r3, r1
 800071c:	2201      	movs	r2, #1
 800071e:	701a      	strb	r2, [r3, #0]
        if (x_t+x > 0 && x_t+x < 320 && -y_t+y > 0 && -y_t+y < 240)
 8000720:	69ba      	ldr	r2, [r7, #24]
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	4413      	add	r3, r2
 8000726:	2b00      	cmp	r3, #0
 8000728:	dd1e      	ble.n	8000768 <_ZN6Circle10drawCircleEiiP5Stage+0x25e>
 800072a:	69ba      	ldr	r2, [r7, #24]
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	4413      	add	r3, r2
 8000730:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000734:	da18      	bge.n	8000768 <_ZN6Circle10drawCircleEiiP5Stage+0x25e>
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	1ad3      	subs	r3, r2, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	dd13      	ble.n	8000768 <_ZN6Circle10drawCircleEiiP5Stage+0x25e>
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	2bef      	cmp	r3, #239	; 0xef
 8000748:	dc0e      	bgt.n	8000768 <_ZN6Circle10drawCircleEiiP5Stage+0x25e>
        	stage->p[-y_t+x][x_t+y] = 1;
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	1ad2      	subs	r2, r2, r3
 8000750:	69b9      	ldr	r1, [r7, #24]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4419      	add	r1, r3
 8000756:	6838      	ldr	r0, [r7, #0]
 8000758:	4613      	mov	r3, r2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	019b      	lsls	r3, r3, #6
 8000760:	4403      	add	r3, r0
 8000762:	440b      	add	r3, r1
 8000764:	2201      	movs	r2, #1
 8000766:	701a      	strb	r2, [r3, #0]
        if (-x_t+x > 0 && -x_t+x < 320 && -y_t+y > 0 && -y_t+y < 240)
 8000768:	68ba      	ldr	r2, [r7, #8]
 800076a:	69bb      	ldr	r3, [r7, #24]
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	2b00      	cmp	r3, #0
 8000770:	dd1e      	ble.n	80007b0 <_ZN6Circle10drawCircleEiiP5Stage+0x2a6>
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800077c:	da18      	bge.n	80007b0 <_ZN6Circle10drawCircleEiiP5Stage+0x2a6>
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	2b00      	cmp	r3, #0
 8000786:	dd13      	ble.n	80007b0 <_ZN6Circle10drawCircleEiiP5Stage+0x2a6>
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	2bef      	cmp	r3, #239	; 0xef
 8000790:	dc0e      	bgt.n	80007b0 <_ZN6Circle10drawCircleEiiP5Stage+0x2a6>
        	stage->p[-y_t+x][-x_t+y] = 1;
 8000792:	68ba      	ldr	r2, [r7, #8]
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	1ad2      	subs	r2, r2, r3
 8000798:	6879      	ldr	r1, [r7, #4]
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	1ac9      	subs	r1, r1, r3
 800079e:	6838      	ldr	r0, [r7, #0]
 80007a0:	4613      	mov	r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	4413      	add	r3, r2
 80007a6:	019b      	lsls	r3, r3, #6
 80007a8:	4403      	add	r3, r0
 80007aa:	440b      	add	r3, r1
 80007ac:	2201      	movs	r2, #1
 80007ae:	701a      	strb	r2, [r3, #0]
    for(int i = 1; x_t < y_t; i++)
 80007b0:	693b      	ldr	r3, [r7, #16]
 80007b2:	3301      	adds	r3, #1
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	e6bb      	b.n	8000530 <_ZN6Circle10drawCircleEiiP5Stage+0x26>
    }
}
 80007b8:	bf00      	nop
 80007ba:	3724      	adds	r7, #36	; 0x24
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <_ZN9RectangleC1Eii>:
 *      Author: michal
 */

#include <Rectangle.h>

Rectangle::Rectangle(int w, int l)
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
{
	this->width = w;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	68ba      	ldr	r2, [r7, #8]
 80007d4:	601a      	str	r2, [r3, #0]
	this->length = l;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	605a      	str	r2, [r3, #4]
}
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	4618      	mov	r0, r3
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <_ZN9Rectangle7drawRecEiibP5Stage>:


void Rectangle::drawRec(int x, int y, bool wypel, Stage* stage)
{
 80007ea:	b480      	push	{r7}
 80007ec:	b08d      	sub	sp, #52	; 0x34
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	60f8      	str	r0, [r7, #12]
 80007f2:	60b9      	str	r1, [r7, #8]
 80007f4:	607a      	str	r2, [r7, #4]
 80007f6:	70fb      	strb	r3, [r7, #3]
	int x1 = x - this->width/2;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	0fda      	lsrs	r2, r3, #31
 80007fe:	4413      	add	r3, r2
 8000800:	105b      	asrs	r3, r3, #1
 8000802:	425b      	negs	r3, r3
 8000804:	461a      	mov	r2, r3
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	4413      	add	r3, r2
 800080a:	623b      	str	r3, [r7, #32]
	int x2 = x + this->width/2;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	0fda      	lsrs	r2, r3, #31
 8000812:	4413      	add	r3, r2
 8000814:	105b      	asrs	r3, r3, #1
 8000816:	461a      	mov	r2, r3
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	4413      	add	r3, r2
 800081c:	61fb      	str	r3, [r7, #28]
	int y1 = y - this->length/2;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	0fda      	lsrs	r2, r3, #31
 8000824:	4413      	add	r3, r2
 8000826:	105b      	asrs	r3, r3, #1
 8000828:	425b      	negs	r3, r3
 800082a:	461a      	mov	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4413      	add	r3, r2
 8000830:	61bb      	str	r3, [r7, #24]
	int y2 = y + this->length/2;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	0fda      	lsrs	r2, r3, #31
 8000838:	4413      	add	r3, r2
 800083a:	105b      	asrs	r3, r3, #1
 800083c:	461a      	mov	r2, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	617b      	str	r3, [r7, #20]

    for(int i=x1; i<=x2; i++)
 8000844:	6a3b      	ldr	r3, [r7, #32]
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	429a      	cmp	r2, r3
 800084e:	dc37      	bgt.n	80008c0 <_ZN9Rectangle7drawRecEiibP5Stage+0xd6>
    {
    	if(i > 0 && i < 240)
 8000850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000852:	2b00      	cmp	r3, #0
 8000854:	dd30      	ble.n	80008b8 <_ZN9Rectangle7drawRecEiibP5Stage+0xce>
 8000856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000858:	2bef      	cmp	r3, #239	; 0xef
 800085a:	dc2d      	bgt.n	80008b8 <_ZN9Rectangle7drawRecEiibP5Stage+0xce>
    	{
			stage->p[i][y1]=1;
 800085c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800085e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000860:	4613      	mov	r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	4413      	add	r3, r2
 8000866:	019b      	lsls	r3, r3, #6
 8000868:	18ca      	adds	r2, r1, r3
 800086a:	69bb      	ldr	r3, [r7, #24]
 800086c:	4413      	add	r3, r2
 800086e:	2201      	movs	r2, #1
 8000870:	701a      	strb	r2, [r3, #0]
			stage->p[i][y2]=1;
 8000872:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000876:	4613      	mov	r3, r2
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	4413      	add	r3, r2
 800087c:	019b      	lsls	r3, r3, #6
 800087e:	18ca      	adds	r2, r1, r3
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	4413      	add	r3, r2
 8000884:	2201      	movs	r2, #1
 8000886:	701a      	strb	r2, [r3, #0]
			if(wypel)
 8000888:	78fb      	ldrb	r3, [r7, #3]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d014      	beq.n	80008b8 <_ZN9Rectangle7drawRecEiibP5Stage+0xce>
			{
				for(int j=y1; j<=y2; j++)
 800088e:	69bb      	ldr	r3, [r7, #24]
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
 8000892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	429a      	cmp	r2, r3
 8000898:	dc0e      	bgt.n	80008b8 <_ZN9Rectangle7drawRecEiibP5Stage+0xce>
				{
					stage->p[i][j]=1;
 800089a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800089c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800089e:	4613      	mov	r3, r2
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	4413      	add	r3, r2
 80008a4:	019b      	lsls	r3, r3, #6
 80008a6:	18ca      	adds	r2, r1, r3
 80008a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008aa:	4413      	add	r3, r2
 80008ac:	2201      	movs	r2, #1
 80008ae:	701a      	strb	r2, [r3, #0]
				for(int j=y1; j<=y2; j++)
 80008b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008b2:	3301      	adds	r3, #1
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80008b6:	e7ec      	b.n	8000892 <_ZN9Rectangle7drawRecEiibP5Stage+0xa8>
    for(int i=x1; i<=x2; i++)
 80008b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ba:	3301      	adds	r3, #1
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008be:	e7c3      	b.n	8000848 <_ZN9Rectangle7drawRecEiibP5Stage+0x5e>
				}
			}
    	}
    }

    for(int i=y1; i<=y2; i++)
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
 80008c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	dc20      	bgt.n	800090e <_ZN9Rectangle7drawRecEiibP5Stage+0x124>
    {
    	if(i > 0 && i < 320)
 80008cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	dd19      	ble.n	8000906 <_ZN9Rectangle7drawRecEiibP5Stage+0x11c>
 80008d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80008d8:	da15      	bge.n	8000906 <_ZN9Rectangle7drawRecEiibP5Stage+0x11c>
    	{
    		stage->p[x1][i]=1;
 80008da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80008dc:	6a3a      	ldr	r2, [r7, #32]
 80008de:	4613      	mov	r3, r2
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	4413      	add	r3, r2
 80008e4:	019b      	lsls	r3, r3, #6
 80008e6:	18ca      	adds	r2, r1, r3
 80008e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ea:	4413      	add	r3, r2
 80008ec:	2201      	movs	r2, #1
 80008ee:	701a      	strb	r2, [r3, #0]
    		stage->p[x2][i]=1;
 80008f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80008f2:	69fa      	ldr	r2, [r7, #28]
 80008f4:	4613      	mov	r3, r2
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	4413      	add	r3, r2
 80008fa:	019b      	lsls	r3, r3, #6
 80008fc:	18ca      	adds	r2, r1, r3
 80008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000900:	4413      	add	r3, r2
 8000902:	2201      	movs	r2, #1
 8000904:	701a      	strb	r2, [r3, #0]
    for(int i=y1; i<=y2; i++)
 8000906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000908:	3301      	adds	r3, #1
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
 800090c:	e7da      	b.n	80008c4 <_ZN9Rectangle7drawRecEiibP5Stage+0xda>
    	}
    }
}
 800090e:	bf00      	nop
 8000910:	3734      	adds	r7, #52	; 0x34
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <_ZN5Stage5clearEv>:
#include <stdio.h>
#include "stm32f429i_discovery_lcd.h"



bool Stage::clear(){
 800091a:	b480      	push	{r7}
 800091c:	b085      	sub	sp, #20
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 240; i++){
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	2bef      	cmp	r3, #239	; 0xef
 800092a:	dc18      	bgt.n	800095e <_ZN5Stage5clearEv+0x44>
		for(int j = 0; j < 320; j++){
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000936:	da0e      	bge.n	8000956 <_ZN5Stage5clearEv+0x3c>
			p[i][j] = 0;
 8000938:	6879      	ldr	r1, [r7, #4]
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	4613      	mov	r3, r2
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	4413      	add	r3, r2
 8000942:	019b      	lsls	r3, r3, #6
 8000944:	18ca      	adds	r2, r1, r3
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	4413      	add	r3, r2
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 320; j++){
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	3301      	adds	r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	e7ec      	b.n	8000930 <_ZN5Stage5clearEv+0x16>
	for(int i = 0; i < 240; i++){
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	3301      	adds	r3, #1
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	e7e3      	b.n	8000926 <_ZN5Stage5clearEv+0xc>
		}
	}
}
 800095e:	bf00      	nop
 8000960:	4618      	mov	r0, r3
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <_ZN5Stage8sendDataEv>:


void Stage::sendData()
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	//printf("c\r\n");
	for(int i=0; i<240;i++)
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	2bef      	cmp	r3, #239	; 0xef
 800097c:	dc25      	bgt.n	80009ca <_ZN5Stage8sendDataEv+0x5e>
		for(int j=0; j<320; j++)
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000988:	da1b      	bge.n	80009c2 <_ZN5Stage8sendDataEv+0x56>
		{
			if(p[i][j]==1)
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	68fa      	ldr	r2, [r7, #12]
 800098e:	4613      	mov	r3, r2
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	4413      	add	r3, r2
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	18ca      	adds	r2, r1, r3
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	4413      	add	r3, r2
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d00b      	beq.n	80009ba <_ZN5Stage8sendDataEv+0x4e>
			{
				  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80009a2:	f04f 30ff 	mov.w	r0, #4294967295
 80009a6:	f001 fdbb 	bl	8002520 <BSP_LCD_SetTextColor>
				  BSP_LCD_DrawRect(i,j,1,1);
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	b298      	uxth	r0, r3
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	b299      	uxth	r1, r3
 80009b2:	2301      	movs	r3, #1
 80009b4:	2201      	movs	r2, #1
 80009b6:	f001 fe8d 	bl	80026d4 <BSP_LCD_DrawRect>
		for(int j=0; j<320; j++)
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	3301      	adds	r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	e7df      	b.n	8000982 <_ZN5Stage8sendDataEv+0x16>
	for(int i=0; i<240;i++)
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	e7d6      	b.n	8000978 <_ZN5Stage8sendDataEv+0xc>
				  //printf("p %d %d\r\n",i,j);
			}
		}
	//printf("k\r\n");
}
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <_ZN8StageObjC1Ev>:
 *      Author: michal
 */

#include <StageObj.h>

StageObj::StageObj()
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b087      	sub	sp, #28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	335c      	adds	r3, #92	; 0x5c
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 f8c0 	bl	8000b66 <_ZNSt6vectorIiSaIiEEC1Ev>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	3368      	adds	r3, #104	; 0x68
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f8bb 	bl	8000b66 <_ZNSt6vectorIiSaIiEEC1Ev>
{
	this->x1 = -1;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f04f 32ff 	mov.w	r2, #4294967295
 80009f6:	625a      	str	r2, [r3, #36]	; 0x24
	this->x2 = -1;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f04f 32ff 	mov.w	r2, #4294967295
 80009fe:	629a      	str	r2, [r3, #40]	; 0x28
	this->x3 = -1;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f04f 32ff 	mov.w	r2, #4294967295
 8000a06:	62da      	str	r2, [r3, #44]	; 0x2c
	this->x4 = -1;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a0e:	631a      	str	r2, [r3, #48]	; 0x30

	this->y1 = -1;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f04f 32ff 	mov.w	r2, #4294967295
 8000a16:	639a      	str	r2, [r3, #56]	; 0x38
	this->y2 = -1;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1e:	63da      	str	r2, [r3, #60]	; 0x3c
	this->y3 = -1;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f04f 32ff 	mov.w	r2, #4294967295
 8000a26:	641a      	str	r2, [r3, #64]	; 0x40
	this->y4 = -1;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a2e:	645a      	str	r2, [r3, #68]	; 0x44

	this->r1 = 0;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
	this->r2 = 0;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	605a      	str	r2, [r3, #4]
	this->w1 = 0;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
	this->w2 = 0;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
	this->l1 = 0;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
	this->l2 = 0;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]

	this->rb = 25;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2219      	movs	r2, #25
 8000a58:	609a      	str	r2, [r3, #8]
	this->xb = 100;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2264      	movs	r2, #100	; 0x64
 8000a5e:	635a      	str	r2, [r3, #52]	; 0x34
	this->yb = 100;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2264      	movs	r2, #100	; 0x64
 8000a64:	649a      	str	r2, [r3, #72]	; 0x48
	this->vxb = 1;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2201      	movs	r2, #1
 8000a6a:	61da      	str	r2, [r3, #28]
	this->vyb = 1;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2201      	movs	r2, #1
 8000a70:	621a      	str	r2, [r3, #32]

	this->x_axis = {1,0};
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8000a78:	4a17      	ldr	r2, [pc, #92]	; (8000ad8 <_ZN8StageObjC1Ev+0x104>)
 8000a7a:	f107 0308 	add.w	r3, r7, #8
 8000a7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a82:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000a8e:	4620      	mov	r0, r4
 8000a90:	f000 f894 	bl	8000bbc <_ZNSt6vectorIiSaIiEEaSESt16initializer_listIiE>
	this->y_axis = {0,1};
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8000a9a:	4a10      	ldr	r2, [pc, #64]	; (8000adc <_ZN8StageObjC1Ev+0x108>)
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aa4:	e883 0003 	stmia.w	r3, {r0, r1}
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000ab0:	4620      	mov	r0, r4
 8000ab2:	f000 f883 	bl	8000bbc <_ZNSt6vectorIiSaIiEEaSESt16initializer_listIiE>

	this->rw1 = 0;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	64da      	str	r2, [r3, #76]	; 0x4c
	this->rw2 = 0;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	651a      	str	r2, [r3, #80]	; 0x50
	this->rw3 = 0;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	655a      	str	r2, [r3, #84]	; 0x54
	this->rw4 = 0;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2200      	movs	r2, #0
 8000acc:	659a      	str	r2, [r3, #88]	; 0x58



}
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	371c      	adds	r7, #28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd90      	pop	{r4, r7, pc}
 8000ad8:	08007b30 	.word	0x08007b30
 8000adc:	08007b38 	.word	0x08007b38

08000ae0 <_ZN8StageObj7initFigEv>:

bool StageObj::initFig()
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	this->cir1 = new Circle(this->r1);
 8000ae8:	2004      	movs	r0, #4
 8000aea:	f006 fe3d 	bl	8007768 <_Znwj>
 8000aee:	4603      	mov	r3, r0
 8000af0:	461c      	mov	r4, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4619      	mov	r1, r3
 8000af8:	4620      	mov	r0, r4
 8000afa:	f7ff fcf7 	bl	80004ec <_ZN6CircleC1Ei>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	675c      	str	r4, [r3, #116]	; 0x74
	this->cir2 = new Circle(this->r2);
 8000b02:	2004      	movs	r0, #4
 8000b04:	f006 fe30 	bl	8007768 <_Znwj>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	461c      	mov	r4, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	4619      	mov	r1, r3
 8000b12:	4620      	mov	r0, r4
 8000b14:	f7ff fcea 	bl	80004ec <_ZN6CircleC1Ei>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	679c      	str	r4, [r3, #120]	; 0x78
	this->rec1 = new Rectangle(this->w1, this->l1);
 8000b1c:	2008      	movs	r0, #8
 8000b1e:	f006 fe23 	bl	8007768 <_Znwj>
 8000b22:	4603      	mov	r3, r0
 8000b24:	461c      	mov	r4, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	68d9      	ldr	r1, [r3, #12]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4620      	mov	r0, r4
 8000b32:	f7ff fe47 	bl	80007c4 <_ZN9RectangleC1Eii>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
	this->rec2 = new Rectangle(this->w2, this->l2);
 8000b3c:	2008      	movs	r0, #8
 8000b3e:	f006 fe13 	bl	8007768 <_Znwj>
 8000b42:	4603      	mov	r3, r0
 8000b44:	461c      	mov	r4, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6919      	ldr	r1, [r3, #16]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4620      	mov	r0, r4
 8000b52:	f7ff fe37 	bl	80007c4 <_ZN9RectangleC1Eii>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
}
 8000b5c:	bf00      	nop
 8000b5e:	4618      	mov	r0, r3
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd90      	pop	{r4, r7, pc}

08000b66 <_ZNSt6vectorIiSaIiEEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 f83e 	bl	8000bf2 <_ZNSt12_Vector_baseIiSaIiEEC1Ev>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <_ZNKSt16initializer_listIiE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <_ZNKSt16initializer_listIiE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff ffed 	bl	8000b80 <_ZNKSt16initializer_listIiE5beginEv>
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f000 f848 	bl	8000c3e <_ZNKSt16initializer_listIiE4sizeEv>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	4423      	add	r3, r4
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd90      	pop	{r4, r7, pc}

08000bbc <_ZNSt6vectorIiSaIiEEaSESt16initializer_listIiE>:
       *  Note that the assignment completely changes the %vector and
       *  that the resulting %vector's size is the same as the number
       *  of elements assigned.
       */
      vector&
      operator=(initializer_list<value_type> __l)
 8000bbc:	b5b0      	push	{r4, r5, r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	e883 0006 	stmia.w	r3, {r1, r2}
      {
	this->_M_assign_aux(__l.begin(), __l.end(),
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ffd7 	bl	8000b80 <_ZNKSt16initializer_listIiE5beginEv>
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ffde 	bl	8000b98 <_ZNKSt16initializer_listIiE3endEv>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	462b      	mov	r3, r5
 8000be0:	4621      	mov	r1, r4
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f000 f837 	bl	8000c56 <_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag>
			    random_access_iterator_tag());
	return *this;
 8000be8:	68fb      	ldr	r3, [r7, #12]
      }
 8000bea:	4618      	mov	r0, r3
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bdb0      	pop	{r4, r5, r7, pc}

08000bf2 <_ZNSt12_Vector_baseIiSaIiEEC1Ev>:
      _Vector_base()
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 f8b4 	bl	8000d6a <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1Ev>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b084      	sub	sp, #16
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	60f8      	str	r0, [r7, #12]
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000c2e:	68b9      	ldr	r1, [r7, #8]
 8000c30:	68f8      	ldr	r0, [r7, #12]
 8000c32:	f000 f8c2 	bl	8000dba <_ZSt8_DestroyIPiEvT_S1_>
    }
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <_ZNKSt16initializer_listIiE4sizeEv>:
      size() const noexcept { return _M_len; }
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag>:
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
 8000c56:	b5b0      	push	{r4, r5, r7, lr}
 8000c58:	b088      	sub	sp, #32
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	703b      	strb	r3, [r7, #0]
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);
 8000c64:	6879      	ldr	r1, [r7, #4]
 8000c66:	68b8      	ldr	r0, [r7, #8]
 8000c68:	f000 f8be 	bl	8000de8 <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	61fb      	str	r3, [r7, #28]

	if (__len > capacity())
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f000 f8cd 	bl	8000e10 <_ZNKSt6vectorIiSaIiEE8capacityEv>
 8000c76:	4602      	mov	r2, r0
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	bf8c      	ite	hi
 8000c7e:	2301      	movhi	r3, #1
 8000c80:	2300      	movls	r3, #0
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d030      	beq.n	8000cea <_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag+0x94>
	  {
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	69f9      	ldr	r1, [r7, #28]
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f000 f8cf 	bl	8000e32 <_ZNSt6vectorIiSaIiEE20_M_allocate_and_copyIPKiEEPijT_S6_>
 8000c94:	61b8      	str	r0, [r7, #24]
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681c      	ldr	r4, [r3, #0]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	685d      	ldr	r5, [r3, #4]
			  _M_get_Tp_allocator());
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ffb3 	bl	8000c0c <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8000ca6:	4603      	mov	r3, r0
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4629      	mov	r1, r5
 8000cac:	4620      	mov	r0, r4
 8000cae:	f7ff ffb8 	bl	8000c22 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>
	    _M_deallocate(this->_M_impl._M_start,
 8000cb2:	68f8      	ldr	r0, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	6819      	ldr	r1, [r3, #0]
			  this->_M_impl._M_end_of_storage
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	689b      	ldr	r3, [r3, #8]
			  - this->_M_impl._M_start);
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	109b      	asrs	r3, r3, #2
	    _M_deallocate(this->_M_impl._M_start,
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	f000 f864 	bl	8000d94 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>
	    this->_M_impl._M_start = __tmp;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	441a      	add	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	605a      	str	r2, [r3, #4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	609a      	str	r2, [r3, #8]
	    this->_M_impl._M_finish =
	      std::__uninitialized_copy_a(__mid, __last,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	  }
      }
 8000ce8:	e03b      	b.n	8000d62 <_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag+0x10c>
	else if (size() >= __len)
 8000cea:	68f8      	ldr	r0, [r7, #12]
 8000cec:	f000 f8bd 	bl	8000e6a <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	bf94      	ite	ls
 8000cf8:	2301      	movls	r3, #1
 8000cfa:	2300      	movhi	r3, #0
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d00c      	beq.n	8000d1c <_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag+0xc6>
	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	461a      	mov	r2, r3
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	68b8      	ldr	r0, [r7, #8]
 8000d0c:	f000 f8d6 	bl	8000ebc <_ZSt4copyIPKiPiET0_T_S4_S3_>
 8000d10:	4603      	mov	r3, r0
 8000d12:	4619      	mov	r1, r3
 8000d14:	68f8      	ldr	r0, [r7, #12]
 8000d16:	f000 f8b9 	bl	8000e8c <_ZNSt6vectorIiSaIiEE15_M_erase_at_endEPi>
      }
 8000d1a:	e022      	b.n	8000d62 <_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag+0x10c>
	    _ForwardIterator __mid = __first;
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	617b      	str	r3, [r7, #20]
	    std::advance(__mid, size());
 8000d20:	68f8      	ldr	r0, [r7, #12]
 8000d22:	f000 f8a2 	bl	8000e6a <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8000d26:	4602      	mov	r2, r0
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f8dc 	bl	8000eec <_ZSt7advanceIPKijEvRT_T0_>
	    std::copy(__first, __mid, this->_M_impl._M_start);
 8000d34:	6979      	ldr	r1, [r7, #20]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68b8      	ldr	r0, [r7, #8]
 8000d3e:	f000 f8bd 	bl	8000ebc <_ZSt4copyIPKiPiET0_T_S4_S3_>
	      std::__uninitialized_copy_a(__mid, __last,
 8000d42:	697c      	ldr	r4, [r7, #20]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	685d      	ldr	r5, [r3, #4]
					  _M_get_Tp_allocator());
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff5e 	bl	8000c0c <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8000d50:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__mid, __last,
 8000d52:	462a      	mov	r2, r5
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	4620      	mov	r0, r4
 8000d58:	f000 f8db 	bl	8000f12 <_ZSt22__uninitialized_copy_aIPKiPiiET0_T_S4_S3_RSaIT1_E>
 8000d5c:	4602      	mov	r2, r0
	    this->_M_impl._M_finish =
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	605a      	str	r2, [r3, #4]
      }
 8000d62:	bf00      	nop
 8000d64:	3720      	adds	r7, #32
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bdb0      	pop	{r4, r5, r7, pc}

08000d6a <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1Ev>:
	_Vector_impl()
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f000 f8de 	bl	8000f34 <_ZNSaIiEC1Ev>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
	{ }
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>:
      _M_deallocate(pointer __p, size_t __n)
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
	if (__p)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d005      	beq.n	8000db2 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	68b9      	ldr	r1, [r7, #8]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 f8cd 	bl	8000f4c <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>
      }
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <_ZSt8_DestroyIPiEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8000dc4:	6839      	ldr	r1, [r7, #0]
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f000 f8cf 	bl	8000f6a <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>
    }
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8000ddc:	4618      	mov	r0, r3
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8000de8:	b5b0      	push	{r4, r5, r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8000df2:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ffec 	bl	8000dd4 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
 8000dfc:	462a      	mov	r2, r5
 8000dfe:	6839      	ldr	r1, [r7, #0]
 8000e00:	4620      	mov	r0, r4
 8000e02:	f000 f8bd 	bl	8000f80 <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8000e06:	4603      	mov	r3, r0
    }
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bdb0      	pop	{r4, r5, r7, pc}

08000e10 <_ZNKSt6vectorIiSaIiEE8capacityEv>:
      /**
       *  Returns the total number of elements that the %vector can
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689b      	ldr	r3, [r3, #8]
			 - this->_M_impl._M_start); }
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	109b      	asrs	r3, r3, #2
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <_ZNSt6vectorIiSaIiEE20_M_allocate_and_copyIPKiEEPijT_S6_>:
       *  Memory expansion handler.  Uses the member allocation function to
       *  obtain @a n bytes of memory, and then copies [first,last) into it.
       */
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b086      	sub	sp, #24
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	60f8      	str	r0, [r7, #12]
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
 8000e3e:	603b      	str	r3, [r7, #0]
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	68b9      	ldr	r1, [r7, #8]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 f8ab 	bl	8000fa0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>
 8000e4a:	6178      	str	r0, [r7, #20]
	  __try
	    {
	      std::__uninitialized_copy_a(__first, __last, __result,
					  _M_get_Tp_allocator());
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fedc 	bl	8000c0c <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8000e54:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	6839      	ldr	r1, [r7, #0]
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f000 f859 	bl	8000f12 <_ZSt22__uninitialized_copy_aIPKiPiiET0_T_S4_S3_RSaIT1_E>
	      return __result;
 8000e60:	697b      	ldr	r3, [r7, #20]
	  __catch(...)
	    {
	      _M_deallocate(__result, __n);
	      __throw_exception_again;
	    }
	}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <_ZNKSt6vectorIiSaIiEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	461a      	mov	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	109b      	asrs	r3, r3, #2
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <_ZNSt6vectorIiSaIiEE15_M_erase_at_endEPi>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685c      	ldr	r4, [r3, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff feb5 	bl	8000c0c <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4621      	mov	r1, r4
 8000ea8:	6838      	ldr	r0, [r7, #0]
 8000eaa:	f7ff feba 	bl	8000c22 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	683a      	ldr	r2, [r7, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
      }
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd90      	pop	{r4, r7, pc}

08000ebc <_ZSt4copyIPKiPiET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	f000 f87d 	bl	8000fc8 <_ZSt12__miter_baseIPKiET_S2_>
 8000ece:	4604      	mov	r4, r0
 8000ed0:	68b8      	ldr	r0, [r7, #8]
 8000ed2:	f000 f879 	bl	8000fc8 <_ZSt12__miter_baseIPKiET_S2_>
 8000ed6:	4603      	mov	r3, r0
	       __result));
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	4619      	mov	r1, r3
 8000edc:	4620      	mov	r0, r4
 8000ede:	f000 f87e 	bl	8000fde <_ZSt14__copy_move_a2ILb0EPKiPiET1_T0_S4_S3_>
 8000ee2:	4603      	mov	r3, r0
    }
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd90      	pop	{r4, r7, pc}

08000eec <_ZSt7advanceIPKijEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ff6a 	bl	8000dd4 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
 8000f00:	4622      	mov	r2, r4
 8000f02:	68f9      	ldr	r1, [r7, #12]
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 f886 	bl	8001016 <_ZSt9__advanceIPKiiEvRT_T0_St26random_access_iterator_tag>
    }
 8000f0a:	bf00      	nop
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd90      	pop	{r4, r7, pc}

08000f12 <_ZSt22__uninitialized_copy_aIPKiPiiET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b084      	sub	sp, #16
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	68b9      	ldr	r1, [r7, #8]
 8000f24:	68f8      	ldr	r0, [r7, #12]
 8000f26:	f000 f889 	bl	800103c <_ZSt18uninitialized_copyIPKiPiET0_T_S4_S3_>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <_ZNSaIiEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f000 f88f 	bl	8001060 <_ZN9__gnu_cxx13new_allocatorIiEC1Ev>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	68b9      	ldr	r1, [r7, #8]
 8000f5c:	68f8      	ldr	r0, [r7, #12]
 8000f5e:	f000 f88a 	bl	8001076 <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPij>
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	109b      	asrs	r3, r3, #2
    }
 8000f94:	4618      	mov	r0, r3
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d006      	beq.n	8000fbe <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x1e>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6839      	ldr	r1, [r7, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 f86b 	bl	8001090 <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	e000      	b.n	8000fc0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x20>
 8000fbe:	2300      	movs	r3, #0
      }
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <_ZSt12__miter_baseIPKiET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <_ZSt14__copy_move_a2ILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8000fde:	b5b0      	push	{r4, r5, r7, lr}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8000fea:	68f8      	ldr	r0, [r7, #12]
 8000fec:	f000 f85f 	bl	80010ae <_ZSt12__niter_baseIPKiET_S2_>
 8000ff0:	4604      	mov	r4, r0
 8000ff2:	68b8      	ldr	r0, [r7, #8]
 8000ff4:	f000 f85b 	bl	80010ae <_ZSt12__niter_baseIPKiET_S2_>
 8000ff8:	4605      	mov	r5, r0
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 f862 	bl	80010c4 <_ZSt12__niter_baseIPiET_S1_>
 8001000:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8001002:	461a      	mov	r2, r3
 8001004:	4629      	mov	r1, r5
 8001006:	4620      	mov	r0, r4
 8001008:	f000 f867 	bl	80010da <_ZSt13__copy_move_aILb0EPKiPiET1_T0_S4_S3_>
 800100c:	4603      	mov	r3, r0
    }
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bdb0      	pop	{r4, r5, r7, pc}

08001016 <_ZSt9__advanceIPKiiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8001016:	b480      	push	{r7}
 8001018:	b085      	sub	sp, #20
 800101a:	af00      	add	r7, sp, #0
 800101c:	60f8      	str	r0, [r7, #12]
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	713a      	strb	r2, [r7, #4]
      __i += __n;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	441a      	add	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	601a      	str	r2, [r3, #0]
    }
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <_ZSt18uninitialized_copyIPKiPiET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8001048:	2301      	movs	r3, #1
 800104a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f000 f854 	bl	80010fe <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKiPiEET0_T_S6_S5_>
 8001056:	4603      	mov	r3, r0
    }
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <_ZN9__gnu_cxx13new_allocatorIiEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPij>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8001076:	b580      	push	{r7, lr}
 8001078:	b084      	sub	sp, #16
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8001082:	68b8      	ldr	r0, [r7, #8]
 8001084:	f006 fb8a 	bl	800779c <_ZdlPv>
      }
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800109a:	2200      	movs	r2, #0
 800109c:	6839      	ldr	r1, [r7, #0]
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 f83d 	bl	800111e <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <_ZSt12__niter_baseIPKiET_S2_>:
    __niter_base(_Iterator __it)
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
    { return __it; }
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <_ZSt12__niter_baseIPiET_S1_>:
    __niter_base(_Iterator __it)
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
    { return __it; }
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <_ZSt13__copy_move_aILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 80010e6:	2301      	movs	r3, #1
 80010e8:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f000 f833 	bl	800115a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
 80010f4:	4603      	mov	r3, r0
    }
 80010f6:	4618      	mov	r0, r3
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKiPiEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80010fe:	b580      	push	{r7, lr}
 8001100:	b084      	sub	sp, #16
 8001102:	af00      	add	r7, sp, #0
 8001104:	60f8      	str	r0, [r7, #12]
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	68f8      	ldr	r0, [r7, #12]
 8001110:	f7ff fed4 	bl	8000ebc <_ZSt4copyIPKiPiET0_T_S4_S3_>
 8001114:	4603      	mov	r3, r0
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800111e:	b580      	push	{r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f000 f832 	bl	8001194 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>
 8001130:	4602      	mov	r2, r0
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	4293      	cmp	r3, r2
 8001136:	bf8c      	ite	hi
 8001138:	2301      	movhi	r3, #1
 800113a:	2300      	movls	r3, #0
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001142:	f006 fb2d 	bl	80077a0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4618      	mov	r0, r3
 800114c:	f006 fb0c 	bl	8007768 <_Znwj>
 8001150:	4603      	mov	r3, r0
      }
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	109b      	asrs	r3, r3, #2
 800116e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d006      	beq.n	8001184 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	461a      	mov	r2, r3
 800117c:	68f9      	ldr	r1, [r7, #12]
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f006 fb52 	bl	8007828 <memmove>
	  return __result + _Num;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	4413      	add	r3, r2
	}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800119c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <_Z7figFalliP5StageP8StageObj>:
#include <stdio.h>
#include <stdlib.h>


void  figFall(int step, Stage* stage, StageObj* stgobj)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af02      	add	r7, sp, #8
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
	srand (2+step);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	3302      	adds	r3, #2
 80011bc:	4618      	mov	r0, r3
 80011be:	f006 fbfd 	bl	80079bc <srand>



	if (!stgobj->r1) stgobj->r1 = rand() % 30 + 40;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d111      	bne.n	80011ee <_Z7figFalliP5StageP8StageObj+0x42>
 80011ca:	f006 fc1b 	bl	8007a04 <rand>
 80011ce:	4601      	mov	r1, r0
 80011d0:	4bad      	ldr	r3, [pc, #692]	; (8001488 <_Z7figFalliP5StageP8StageObj+0x2dc>)
 80011d2:	fb83 2301 	smull	r2, r3, r3, r1
 80011d6:	440b      	add	r3, r1
 80011d8:	111a      	asrs	r2, r3, #4
 80011da:	17cb      	asrs	r3, r1, #31
 80011dc:	1ad2      	subs	r2, r2, r3
 80011de:	4613      	mov	r3, r2
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	1a9b      	subs	r3, r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	1aca      	subs	r2, r1, r3
 80011e8:	3228      	adds	r2, #40	; 0x28
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	601a      	str	r2, [r3, #0]
	if (!stgobj->r2) stgobj->r2 = rand() % 30 + 20;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d111      	bne.n	800121a <_Z7figFalliP5StageP8StageObj+0x6e>
 80011f6:	f006 fc05 	bl	8007a04 <rand>
 80011fa:	4601      	mov	r1, r0
 80011fc:	4ba2      	ldr	r3, [pc, #648]	; (8001488 <_Z7figFalliP5StageP8StageObj+0x2dc>)
 80011fe:	fb83 2301 	smull	r2, r3, r3, r1
 8001202:	440b      	add	r3, r1
 8001204:	111a      	asrs	r2, r3, #4
 8001206:	17cb      	asrs	r3, r1, #31
 8001208:	1ad2      	subs	r2, r2, r3
 800120a:	4613      	mov	r3, r2
 800120c:	011b      	lsls	r3, r3, #4
 800120e:	1a9b      	subs	r3, r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	1aca      	subs	r2, r1, r3
 8001214:	3214      	adds	r2, #20
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	605a      	str	r2, [r3, #4]
	if (!stgobj->w1) stgobj->w1 = rand() % 30 + 50;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d111      	bne.n	8001246 <_Z7figFalliP5StageP8StageObj+0x9a>
 8001222:	f006 fbef 	bl	8007a04 <rand>
 8001226:	4601      	mov	r1, r0
 8001228:	4b97      	ldr	r3, [pc, #604]	; (8001488 <_Z7figFalliP5StageP8StageObj+0x2dc>)
 800122a:	fb83 2301 	smull	r2, r3, r3, r1
 800122e:	440b      	add	r3, r1
 8001230:	111a      	asrs	r2, r3, #4
 8001232:	17cb      	asrs	r3, r1, #31
 8001234:	1ad2      	subs	r2, r2, r3
 8001236:	4613      	mov	r3, r2
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	1a9b      	subs	r3, r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	1aca      	subs	r2, r1, r3
 8001240:	3232      	adds	r2, #50	; 0x32
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	60da      	str	r2, [r3, #12]
	if (!stgobj->w2) stgobj->w2 = rand() % 30 + 30;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d111      	bne.n	8001272 <_Z7figFalliP5StageP8StageObj+0xc6>
 800124e:	f006 fbd9 	bl	8007a04 <rand>
 8001252:	4601      	mov	r1, r0
 8001254:	4b8c      	ldr	r3, [pc, #560]	; (8001488 <_Z7figFalliP5StageP8StageObj+0x2dc>)
 8001256:	fb83 2301 	smull	r2, r3, r3, r1
 800125a:	440b      	add	r3, r1
 800125c:	111a      	asrs	r2, r3, #4
 800125e:	17cb      	asrs	r3, r1, #31
 8001260:	1ad2      	subs	r2, r2, r3
 8001262:	4613      	mov	r3, r2
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	1a9b      	subs	r3, r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	1aca      	subs	r2, r1, r3
 800126c:	321e      	adds	r2, #30
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	611a      	str	r2, [r3, #16]
	if (!stgobj->l1) stgobj->l1 = rand() % 40 + 25;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d110      	bne.n	800129c <_Z7figFalliP5StageP8StageObj+0xf0>
 800127a:	f006 fbc3 	bl	8007a04 <rand>
 800127e:	4601      	mov	r1, r0
 8001280:	4b82      	ldr	r3, [pc, #520]	; (800148c <_Z7figFalliP5StageP8StageObj+0x2e0>)
 8001282:	fb83 2301 	smull	r2, r3, r3, r1
 8001286:	111a      	asrs	r2, r3, #4
 8001288:	17cb      	asrs	r3, r1, #31
 800128a:	1ad2      	subs	r2, r2, r3
 800128c:	4613      	mov	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	1aca      	subs	r2, r1, r3
 8001296:	3219      	adds	r2, #25
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	615a      	str	r2, [r3, #20]
	if (!stgobj->l2) stgobj->l2 = rand() % 40 + 20;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d110      	bne.n	80012c6 <_Z7figFalliP5StageP8StageObj+0x11a>
 80012a4:	f006 fbae 	bl	8007a04 <rand>
 80012a8:	4601      	mov	r1, r0
 80012aa:	4b78      	ldr	r3, [pc, #480]	; (800148c <_Z7figFalliP5StageP8StageObj+0x2e0>)
 80012ac:	fb83 2301 	smull	r2, r3, r3, r1
 80012b0:	111a      	asrs	r2, r3, #4
 80012b2:	17cb      	asrs	r3, r1, #31
 80012b4:	1ad2      	subs	r2, r2, r3
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	1aca      	subs	r2, r1, r3
 80012c0:	3214      	adds	r2, #20
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	619a      	str	r2, [r3, #24]

	if(stgobj->x1 < 0) stgobj->x1 = rand() % 200 + 1;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	da0f      	bge.n	80012ee <_Z7figFalliP5StageP8StageObj+0x142>
 80012ce:	f006 fb99 	bl	8007a04 <rand>
 80012d2:	4602      	mov	r2, r0
 80012d4:	4b6e      	ldr	r3, [pc, #440]	; (8001490 <_Z7figFalliP5StageP8StageObj+0x2e4>)
 80012d6:	fb83 1302 	smull	r1, r3, r3, r2
 80012da:	1199      	asrs	r1, r3, #6
 80012dc:	17d3      	asrs	r3, r2, #31
 80012de:	1acb      	subs	r3, r1, r3
 80012e0:	21c8      	movs	r1, #200	; 0xc8
 80012e2:	fb01 f303 	mul.w	r3, r1, r3
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	1c5a      	adds	r2, r3, #1
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
	if(stgobj->x2 < 0) stgobj->x2 = rand() % 200 + 1;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	da0f      	bge.n	8001316 <_Z7figFalliP5StageP8StageObj+0x16a>
 80012f6:	f006 fb85 	bl	8007a04 <rand>
 80012fa:	4602      	mov	r2, r0
 80012fc:	4b64      	ldr	r3, [pc, #400]	; (8001490 <_Z7figFalliP5StageP8StageObj+0x2e4>)
 80012fe:	fb83 1302 	smull	r1, r3, r3, r2
 8001302:	1199      	asrs	r1, r3, #6
 8001304:	17d3      	asrs	r3, r2, #31
 8001306:	1acb      	subs	r3, r1, r3
 8001308:	21c8      	movs	r1, #200	; 0xc8
 800130a:	fb01 f303 	mul.w	r3, r1, r3
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	1c5a      	adds	r2, r3, #1
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	629a      	str	r2, [r3, #40]	; 0x28
	if(stgobj->x3 < 0) stgobj->x3 = rand() % 200 + 1;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131a:	2b00      	cmp	r3, #0
 800131c:	da0f      	bge.n	800133e <_Z7figFalliP5StageP8StageObj+0x192>
 800131e:	f006 fb71 	bl	8007a04 <rand>
 8001322:	4602      	mov	r2, r0
 8001324:	4b5a      	ldr	r3, [pc, #360]	; (8001490 <_Z7figFalliP5StageP8StageObj+0x2e4>)
 8001326:	fb83 1302 	smull	r1, r3, r3, r2
 800132a:	1199      	asrs	r1, r3, #6
 800132c:	17d3      	asrs	r3, r2, #31
 800132e:	1acb      	subs	r3, r1, r3
 8001330:	21c8      	movs	r1, #200	; 0xc8
 8001332:	fb01 f303 	mul.w	r3, r1, r3
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	1c5a      	adds	r2, r3, #1
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	62da      	str	r2, [r3, #44]	; 0x2c
	if(stgobj->x4 < 0) stgobj->x4 = rand() % 200 + 1;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	2b00      	cmp	r3, #0
 8001344:	da0f      	bge.n	8001366 <_Z7figFalliP5StageP8StageObj+0x1ba>
 8001346:	f006 fb5d 	bl	8007a04 <rand>
 800134a:	4602      	mov	r2, r0
 800134c:	4b50      	ldr	r3, [pc, #320]	; (8001490 <_Z7figFalliP5StageP8StageObj+0x2e4>)
 800134e:	fb83 1302 	smull	r1, r3, r3, r2
 8001352:	1199      	asrs	r1, r3, #6
 8001354:	17d3      	asrs	r3, r2, #31
 8001356:	1acb      	subs	r3, r1, r3
 8001358:	21c8      	movs	r1, #200	; 0xc8
 800135a:	fb01 f303 	mul.w	r3, r1, r3
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	1c5a      	adds	r2, r3, #1
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	631a      	str	r2, [r3, #48]	; 0x30
	stgobj->y1 = 1;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	639a      	str	r2, [r3, #56]	; 0x38
	stgobj->y2 = 1;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	63da      	str	r2, [r3, #60]	; 0x3c
	stgobj->y3 = 1;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	641a      	str	r2, [r3, #64]	; 0x40
	stgobj->y4 = -stgobj->l2 + 1;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f1c3 0201 	rsb	r2, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	645a      	str	r2, [r3, #68]	; 0x44

	stgobj->initFig();
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff fbab 	bl	8000ae0 <_ZN8StageObj7initFigEv>

	stgobj->cir1->drawCircle(stgobj->x1, stgobj->y1, stage);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	f7ff f8b7 	bl	800050a <_ZN6Circle10drawCircleEiiP5Stage>
	stgobj->cir2->drawCircle(stgobj->x2, stgobj->y2, stage);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	f7ff f8ae 	bl	800050a <_ZN6Circle10drawCircleEiiP5Stage>
	stgobj->rec1->drawRec(stgobj->x3, stgobj->y3, 0, stage);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2300      	movs	r3, #0
 80013c2:	f7ff fa12 	bl	80007ea <_ZN9Rectangle7drawRecEiibP5Stage>
	stgobj->rec2->drawRec(stgobj->x4, stgobj->y4, 0, stage);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2300      	movs	r3, #0
 80013da:	f7ff fa06 	bl	80007ea <_ZN9Rectangle7drawRecEiibP5Stage>

	stgobj->y1 = stgobj->y1 + (step + 1);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3301      	adds	r3, #1
 80013e6:	441a      	add	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	639a      	str	r2, [r3, #56]	; 0x38
	stgobj->y2 = stgobj->y2 + (step);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	441a      	add	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	63da      	str	r2, [r3, #60]	; 0x3c
	stgobj->y3 += step;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	441a      	add	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	641a      	str	r2, [r3, #64]	; 0x40
	stgobj->y4 = stgobj->y4 + (step + 3);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	3303      	adds	r3, #3
 800140c:	441a      	add	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	645a      	str	r2, [r3, #68]	; 0x44

	if(stgobj->y1 > 320 + stgobj->r1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800141e:	429a      	cmp	r2, r3
 8001420:	dd0a      	ble.n	8001438 <_Z7figFalliP5StageP8StageObj+0x28c>
	{
		stgobj->x1 = -1;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f04f 32ff 	mov.w	r2, #4294967295
 8001428:	625a      	str	r2, [r3, #36]	; 0x24
		stgobj->y1 = -1;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f04f 32ff 	mov.w	r2, #4294967295
 8001430:	639a      	str	r2, [r3, #56]	; 0x38
		stgobj->r1 = 0;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
	}

	if(stgobj->y2 > 320 + stgobj->r2)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001444:	429a      	cmp	r2, r3
 8001446:	dd0a      	ble.n	800145e <_Z7figFalliP5StageP8StageObj+0x2b2>
	{
		stgobj->x2 = -1;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f04f 32ff 	mov.w	r2, #4294967295
 800144e:	629a      	str	r2, [r3, #40]	; 0x28
		stgobj->y2 = -1;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f04f 32ff 	mov.w	r2, #4294967295
 8001456:	63da      	str	r2, [r3, #60]	; 0x3c
		stgobj->r2 = 0;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	605a      	str	r2, [r3, #4]
	}

	if(stgobj->y3+stgobj->l1 > 319)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	4413      	add	r3, r2
 8001468:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800146c:	db12      	blt.n	8001494 <_Z7figFalliP5StageP8StageObj+0x2e8>
	{
		stgobj->x3 = -1;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f04f 32ff 	mov.w	r2, #4294967295
 8001474:	62da      	str	r2, [r3, #44]	; 0x2c
		stgobj->y3 = -1;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f04f 32ff 	mov.w	r2, #4294967295
 800147c:	641a      	str	r2, [r3, #64]	; 0x40
		stgobj->l1 = 0;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
 8001484:	e006      	b.n	8001494 <_Z7figFalliP5StageP8StageObj+0x2e8>
 8001486:	bf00      	nop
 8001488:	88888889 	.word	0x88888889
 800148c:	66666667 	.word	0x66666667
 8001490:	51eb851f 	.word	0x51eb851f
	}

	if(stgobj->y4 > 320 + stgobj->l2)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dd0a      	ble.n	80014ba <_Z7figFalliP5StageP8StageObj+0x30e>
	{
		stgobj->x4 = -1;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f04f 32ff 	mov.w	r2, #4294967295
 80014aa:	631a      	str	r2, [r3, #48]	; 0x30
		stgobj->y4 = -1;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f04f 32ff 	mov.w	r2, #4294967295
 80014b2:	645a      	str	r2, [r3, #68]	; 0x44
		stgobj->l2 = 0;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	619a      	str	r2, [r3, #24]
	}

	delete stgobj->cir1;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014be:	2104      	movs	r1, #4
 80014c0:	4618      	mov	r0, r3
 80014c2:	f006 f94f 	bl	8007764 <_ZdlPvj>
	delete stgobj->cir2;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80014ca:	2104      	movs	r1, #4
 80014cc:	4618      	mov	r0, r3
 80014ce:	f006 f949 	bl	8007764 <_ZdlPvj>
	delete stgobj->rec1;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014d8:	2108      	movs	r1, #8
 80014da:	4618      	mov	r0, r3
 80014dc:	f006 f942 	bl	8007764 <_ZdlPvj>
	delete stgobj->rec2;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014e6:	2108      	movs	r1, #8
 80014e8:	4618      	mov	r0, r3
 80014ea:	f006 f93b 	bl	8007764 <_ZdlPvj>

}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop

080014f8 <ili9341_Init>:
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	f000 fe20 	bl	8002140 <LCD_IO_Init>
 8001500:	20ca      	movs	r0, #202	; 0xca
 8001502:	f000 f95d 	bl	80017c0 <ili9341_WriteReg>
 8001506:	20c3      	movs	r0, #195	; 0xc3
 8001508:	f000 f967 	bl	80017da <ili9341_WriteData>
 800150c:	2008      	movs	r0, #8
 800150e:	f000 f964 	bl	80017da <ili9341_WriteData>
 8001512:	2050      	movs	r0, #80	; 0x50
 8001514:	f000 f961 	bl	80017da <ili9341_WriteData>
 8001518:	20cf      	movs	r0, #207	; 0xcf
 800151a:	f000 f951 	bl	80017c0 <ili9341_WriteReg>
 800151e:	2000      	movs	r0, #0
 8001520:	f000 f95b 	bl	80017da <ili9341_WriteData>
 8001524:	20c1      	movs	r0, #193	; 0xc1
 8001526:	f000 f958 	bl	80017da <ili9341_WriteData>
 800152a:	2030      	movs	r0, #48	; 0x30
 800152c:	f000 f955 	bl	80017da <ili9341_WriteData>
 8001530:	20ed      	movs	r0, #237	; 0xed
 8001532:	f000 f945 	bl	80017c0 <ili9341_WriteReg>
 8001536:	2064      	movs	r0, #100	; 0x64
 8001538:	f000 f94f 	bl	80017da <ili9341_WriteData>
 800153c:	2003      	movs	r0, #3
 800153e:	f000 f94c 	bl	80017da <ili9341_WriteData>
 8001542:	2012      	movs	r0, #18
 8001544:	f000 f949 	bl	80017da <ili9341_WriteData>
 8001548:	2081      	movs	r0, #129	; 0x81
 800154a:	f000 f946 	bl	80017da <ili9341_WriteData>
 800154e:	20e8      	movs	r0, #232	; 0xe8
 8001550:	f000 f936 	bl	80017c0 <ili9341_WriteReg>
 8001554:	2085      	movs	r0, #133	; 0x85
 8001556:	f000 f940 	bl	80017da <ili9341_WriteData>
 800155a:	2000      	movs	r0, #0
 800155c:	f000 f93d 	bl	80017da <ili9341_WriteData>
 8001560:	2078      	movs	r0, #120	; 0x78
 8001562:	f000 f93a 	bl	80017da <ili9341_WriteData>
 8001566:	20cb      	movs	r0, #203	; 0xcb
 8001568:	f000 f92a 	bl	80017c0 <ili9341_WriteReg>
 800156c:	2039      	movs	r0, #57	; 0x39
 800156e:	f000 f934 	bl	80017da <ili9341_WriteData>
 8001572:	202c      	movs	r0, #44	; 0x2c
 8001574:	f000 f931 	bl	80017da <ili9341_WriteData>
 8001578:	2000      	movs	r0, #0
 800157a:	f000 f92e 	bl	80017da <ili9341_WriteData>
 800157e:	2034      	movs	r0, #52	; 0x34
 8001580:	f000 f92b 	bl	80017da <ili9341_WriteData>
 8001584:	2002      	movs	r0, #2
 8001586:	f000 f928 	bl	80017da <ili9341_WriteData>
 800158a:	20f7      	movs	r0, #247	; 0xf7
 800158c:	f000 f918 	bl	80017c0 <ili9341_WriteReg>
 8001590:	2020      	movs	r0, #32
 8001592:	f000 f922 	bl	80017da <ili9341_WriteData>
 8001596:	20ea      	movs	r0, #234	; 0xea
 8001598:	f000 f912 	bl	80017c0 <ili9341_WriteReg>
 800159c:	2000      	movs	r0, #0
 800159e:	f000 f91c 	bl	80017da <ili9341_WriteData>
 80015a2:	2000      	movs	r0, #0
 80015a4:	f000 f919 	bl	80017da <ili9341_WriteData>
 80015a8:	20b1      	movs	r0, #177	; 0xb1
 80015aa:	f000 f909 	bl	80017c0 <ili9341_WriteReg>
 80015ae:	2000      	movs	r0, #0
 80015b0:	f000 f913 	bl	80017da <ili9341_WriteData>
 80015b4:	201b      	movs	r0, #27
 80015b6:	f000 f910 	bl	80017da <ili9341_WriteData>
 80015ba:	20b6      	movs	r0, #182	; 0xb6
 80015bc:	f000 f900 	bl	80017c0 <ili9341_WriteReg>
 80015c0:	200a      	movs	r0, #10
 80015c2:	f000 f90a 	bl	80017da <ili9341_WriteData>
 80015c6:	20a2      	movs	r0, #162	; 0xa2
 80015c8:	f000 f907 	bl	80017da <ili9341_WriteData>
 80015cc:	20c0      	movs	r0, #192	; 0xc0
 80015ce:	f000 f8f7 	bl	80017c0 <ili9341_WriteReg>
 80015d2:	2010      	movs	r0, #16
 80015d4:	f000 f901 	bl	80017da <ili9341_WriteData>
 80015d8:	20c1      	movs	r0, #193	; 0xc1
 80015da:	f000 f8f1 	bl	80017c0 <ili9341_WriteReg>
 80015de:	2010      	movs	r0, #16
 80015e0:	f000 f8fb 	bl	80017da <ili9341_WriteData>
 80015e4:	20c5      	movs	r0, #197	; 0xc5
 80015e6:	f000 f8eb 	bl	80017c0 <ili9341_WriteReg>
 80015ea:	2045      	movs	r0, #69	; 0x45
 80015ec:	f000 f8f5 	bl	80017da <ili9341_WriteData>
 80015f0:	2015      	movs	r0, #21
 80015f2:	f000 f8f2 	bl	80017da <ili9341_WriteData>
 80015f6:	20c7      	movs	r0, #199	; 0xc7
 80015f8:	f000 f8e2 	bl	80017c0 <ili9341_WriteReg>
 80015fc:	2090      	movs	r0, #144	; 0x90
 80015fe:	f000 f8ec 	bl	80017da <ili9341_WriteData>
 8001602:	2036      	movs	r0, #54	; 0x36
 8001604:	f000 f8dc 	bl	80017c0 <ili9341_WriteReg>
 8001608:	20c8      	movs	r0, #200	; 0xc8
 800160a:	f000 f8e6 	bl	80017da <ili9341_WriteData>
 800160e:	20f2      	movs	r0, #242	; 0xf2
 8001610:	f000 f8d6 	bl	80017c0 <ili9341_WriteReg>
 8001614:	2000      	movs	r0, #0
 8001616:	f000 f8e0 	bl	80017da <ili9341_WriteData>
 800161a:	20b0      	movs	r0, #176	; 0xb0
 800161c:	f000 f8d0 	bl	80017c0 <ili9341_WriteReg>
 8001620:	20c2      	movs	r0, #194	; 0xc2
 8001622:	f000 f8da 	bl	80017da <ili9341_WriteData>
 8001626:	20b6      	movs	r0, #182	; 0xb6
 8001628:	f000 f8ca 	bl	80017c0 <ili9341_WriteReg>
 800162c:	200a      	movs	r0, #10
 800162e:	f000 f8d4 	bl	80017da <ili9341_WriteData>
 8001632:	20a7      	movs	r0, #167	; 0xa7
 8001634:	f000 f8d1 	bl	80017da <ili9341_WriteData>
 8001638:	2027      	movs	r0, #39	; 0x27
 800163a:	f000 f8ce 	bl	80017da <ili9341_WriteData>
 800163e:	2004      	movs	r0, #4
 8001640:	f000 f8cb 	bl	80017da <ili9341_WriteData>
 8001644:	202a      	movs	r0, #42	; 0x2a
 8001646:	f000 f8bb 	bl	80017c0 <ili9341_WriteReg>
 800164a:	2000      	movs	r0, #0
 800164c:	f000 f8c5 	bl	80017da <ili9341_WriteData>
 8001650:	2000      	movs	r0, #0
 8001652:	f000 f8c2 	bl	80017da <ili9341_WriteData>
 8001656:	2000      	movs	r0, #0
 8001658:	f000 f8bf 	bl	80017da <ili9341_WriteData>
 800165c:	20ef      	movs	r0, #239	; 0xef
 800165e:	f000 f8bc 	bl	80017da <ili9341_WriteData>
 8001662:	202b      	movs	r0, #43	; 0x2b
 8001664:	f000 f8ac 	bl	80017c0 <ili9341_WriteReg>
 8001668:	2000      	movs	r0, #0
 800166a:	f000 f8b6 	bl	80017da <ili9341_WriteData>
 800166e:	2000      	movs	r0, #0
 8001670:	f000 f8b3 	bl	80017da <ili9341_WriteData>
 8001674:	2001      	movs	r0, #1
 8001676:	f000 f8b0 	bl	80017da <ili9341_WriteData>
 800167a:	203f      	movs	r0, #63	; 0x3f
 800167c:	f000 f8ad 	bl	80017da <ili9341_WriteData>
 8001680:	20f6      	movs	r0, #246	; 0xf6
 8001682:	f000 f89d 	bl	80017c0 <ili9341_WriteReg>
 8001686:	2001      	movs	r0, #1
 8001688:	f000 f8a7 	bl	80017da <ili9341_WriteData>
 800168c:	2000      	movs	r0, #0
 800168e:	f000 f8a4 	bl	80017da <ili9341_WriteData>
 8001692:	2006      	movs	r0, #6
 8001694:	f000 f8a1 	bl	80017da <ili9341_WriteData>
 8001698:	202c      	movs	r0, #44	; 0x2c
 800169a:	f000 f891 	bl	80017c0 <ili9341_WriteReg>
 800169e:	20c8      	movs	r0, #200	; 0xc8
 80016a0:	f000 fe3c 	bl	800231c <LCD_Delay>
 80016a4:	2026      	movs	r0, #38	; 0x26
 80016a6:	f000 f88b 	bl	80017c0 <ili9341_WriteReg>
 80016aa:	2001      	movs	r0, #1
 80016ac:	f000 f895 	bl	80017da <ili9341_WriteData>
 80016b0:	20e0      	movs	r0, #224	; 0xe0
 80016b2:	f000 f885 	bl	80017c0 <ili9341_WriteReg>
 80016b6:	200f      	movs	r0, #15
 80016b8:	f000 f88f 	bl	80017da <ili9341_WriteData>
 80016bc:	2029      	movs	r0, #41	; 0x29
 80016be:	f000 f88c 	bl	80017da <ili9341_WriteData>
 80016c2:	2024      	movs	r0, #36	; 0x24
 80016c4:	f000 f889 	bl	80017da <ili9341_WriteData>
 80016c8:	200c      	movs	r0, #12
 80016ca:	f000 f886 	bl	80017da <ili9341_WriteData>
 80016ce:	200e      	movs	r0, #14
 80016d0:	f000 f883 	bl	80017da <ili9341_WriteData>
 80016d4:	2009      	movs	r0, #9
 80016d6:	f000 f880 	bl	80017da <ili9341_WriteData>
 80016da:	204e      	movs	r0, #78	; 0x4e
 80016dc:	f000 f87d 	bl	80017da <ili9341_WriteData>
 80016e0:	2078      	movs	r0, #120	; 0x78
 80016e2:	f000 f87a 	bl	80017da <ili9341_WriteData>
 80016e6:	203c      	movs	r0, #60	; 0x3c
 80016e8:	f000 f877 	bl	80017da <ili9341_WriteData>
 80016ec:	2009      	movs	r0, #9
 80016ee:	f000 f874 	bl	80017da <ili9341_WriteData>
 80016f2:	2013      	movs	r0, #19
 80016f4:	f000 f871 	bl	80017da <ili9341_WriteData>
 80016f8:	2005      	movs	r0, #5
 80016fa:	f000 f86e 	bl	80017da <ili9341_WriteData>
 80016fe:	2017      	movs	r0, #23
 8001700:	f000 f86b 	bl	80017da <ili9341_WriteData>
 8001704:	2011      	movs	r0, #17
 8001706:	f000 f868 	bl	80017da <ili9341_WriteData>
 800170a:	2000      	movs	r0, #0
 800170c:	f000 f865 	bl	80017da <ili9341_WriteData>
 8001710:	20e1      	movs	r0, #225	; 0xe1
 8001712:	f000 f855 	bl	80017c0 <ili9341_WriteReg>
 8001716:	2000      	movs	r0, #0
 8001718:	f000 f85f 	bl	80017da <ili9341_WriteData>
 800171c:	2016      	movs	r0, #22
 800171e:	f000 f85c 	bl	80017da <ili9341_WriteData>
 8001722:	201b      	movs	r0, #27
 8001724:	f000 f859 	bl	80017da <ili9341_WriteData>
 8001728:	2004      	movs	r0, #4
 800172a:	f000 f856 	bl	80017da <ili9341_WriteData>
 800172e:	2011      	movs	r0, #17
 8001730:	f000 f853 	bl	80017da <ili9341_WriteData>
 8001734:	2007      	movs	r0, #7
 8001736:	f000 f850 	bl	80017da <ili9341_WriteData>
 800173a:	2031      	movs	r0, #49	; 0x31
 800173c:	f000 f84d 	bl	80017da <ili9341_WriteData>
 8001740:	2033      	movs	r0, #51	; 0x33
 8001742:	f000 f84a 	bl	80017da <ili9341_WriteData>
 8001746:	2042      	movs	r0, #66	; 0x42
 8001748:	f000 f847 	bl	80017da <ili9341_WriteData>
 800174c:	2005      	movs	r0, #5
 800174e:	f000 f844 	bl	80017da <ili9341_WriteData>
 8001752:	200c      	movs	r0, #12
 8001754:	f000 f841 	bl	80017da <ili9341_WriteData>
 8001758:	200a      	movs	r0, #10
 800175a:	f000 f83e 	bl	80017da <ili9341_WriteData>
 800175e:	2028      	movs	r0, #40	; 0x28
 8001760:	f000 f83b 	bl	80017da <ili9341_WriteData>
 8001764:	202f      	movs	r0, #47	; 0x2f
 8001766:	f000 f838 	bl	80017da <ili9341_WriteData>
 800176a:	200f      	movs	r0, #15
 800176c:	f000 f835 	bl	80017da <ili9341_WriteData>
 8001770:	2011      	movs	r0, #17
 8001772:	f000 f825 	bl	80017c0 <ili9341_WriteReg>
 8001776:	20c8      	movs	r0, #200	; 0xc8
 8001778:	f000 fdd0 	bl	800231c <LCD_Delay>
 800177c:	2029      	movs	r0, #41	; 0x29
 800177e:	f000 f81f 	bl	80017c0 <ili9341_WriteReg>
 8001782:	202c      	movs	r0, #44	; 0x2c
 8001784:	f000 f81c 	bl	80017c0 <ili9341_WriteReg>
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <ili9341_ReadID>:
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
 8001790:	f000 fcd6 	bl	8002140 <LCD_IO_Init>
 8001794:	2103      	movs	r1, #3
 8001796:	20d3      	movs	r0, #211	; 0xd3
 8001798:	f000 f82c 	bl	80017f4 <ili9341_ReadData>
 800179c:	4603      	mov	r3, r0
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4618      	mov	r0, r3
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <ili9341_DisplayOn>:
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	2029      	movs	r0, #41	; 0x29
 80017aa:	f000 f809 	bl	80017c0 <ili9341_WriteReg>
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <ili9341_DisplayOff>:
 80017b2:	b580      	push	{r7, lr}
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	2028      	movs	r0, #40	; 0x28
 80017b8:	f000 f802 	bl	80017c0 <ili9341_WriteReg>
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}

080017c0 <ili9341_WriteReg>:
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 fd51 	bl	8002274 <LCD_IO_WriteReg>
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <ili9341_WriteData>:
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	80fb      	strh	r3, [r7, #6]
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 fd22 	bl	8002230 <LCD_IO_WriteData>
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <ili9341_ReadData>:
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	460a      	mov	r2, r1
 80017fe:	80fb      	strh	r3, [r7, #6]
 8001800:	4613      	mov	r3, r2
 8001802:	717b      	strb	r3, [r7, #5]
 8001804:	797a      	ldrb	r2, [r7, #5]
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f000 fd54 	bl	80022b8 <LCD_IO_ReadData>
 8001810:	4603      	mov	r3, r0
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <ili9341_GetLcdPixelWidth>:
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
 800181e:	23f0      	movs	r3, #240	; 0xf0
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <ili9341_GetLcdPixelHeight>:
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
 800182e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	Stage* stage = new Stage;
 8001842:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
 8001846:	f005 ff8f 	bl	8007768 <_Znwj>
 800184a:	4603      	mov	r3, r0
 800184c:	60fb      	str	r3, [r7, #12]
	StageObj* stgobj = new StageObj;
 800184e:	2098      	movs	r0, #152	; 0x98
 8001850:	f005 ff8a 	bl	8007768 <_Znwj>
 8001854:	4603      	mov	r3, r0
 8001856:	461c      	mov	r4, r3
 8001858:	4620      	mov	r0, r4
 800185a:	f7ff f8bb 	bl	80009d4 <_ZN8StageObjC1Ev>
 800185e:	60bc      	str	r4, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8001860:	f001 fe44 	bl	80034ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001864:	f000 f852 	bl	800190c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001868:	f000 fb36 	bl	8001ed8 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 800186c:	f000 fab4 	bl	8001dd8 <_ZL19MX_USART1_UART_Initv>
  MX_LTDC_Init();
 8001870:	f000 f978 	bl	8001b64 <_ZL12MX_LTDC_Initv>
  MX_DMA2D_Init();
 8001874:	f000 f8ea 	bl	8001a4c <_ZL13MX_DMA2D_Initv>
  MX_I2C3_Init();
 8001878:	f000 f924 	bl	8001ac4 <_ZL12MX_I2C3_Initv>
  MX_SPI5_Init();
 800187c:	f000 fa30 	bl	8001ce0 <_ZL12MX_SPI5_Initv>
  MX_MBEDTLS_Init();
 8001880:	f005 ff69 	bl	8007756 <MX_MBEDTLS_Init>
  MX_FMC_Init();
 8001884:	f000 fad6 	bl	8001e34 <_ZL11MX_FMC_Initv>
  MX_TIM6_Init();
 8001888:	f000 fa66 	bl	8001d58 <_ZL12MX_TIM6_Initv>

  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 800188c:	f000 fd52 	bl	8002334 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER,LCD_FRAME_BUFFER);
 8001890:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001894:	2000      	movs	r0, #0
 8001896:	f000 fdcf 	bl	8002438 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 800189a:	2000      	movs	r0, #0
 800189c:	f000 fe30 	bl	8002500 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 80018a0:	f000 ff4a 	bl	8002738 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80018a4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80018a8:	f000 fe6c 	bl	8002584 <BSP_LCD_Clear>


  int y=0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	607b      	str	r3, [r7, #4]
  bool state=1;
 80018b0:	2301      	movs	r3, #1
 80018b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  stage->clear();
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f7ff f830 	bl	800091a <_ZN5Stage5clearEv>
  stgobj->r1=100;
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	2264      	movs	r2, #100	; 0x64
 80018be:	601a      	str	r2, [r3, #0]
  stgobj->w1=10;
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	220a      	movs	r2, #10
 80018c4:	60da      	str	r2, [r3, #12]
  stgobj->l1=20;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	2214      	movs	r2, #20
 80018ca:	615a      	str	r2, [r3, #20]
  stgobj->initFig();
 80018cc:	68b8      	ldr	r0, [r7, #8]
 80018ce:	f7ff f907 	bl	8000ae0 <_ZN8StageObj7initFigEv>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //================fallFig==================
	  stage->clear();
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f7ff f821 	bl	800091a <_ZN5Stage5clearEv>
  	  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80018d8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80018dc:	f000 fe52 	bl	8002584 <BSP_LCD_Clear>
	  figFall(n,stage,stgobj);
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <main+0xcc>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	68f9      	ldr	r1, [r7, #12]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fc5f 	bl	80011ac <_Z7figFalliP5StageP8StageObj>
	  n++;
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <main+0xcc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	3301      	adds	r3, #1
 80018f4:	4a04      	ldr	r2, [pc, #16]	; (8001908 <main+0xcc>)
 80018f6:	6013      	str	r3, [r2, #0]
//  	  stgobj->rec1->drawRec(100, 100, 0, stage);
	  stage->sendData();
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f7ff f837 	bl	800096c <_ZN5Stage8sendDataEv>
	  HAL_Delay(10);
 80018fe:	200a      	movs	r0, #10
 8001900:	f001 fe66 	bl	80035d0 <HAL_Delay>
	  stage->clear();
 8001904:	e7e5      	b.n	80018d2 <main+0x96>
 8001906:	bf00      	nop
 8001908:	200000d0 	.word	0x200000d0

0800190c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b0a0      	sub	sp, #128	; 0x80
 8001910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001912:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001916:	2230      	movs	r2, #48	; 0x30
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f005 ff9d 	bl	800785a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001920:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	2230      	movs	r2, #48	; 0x30
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f005 ff8e 	bl	800785a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	4b40      	ldr	r3, [pc, #256]	; (8001a44 <_Z18SystemClock_Configv+0x138>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	4a3f      	ldr	r2, [pc, #252]	; (8001a44 <_Z18SystemClock_Configv+0x138>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
 800194e:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <_Z18SystemClock_Configv+0x138>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	4b3a      	ldr	r3, [pc, #232]	; (8001a48 <_Z18SystemClock_Configv+0x13c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a39      	ldr	r2, [pc, #228]	; (8001a48 <_Z18SystemClock_Configv+0x13c>)
 8001964:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <_Z18SystemClock_Configv+0x13c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001976:	2302      	movs	r3, #2
 8001978:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800197a:	2301      	movs	r3, #1
 800197c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800197e:	2310      	movs	r3, #16
 8001980:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001982:	2302      	movs	r3, #2
 8001984:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001986:	2300      	movs	r3, #0
 8001988:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800198a:	2310      	movs	r3, #16
 800198c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 360;
 800198e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001992:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001994:	2302      	movs	r3, #2
 8001996:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001998:	2304      	movs	r3, #4
 800199a:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800199c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019a0:	4618      	mov	r0, r3
 80019a2:	f003 fb33 	bl	800500c <HAL_RCC_OscConfig>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	bf14      	ite	ne
 80019ac:	2301      	movne	r3, #1
 80019ae:	2300      	moveq	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 80019b6:	f000 fafd 	bl	8001fb4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80019ba:	f003 fad7 	bl	8004f6c <HAL_PWREx_EnableOverDrive>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	bf14      	ite	ne
 80019c4:	2301      	movne	r3, #1
 80019c6:	2300      	moveq	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 80019ce:	f000 faf1 	bl	8001fb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d2:	230f      	movs	r3, #15
 80019d4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d6:	2302      	movs	r3, #2
 80019d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019da:	2300      	movs	r3, #0
 80019dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019ee:	2105      	movs	r1, #5
 80019f0:	4618      	mov	r0, r3
 80019f2:	f003 fd7b 	bl	80054ec <HAL_RCC_ClockConfig>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	bf14      	ite	ne
 80019fc:	2301      	movne	r3, #1
 80019fe:	2300      	moveq	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <_Z18SystemClock_Configv+0xfe>
  {
    Error_Handler();
 8001a06:	f000 fad5 	bl	8001fb4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001a0a:	2308      	movs	r3, #8
 8001a0c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 432;
 8001a0e:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001a12:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001a14:	2302      	movs	r3, #2
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	4618      	mov	r0, r3
 8001a22:	f003 ff2f 	bl	8005884 <HAL_RCCEx_PeriphCLKConfig>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf14      	ite	ne
 8001a2c:	2301      	movne	r3, #1
 8001a2e:	2300      	moveq	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <_Z18SystemClock_Configv+0x12e>
  {
    Error_Handler();
 8001a36:	f000 fabd 	bl	8001fb4 <Error_Handler>
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	3780      	adds	r7, #128	; 0x80
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40007000 	.word	0x40007000

08001a4c <_ZL13MX_DMA2D_Initv>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001a50:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <_ZL13MX_DMA2D_Initv+0x70>)
 8001a52:	4a1b      	ldr	r2, [pc, #108]	; (8001ac0 <_ZL13MX_DMA2D_Initv+0x74>)
 8001a54:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <_ZL13MX_DMA2D_Initv+0x70>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001a5c:	4b17      	ldr	r3, [pc, #92]	; (8001abc <_ZL13MX_DMA2D_Initv+0x70>)
 8001a5e:	2202      	movs	r2, #2
 8001a60:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <_ZL13MX_DMA2D_Initv+0x70>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001a68:	4b14      	ldr	r3, [pc, #80]	; (8001abc <_ZL13MX_DMA2D_Initv+0x70>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <_ZL13MX_DMA2D_Initv+0x70>)
 8001a70:	2202      	movs	r2, #2
 8001a72:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <_ZL13MX_DMA2D_Initv+0x70>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <_ZL13MX_DMA2D_Initv+0x70>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001a80:	480e      	ldr	r0, [pc, #56]	; (8001abc <_ZL13MX_DMA2D_Initv+0x70>)
 8001a82:	f002 f895 	bl	8003bb0 <HAL_DMA2D_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	bf14      	ite	ne
 8001a8c:	2301      	movne	r3, #1
 8001a8e:	2300      	moveq	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <_ZL13MX_DMA2D_Initv+0x4e>
  {
    Error_Handler();
 8001a96:	f000 fa8d 	bl	8001fb4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	4807      	ldr	r0, [pc, #28]	; (8001abc <_ZL13MX_DMA2D_Initv+0x70>)
 8001a9e:	f002 f9e5 	bl	8003e6c <HAL_DMA2D_ConfigLayer>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf14      	ite	ne
 8001aa8:	2301      	movne	r3, #1
 8001aaa:	2300      	moveq	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <_ZL13MX_DMA2D_Initv+0x6a>
  {
    Error_Handler();
 8001ab2:	f000 fa7f 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200000d4 	.word	0x200000d4
 8001ac0:	4002b000 	.word	0x4002b000

08001ac4 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001ac8:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <_ZL12MX_I2C3_Initv+0x94>)
 8001aca:	4a24      	ldr	r2, [pc, #144]	; (8001b5c <_ZL12MX_I2C3_Initv+0x98>)
 8001acc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001ace:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <_ZL12MX_I2C3_Initv+0x94>)
 8001ad0:	4a23      	ldr	r2, [pc, #140]	; (8001b60 <_ZL12MX_I2C3_Initv+0x9c>)
 8001ad2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ad4:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <_ZL12MX_I2C3_Initv+0x94>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001ada:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <_ZL12MX_I2C3_Initv+0x94>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <_ZL12MX_I2C3_Initv+0x94>)
 8001ae2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ae6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <_ZL12MX_I2C3_Initv+0x94>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <_ZL12MX_I2C3_Initv+0x94>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001af4:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <_ZL12MX_I2C3_Initv+0x94>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <_ZL12MX_I2C3_Initv+0x94>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b00:	4815      	ldr	r0, [pc, #84]	; (8001b58 <_ZL12MX_I2C3_Initv+0x94>)
 8001b02:	f002 fdaf 	bl	8004664 <HAL_I2C_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	bf14      	ite	ne
 8001b0c:	2301      	movne	r3, #1
 8001b0e:	2300      	moveq	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 8001b16:	f000 fa4d 	bl	8001fb4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	480e      	ldr	r0, [pc, #56]	; (8001b58 <_ZL12MX_I2C3_Initv+0x94>)
 8001b1e:	f002 fed9 	bl	80048d4 <HAL_I2CEx_ConfigAnalogFilter>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	bf14      	ite	ne
 8001b28:	2301      	movne	r3, #1
 8001b2a:	2300      	moveq	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <_ZL12MX_I2C3_Initv+0x72>
  {
    Error_Handler();
 8001b32:	f000 fa3f 	bl	8001fb4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001b36:	2100      	movs	r1, #0
 8001b38:	4807      	ldr	r0, [pc, #28]	; (8001b58 <_ZL12MX_I2C3_Initv+0x94>)
 8001b3a:	f002 ff07 	bl	800494c <HAL_I2CEx_ConfigDigitalFilter>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	bf14      	ite	ne
 8001b44:	2301      	movne	r3, #1
 8001b46:	2300      	moveq	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <_ZL12MX_I2C3_Initv+0x8e>
  {
    Error_Handler();
 8001b4e:	f000 fa31 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000114 	.word	0x20000114
 8001b5c:	40005c00 	.word	0x40005c00
 8001b60:	000186a0 	.word	0x000186a0

08001b64 <_ZL12MX_LTDC_Initv>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b09a      	sub	sp, #104	; 0x68
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001b6a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b6e:	2234      	movs	r2, #52	; 0x34
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f005 fe71 	bl	800785a <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001b78:	463b      	mov	r3, r7
 8001b7a:	2234      	movs	r2, #52	; 0x34
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f005 fe6b 	bl	800785a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001b84:	4b54      	ldr	r3, [pc, #336]	; (8001cd8 <_ZL12MX_LTDC_Initv+0x174>)
 8001b86:	4a55      	ldr	r2, [pc, #340]	; (8001cdc <_ZL12MX_LTDC_Initv+0x178>)
 8001b88:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001b8a:	4b53      	ldr	r3, [pc, #332]	; (8001cd8 <_ZL12MX_LTDC_Initv+0x174>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b90:	4b51      	ldr	r3, [pc, #324]	; (8001cd8 <_ZL12MX_LTDC_Initv+0x174>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b96:	4b50      	ldr	r3, [pc, #320]	; (8001cd8 <_ZL12MX_LTDC_Initv+0x174>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b9c:	4b4e      	ldr	r3, [pc, #312]	; (8001cd8 <_ZL12MX_LTDC_Initv+0x174>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001ba2:	4b4d      	ldr	r3, [pc, #308]	; (8001cd8 <_ZL12MX_LTDC_Initv+0x174>)
 8001ba4:	2207      	movs	r2, #7
 8001ba6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001ba8:	4b4b      	ldr	r3, [pc, #300]	; (8001cd8 <_ZL12MX_LTDC_Initv+0x174>)
 8001baa:	2203      	movs	r2, #3
 8001bac:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001bae:	4b4a      	ldr	r3, [pc, #296]	; (8001cd8 <_ZL12MX_LTDC_Initv+0x174>)
 8001bb0:	220e      	movs	r2, #14
 8001bb2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001bb4:	4b48      	ldr	r3, [pc, #288]	; (8001cd8 <_ZL12MX_LTDC_Initv+0x174>)
 8001bb6:	2205      	movs	r2, #5
 8001bb8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 334;
 8001bba:	4b47      	ldr	r3, [pc, #284]	; (8001cd8 <_ZL12MX_LTDC_Initv+0x174>)
 8001bbc:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 245;
 8001bc2:	4b45      	ldr	r3, [pc, #276]	; (8001cd8 <_ZL12MX_LTDC_Initv+0x174>)
 8001bc4:	22f5      	movs	r2, #245	; 0xf5
 8001bc6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 340;
 8001bc8:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <_ZL12MX_LTDC_Initv+0x174>)
 8001bca:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001bce:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 247;
 8001bd0:	4b41      	ldr	r3, [pc, #260]	; (8001cd8 <_ZL12MX_LTDC_Initv+0x174>)
 8001bd2:	22f7      	movs	r2, #247	; 0xf7
 8001bd4:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001bd6:	4b40      	ldr	r3, [pc, #256]	; (8001cd8 <_ZL12MX_LTDC_Initv+0x174>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001bde:	4b3e      	ldr	r3, [pc, #248]	; (8001cd8 <_ZL12MX_LTDC_Initv+0x174>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001be6:	4b3c      	ldr	r3, [pc, #240]	; (8001cd8 <_ZL12MX_LTDC_Initv+0x174>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001bee:	483a      	ldr	r0, [pc, #232]	; (8001cd8 <_ZL12MX_LTDC_Initv+0x174>)
 8001bf0:	f002 feec 	bl	80049cc <HAL_LTDC_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	bf14      	ite	ne
 8001bfa:	2301      	movne	r3, #1
 8001bfc:	2300      	moveq	r3, #0
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <_ZL12MX_LTDC_Initv+0xa4>
  {
    Error_Handler();
 8001c04:	f000 f9d6 	bl	8001fb4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c28:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001c2a:	2305      	movs	r3, #5
 8001c2c:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001c4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c50:	2200      	movs	r2, #0
 8001c52:	4619      	mov	r1, r3
 8001c54:	4820      	ldr	r0, [pc, #128]	; (8001cd8 <_ZL12MX_LTDC_Initv+0x174>)
 8001c56:	f002 ff89 	bl	8004b6c <HAL_LTDC_ConfigLayer>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	bf14      	ite	ne
 8001c60:	2301      	movne	r3, #1
 8001c62:	2300      	moveq	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <_ZL12MX_LTDC_Initv+0x10a>
  {
    Error_Handler();
 8001c6a:	f000 f9a3 	bl	8001fb4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c8a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001c8c:	2305      	movs	r3, #5
 8001c8e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001cae:	463b      	mov	r3, r7
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4808      	ldr	r0, [pc, #32]	; (8001cd8 <_ZL12MX_LTDC_Initv+0x174>)
 8001cb6:	f002 ff59 	bl	8004b6c <HAL_LTDC_ConfigLayer>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bf14      	ite	ne
 8001cc0:	2301      	movne	r3, #1
 8001cc2:	2300      	moveq	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <_ZL12MX_LTDC_Initv+0x16a>
  {
    Error_Handler();
 8001cca:	f000 f973 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001cce:	bf00      	nop
 8001cd0:	3768      	adds	r7, #104	; 0x68
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000168 	.word	0x20000168
 8001cdc:	40016800 	.word	0x40016800

08001ce0 <_ZL12MX_SPI5_Initv>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <_ZL12MX_SPI5_Initv+0x70>)
 8001ce6:	4a1b      	ldr	r2, [pc, #108]	; (8001d54 <_ZL12MX_SPI5_Initv+0x74>)
 8001ce8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001cea:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <_ZL12MX_SPI5_Initv+0x70>)
 8001cec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cf0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <_ZL12MX_SPI5_Initv+0x70>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cf8:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <_ZL12MX_SPI5_Initv+0x70>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <_ZL12MX_SPI5_Initv+0x70>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <_ZL12MX_SPI5_Initv+0x70>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <_ZL12MX_SPI5_Initv+0x70>)
 8001d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d10:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d12:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <_ZL12MX_SPI5_Initv+0x70>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d18:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <_ZL12MX_SPI5_Initv+0x70>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <_ZL12MX_SPI5_Initv+0x70>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d24:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <_ZL12MX_SPI5_Initv+0x70>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <_ZL12MX_SPI5_Initv+0x70>)
 8001d2c:	220a      	movs	r2, #10
 8001d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001d30:	4807      	ldr	r0, [pc, #28]	; (8001d50 <_ZL12MX_SPI5_Initv+0x70>)
 8001d32:	f003 ffe4 	bl	8005cfe <HAL_SPI_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bf14      	ite	ne
 8001d3c:	2301      	movne	r3, #1
 8001d3e:	2300      	moveq	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <_ZL12MX_SPI5_Initv+0x6a>
  {
    Error_Handler();
 8001d46:	f000 f935 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000210 	.word	0x20000210
 8001d54:	40015000 	.word	0x40015000

08001d58 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d5e:	463b      	mov	r3, r7
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d66:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <_ZL12MX_TIM6_Initv+0x78>)
 8001d68:	4a1a      	ldr	r2, [pc, #104]	; (8001dd4 <_ZL12MX_TIM6_Initv+0x7c>)
 8001d6a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001d6c:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <_ZL12MX_TIM6_Initv+0x78>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <_ZL12MX_TIM6_Initv+0x78>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001d78:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <_ZL12MX_TIM6_Initv+0x78>)
 8001d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d7e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <_ZL12MX_TIM6_Initv+0x78>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d86:	4812      	ldr	r0, [pc, #72]	; (8001dd0 <_ZL12MX_TIM6_Initv+0x78>)
 8001d88:	f004 fd44 	bl	8006814 <HAL_TIM_Base_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	bf14      	ite	ne
 8001d92:	2301      	movne	r3, #1
 8001d94:	2300      	moveq	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <_ZL12MX_TIM6_Initv+0x48>
  {
    Error_Handler();
 8001d9c:	f000 f90a 	bl	8001fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da0:	2300      	movs	r3, #0
 8001da2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001da8:	463b      	mov	r3, r7
 8001daa:	4619      	mov	r1, r3
 8001dac:	4808      	ldr	r0, [pc, #32]	; (8001dd0 <_ZL12MX_TIM6_Initv+0x78>)
 8001dae:	f004 ff37 	bl	8006c20 <HAL_TIMEx_MasterConfigSynchronization>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	bf14      	ite	ne
 8001db8:	2301      	movne	r3, #1
 8001dba:	2300      	moveq	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <_ZL12MX_TIM6_Initv+0x6e>
  {
    Error_Handler();
 8001dc2:	f000 f8f7 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000268 	.word	0x20000268
 8001dd4:	40001000 	.word	0x40001000

08001dd8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ddc:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001dde:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001de0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001de2:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001de8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001df0:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001df6:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001dfe:	220c      	movs	r2, #12
 8001e00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e0e:	4807      	ldr	r0, [pc, #28]	; (8001e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e10:	f004 ff96 	bl	8006d40 <HAL_UART_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	bf14      	ite	ne
 8001e1a:	2301      	movne	r3, #1
 8001e1c:	2300      	moveq	r3, #0
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001e24:	f000 f8c6 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e28:	bf00      	nop
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	200002a8 	.word	0x200002a8
 8001e30:	40011000 	.word	0x40011000

08001e34 <_ZL11MX_FMC_Initv>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
 8001e48:	615a      	str	r2, [r3, #20]
 8001e4a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001e4c:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <_ZL11MX_FMC_Initv+0x9c>)
 8001e4e:	4a21      	ldr	r2, [pc, #132]	; (8001ed4 <_ZL11MX_FMC_Initv+0xa0>)
 8001e50:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001e52:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <_ZL11MX_FMC_Initv+0x9c>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001e58:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <_ZL11MX_FMC_Initv+0x9c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <_ZL11MX_FMC_Initv+0x9c>)
 8001e60:	2204      	movs	r2, #4
 8001e62:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001e64:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <_ZL11MX_FMC_Initv+0x9c>)
 8001e66:	2210      	movs	r2, #16
 8001e68:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001e6a:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <_ZL11MX_FMC_Initv+0x9c>)
 8001e6c:	2240      	movs	r2, #64	; 0x40
 8001e6e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001e70:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <_ZL11MX_FMC_Initv+0x9c>)
 8001e72:	2280      	movs	r2, #128	; 0x80
 8001e74:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001e76:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <_ZL11MX_FMC_Initv+0x9c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <_ZL11MX_FMC_Initv+0x9c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001e82:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <_ZL11MX_FMC_Initv+0x9c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001e88:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <_ZL11MX_FMC_Initv+0x9c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001e8e:	2310      	movs	r3, #16
 8001e90:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001e92:	2310      	movs	r3, #16
 8001e94:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001e96:	2310      	movs	r3, #16
 8001e98:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001e9a:	2310      	movs	r3, #16
 8001e9c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001e9e:	2310      	movs	r3, #16
 8001ea0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001ea2:	2310      	movs	r3, #16
 8001ea4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001ea6:	2310      	movs	r3, #16
 8001ea8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	4619      	mov	r1, r3
 8001eae:	4808      	ldr	r0, [pc, #32]	; (8001ed0 <_ZL11MX_FMC_Initv+0x9c>)
 8001eb0:	f003 fea6 	bl	8005c00 <HAL_SDRAM_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	bf14      	ite	ne
 8001eba:	2301      	movne	r3, #1
 8001ebc:	2300      	moveq	r3, #0
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <_ZL11MX_FMC_Initv+0x94>
  {
    Error_Handler( );
 8001ec4:	f000 f876 	bl	8001fb4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001ec8:	bf00      	nop
 8001eca:	3720      	adds	r7, #32
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	200002e8 	.word	0x200002e8
 8001ed4:	a0000140 	.word	0xa0000140

08001ed8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b089      	sub	sp, #36	; 0x24
 8001edc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	4b33      	ldr	r3, [pc, #204]	; (8001fb0 <_ZL12MX_GPIO_Initv+0xd8>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a32      	ldr	r2, [pc, #200]	; (8001fb0 <_ZL12MX_GPIO_Initv+0xd8>)
 8001ee8:	f043 0320 	orr.w	r3, r3, #32
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b30      	ldr	r3, [pc, #192]	; (8001fb0 <_ZL12MX_GPIO_Initv+0xd8>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0320 	and.w	r3, r3, #32
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	4b2c      	ldr	r3, [pc, #176]	; (8001fb0 <_ZL12MX_GPIO_Initv+0xd8>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a2b      	ldr	r2, [pc, #172]	; (8001fb0 <_ZL12MX_GPIO_Initv+0xd8>)
 8001f04:	f043 0304 	orr.w	r3, r3, #4
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b29      	ldr	r3, [pc, #164]	; (8001fb0 <_ZL12MX_GPIO_Initv+0xd8>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <_ZL12MX_GPIO_Initv+0xd8>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a24      	ldr	r2, [pc, #144]	; (8001fb0 <_ZL12MX_GPIO_Initv+0xd8>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <_ZL12MX_GPIO_Initv+0xd8>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <_ZL12MX_GPIO_Initv+0xd8>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a1d      	ldr	r2, [pc, #116]	; (8001fb0 <_ZL12MX_GPIO_Initv+0xd8>)
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <_ZL12MX_GPIO_Initv+0xd8>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <_ZL12MX_GPIO_Initv+0xd8>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a16      	ldr	r2, [pc, #88]	; (8001fb0 <_ZL12MX_GPIO_Initv+0xd8>)
 8001f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <_ZL12MX_GPIO_Initv+0xd8>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <_ZL12MX_GPIO_Initv+0xd8>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a0f      	ldr	r2, [pc, #60]	; (8001fb0 <_ZL12MX_GPIO_Initv+0xd8>)
 8001f74:	f043 0310 	orr.w	r3, r3, #16
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <_ZL12MX_GPIO_Initv+0xd8>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <_ZL12MX_GPIO_Initv+0xd8>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	4a08      	ldr	r2, [pc, #32]	; (8001fb0 <_ZL12MX_GPIO_Initv+0xd8>)
 8001f90:	f043 0308 	orr.w	r3, r3, #8
 8001f94:	6313      	str	r3, [r2, #48]	; 0x30
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <_ZL12MX_GPIO_Initv+0xd8>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]

}
 8001fa2:	bf00      	nop
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800

08001fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <SPIx_Init>:
  * @brief  SPIx Bus initialization
  * @param  None
  * @retval None
  */
static void SPIx_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001fc8:	4819      	ldr	r0, [pc, #100]	; (8002030 <SPIx_Init+0x6c>)
 8001fca:	f004 fb03 	bl	80065d4 <HAL_SPI_GetState>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d12b      	bne.n	800202c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001fd4:	4b16      	ldr	r3, [pc, #88]	; (8002030 <SPIx_Init+0x6c>)
 8001fd6:	4a17      	ldr	r2, [pc, #92]	; (8002034 <SPIx_Init+0x70>)
 8001fd8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <SPIx_Init+0x6c>)
 8001fdc:	2218      	movs	r2, #24
 8001fde:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <SPIx_Init+0x6c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <SPIx_Init+0x6c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001fec:	4b10      	ldr	r3, [pc, #64]	; (8002030 <SPIx_Init+0x6c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <SPIx_Init+0x6c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <SPIx_Init+0x6c>)
 8001ffa:	2207      	movs	r2, #7
 8001ffc:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <SPIx_Init+0x6c>)
 8002000:	2200      	movs	r2, #0
 8002002:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <SPIx_Init+0x6c>)
 8002006:	2200      	movs	r2, #0
 8002008:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <SPIx_Init+0x6c>)
 800200c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002010:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002012:	4b07      	ldr	r3, [pc, #28]	; (8002030 <SPIx_Init+0x6c>)
 8002014:	2200      	movs	r2, #0
 8002016:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <SPIx_Init+0x6c>)
 800201a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800201e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002020:	4803      	ldr	r0, [pc, #12]	; (8002030 <SPIx_Init+0x6c>)
 8002022:	f000 f853 	bl	80020cc <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002026:	4802      	ldr	r0, [pc, #8]	; (8002030 <SPIx_Init+0x6c>)
 8002028:	f003 fe69 	bl	8005cfe <HAL_SPI_Init>
  } 
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	2000031c 	.word	0x2000031c
 8002034:	40015000 	.word	0x40015000

08002038 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	b29a      	uxth	r2, r3
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <SPIx_Read+0x38>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f107 0108 	add.w	r1, r7, #8
 8002052:	4808      	ldr	r0, [pc, #32]	; (8002074 <SPIx_Read+0x3c>)
 8002054:	f004 f813 	bl	800607e <HAL_SPI_Receive>
 8002058:	4603      	mov	r3, r0
 800205a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002062:	f000 f827 	bl	80020b4 <SPIx_Error>
  }
  
  return readvalue;
 8002066:	68bb      	ldr	r3, [r7, #8]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000038 	.word	0x20000038
 8002074:	2000031c 	.word	0x2000031c

08002078 <SPIx_Write>:
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  * @retval None
  */
static void SPIx_Write(uint16_t Value)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002086:	4b09      	ldr	r3, [pc, #36]	; (80020ac <SPIx_Write+0x34>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	1db9      	adds	r1, r7, #6
 800208c:	2201      	movs	r2, #1
 800208e:	4808      	ldr	r0, [pc, #32]	; (80020b0 <SPIx_Write+0x38>)
 8002090:	f003 fec1 	bl	8005e16 <HAL_SPI_Transmit>
 8002094:	4603      	mov	r3, r0
 8002096:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800209e:	f000 f809 	bl	80020b4 <SPIx_Error>
  }
}
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000038 	.word	0x20000038
 80020b0:	2000031c 	.word	0x2000031c

080020b4 <SPIx_Error>:
  * @brief  SPIx error treatment function.
  * @param  None
  * @retval None
  */
static void SPIx_Error(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80020b8:	4803      	ldr	r0, [pc, #12]	; (80020c8 <SPIx_Error+0x14>)
 80020ba:	f003 fe84 	bl	8005dc6 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80020be:	f7ff ff81 	bl	8001fc4 <SPIx_Init>
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	2000031c 	.word	0x2000031c

080020cc <SPIx_MspInit>:
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	; 0x28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	4b17      	ldr	r3, [pc, #92]	; (8002138 <SPIx_MspInit+0x6c>)
 80020da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020dc:	4a16      	ldr	r2, [pc, #88]	; (8002138 <SPIx_MspInit+0x6c>)
 80020de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020e2:	6453      	str	r3, [r2, #68]	; 0x44
 80020e4:	4b14      	ldr	r3, [pc, #80]	; (8002138 <SPIx_MspInit+0x6c>)
 80020e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	4b10      	ldr	r3, [pc, #64]	; (8002138 <SPIx_MspInit+0x6c>)
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	4a0f      	ldr	r2, [pc, #60]	; (8002138 <SPIx_MspInit+0x6c>)
 80020fa:	f043 0320 	orr.w	r3, r3, #32
 80020fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002100:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <SPIx_MspInit+0x6c>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	f003 0320 	and.w	r3, r3, #32
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800210c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002110:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002112:	2302      	movs	r3, #2
 8002114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002116:	2302      	movs	r3, #2
 8002118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800211a:	2301      	movs	r3, #1
 800211c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800211e:	2305      	movs	r3, #5
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	4619      	mov	r1, r3
 8002128:	4804      	ldr	r0, [pc, #16]	; (800213c <SPIx_MspInit+0x70>)
 800212a:	f001 ffcd 	bl	80040c8 <HAL_GPIO_Init>
}
 800212e:	bf00      	nop
 8002130:	3728      	adds	r7, #40	; 0x28
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40023800 	.word	0x40023800
 800213c:	40021400 	.word	0x40021400

08002140 <LCD_IO_Init>:
  * @brief  Configures the LCD_SPI interface.
  * @param  None
  * @retval None
  */
void LCD_IO_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002146:	4b36      	ldr	r3, [pc, #216]	; (8002220 <LCD_IO_Init+0xe0>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d164      	bne.n	8002218 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800214e:	4b34      	ldr	r3, [pc, #208]	; (8002220 <LCD_IO_Init+0xe0>)
 8002150:	2201      	movs	r2, #1
 8002152:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	4b32      	ldr	r3, [pc, #200]	; (8002224 <LCD_IO_Init+0xe4>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	4a31      	ldr	r2, [pc, #196]	; (8002224 <LCD_IO_Init+0xe4>)
 800215e:	f043 0308 	orr.w	r3, r3, #8
 8002162:	6313      	str	r3, [r2, #48]	; 0x30
 8002164:	4b2f      	ldr	r3, [pc, #188]	; (8002224 <LCD_IO_Init+0xe4>)
 8002166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002170:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002174:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002176:	2301      	movs	r3, #1
 8002178:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800217e:	2302      	movs	r3, #2
 8002180:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002182:	f107 030c 	add.w	r3, r7, #12
 8002186:	4619      	mov	r1, r3
 8002188:	4827      	ldr	r0, [pc, #156]	; (8002228 <LCD_IO_Init+0xe8>)
 800218a:	f001 ff9d 	bl	80040c8 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	4b24      	ldr	r3, [pc, #144]	; (8002224 <LCD_IO_Init+0xe4>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a23      	ldr	r2, [pc, #140]	; (8002224 <LCD_IO_Init+0xe4>)
 8002198:	f043 0308 	orr.w	r3, r3, #8
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <LCD_IO_Init+0xe4>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80021aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80021b0:	2301      	movs	r3, #1
 80021b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80021b8:	2302      	movs	r3, #2
 80021ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80021bc:	f107 030c 	add.w	r3, r7, #12
 80021c0:	4619      	mov	r1, r3
 80021c2:	4819      	ldr	r0, [pc, #100]	; (8002228 <LCD_IO_Init+0xe8>)
 80021c4:	f001 ff80 	bl	80040c8 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80021c8:	2300      	movs	r3, #0
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	4b15      	ldr	r3, [pc, #84]	; (8002224 <LCD_IO_Init+0xe4>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	4a14      	ldr	r2, [pc, #80]	; (8002224 <LCD_IO_Init+0xe4>)
 80021d2:	f043 0304 	orr.w	r3, r3, #4
 80021d6:	6313      	str	r3, [r2, #48]	; 0x30
 80021d8:	4b12      	ldr	r3, [pc, #72]	; (8002224 <LCD_IO_Init+0xe4>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	603b      	str	r3, [r7, #0]
 80021e2:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80021e4:	2304      	movs	r3, #4
 80021e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80021e8:	2301      	movs	r3, #1
 80021ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80021f0:	2302      	movs	r3, #2
 80021f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80021f4:	f107 030c 	add.w	r3, r7, #12
 80021f8:	4619      	mov	r1, r3
 80021fa:	480c      	ldr	r0, [pc, #48]	; (800222c <LCD_IO_Init+0xec>)
 80021fc:	f001 ff64 	bl	80040c8 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002200:	2200      	movs	r2, #0
 8002202:	2104      	movs	r1, #4
 8002204:	4809      	ldr	r0, [pc, #36]	; (800222c <LCD_IO_Init+0xec>)
 8002206:	f002 fa13 	bl	8004630 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800220a:	2201      	movs	r2, #1
 800220c:	2104      	movs	r1, #4
 800220e:	4807      	ldr	r0, [pc, #28]	; (800222c <LCD_IO_Init+0xec>)
 8002210:	f002 fa0e 	bl	8004630 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002214:	f7ff fed6 	bl	8001fc4 <SPIx_Init>
  }
}
 8002218:	bf00      	nop
 800221a:	3720      	adds	r7, #32
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000374 	.word	0x20000374
 8002224:	40023800 	.word	0x40023800
 8002228:	40020c00 	.word	0x40020c00
 800222c:	40020800 	.word	0x40020800

08002230 <LCD_IO_WriteData>:
  * @brief  Writes register value.
  * @param  None
  * @retval None
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800223a:	2201      	movs	r2, #1
 800223c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002240:	480a      	ldr	r0, [pc, #40]	; (800226c <LCD_IO_WriteData+0x3c>)
 8002242:	f002 f9f5 	bl	8004630 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002246:	2200      	movs	r2, #0
 8002248:	2104      	movs	r1, #4
 800224a:	4809      	ldr	r0, [pc, #36]	; (8002270 <LCD_IO_WriteData+0x40>)
 800224c:	f002 f9f0 	bl	8004630 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002250:	88fb      	ldrh	r3, [r7, #6]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff ff10 	bl	8002078 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002258:	2201      	movs	r2, #1
 800225a:	2104      	movs	r1, #4
 800225c:	4804      	ldr	r0, [pc, #16]	; (8002270 <LCD_IO_WriteData+0x40>)
 800225e:	f002 f9e7 	bl	8004630 <HAL_GPIO_WritePin>
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40020c00 	.word	0x40020c00
 8002270:	40020800 	.word	0x40020800

08002274 <LCD_IO_WriteReg>:
  * @brief  Writes register address.
  * @param  None
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800227e:	2200      	movs	r2, #0
 8002280:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002284:	480a      	ldr	r0, [pc, #40]	; (80022b0 <LCD_IO_WriteReg+0x3c>)
 8002286:	f002 f9d3 	bl	8004630 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800228a:	2200      	movs	r2, #0
 800228c:	2104      	movs	r1, #4
 800228e:	4809      	ldr	r0, [pc, #36]	; (80022b4 <LCD_IO_WriteReg+0x40>)
 8002290:	f002 f9ce 	bl	8004630 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	b29b      	uxth	r3, r3
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff feed 	bl	8002078 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800229e:	2201      	movs	r2, #1
 80022a0:	2104      	movs	r1, #4
 80022a2:	4804      	ldr	r0, [pc, #16]	; (80022b4 <LCD_IO_WriteReg+0x40>)
 80022a4:	f002 f9c4 	bl	8004630 <HAL_GPIO_WritePin>
}
 80022a8:	bf00      	nop
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40020c00 	.word	0x40020c00
 80022b4:	40020800 	.word	0x40020800

080022b8 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	460a      	mov	r2, r1
 80022c2:	80fb      	strh	r3, [r7, #6]
 80022c4:	4613      	mov	r3, r2
 80022c6:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80022cc:	2200      	movs	r2, #0
 80022ce:	2104      	movs	r1, #4
 80022d0:	4810      	ldr	r0, [pc, #64]	; (8002314 <LCD_IO_ReadData+0x5c>)
 80022d2:	f002 f9ad 	bl	8004630 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80022d6:	2200      	movs	r2, #0
 80022d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022dc:	480e      	ldr	r0, [pc, #56]	; (8002318 <LCD_IO_ReadData+0x60>)
 80022de:	f002 f9a7 	bl	8004630 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80022e2:	88fb      	ldrh	r3, [r7, #6]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff fec7 	bl	8002078 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80022ea:	797b      	ldrb	r3, [r7, #5]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fea3 	bl	8002038 <SPIx_Read>
 80022f2:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80022f4:	2201      	movs	r2, #1
 80022f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022fa:	4807      	ldr	r0, [pc, #28]	; (8002318 <LCD_IO_ReadData+0x60>)
 80022fc:	f002 f998 	bl	8004630 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002300:	2201      	movs	r2, #1
 8002302:	2104      	movs	r1, #4
 8002304:	4803      	ldr	r0, [pc, #12]	; (8002314 <LCD_IO_ReadData+0x5c>)
 8002306:	f002 f993 	bl	8004630 <HAL_GPIO_WritePin>
  
  return readvalue;
 800230a:	68fb      	ldr	r3, [r7, #12]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40020800 	.word	0x40020800
 8002318:	40020c00 	.word	0x40020c00

0800231c <LCD_Delay>:
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  * @retval None
  */
void LCD_Delay(uint32_t Delay)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f001 f953 	bl	80035d0 <HAL_Delay>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002338:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <BSP_LCD_Init+0xbc>)
 800233a:	4a2e      	ldr	r2, [pc, #184]	; (80023f4 <BSP_LCD_Init+0xc0>)
 800233c:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800233e:	4b2c      	ldr	r3, [pc, #176]	; (80023f0 <BSP_LCD_Init+0xbc>)
 8002340:	2209      	movs	r2, #9
 8002342:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002344:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <BSP_LCD_Init+0xbc>)
 8002346:	2201      	movs	r2, #1
 8002348:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800234a:	4b29      	ldr	r3, [pc, #164]	; (80023f0 <BSP_LCD_Init+0xbc>)
 800234c:	221d      	movs	r2, #29
 800234e:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002350:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <BSP_LCD_Init+0xbc>)
 8002352:	2203      	movs	r2, #3
 8002354:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002356:	4b26      	ldr	r3, [pc, #152]	; (80023f0 <BSP_LCD_Init+0xbc>)
 8002358:	f240 120d 	movw	r2, #269	; 0x10d
 800235c:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800235e:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <BSP_LCD_Init+0xbc>)
 8002360:	f240 1243 	movw	r2, #323	; 0x143
 8002364:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002366:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <BSP_LCD_Init+0xbc>)
 8002368:	f240 1217 	movw	r2, #279	; 0x117
 800236c:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800236e:	4b20      	ldr	r3, [pc, #128]	; (80023f0 <BSP_LCD_Init+0xbc>)
 8002370:	f240 1247 	movw	r2, #327	; 0x147
 8002374:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002376:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <BSP_LCD_Init+0xbc>)
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800237e:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <BSP_LCD_Init+0xbc>)
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002386:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <BSP_LCD_Init+0xbc>)
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800238e:	4b1a      	ldr	r3, [pc, #104]	; (80023f8 <BSP_LCD_Init+0xc4>)
 8002390:	2208      	movs	r2, #8
 8002392:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002394:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <BSP_LCD_Init+0xc4>)
 8002396:	22c0      	movs	r2, #192	; 0xc0
 8002398:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800239a:	4b17      	ldr	r3, [pc, #92]	; (80023f8 <BSP_LCD_Init+0xc4>)
 800239c:	2204      	movs	r2, #4
 800239e:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80023a0:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <BSP_LCD_Init+0xc4>)
 80023a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023a6:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80023a8:	4813      	ldr	r0, [pc, #76]	; (80023f8 <BSP_LCD_Init+0xc4>)
 80023aa:	f003 fa6b 	bl	8005884 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <BSP_LCD_Init+0xbc>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80023b4:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <BSP_LCD_Init+0xbc>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80023ba:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <BSP_LCD_Init+0xbc>)
 80023bc:	2200      	movs	r2, #0
 80023be:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80023c0:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <BSP_LCD_Init+0xbc>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	611a      	str	r2, [r3, #16]
    
    MspInit();
 80023c6:	f000 f9c7 	bl	8002758 <MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80023ca:	4809      	ldr	r0, [pc, #36]	; (80023f0 <BSP_LCD_Init+0xbc>)
 80023cc:	f002 fafe 	bl	80049cc <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80023d0:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <BSP_LCD_Init+0xc8>)
 80023d2:	4a0b      	ldr	r2, [pc, #44]	; (8002400 <BSP_LCD_Init+0xcc>)
 80023d4:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80023d6:	4b09      	ldr	r3, [pc, #36]	; (80023fc <BSP_LCD_Init+0xc8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80023de:	f000 fac9 	bl	8002974 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80023e2:	4808      	ldr	r0, [pc, #32]	; (8002404 <BSP_LCD_Init+0xd0>)
 80023e4:	f000 f8b4 	bl	8002550 <BSP_LCD_SetFont>

  return LCD_OK;
 80023e8:	2300      	movs	r3, #0
}  
 80023ea:	4618      	mov	r0, r3
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000378 	.word	0x20000378
 80023f4:	40016800 	.word	0x40016800
 80023f8:	20000460 	.word	0x20000460
 80023fc:	20000580 	.word	0x20000580
 8002400:	20000000 	.word	0x20000000
 8002404:	2000003c 	.word	0x2000003c

08002408 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 800240c:	4b03      	ldr	r3, [pc, #12]	; (800241c <BSP_LCD_GetXSize+0x14>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002412:	4798      	blx	r3
 8002414:	4603      	mov	r3, r0
}
 8002416:	4618      	mov	r0, r3
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000580 	.word	0x20000580

08002420 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None    
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002424:	4b03      	ldr	r3, [pc, #12]	; (8002434 <BSP_LCD_GetYSize+0x14>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242a:	4798      	blx	r3
 800242c:	4603      	mov	r3, r0
}
 800242e:	4618      	mov	r0, r3
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000580 	.word	0x20000580

08002438 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002438:	b580      	push	{r7, lr}
 800243a:	b090      	sub	sp, #64	; 0x40
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	6039      	str	r1, [r7, #0]
 8002442:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002448:	f7ff ffde 	bl	8002408 <BSP_LCD_GetXSize>
 800244c:	4603      	mov	r3, r0
 800244e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002454:	f7ff ffe4 	bl	8002420 <BSP_LCD_GetYSize>
 8002458:	4603      	mov	r3, r0
 800245a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800245c:	2300      	movs	r3, #0
 800245e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002464:	23ff      	movs	r3, #255	; 0xff
 8002466:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800247e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002482:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002484:	2307      	movs	r3, #7
 8002486:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002488:	f7ff ffbe 	bl	8002408 <BSP_LCD_GetXSize>
 800248c:	4603      	mov	r3, r0
 800248e:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002490:	f7ff ffc6 	bl	8002420 <BSP_LCD_GetYSize>
 8002494:	4603      	mov	r3, r0
 8002496:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002498:	88fa      	ldrh	r2, [r7, #6]
 800249a:	f107 030c 	add.w	r3, r7, #12
 800249e:	4619      	mov	r1, r3
 80024a0:	4814      	ldr	r0, [pc, #80]	; (80024f4 <BSP_LCD_LayerDefaultInit+0xbc>)
 80024a2:	f002 fb63 	bl	8004b6c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80024a6:	88fa      	ldrh	r2, [r7, #6]
 80024a8:	4913      	ldr	r1, [pc, #76]	; (80024f8 <BSP_LCD_LayerDefaultInit+0xc0>)
 80024aa:	4613      	mov	r3, r2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	4413      	add	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	3304      	adds	r3, #4
 80024b6:	f04f 32ff 	mov.w	r2, #4294967295
 80024ba:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80024bc:	88fa      	ldrh	r2, [r7, #6]
 80024be:	490e      	ldr	r1, [pc, #56]	; (80024f8 <BSP_LCD_LayerDefaultInit+0xc0>)
 80024c0:	4613      	mov	r3, r2
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	4413      	add	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	3308      	adds	r3, #8
 80024cc:	4a0b      	ldr	r2, [pc, #44]	; (80024fc <BSP_LCD_LayerDefaultInit+0xc4>)
 80024ce:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80024d0:	88fa      	ldrh	r2, [r7, #6]
 80024d2:	4909      	ldr	r1, [pc, #36]	; (80024f8 <BSP_LCD_LayerDefaultInit+0xc0>)
 80024d4:	4613      	mov	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80024e2:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80024e4:	4803      	ldr	r0, [pc, #12]	; (80024f4 <BSP_LCD_LayerDefaultInit+0xbc>)
 80024e6:	f002 fb7f 	bl	8004be8 <HAL_LTDC_EnableDither>
}
 80024ea:	bf00      	nop
 80024ec:	3740      	adds	r7, #64	; 0x40
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000378 	.word	0x20000378
 80024f8:	20000494 	.word	0x20000494
 80024fc:	2000003c 	.word	0x2000003c

08002500 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002508:	4a04      	ldr	r2, [pc, #16]	; (800251c <BSP_LCD_SelectLayer+0x1c>)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6013      	str	r3, [r2, #0]
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000490 	.word	0x20000490

08002520 <BSP_LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002528:	4b07      	ldr	r3, [pc, #28]	; (8002548 <BSP_LCD_SetTextColor+0x28>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4907      	ldr	r1, [pc, #28]	; (800254c <BSP_LCD_SetTextColor+0x2c>)
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	601a      	str	r2, [r3, #0]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	20000490 	.word	0x20000490
 800254c:	20000494 	.word	0x20000494

08002550 <BSP_LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002558:	4b08      	ldr	r3, [pc, #32]	; (800257c <BSP_LCD_SetFont+0x2c>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4908      	ldr	r1, [pc, #32]	; (8002580 <BSP_LCD_SetFont+0x30>)
 800255e:	4613      	mov	r3, r2
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	4413      	add	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	3308      	adds	r3, #8
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	601a      	str	r2, [r3, #0]
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20000490 	.word	0x20000490
 8002580:	20000494 	.word	0x20000494

08002584 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002586:	b085      	sub	sp, #20
 8002588:	af02      	add	r7, sp, #8
 800258a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800258c:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <BSP_LCD_Clear+0x48>)
 800258e:	681c      	ldr	r4, [r3, #0]
 8002590:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <BSP_LCD_Clear+0x48>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <BSP_LCD_Clear+0x4c>)
 8002596:	2134      	movs	r1, #52	; 0x34
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	4413      	add	r3, r2
 800259e:	335c      	adds	r3, #92	; 0x5c
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	461d      	mov	r5, r3
 80025a4:	f7ff ff30 	bl	8002408 <BSP_LCD_GetXSize>
 80025a8:	4606      	mov	r6, r0
 80025aa:	f7ff ff39 	bl	8002420 <BSP_LCD_GetYSize>
 80025ae:	4602      	mov	r2, r0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	9301      	str	r3, [sp, #4]
 80025b4:	2300      	movs	r3, #0
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	4613      	mov	r3, r2
 80025ba:	4632      	mov	r2, r6
 80025bc:	4629      	mov	r1, r5
 80025be:	4620      	mov	r0, r4
 80025c0:	f000 f9a0 	bl	8002904 <FillBuffer>
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025cc:	20000490 	.word	0x20000490
 80025d0:	20000378 	.word	0x20000378

080025d4 <BSP_LCD_DrawHLine>:
  * @param  Ypos: the Y position
  * @param  Length: line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80025d4:	b5b0      	push	{r4, r5, r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af02      	add	r7, sp, #8
 80025da:	4603      	mov	r3, r0
 80025dc:	80fb      	strh	r3, [r7, #6]
 80025de:	460b      	mov	r3, r1
 80025e0:	80bb      	strh	r3, [r7, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80025ea:	4b16      	ldr	r3, [pc, #88]	; (8002644 <BSP_LCD_DrawHLine+0x70>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a16      	ldr	r2, [pc, #88]	; (8002648 <BSP_LCD_DrawHLine+0x74>)
 80025f0:	2134      	movs	r1, #52	; 0x34
 80025f2:	fb01 f303 	mul.w	r3, r1, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	335c      	adds	r3, #92	; 0x5c
 80025fa:	681c      	ldr	r4, [r3, #0]
 80025fc:	f7ff ff04 	bl	8002408 <BSP_LCD_GetXSize>
 8002600:	4602      	mov	r2, r0
 8002602:	88bb      	ldrh	r3, [r7, #4]
 8002604:	fb03 f202 	mul.w	r2, r3, r2
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4423      	add	r3, r4
 8002610:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002612:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <BSP_LCD_DrawHLine+0x70>)
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	68fc      	ldr	r4, [r7, #12]
 8002618:	887d      	ldrh	r5, [r7, #2]
 800261a:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <BSP_LCD_DrawHLine+0x70>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	490b      	ldr	r1, [pc, #44]	; (800264c <BSP_LCD_DrawHLine+0x78>)
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	2300      	movs	r3, #0
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2301      	movs	r3, #1
 8002634:	462a      	mov	r2, r5
 8002636:	4621      	mov	r1, r4
 8002638:	f000 f964 	bl	8002904 <FillBuffer>
}
 800263c:	bf00      	nop
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bdb0      	pop	{r4, r5, r7, pc}
 8002644:	20000490 	.word	0x20000490
 8002648:	20000378 	.word	0x20000378
 800264c:	20000494 	.word	0x20000494

08002650 <BSP_LCD_DrawVLine>:
  * @param  Ypos: the Y position
  * @param  Length: line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002652:	b087      	sub	sp, #28
 8002654:	af02      	add	r7, sp, #8
 8002656:	4603      	mov	r3, r0
 8002658:	80fb      	strh	r3, [r7, #6]
 800265a:	460b      	mov	r3, r1
 800265c:	80bb      	strh	r3, [r7, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002666:	4b18      	ldr	r3, [pc, #96]	; (80026c8 <BSP_LCD_DrawVLine+0x78>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a18      	ldr	r2, [pc, #96]	; (80026cc <BSP_LCD_DrawVLine+0x7c>)
 800266c:	2134      	movs	r1, #52	; 0x34
 800266e:	fb01 f303 	mul.w	r3, r1, r3
 8002672:	4413      	add	r3, r2
 8002674:	335c      	adds	r3, #92	; 0x5c
 8002676:	681c      	ldr	r4, [r3, #0]
 8002678:	f7ff fec6 	bl	8002408 <BSP_LCD_GetXSize>
 800267c:	4602      	mov	r2, r0
 800267e:	88bb      	ldrh	r3, [r7, #4]
 8002680:	fb03 f202 	mul.w	r2, r3, r2
 8002684:	88fb      	ldrh	r3, [r7, #6]
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4423      	add	r3, r4
 800268c:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800268e:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <BSP_LCD_DrawVLine+0x78>)
 8002690:	681c      	ldr	r4, [r3, #0]
 8002692:	68fd      	ldr	r5, [r7, #12]
 8002694:	887e      	ldrh	r6, [r7, #2]
 8002696:	f7ff feb7 	bl	8002408 <BSP_LCD_GetXSize>
 800269a:	4603      	mov	r3, r0
 800269c:	1e59      	subs	r1, r3, #1
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <BSP_LCD_DrawVLine+0x78>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	480b      	ldr	r0, [pc, #44]	; (80026d0 <BSP_LCD_DrawVLine+0x80>)
 80026a4:	4613      	mov	r3, r2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4403      	add	r3, r0
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	9301      	str	r3, [sp, #4]
 80026b2:	9100      	str	r1, [sp, #0]
 80026b4:	4633      	mov	r3, r6
 80026b6:	2201      	movs	r2, #1
 80026b8:	4629      	mov	r1, r5
 80026ba:	4620      	mov	r0, r4
 80026bc:	f000 f922 	bl	8002904 <FillBuffer>
}
 80026c0:	bf00      	nop
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026c8:	20000490 	.word	0x20000490
 80026cc:	20000378 	.word	0x20000378
 80026d0:	20000494 	.word	0x20000494

080026d4 <BSP_LCD_DrawRect>:
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80026d4:	b590      	push	{r4, r7, lr}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4604      	mov	r4, r0
 80026dc:	4608      	mov	r0, r1
 80026de:	4611      	mov	r1, r2
 80026e0:	461a      	mov	r2, r3
 80026e2:	4623      	mov	r3, r4
 80026e4:	80fb      	strh	r3, [r7, #6]
 80026e6:	4603      	mov	r3, r0
 80026e8:	80bb      	strh	r3, [r7, #4]
 80026ea:	460b      	mov	r3, r1
 80026ec:	807b      	strh	r3, [r7, #2]
 80026ee:	4613      	mov	r3, r2
 80026f0:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 80026f2:	887a      	ldrh	r2, [r7, #2]
 80026f4:	88b9      	ldrh	r1, [r7, #4]
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff6b 	bl	80025d4 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 80026fe:	88ba      	ldrh	r2, [r7, #4]
 8002700:	883b      	ldrh	r3, [r7, #0]
 8002702:	4413      	add	r3, r2
 8002704:	b299      	uxth	r1, r3
 8002706:	887a      	ldrh	r2, [r7, #2]
 8002708:	88fb      	ldrh	r3, [r7, #6]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff ff62 	bl	80025d4 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8002710:	883a      	ldrh	r2, [r7, #0]
 8002712:	88b9      	ldrh	r1, [r7, #4]
 8002714:	88fb      	ldrh	r3, [r7, #6]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff ff9a 	bl	8002650 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 800271c:	88fa      	ldrh	r2, [r7, #6]
 800271e:	887b      	ldrh	r3, [r7, #2]
 8002720:	4413      	add	r3, r2
 8002722:	b29b      	uxth	r3, r3
 8002724:	883a      	ldrh	r2, [r7, #0]
 8002726:	88b9      	ldrh	r1, [r7, #4]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff91 	bl	8002650 <BSP_LCD_DrawVLine>
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bd90      	pop	{r4, r7, pc}
	...

08002738 <BSP_LCD_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <BSP_LCD_DisplayOn+0x1c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002746:	4b03      	ldr	r3, [pc, #12]	; (8002754 <BSP_LCD_DisplayOn+0x1c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	4798      	blx	r3
  }
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000580 	.word	0x20000580

08002758 <MspInit>:
  * @brief  Initializes the LTDC MSP.
  * @param  None
  * @retval None
  */
static void MspInit(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08e      	sub	sp, #56	; 0x38
 800275c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __LTDC_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	623b      	str	r3, [r7, #32]
 8002762:	4b61      	ldr	r3, [pc, #388]	; (80028e8 <MspInit+0x190>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	4a60      	ldr	r2, [pc, #384]	; (80028e8 <MspInit+0x190>)
 8002768:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800276c:	6453      	str	r3, [r2, #68]	; 0x44
 800276e:	4b5e      	ldr	r3, [pc, #376]	; (80028e8 <MspInit+0x190>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002776:	623b      	str	r3, [r7, #32]
 8002778:	6a3b      	ldr	r3, [r7, #32]
  __DMA2D_CLK_ENABLE(); 
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
 800277e:	4b5a      	ldr	r3, [pc, #360]	; (80028e8 <MspInit+0x190>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	4a59      	ldr	r2, [pc, #356]	; (80028e8 <MspInit+0x190>)
 8002784:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002788:	6313      	str	r3, [r2, #48]	; 0x30
 800278a:	4b57      	ldr	r3, [pc, #348]	; (80028e8 <MspInit+0x190>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002792:	61fb      	str	r3, [r7, #28]
 8002794:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __GPIOA_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	61bb      	str	r3, [r7, #24]
 800279a:	4b53      	ldr	r3, [pc, #332]	; (80028e8 <MspInit+0x190>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4a52      	ldr	r2, [pc, #328]	; (80028e8 <MspInit+0x190>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
 80027a6:	4b50      	ldr	r3, [pc, #320]	; (80028e8 <MspInit+0x190>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	61bb      	str	r3, [r7, #24]
 80027b0:	69bb      	ldr	r3, [r7, #24]
  __GPIOB_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	4b4c      	ldr	r3, [pc, #304]	; (80028e8 <MspInit+0x190>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a4b      	ldr	r2, [pc, #300]	; (80028e8 <MspInit+0x190>)
 80027bc:	f043 0302 	orr.w	r3, r3, #2
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b49      	ldr	r3, [pc, #292]	; (80028e8 <MspInit+0x190>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	697b      	ldr	r3, [r7, #20]
  __GPIOC_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	4b45      	ldr	r3, [pc, #276]	; (80028e8 <MspInit+0x190>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	4a44      	ldr	r2, [pc, #272]	; (80028e8 <MspInit+0x190>)
 80027d8:	f043 0304 	orr.w	r3, r3, #4
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
 80027de:	4b42      	ldr	r3, [pc, #264]	; (80028e8 <MspInit+0x190>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	693b      	ldr	r3, [r7, #16]
  __GPIOD_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	4b3e      	ldr	r3, [pc, #248]	; (80028e8 <MspInit+0x190>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	4a3d      	ldr	r2, [pc, #244]	; (80028e8 <MspInit+0x190>)
 80027f4:	f043 0308 	orr.w	r3, r3, #8
 80027f8:	6313      	str	r3, [r2, #48]	; 0x30
 80027fa:	4b3b      	ldr	r3, [pc, #236]	; (80028e8 <MspInit+0x190>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
  __GPIOF_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	4b37      	ldr	r3, [pc, #220]	; (80028e8 <MspInit+0x190>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	4a36      	ldr	r2, [pc, #216]	; (80028e8 <MspInit+0x190>)
 8002810:	f043 0320 	orr.w	r3, r3, #32
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
 8002816:	4b34      	ldr	r3, [pc, #208]	; (80028e8 <MspInit+0x190>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f003 0320 	and.w	r3, r3, #32
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
  __GPIOG_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	607b      	str	r3, [r7, #4]
 8002826:	4b30      	ldr	r3, [pc, #192]	; (80028e8 <MspInit+0x190>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	4a2f      	ldr	r2, [pc, #188]	; (80028e8 <MspInit+0x190>)
 800282c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002830:	6313      	str	r3, [r2, #48]	; 0x30
 8002832:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <MspInit+0x190>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283a:	607b      	str	r3, [r7, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800283e:	f641 0358 	movw	r3, #6232	; 0x1858
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002844:	2302      	movs	r3, #2
 8002846:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800284c:	2302      	movs	r3, #2
 800284e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002850:	230e      	movs	r3, #14
 8002852:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002858:	4619      	mov	r1, r3
 800285a:	4824      	ldr	r0, [pc, #144]	; (80028ec <MspInit+0x194>)
 800285c:	f001 fc34 	bl	80040c8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002860:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800286a:	4619      	mov	r1, r3
 800286c:	4820      	ldr	r0, [pc, #128]	; (80028f0 <MspInit+0x198>)
 800286e:	f001 fc2b 	bl	80040c8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002872:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800287c:	4619      	mov	r1, r3
 800287e:	481d      	ldr	r0, [pc, #116]	; (80028f4 <MspInit+0x19c>)
 8002880:	f001 fc22 	bl	80040c8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002884:	2348      	movs	r3, #72	; 0x48
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800288c:	4619      	mov	r1, r3
 800288e:	481a      	ldr	r0, [pc, #104]	; (80028f8 <MspInit+0x1a0>)
 8002890:	f001 fc1a 	bl	80040c8 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800289a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800289e:	4619      	mov	r1, r3
 80028a0:	4816      	ldr	r0, [pc, #88]	; (80028fc <MspInit+0x1a4>)
 80028a2:	f001 fc11 	bl	80040c8 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80028a6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80028ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b0:	4619      	mov	r1, r3
 80028b2:	4813      	ldr	r0, [pc, #76]	; (8002900 <MspInit+0x1a8>)
 80028b4:	f001 fc08 	bl	80040c8 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80028b8:	2303      	movs	r3, #3
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80028bc:	2309      	movs	r3, #9
 80028be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80028c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c4:	4619      	mov	r1, r3
 80028c6:	480a      	ldr	r0, [pc, #40]	; (80028f0 <MspInit+0x198>)
 80028c8:	f001 fbfe 	bl	80040c8 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80028cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80028d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d6:	4619      	mov	r1, r3
 80028d8:	4809      	ldr	r0, [pc, #36]	; (8002900 <MspInit+0x1a8>)
 80028da:	f001 fbf5 	bl	80040c8 <HAL_GPIO_Init>
}
 80028de:	bf00      	nop
 80028e0:	3738      	adds	r7, #56	; 0x38
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40020000 	.word	0x40020000
 80028f0:	40020400 	.word	0x40020400
 80028f4:	40020800 	.word	0x40020800
 80028f8:	40020c00 	.word	0x40020c00
 80028fc:	40021400 	.word	0x40021400
 8002900:	40021800 	.word	0x40021800

08002904 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  * @retval None
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af02      	add	r7, sp, #8
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
 8002910:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002912:	4b16      	ldr	r3, [pc, #88]	; (800296c <FillBuffer+0x68>)
 8002914:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002918:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800291a:	4b14      	ldr	r3, [pc, #80]	; (800296c <FillBuffer+0x68>)
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002920:	4a12      	ldr	r2, [pc, #72]	; (800296c <FillBuffer+0x68>)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002926:	4b11      	ldr	r3, [pc, #68]	; (800296c <FillBuffer+0x68>)
 8002928:	4a11      	ldr	r2, [pc, #68]	; (8002970 <FillBuffer+0x6c>)
 800292a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 800292c:	480f      	ldr	r0, [pc, #60]	; (800296c <FillBuffer+0x68>)
 800292e:	f001 f93f 	bl	8003bb0 <HAL_DMA2D_Init>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d115      	bne.n	8002964 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002938:	68f9      	ldr	r1, [r7, #12]
 800293a:	480c      	ldr	r0, [pc, #48]	; (800296c <FillBuffer+0x68>)
 800293c:	f001 fa96 	bl	8003e6c <HAL_DMA2D_ConfigLayer>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10e      	bne.n	8002964 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69f9      	ldr	r1, [r7, #28]
 8002950:	4806      	ldr	r0, [pc, #24]	; (800296c <FillBuffer+0x68>)
 8002952:	f001 f976 	bl	8003c42 <HAL_DMA2D_Start>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d103      	bne.n	8002964 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 800295c:	210a      	movs	r1, #10
 800295e:	4803      	ldr	r0, [pc, #12]	; (800296c <FillBuffer+0x68>)
 8002960:	f001 f99a 	bl	8003c98 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002964:	bf00      	nop
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000420 	.word	0x20000420
 8002970:	4002b000 	.word	0x4002b000

08002974 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param  None
  * @retval None
  */
void BSP_SDRAM_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002978:	4b22      	ldr	r3, [pc, #136]	; (8002a04 <BSP_SDRAM_Init+0x90>)
 800297a:	4a23      	ldr	r2, [pc, #140]	; (8002a08 <BSP_SDRAM_Init+0x94>)
 800297c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800297e:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <BSP_SDRAM_Init+0x98>)
 8002980:	2202      	movs	r2, #2
 8002982:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002984:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <BSP_SDRAM_Init+0x98>)
 8002986:	2207      	movs	r2, #7
 8002988:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <BSP_SDRAM_Init+0x98>)
 800298c:	2204      	movs	r2, #4
 800298e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002990:	4b1e      	ldr	r3, [pc, #120]	; (8002a0c <BSP_SDRAM_Init+0x98>)
 8002992:	2207      	movs	r2, #7
 8002994:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002996:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <BSP_SDRAM_Init+0x98>)
 8002998:	2202      	movs	r2, #2
 800299a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800299c:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <BSP_SDRAM_Init+0x98>)
 800299e:	2202      	movs	r2, #2
 80029a0:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80029a2:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <BSP_SDRAM_Init+0x98>)
 80029a4:	2202      	movs	r2, #2
 80029a6:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80029a8:	4b16      	ldr	r3, [pc, #88]	; (8002a04 <BSP_SDRAM_Init+0x90>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80029ae:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <BSP_SDRAM_Init+0x90>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80029b4:	4b13      	ldr	r3, [pc, #76]	; (8002a04 <BSP_SDRAM_Init+0x90>)
 80029b6:	2204      	movs	r2, #4
 80029b8:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80029ba:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <BSP_SDRAM_Init+0x90>)
 80029bc:	2210      	movs	r2, #16
 80029be:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80029c0:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <BSP_SDRAM_Init+0x90>)
 80029c2:	2240      	movs	r2, #64	; 0x40
 80029c4:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80029c6:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <BSP_SDRAM_Init+0x90>)
 80029c8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80029cc:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80029ce:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <BSP_SDRAM_Init+0x90>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <BSP_SDRAM_Init+0x90>)
 80029d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029da:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80029dc:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <BSP_SDRAM_Init+0x90>)
 80029de:	2200      	movs	r2, #0
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <BSP_SDRAM_Init+0x90>)
 80029e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029e8:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  MspInit();
 80029ea:	f000 f871 	bl	8002ad0 <MspInit>
  HAL_SDRAM_Init(&SdramHandle, &Timing);
 80029ee:	4907      	ldr	r1, [pc, #28]	; (8002a0c <BSP_SDRAM_Init+0x98>)
 80029f0:	4804      	ldr	r0, [pc, #16]	; (8002a04 <BSP_SDRAM_Init+0x90>)
 80029f2:	f003 f905 	bl	8005c00 <HAL_SDRAM_Init>
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80029f6:	f240 506a 	movw	r0, #1386	; 0x56a
 80029fa:	f000 f809 	bl	8002a10 <BSP_SDRAM_Initialization_sequence>
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200004ac 	.word	0x200004ac
 8002a08:	a0000140 	.word	0xa0000140
 8002a0c:	200004e0 	.word	0x200004e0

08002a10 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002a1c:	4b2a      	ldr	r3, [pc, #168]	; (8002ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002a22:	4b29      	ldr	r3, [pc, #164]	; (8002ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a24:	2208      	movs	r2, #8
 8002a26:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002a28:	4b27      	ldr	r3, [pc, #156]	; (8002ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002a2e:	4b26      	ldr	r3, [pc, #152]	; (8002ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a38:	4923      	ldr	r1, [pc, #140]	; (8002ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a3a:	4824      	ldr	r0, [pc, #144]	; (8002acc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a3c:	f003 f914 	bl	8005c68 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002a40:	2001      	movs	r0, #1
 8002a42:	f000 fdc5 	bl	80035d0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002a46:	4b20      	ldr	r3, [pc, #128]	; (8002ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a48:	2202      	movs	r2, #2
 8002a4a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002a4c:	4b1e      	ldr	r3, [pc, #120]	; (8002ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a4e:	2208      	movs	r2, #8
 8002a50:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002a52:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002a58:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a62:	4919      	ldr	r1, [pc, #100]	; (8002ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a64:	4819      	ldr	r0, [pc, #100]	; (8002acc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a66:	f003 f8ff 	bl	8005c68 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002a6a:	4b17      	ldr	r3, [pc, #92]	; (8002ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002a70:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a72:	2208      	movs	r2, #8
 8002a74:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002a76:	4b14      	ldr	r3, [pc, #80]	; (8002ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a78:	2204      	movs	r2, #4
 8002a7a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002a7c:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002a82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a86:	4910      	ldr	r1, [pc, #64]	; (8002ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a88:	4810      	ldr	r0, [pc, #64]	; (8002acc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a8a:	f003 f8ed 	bl	8005c68 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002a8e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002a92:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002a94:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a96:	2204      	movs	r2, #4
 8002a98:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a9c:	2208      	movs	r2, #8
 8002a9e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002aa0:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4a07      	ldr	r2, [pc, #28]	; (8002ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002aaa:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002aac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ab0:	4905      	ldr	r1, [pc, #20]	; (8002ac8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ab2:	4806      	ldr	r0, [pc, #24]	; (8002acc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ab4:	f003 f8d8 	bl	8005c68 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4804      	ldr	r0, [pc, #16]	; (8002acc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002abc:	f003 f8ff 	bl	8005cbe <HAL_SDRAM_ProgramRefreshRate>
}
 8002ac0:	bf00      	nop
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	200004fc 	.word	0x200004fc
 8002acc:	200004ac 	.word	0x200004ac

08002ad0 <MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  None
  * @retval None
  */
static void MspInit(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08e      	sub	sp, #56	; 0x38
 8002ad4:	af00      	add	r7, sp, #0
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;
  SDRAM_HandleTypeDef  *hsdram = &SdramHandle;
 8002ad6:	4b79      	ldr	r3, [pc, #484]	; (8002cbc <MspInit+0x1ec>)
 8002ad8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Enable FMC clock */
  __FMC_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	4b78      	ldr	r3, [pc, #480]	; (8002cc0 <MspInit+0x1f0>)
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae2:	4a77      	ldr	r2, [pc, #476]	; (8002cc0 <MspInit+0x1f0>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	6393      	str	r3, [r2, #56]	; 0x38
 8002aea:	4b75      	ldr	r3, [pc, #468]	; (8002cc0 <MspInit+0x1f0>)
 8002aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	61fb      	str	r3, [r7, #28]
 8002af4:	69fb      	ldr	r3, [r7, #28]

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	4b71      	ldr	r3, [pc, #452]	; (8002cc0 <MspInit+0x1f0>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4a70      	ldr	r2, [pc, #448]	; (8002cc0 <MspInit+0x1f0>)
 8002b00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b6e      	ldr	r3, [pc, #440]	; (8002cc0 <MspInit+0x1f0>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b0e:	61bb      	str	r3, [r7, #24]
 8002b10:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __GPIOB_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	4b6a      	ldr	r3, [pc, #424]	; (8002cc0 <MspInit+0x1f0>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	4a69      	ldr	r2, [pc, #420]	; (8002cc0 <MspInit+0x1f0>)
 8002b1c:	f043 0302 	orr.w	r3, r3, #2
 8002b20:	6313      	str	r3, [r2, #48]	; 0x30
 8002b22:	4b67      	ldr	r3, [pc, #412]	; (8002cc0 <MspInit+0x1f0>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	697b      	ldr	r3, [r7, #20]
  __GPIOC_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	4b63      	ldr	r3, [pc, #396]	; (8002cc0 <MspInit+0x1f0>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	4a62      	ldr	r2, [pc, #392]	; (8002cc0 <MspInit+0x1f0>)
 8002b38:	f043 0304 	orr.w	r3, r3, #4
 8002b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3e:	4b60      	ldr	r3, [pc, #384]	; (8002cc0 <MspInit+0x1f0>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	693b      	ldr	r3, [r7, #16]
  __GPIOD_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	4b5c      	ldr	r3, [pc, #368]	; (8002cc0 <MspInit+0x1f0>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	4a5b      	ldr	r2, [pc, #364]	; (8002cc0 <MspInit+0x1f0>)
 8002b54:	f043 0308 	orr.w	r3, r3, #8
 8002b58:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5a:	4b59      	ldr	r3, [pc, #356]	; (8002cc0 <MspInit+0x1f0>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
  __GPIOE_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	4b55      	ldr	r3, [pc, #340]	; (8002cc0 <MspInit+0x1f0>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a54      	ldr	r2, [pc, #336]	; (8002cc0 <MspInit+0x1f0>)
 8002b70:	f043 0310 	orr.w	r3, r3, #16
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
 8002b76:	4b52      	ldr	r3, [pc, #328]	; (8002cc0 <MspInit+0x1f0>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	68bb      	ldr	r3, [r7, #8]
  __GPIOF_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	607b      	str	r3, [r7, #4]
 8002b86:	4b4e      	ldr	r3, [pc, #312]	; (8002cc0 <MspInit+0x1f0>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	4a4d      	ldr	r2, [pc, #308]	; (8002cc0 <MspInit+0x1f0>)
 8002b8c:	f043 0320 	orr.w	r3, r3, #32
 8002b90:	6313      	str	r3, [r2, #48]	; 0x30
 8002b92:	4b4b      	ldr	r3, [pc, #300]	; (8002cc0 <MspInit+0x1f0>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	607b      	str	r3, [r7, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
  __GPIOG_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	603b      	str	r3, [r7, #0]
 8002ba2:	4b47      	ldr	r3, [pc, #284]	; (8002cc0 <MspInit+0x1f0>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	4a46      	ldr	r2, [pc, #280]	; (8002cc0 <MspInit+0x1f0>)
 8002ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bac:	6313      	str	r3, [r2, #48]	; 0x30
 8002bae:	4b44      	ldr	r3, [pc, #272]	; (8002cc0 <MspInit+0x1f0>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002bc6:	230c      	movs	r3, #12
 8002bc8:	633b      	str	r3, [r7, #48]	; 0x30

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002bca:	2360      	movs	r3, #96	; 0x60
 8002bcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002bce:	f107 0320 	add.w	r3, r7, #32
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	483b      	ldr	r0, [pc, #236]	; (8002cc4 <MspInit+0x1f4>)
 8002bd6:	f001 fa77 	bl	80040c8 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002bda:	2301      	movs	r3, #1
 8002bdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002bde:	f107 0320 	add.w	r3, r7, #32
 8002be2:	4619      	mov	r1, r3
 8002be4:	4838      	ldr	r0, [pc, #224]	; (8002cc8 <MspInit+0x1f8>)
 8002be6:	f001 fa6f 	bl	80040c8 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002bea:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002bee:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002bf0:	f107 0320 	add.w	r3, r7, #32
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4835      	ldr	r0, [pc, #212]	; (8002ccc <MspInit+0x1fc>)
 8002bf8:	f001 fa66 	bl	80040c8 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002bfc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002c00:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002c02:	f107 0320 	add.w	r3, r7, #32
 8002c06:	4619      	mov	r1, r3
 8002c08:	4831      	ldr	r0, [pc, #196]	; (8002cd0 <MspInit+0x200>)
 8002c0a:	f001 fa5d 	bl	80040c8 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002c0e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002c12:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002c14:	f107 0320 	add.w	r3, r7, #32
 8002c18:	4619      	mov	r1, r3
 8002c1a:	482e      	ldr	r0, [pc, #184]	; (8002cd4 <MspInit+0x204>)
 8002c1c:	f001 fa54 	bl	80040c8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002c20:	f248 1333 	movw	r3, #33075	; 0x8133
 8002c24:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002c26:	f107 0320 	add.w	r3, r7, #32
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	482a      	ldr	r0, [pc, #168]	; (8002cd8 <MspInit+0x208>)
 8002c2e:	f001 fa4b 	bl	80040c8 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002c32:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <MspInit+0x20c>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002c38:	4b28      	ldr	r3, [pc, #160]	; (8002cdc <MspInit+0x20c>)
 8002c3a:	2280      	movs	r2, #128	; 0x80
 8002c3c:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002c3e:	4b27      	ldr	r3, [pc, #156]	; (8002cdc <MspInit+0x20c>)
 8002c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c44:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002c46:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <MspInit+0x20c>)
 8002c48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c4c:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c4e:	4b23      	ldr	r3, [pc, #140]	; (8002cdc <MspInit+0x20c>)
 8002c50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c54:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002c56:	4b21      	ldr	r3, [pc, #132]	; (8002cdc <MspInit+0x20c>)
 8002c58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c5c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002c5e:	4b1f      	ldr	r3, [pc, #124]	; (8002cdc <MspInit+0x20c>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002c64:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <MspInit+0x20c>)
 8002c66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c6a:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002c6c:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <MspInit+0x20c>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002c72:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <MspInit+0x20c>)
 8002c74:	2203      	movs	r2, #3
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002c78:	4b18      	ldr	r3, [pc, #96]	; (8002cdc <MspInit+0x20c>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002c7e:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <MspInit+0x20c>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002c84:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <MspInit+0x20c>)
 8002c86:	4a16      	ldr	r2, [pc, #88]	; (8002ce0 <MspInit+0x210>)
 8002c88:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8c:	4a13      	ldr	r2, [pc, #76]	; (8002cdc <MspInit+0x20c>)
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c90:	4a12      	ldr	r2, [pc, #72]	; (8002cdc <MspInit+0x20c>)
 8002c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c94:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002c96:	4811      	ldr	r0, [pc, #68]	; (8002cdc <MspInit+0x20c>)
 8002c98:	f000 fe7c 	bl	8003994 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002c9c:	480f      	ldr	r0, [pc, #60]	; (8002cdc <MspInit+0x20c>)
 8002c9e:	f000 fdcb 	bl	8003838 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0, 0);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	2038      	movs	r0, #56	; 0x38
 8002ca8:	f000 fd8f 	bl	80037ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002cac:	2038      	movs	r0, #56	; 0x38
 8002cae:	f000 fda8 	bl	8003802 <HAL_NVIC_EnableIRQ>
}
 8002cb2:	bf00      	nop
 8002cb4:	3738      	adds	r7, #56	; 0x38
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	200004ac 	.word	0x200004ac
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40020400 	.word	0x40020400
 8002cc8:	40020800 	.word	0x40020800
 8002ccc:	40020c00 	.word	0x40020c00
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40021400 	.word	0x40021400
 8002cd8:	40021800 	.word	0x40021800
 8002cdc:	2000050c 	.word	0x2000050c
 8002ce0:	40026410 	.word	0x40026410

08002ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	607b      	str	r3, [r7, #4]
 8002cee:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <HAL_MspInit+0x4c>)
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf2:	4a0f      	ldr	r2, [pc, #60]	; (8002d30 <HAL_MspInit+0x4c>)
 8002cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cfa:	4b0d      	ldr	r3, [pc, #52]	; (8002d30 <HAL_MspInit+0x4c>)
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d02:	607b      	str	r3, [r7, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	603b      	str	r3, [r7, #0]
 8002d0a:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <HAL_MspInit+0x4c>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	4a08      	ldr	r2, [pc, #32]	; (8002d30 <HAL_MspInit+0x4c>)
 8002d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d14:	6413      	str	r3, [r2, #64]	; 0x40
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <HAL_MspInit+0x4c>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800

08002d34 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a0b      	ldr	r2, [pc, #44]	; (8002d70 <HAL_DMA2D_MspInit+0x3c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d10d      	bne.n	8002d62 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <HAL_DMA2D_MspInit+0x40>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	4a09      	ldr	r2, [pc, #36]	; (8002d74 <HAL_DMA2D_MspInit+0x40>)
 8002d50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d54:	6313      	str	r3, [r2, #48]	; 0x30
 8002d56:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <HAL_DMA2D_MspInit+0x40>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002d62:	bf00      	nop
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	4002b000 	.word	0x4002b000
 8002d74:	40023800 	.word	0x40023800

08002d78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08a      	sub	sp, #40	; 0x28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d80:	f107 0314 	add.w	r3, r7, #20
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
 8002d8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a29      	ldr	r2, [pc, #164]	; (8002e3c <HAL_I2C_MspInit+0xc4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d14b      	bne.n	8002e32 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	4b28      	ldr	r3, [pc, #160]	; (8002e40 <HAL_I2C_MspInit+0xc8>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	4a27      	ldr	r2, [pc, #156]	; (8002e40 <HAL_I2C_MspInit+0xc8>)
 8002da4:	f043 0304 	orr.w	r3, r3, #4
 8002da8:	6313      	str	r3, [r2, #48]	; 0x30
 8002daa:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <HAL_I2C_MspInit+0xc8>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	4b21      	ldr	r3, [pc, #132]	; (8002e40 <HAL_I2C_MspInit+0xc8>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	4a20      	ldr	r2, [pc, #128]	; (8002e40 <HAL_I2C_MspInit+0xc8>)
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc6:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <HAL_I2C_MspInit+0xc8>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dd8:	2312      	movs	r3, #18
 8002dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de0:	2303      	movs	r3, #3
 8002de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002de4:	2304      	movs	r3, #4
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002de8:	f107 0314 	add.w	r3, r7, #20
 8002dec:	4619      	mov	r1, r3
 8002dee:	4815      	ldr	r0, [pc, #84]	; (8002e44 <HAL_I2C_MspInit+0xcc>)
 8002df0:	f001 f96a 	bl	80040c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002df4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dfa:	2312      	movs	r3, #18
 8002dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e02:	2303      	movs	r3, #3
 8002e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e06:	2304      	movs	r3, #4
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e0a:	f107 0314 	add.w	r3, r7, #20
 8002e0e:	4619      	mov	r1, r3
 8002e10:	480d      	ldr	r0, [pc, #52]	; (8002e48 <HAL_I2C_MspInit+0xd0>)
 8002e12:	f001 f959 	bl	80040c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <HAL_I2C_MspInit+0xc8>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	4a08      	ldr	r2, [pc, #32]	; (8002e40 <HAL_I2C_MspInit+0xc8>)
 8002e20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e24:	6413      	str	r3, [r2, #64]	; 0x40
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_I2C_MspInit+0xc8>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002e32:	bf00      	nop
 8002e34:	3728      	adds	r7, #40	; 0x28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40005c00 	.word	0x40005c00
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40020800 	.word	0x40020800
 8002e48:	40020000 	.word	0x40020000

08002e4c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08e      	sub	sp, #56	; 0x38
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	605a      	str	r2, [r3, #4]
 8002e5e:	609a      	str	r2, [r3, #8]
 8002e60:	60da      	str	r2, [r3, #12]
 8002e62:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a77      	ldr	r2, [pc, #476]	; (8003048 <HAL_LTDC_MspInit+0x1fc>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	f040 80e7 	bne.w	800303e <HAL_LTDC_MspInit+0x1f2>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002e70:	2300      	movs	r3, #0
 8002e72:	623b      	str	r3, [r7, #32]
 8002e74:	4b75      	ldr	r3, [pc, #468]	; (800304c <HAL_LTDC_MspInit+0x200>)
 8002e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e78:	4a74      	ldr	r2, [pc, #464]	; (800304c <HAL_LTDC_MspInit+0x200>)
 8002e7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e7e:	6453      	str	r3, [r2, #68]	; 0x44
 8002e80:	4b72      	ldr	r3, [pc, #456]	; (800304c <HAL_LTDC_MspInit+0x200>)
 8002e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e88:	623b      	str	r3, [r7, #32]
 8002e8a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61fb      	str	r3, [r7, #28]
 8002e90:	4b6e      	ldr	r3, [pc, #440]	; (800304c <HAL_LTDC_MspInit+0x200>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	4a6d      	ldr	r2, [pc, #436]	; (800304c <HAL_LTDC_MspInit+0x200>)
 8002e96:	f043 0320 	orr.w	r3, r3, #32
 8002e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9c:	4b6b      	ldr	r3, [pc, #428]	; (800304c <HAL_LTDC_MspInit+0x200>)
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea0:	f003 0320 	and.w	r3, r3, #32
 8002ea4:	61fb      	str	r3, [r7, #28]
 8002ea6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61bb      	str	r3, [r7, #24]
 8002eac:	4b67      	ldr	r3, [pc, #412]	; (800304c <HAL_LTDC_MspInit+0x200>)
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	4a66      	ldr	r2, [pc, #408]	; (800304c <HAL_LTDC_MspInit+0x200>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb8:	4b64      	ldr	r3, [pc, #400]	; (800304c <HAL_LTDC_MspInit+0x200>)
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	61bb      	str	r3, [r7, #24]
 8002ec2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	4b60      	ldr	r3, [pc, #384]	; (800304c <HAL_LTDC_MspInit+0x200>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	4a5f      	ldr	r2, [pc, #380]	; (800304c <HAL_LTDC_MspInit+0x200>)
 8002ece:	f043 0302 	orr.w	r3, r3, #2
 8002ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed4:	4b5d      	ldr	r3, [pc, #372]	; (800304c <HAL_LTDC_MspInit+0x200>)
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	4b59      	ldr	r3, [pc, #356]	; (800304c <HAL_LTDC_MspInit+0x200>)
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	4a58      	ldr	r2, [pc, #352]	; (800304c <HAL_LTDC_MspInit+0x200>)
 8002eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eee:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef0:	4b56      	ldr	r3, [pc, #344]	; (800304c <HAL_LTDC_MspInit+0x200>)
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	4b52      	ldr	r3, [pc, #328]	; (800304c <HAL_LTDC_MspInit+0x200>)
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	4a51      	ldr	r2, [pc, #324]	; (800304c <HAL_LTDC_MspInit+0x200>)
 8002f06:	f043 0304 	orr.w	r3, r3, #4
 8002f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0c:	4b4f      	ldr	r3, [pc, #316]	; (800304c <HAL_LTDC_MspInit+0x200>)
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	4b4b      	ldr	r3, [pc, #300]	; (800304c <HAL_LTDC_MspInit+0x200>)
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	4a4a      	ldr	r2, [pc, #296]	; (800304c <HAL_LTDC_MspInit+0x200>)
 8002f22:	f043 0308 	orr.w	r3, r3, #8
 8002f26:	6313      	str	r3, [r2, #48]	; 0x30
 8002f28:	4b48      	ldr	r3, [pc, #288]	; (800304c <HAL_LTDC_MspInit+0x200>)
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f42:	2300      	movs	r3, #0
 8002f44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f46:	230e      	movs	r3, #14
 8002f48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f4e:	4619      	mov	r1, r3
 8002f50:	483f      	ldr	r0, [pc, #252]	; (8003050 <HAL_LTDC_MspInit+0x204>)
 8002f52:	f001 f8b9 	bl	80040c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8002f56:	f641 0358 	movw	r3, #6232	; 0x1858
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f64:	2300      	movs	r3, #0
 8002f66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f68:	230e      	movs	r3, #14
 8002f6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f70:	4619      	mov	r1, r3
 8002f72:	4838      	ldr	r0, [pc, #224]	; (8003054 <HAL_LTDC_MspInit+0x208>)
 8002f74:	f001 f8a8 	bl	80040c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f84:	2300      	movs	r3, #0
 8002f86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002f88:	2309      	movs	r3, #9
 8002f8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f90:	4619      	mov	r1, r3
 8002f92:	4831      	ldr	r0, [pc, #196]	; (8003058 <HAL_LTDC_MspInit+0x20c>)
 8002f94:	f001 f898 	bl	80040c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8002f98:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002faa:	230e      	movs	r3, #14
 8002fac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4828      	ldr	r0, [pc, #160]	; (8003058 <HAL_LTDC_MspInit+0x20c>)
 8002fb6:	f001 f887 	bl	80040c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8002fba:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002fcc:	230e      	movs	r3, #14
 8002fce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4821      	ldr	r0, [pc, #132]	; (800305c <HAL_LTDC_MspInit+0x210>)
 8002fd8:	f001 f876 	bl	80040c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fdc:	23c0      	movs	r3, #192	; 0xc0
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002fec:	230e      	movs	r3, #14
 8002fee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	481a      	ldr	r0, [pc, #104]	; (8003060 <HAL_LTDC_MspInit+0x214>)
 8002ff8:	f001 f866 	bl	80040c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ffc:	2308      	movs	r3, #8
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003000:	2302      	movs	r3, #2
 8003002:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003004:	2300      	movs	r3, #0
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003008:	2300      	movs	r3, #0
 800300a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800300c:	230e      	movs	r3, #14
 800300e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003014:	4619      	mov	r1, r3
 8003016:	4813      	ldr	r0, [pc, #76]	; (8003064 <HAL_LTDC_MspInit+0x218>)
 8003018:	f001 f856 	bl	80040c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800301c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003022:	2302      	movs	r3, #2
 8003024:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003026:	2300      	movs	r3, #0
 8003028:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302a:	2300      	movs	r3, #0
 800302c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800302e:	2309      	movs	r3, #9
 8003030:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003036:	4619      	mov	r1, r3
 8003038:	4808      	ldr	r0, [pc, #32]	; (800305c <HAL_LTDC_MspInit+0x210>)
 800303a:	f001 f845 	bl	80040c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800303e:	bf00      	nop
 8003040:	3738      	adds	r7, #56	; 0x38
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40016800 	.word	0x40016800
 800304c:	40023800 	.word	0x40023800
 8003050:	40021400 	.word	0x40021400
 8003054:	40020000 	.word	0x40020000
 8003058:	40020400 	.word	0x40020400
 800305c:	40021800 	.word	0x40021800
 8003060:	40020800 	.word	0x40020800
 8003064:	40020c00 	.word	0x40020c00

08003068 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08a      	sub	sp, #40	; 0x28
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003070:	f107 0314 	add.w	r3, r7, #20
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	609a      	str	r2, [r3, #8]
 800307c:	60da      	str	r2, [r3, #12]
 800307e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a19      	ldr	r2, [pc, #100]	; (80030ec <HAL_SPI_MspInit+0x84>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d12c      	bne.n	80030e4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	4b18      	ldr	r3, [pc, #96]	; (80030f0 <HAL_SPI_MspInit+0x88>)
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	4a17      	ldr	r2, [pc, #92]	; (80030f0 <HAL_SPI_MspInit+0x88>)
 8003094:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003098:	6453      	str	r3, [r2, #68]	; 0x44
 800309a:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <HAL_SPI_MspInit+0x88>)
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <HAL_SPI_MspInit+0x88>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	4a10      	ldr	r2, [pc, #64]	; (80030f0 <HAL_SPI_MspInit+0x88>)
 80030b0:	f043 0320 	orr.w	r3, r3, #32
 80030b4:	6313      	str	r3, [r2, #48]	; 0x30
 80030b6:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <HAL_SPI_MspInit+0x88>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	f003 0320 	and.w	r3, r3, #32
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80030c2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80030c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c8:	2302      	movs	r3, #2
 80030ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d0:	2303      	movs	r3, #3
 80030d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80030d4:	2305      	movs	r3, #5
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80030d8:	f107 0314 	add.w	r3, r7, #20
 80030dc:	4619      	mov	r1, r3
 80030de:	4805      	ldr	r0, [pc, #20]	; (80030f4 <HAL_SPI_MspInit+0x8c>)
 80030e0:	f000 fff2 	bl	80040c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80030e4:	bf00      	nop
 80030e6:	3728      	adds	r7, #40	; 0x28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40015000 	.word	0x40015000
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40021400 	.word	0x40021400

080030f8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a08      	ldr	r2, [pc, #32]	; (8003128 <HAL_SPI_MspDeInit+0x30>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d10a      	bne.n	8003120 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800310a:	4b08      	ldr	r3, [pc, #32]	; (800312c <HAL_SPI_MspDeInit+0x34>)
 800310c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310e:	4a07      	ldr	r2, [pc, #28]	; (800312c <HAL_SPI_MspDeInit+0x34>)
 8003110:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003114:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8003116:	f44f 7160 	mov.w	r1, #896	; 0x380
 800311a:	4805      	ldr	r0, [pc, #20]	; (8003130 <HAL_SPI_MspDeInit+0x38>)
 800311c:	f001 f97e 	bl	800441c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8003120:	bf00      	nop
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40015000 	.word	0x40015000
 800312c:	40023800 	.word	0x40023800
 8003130:	40021400 	.word	0x40021400

08003134 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a0e      	ldr	r2, [pc, #56]	; (800317c <HAL_TIM_Base_MspInit+0x48>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d115      	bne.n	8003172 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <HAL_TIM_Base_MspInit+0x4c>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	4a0c      	ldr	r2, [pc, #48]	; (8003180 <HAL_TIM_Base_MspInit+0x4c>)
 8003150:	f043 0310 	orr.w	r3, r3, #16
 8003154:	6413      	str	r3, [r2, #64]	; 0x40
 8003156:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <HAL_TIM_Base_MspInit+0x4c>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003162:	2200      	movs	r2, #0
 8003164:	2100      	movs	r1, #0
 8003166:	2036      	movs	r0, #54	; 0x36
 8003168:	f000 fb2f 	bl	80037ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800316c:	2036      	movs	r0, #54	; 0x36
 800316e:	f000 fb48 	bl	8003802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003172:	bf00      	nop
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40001000 	.word	0x40001000
 8003180:	40023800 	.word	0x40023800

08003184 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08a      	sub	sp, #40	; 0x28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318c:	f107 0314 	add.w	r3, r7, #20
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	60da      	str	r2, [r3, #12]
 800319a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a19      	ldr	r2, [pc, #100]	; (8003208 <HAL_UART_MspInit+0x84>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d12c      	bne.n	8003200 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031a6:	2300      	movs	r3, #0
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	4b18      	ldr	r3, [pc, #96]	; (800320c <HAL_UART_MspInit+0x88>)
 80031ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ae:	4a17      	ldr	r2, [pc, #92]	; (800320c <HAL_UART_MspInit+0x88>)
 80031b0:	f043 0310 	orr.w	r3, r3, #16
 80031b4:	6453      	str	r3, [r2, #68]	; 0x44
 80031b6:	4b15      	ldr	r3, [pc, #84]	; (800320c <HAL_UART_MspInit+0x88>)
 80031b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	4b11      	ldr	r3, [pc, #68]	; (800320c <HAL_UART_MspInit+0x88>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	4a10      	ldr	r2, [pc, #64]	; (800320c <HAL_UART_MspInit+0x88>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	6313      	str	r3, [r2, #48]	; 0x30
 80031d2:	4b0e      	ldr	r3, [pc, #56]	; (800320c <HAL_UART_MspInit+0x88>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80031de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80031e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e4:	2302      	movs	r3, #2
 80031e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ec:	2303      	movs	r3, #3
 80031ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031f0:	2307      	movs	r3, #7
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f4:	f107 0314 	add.w	r3, r7, #20
 80031f8:	4619      	mov	r1, r3
 80031fa:	4805      	ldr	r0, [pc, #20]	; (8003210 <HAL_UART_MspInit+0x8c>)
 80031fc:	f000 ff64 	bl	80040c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003200:	bf00      	nop
 8003202:	3728      	adds	r7, #40	; 0x28
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40011000 	.word	0x40011000
 800320c:	40023800 	.word	0x40023800
 8003210:	40020000 	.word	0x40020000

08003214 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800321a:	1d3b      	adds	r3, r7, #4
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	60da      	str	r2, [r3, #12]
 8003226:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003228:	4b3b      	ldr	r3, [pc, #236]	; (8003318 <HAL_FMC_MspInit+0x104>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d16f      	bne.n	8003310 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8003230:	4b39      	ldr	r3, [pc, #228]	; (8003318 <HAL_FMC_MspInit+0x104>)
 8003232:	2201      	movs	r2, #1
 8003234:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003236:	2300      	movs	r3, #0
 8003238:	603b      	str	r3, [r7, #0]
 800323a:	4b38      	ldr	r3, [pc, #224]	; (800331c <HAL_FMC_MspInit+0x108>)
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	4a37      	ldr	r2, [pc, #220]	; (800331c <HAL_FMC_MspInit+0x108>)
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	6393      	str	r3, [r2, #56]	; 0x38
 8003246:	4b35      	ldr	r3, [pc, #212]	; (800331c <HAL_FMC_MspInit+0x108>)
 8003248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	603b      	str	r3, [r7, #0]
 8003250:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003252:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003256:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003258:	2302      	movs	r3, #2
 800325a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003260:	2303      	movs	r3, #3
 8003262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003264:	230c      	movs	r3, #12
 8003266:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003268:	1d3b      	adds	r3, r7, #4
 800326a:	4619      	mov	r1, r3
 800326c:	482c      	ldr	r0, [pc, #176]	; (8003320 <HAL_FMC_MspInit+0x10c>)
 800326e:	f000 ff2b 	bl	80040c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003272:	2301      	movs	r3, #1
 8003274:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003276:	2302      	movs	r3, #2
 8003278:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800327e:	2303      	movs	r3, #3
 8003280:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003282:	230c      	movs	r3, #12
 8003284:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003286:	1d3b      	adds	r3, r7, #4
 8003288:	4619      	mov	r1, r3
 800328a:	4826      	ldr	r0, [pc, #152]	; (8003324 <HAL_FMC_MspInit+0x110>)
 800328c:	f000 ff1c 	bl	80040c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8003290:	f248 1333 	movw	r3, #33075	; 0x8133
 8003294:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003296:	2302      	movs	r3, #2
 8003298:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329a:	2300      	movs	r3, #0
 800329c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329e:	2303      	movs	r3, #3
 80032a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032a2:	230c      	movs	r3, #12
 80032a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80032a6:	1d3b      	adds	r3, r7, #4
 80032a8:	4619      	mov	r1, r3
 80032aa:	481f      	ldr	r0, [pc, #124]	; (8003328 <HAL_FMC_MspInit+0x114>)
 80032ac:	f000 ff0c 	bl	80040c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80032b0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80032b4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b6:	2302      	movs	r3, #2
 80032b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032be:	2303      	movs	r3, #3
 80032c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032c2:	230c      	movs	r3, #12
 80032c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032c6:	1d3b      	adds	r3, r7, #4
 80032c8:	4619      	mov	r1, r3
 80032ca:	4818      	ldr	r0, [pc, #96]	; (800332c <HAL_FMC_MspInit+0x118>)
 80032cc:	f000 fefc 	bl	80040c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80032d0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80032d4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d6:	2302      	movs	r3, #2
 80032d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032de:	2303      	movs	r3, #3
 80032e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032e2:	230c      	movs	r3, #12
 80032e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032e6:	1d3b      	adds	r3, r7, #4
 80032e8:	4619      	mov	r1, r3
 80032ea:	4811      	ldr	r0, [pc, #68]	; (8003330 <HAL_FMC_MspInit+0x11c>)
 80032ec:	f000 feec 	bl	80040c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80032f0:	2360      	movs	r3, #96	; 0x60
 80032f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f4:	2302      	movs	r3, #2
 80032f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f8:	2300      	movs	r3, #0
 80032fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032fc:	2303      	movs	r3, #3
 80032fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003300:	230c      	movs	r3, #12
 8003302:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003304:	1d3b      	adds	r3, r7, #4
 8003306:	4619      	mov	r1, r3
 8003308:	480a      	ldr	r0, [pc, #40]	; (8003334 <HAL_FMC_MspInit+0x120>)
 800330a:	f000 fedd 	bl	80040c8 <HAL_GPIO_Init>
 800330e:	e000      	b.n	8003312 <HAL_FMC_MspInit+0xfe>
    return;
 8003310:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	2000056c 	.word	0x2000056c
 800331c:	40023800 	.word	0x40023800
 8003320:	40021400 	.word	0x40021400
 8003324:	40020800 	.word	0x40020800
 8003328:	40021800 	.word	0x40021800
 800332c:	40021000 	.word	0x40021000
 8003330:	40020c00 	.word	0x40020c00
 8003334:	40020400 	.word	0x40020400

08003338 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003340:	f7ff ff68 	bl	8003214 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003344:	bf00      	nop
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800335a:	b480      	push	{r7}
 800335c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800335e:	e7fe      	b.n	800335e <HardFault_Handler+0x4>

08003360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003364:	e7fe      	b.n	8003364 <MemManage_Handler+0x4>

08003366 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003366:	b480      	push	{r7}
 8003368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800336a:	e7fe      	b.n	800336a <BusFault_Handler+0x4>

0800336c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003370:	e7fe      	b.n	8003370 <UsageFault_Handler+0x4>

08003372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003372:	b480      	push	{r7}
 8003374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003376:	bf00      	nop
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800338e:	b480      	push	{r7}
 8003390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003392:	bf00      	nop
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033a0:	f000 f8f6 	bl	8003590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033a4:	bf00      	nop
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80033ac:	4802      	ldr	r0, [pc, #8]	; (80033b8 <TIM6_DAC_IRQHandler+0x10>)
 80033ae:	f003 fa5c 	bl	800686a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000268 	.word	0x20000268

080033bc <_getpid>:
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
 80033c0:	2301      	movs	r3, #1
 80033c2:	4618      	mov	r0, r3
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <_kill>:
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
 80033d6:	f004 f9ed 	bl	80077b4 <__errno>
 80033da:	4602      	mov	r2, r0
 80033dc:	2316      	movs	r3, #22
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	f04f 33ff 	mov.w	r3, #4294967295
 80033e4:	4618      	mov	r0, r3
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <_exit>:
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	f04f 31ff 	mov.w	r1, #4294967295
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff ffe7 	bl	80033cc <_kill>
 80033fe:	e7fe      	b.n	80033fe <_exit+0x12>

08003400 <_sbrk>:
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	4a14      	ldr	r2, [pc, #80]	; (800345c <_sbrk+0x5c>)
 800340a:	4b15      	ldr	r3, [pc, #84]	; (8003460 <_sbrk+0x60>)
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	613b      	str	r3, [r7, #16]
 8003414:	4b13      	ldr	r3, [pc, #76]	; (8003464 <_sbrk+0x64>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d102      	bne.n	8003422 <_sbrk+0x22>
 800341c:	4b11      	ldr	r3, [pc, #68]	; (8003464 <_sbrk+0x64>)
 800341e:	4a12      	ldr	r2, [pc, #72]	; (8003468 <_sbrk+0x68>)
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	4b10      	ldr	r3, [pc, #64]	; (8003464 <_sbrk+0x64>)
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4413      	add	r3, r2
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	429a      	cmp	r2, r3
 800342e:	d207      	bcs.n	8003440 <_sbrk+0x40>
 8003430:	f004 f9c0 	bl	80077b4 <__errno>
 8003434:	4602      	mov	r2, r0
 8003436:	230c      	movs	r3, #12
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	f04f 33ff 	mov.w	r3, #4294967295
 800343e:	e009      	b.n	8003454 <_sbrk+0x54>
 8003440:	4b08      	ldr	r3, [pc, #32]	; (8003464 <_sbrk+0x64>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	4b07      	ldr	r3, [pc, #28]	; (8003464 <_sbrk+0x64>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4413      	add	r3, r2
 800344e:	4a05      	ldr	r2, [pc, #20]	; (8003464 <_sbrk+0x64>)
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	20030000 	.word	0x20030000
 8003460:	00000400 	.word	0x00000400
 8003464:	20000570 	.word	0x20000570
 8003468:	20000590 	.word	0x20000590

0800346c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003470:	4b08      	ldr	r3, [pc, #32]	; (8003494 <SystemInit+0x28>)
 8003472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003476:	4a07      	ldr	r2, [pc, #28]	; (8003494 <SystemInit+0x28>)
 8003478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800347c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003480:	4b04      	ldr	r3, [pc, #16]	; (8003494 <SystemInit+0x28>)
 8003482:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003486:	609a      	str	r2, [r3, #8]
#endif
}
 8003488:	bf00      	nop
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034d0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800349c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800349e:	e003      	b.n	80034a8 <LoopCopyDataInit>

080034a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80034a0:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80034a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80034a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80034a6:	3104      	adds	r1, #4

080034a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80034a8:	480b      	ldr	r0, [pc, #44]	; (80034d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80034aa:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80034ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80034ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80034b0:	d3f6      	bcc.n	80034a0 <CopyDataInit>
  ldr  r2, =_sbss
 80034b2:	4a0b      	ldr	r2, [pc, #44]	; (80034e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80034b4:	e002      	b.n	80034bc <LoopFillZerobss>

080034b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80034b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80034b8:	f842 3b04 	str.w	r3, [r2], #4

080034bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80034bc:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80034be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80034c0:	d3f9      	bcc.n	80034b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034c2:	f7ff ffd3 	bl	800346c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034c6:	f004 f97b 	bl	80077c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034ca:	f7fe f9b7 	bl	800183c <main>
  bx  lr    
 80034ce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80034d0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80034d4:	08009638 	.word	0x08009638
  ldr  r0, =_sdata
 80034d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80034dc:	200000b4 	.word	0x200000b4
  ldr  r2, =_sbss
 80034e0:	200000b4 	.word	0x200000b4
  ldr  r3, = _ebss
 80034e4:	2000058c 	.word	0x2000058c

080034e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034e8:	e7fe      	b.n	80034e8 <ADC_IRQHandler>
	...

080034ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034f0:	4b0e      	ldr	r3, [pc, #56]	; (800352c <HAL_Init+0x40>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a0d      	ldr	r2, [pc, #52]	; (800352c <HAL_Init+0x40>)
 80034f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034fc:	4b0b      	ldr	r3, [pc, #44]	; (800352c <HAL_Init+0x40>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a0a      	ldr	r2, [pc, #40]	; (800352c <HAL_Init+0x40>)
 8003502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003506:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003508:	4b08      	ldr	r3, [pc, #32]	; (800352c <HAL_Init+0x40>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a07      	ldr	r2, [pc, #28]	; (800352c <HAL_Init+0x40>)
 800350e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003514:	2003      	movs	r0, #3
 8003516:	f000 f94d 	bl	80037b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800351a:	2000      	movs	r0, #0
 800351c:	f000 f808 	bl	8003530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003520:	f7ff fbe0 	bl	8002ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40023c00 	.word	0x40023c00

08003530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003538:	4b12      	ldr	r3, [pc, #72]	; (8003584 <HAL_InitTick+0x54>)
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	4b12      	ldr	r3, [pc, #72]	; (8003588 <HAL_InitTick+0x58>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	4619      	mov	r1, r3
 8003542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003546:	fbb3 f3f1 	udiv	r3, r3, r1
 800354a:	fbb2 f3f3 	udiv	r3, r2, r3
 800354e:	4618      	mov	r0, r3
 8003550:	f000 f965 	bl	800381e <HAL_SYSTICK_Config>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e00e      	b.n	800357c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b0f      	cmp	r3, #15
 8003562:	d80a      	bhi.n	800357a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003564:	2200      	movs	r2, #0
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	f04f 30ff 	mov.w	r0, #4294967295
 800356c:	f000 f92d 	bl	80037ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003570:	4a06      	ldr	r2, [pc, #24]	; (800358c <HAL_InitTick+0x5c>)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	e000      	b.n	800357c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
}
 800357c:	4618      	mov	r0, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20000044 	.word	0x20000044
 8003588:	2000004c 	.word	0x2000004c
 800358c:	20000048 	.word	0x20000048

08003590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003594:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <HAL_IncTick+0x20>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	461a      	mov	r2, r3
 800359a:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <HAL_IncTick+0x24>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4413      	add	r3, r2
 80035a0:	4a04      	ldr	r2, [pc, #16]	; (80035b4 <HAL_IncTick+0x24>)
 80035a2:	6013      	str	r3, [r2, #0]
}
 80035a4:	bf00      	nop
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	2000004c 	.word	0x2000004c
 80035b4:	20000584 	.word	0x20000584

080035b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return uwTick;
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <HAL_GetTick+0x14>)
 80035be:	681b      	ldr	r3, [r3, #0]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20000584 	.word	0x20000584

080035d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035d8:	f7ff ffee 	bl	80035b8 <HAL_GetTick>
 80035dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e8:	d005      	beq.n	80035f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <HAL_Delay+0x40>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4413      	add	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035f6:	bf00      	nop
 80035f8:	f7ff ffde 	bl	80035b8 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	429a      	cmp	r2, r3
 8003606:	d8f7      	bhi.n	80035f8 <HAL_Delay+0x28>
  {
  }
}
 8003608:	bf00      	nop
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	2000004c 	.word	0x2000004c

08003614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003624:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <__NVIC_SetPriorityGrouping+0x44>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003630:	4013      	ands	r3, r2
 8003632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800363c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003646:	4a04      	ldr	r2, [pc, #16]	; (8003658 <__NVIC_SetPriorityGrouping+0x44>)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	60d3      	str	r3, [r2, #12]
}
 800364c:	bf00      	nop
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003660:	4b04      	ldr	r3, [pc, #16]	; (8003674 <__NVIC_GetPriorityGrouping+0x18>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	0a1b      	lsrs	r3, r3, #8
 8003666:	f003 0307 	and.w	r3, r3, #7
}
 800366a:	4618      	mov	r0, r3
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	e000ed00 	.word	0xe000ed00

08003678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003686:	2b00      	cmp	r3, #0
 8003688:	db0b      	blt.n	80036a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800368a:	79fb      	ldrb	r3, [r7, #7]
 800368c:	f003 021f 	and.w	r2, r3, #31
 8003690:	4907      	ldr	r1, [pc, #28]	; (80036b0 <__NVIC_EnableIRQ+0x38>)
 8003692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	2001      	movs	r0, #1
 800369a:	fa00 f202 	lsl.w	r2, r0, r2
 800369e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	e000e100 	.word	0xe000e100

080036b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	6039      	str	r1, [r7, #0]
 80036be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	db0a      	blt.n	80036de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	490c      	ldr	r1, [pc, #48]	; (8003700 <__NVIC_SetPriority+0x4c>)
 80036ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d2:	0112      	lsls	r2, r2, #4
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	440b      	add	r3, r1
 80036d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036dc:	e00a      	b.n	80036f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	4908      	ldr	r1, [pc, #32]	; (8003704 <__NVIC_SetPriority+0x50>)
 80036e4:	79fb      	ldrb	r3, [r7, #7]
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	3b04      	subs	r3, #4
 80036ec:	0112      	lsls	r2, r2, #4
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	440b      	add	r3, r1
 80036f2:	761a      	strb	r2, [r3, #24]
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	e000e100 	.word	0xe000e100
 8003704:	e000ed00 	.word	0xe000ed00

08003708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003708:	b480      	push	{r7}
 800370a:	b089      	sub	sp, #36	; 0x24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f1c3 0307 	rsb	r3, r3, #7
 8003722:	2b04      	cmp	r3, #4
 8003724:	bf28      	it	cs
 8003726:	2304      	movcs	r3, #4
 8003728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	3304      	adds	r3, #4
 800372e:	2b06      	cmp	r3, #6
 8003730:	d902      	bls.n	8003738 <NVIC_EncodePriority+0x30>
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	3b03      	subs	r3, #3
 8003736:	e000      	b.n	800373a <NVIC_EncodePriority+0x32>
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800373c:	f04f 32ff 	mov.w	r2, #4294967295
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43da      	mvns	r2, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	401a      	ands	r2, r3
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003750:	f04f 31ff 	mov.w	r1, #4294967295
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	fa01 f303 	lsl.w	r3, r1, r3
 800375a:	43d9      	mvns	r1, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003760:	4313      	orrs	r3, r2
         );
}
 8003762:	4618      	mov	r0, r3
 8003764:	3724      	adds	r7, #36	; 0x24
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
	...

08003770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3b01      	subs	r3, #1
 800377c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003780:	d301      	bcc.n	8003786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003782:	2301      	movs	r3, #1
 8003784:	e00f      	b.n	80037a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003786:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <SysTick_Config+0x40>)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3b01      	subs	r3, #1
 800378c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800378e:	210f      	movs	r1, #15
 8003790:	f04f 30ff 	mov.w	r0, #4294967295
 8003794:	f7ff ff8e 	bl	80036b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <SysTick_Config+0x40>)
 800379a:	2200      	movs	r2, #0
 800379c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800379e:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <SysTick_Config+0x40>)
 80037a0:	2207      	movs	r2, #7
 80037a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	e000e010 	.word	0xe000e010

080037b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff ff29 	bl	8003614 <__NVIC_SetPriorityGrouping>
}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b086      	sub	sp, #24
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	4603      	mov	r3, r0
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	607a      	str	r2, [r7, #4]
 80037d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037dc:	f7ff ff3e 	bl	800365c <__NVIC_GetPriorityGrouping>
 80037e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	6978      	ldr	r0, [r7, #20]
 80037e8:	f7ff ff8e 	bl	8003708 <NVIC_EncodePriority>
 80037ec:	4602      	mov	r2, r0
 80037ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037f2:	4611      	mov	r1, r2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff ff5d 	bl	80036b4 <__NVIC_SetPriority>
}
 80037fa:	bf00      	nop
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	4603      	mov	r3, r0
 800380a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800380c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff ff31 	bl	8003678 <__NVIC_EnableIRQ>
}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7ff ffa2 	bl	8003770 <SysTick_Config>
 800382c:	4603      	mov	r3, r0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003844:	f7ff feb8 	bl	80035b8 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e099      	b.n	8003988 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0201 	bic.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003874:	e00f      	b.n	8003896 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003876:	f7ff fe9f 	bl	80035b8 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b05      	cmp	r3, #5
 8003882:	d908      	bls.n	8003896 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2203      	movs	r2, #3
 800388e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e078      	b.n	8003988 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1e8      	bne.n	8003876 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	4b38      	ldr	r3, [pc, #224]	; (8003990 <HAL_DMA_Init+0x158>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d107      	bne.n	8003900 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f8:	4313      	orrs	r3, r2
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f023 0307 	bic.w	r3, r3, #7
 8003916:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	4313      	orrs	r3, r2
 8003920:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	2b04      	cmp	r3, #4
 8003928:	d117      	bne.n	800395a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4313      	orrs	r3, r2
 8003932:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00e      	beq.n	800395a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f8bd 	bl	8003abc <DMA_CheckFifoParam>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2240      	movs	r2, #64	; 0x40
 800394c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003956:	2301      	movs	r3, #1
 8003958:	e016      	b.n	8003988 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f874 	bl	8003a50 <DMA_CalcBaseAndBitshift>
 8003968:	4603      	mov	r3, r0
 800396a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003970:	223f      	movs	r2, #63	; 0x3f
 8003972:	409a      	lsls	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	f010803f 	.word	0xf010803f

08003994 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e050      	b.n	8003a48 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d101      	bne.n	80039b6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80039b2:	2302      	movs	r3, #2
 80039b4:	e048      	b.n	8003a48 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0201 	bic.w	r2, r2, #1
 80039c4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2200      	movs	r2, #0
 80039d4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2200      	movs	r2, #0
 80039dc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2200      	movs	r2, #0
 80039e4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2200      	movs	r2, #0
 80039ec:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2221      	movs	r2, #33	; 0x21
 80039f4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f82a 	bl	8003a50 <DMA_CalcBaseAndBitshift>
 80039fc:	4603      	mov	r3, r0
 80039fe:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a28:	223f      	movs	r2, #63	; 0x3f
 8003a2a:	409a      	lsls	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	3b10      	subs	r3, #16
 8003a60:	4a14      	ldr	r2, [pc, #80]	; (8003ab4 <DMA_CalcBaseAndBitshift+0x64>)
 8003a62:	fba2 2303 	umull	r2, r3, r2, r3
 8003a66:	091b      	lsrs	r3, r3, #4
 8003a68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a6a:	4a13      	ldr	r2, [pc, #76]	; (8003ab8 <DMA_CalcBaseAndBitshift+0x68>)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4413      	add	r3, r2
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d909      	bls.n	8003a92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a86:	f023 0303 	bic.w	r3, r3, #3
 8003a8a:	1d1a      	adds	r2, r3, #4
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	659a      	str	r2, [r3, #88]	; 0x58
 8003a90:	e007      	b.n	8003aa2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a9a:	f023 0303 	bic.w	r3, r3, #3
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	aaaaaaab 	.word	0xaaaaaaab
 8003ab8:	08009620 	.word	0x08009620

08003abc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d11f      	bne.n	8003b16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d855      	bhi.n	8003b88 <DMA_CheckFifoParam+0xcc>
 8003adc:	a201      	add	r2, pc, #4	; (adr r2, 8003ae4 <DMA_CheckFifoParam+0x28>)
 8003ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae2:	bf00      	nop
 8003ae4:	08003af5 	.word	0x08003af5
 8003ae8:	08003b07 	.word	0x08003b07
 8003aec:	08003af5 	.word	0x08003af5
 8003af0:	08003b89 	.word	0x08003b89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d045      	beq.n	8003b8c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b04:	e042      	b.n	8003b8c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b0e:	d13f      	bne.n	8003b90 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b14:	e03c      	b.n	8003b90 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b1e:	d121      	bne.n	8003b64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	d836      	bhi.n	8003b94 <DMA_CheckFifoParam+0xd8>
 8003b26:	a201      	add	r2, pc, #4	; (adr r2, 8003b2c <DMA_CheckFifoParam+0x70>)
 8003b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2c:	08003b3d 	.word	0x08003b3d
 8003b30:	08003b43 	.word	0x08003b43
 8003b34:	08003b3d 	.word	0x08003b3d
 8003b38:	08003b55 	.word	0x08003b55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b40:	e02f      	b.n	8003ba2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d024      	beq.n	8003b98 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b52:	e021      	b.n	8003b98 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b5c:	d11e      	bne.n	8003b9c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b62:	e01b      	b.n	8003b9c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d902      	bls.n	8003b70 <DMA_CheckFifoParam+0xb4>
 8003b6a:	2b03      	cmp	r3, #3
 8003b6c:	d003      	beq.n	8003b76 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b6e:	e018      	b.n	8003ba2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
      break;
 8003b74:	e015      	b.n	8003ba2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00e      	beq.n	8003ba0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	73fb      	strb	r3, [r7, #15]
      break;
 8003b86:	e00b      	b.n	8003ba0 <DMA_CheckFifoParam+0xe4>
      break;
 8003b88:	bf00      	nop
 8003b8a:	e00a      	b.n	8003ba2 <DMA_CheckFifoParam+0xe6>
      break;
 8003b8c:	bf00      	nop
 8003b8e:	e008      	b.n	8003ba2 <DMA_CheckFifoParam+0xe6>
      break;
 8003b90:	bf00      	nop
 8003b92:	e006      	b.n	8003ba2 <DMA_CheckFifoParam+0xe6>
      break;
 8003b94:	bf00      	nop
 8003b96:	e004      	b.n	8003ba2 <DMA_CheckFifoParam+0xe6>
      break;
 8003b98:	bf00      	nop
 8003b9a:	e002      	b.n	8003ba2 <DMA_CheckFifoParam+0xe6>
      break;   
 8003b9c:	bf00      	nop
 8003b9e:	e000      	b.n	8003ba2 <DMA_CheckFifoParam+0xe6>
      break;
 8003ba0:	bf00      	nop
    }
  } 
  
  return status; 
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e03b      	b.n	8003c3a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7ff f8ac 	bl	8002d34 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c00:	f023 0107 	bic.w	r1, r3, #7
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c1a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	68d1      	ldr	r1, [r2, #12]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6812      	ldr	r2, [r2, #0]
 8003c26:	430b      	orrs	r3, r1
 8003c28:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b086      	sub	sp, #24
 8003c46:	af02      	add	r7, sp, #8
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	607a      	str	r2, [r7, #4]
 8003c4e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_DMA2D_Start+0x1c>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e018      	b.n	8003c90 <HAL_DMA2D_Start+0x4e>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2202      	movs	r2, #2
 8003c6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	68b9      	ldr	r1, [r7, #8]
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 f989 	bl	8003f90 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0201 	orr.w	r2, r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d056      	beq.n	8003d62 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003cb4:	f7ff fc80 	bl	80035b8 <HAL_GetTick>
 8003cb8:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003cba:	e04b      	b.n	8003d54 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d023      	beq.n	8003d16 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cdc:	f043 0202 	orr.w	r2, r3, #2
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d005      	beq.n	8003cfa <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf2:	f043 0201 	orr.w	r2, r3, #1
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2221      	movs	r2, #33	; 0x21
 8003d00:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2204      	movs	r2, #4
 8003d06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e0a5      	b.n	8003e62 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1c:	d01a      	beq.n	8003d54 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003d1e:	f7ff fc4b 	bl	80035b8 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d302      	bcc.n	8003d34 <HAL_DMA2D_PollForTransfer+0x9c>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10f      	bne.n	8003d54 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d38:	f043 0220 	orr.w	r2, r3, #32
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2203      	movs	r2, #3
 8003d44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e086      	b.n	8003e62 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0ac      	beq.n	8003cbc <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	f003 0320 	and.w	r3, r3, #32
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d061      	beq.n	8003e48 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d84:	f7ff fc18 	bl	80035b8 <HAL_GetTick>
 8003d88:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003d8a:	e056      	b.n	8003e3a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d02e      	beq.n	8003dfc <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dac:	f043 0204 	orr.w	r2, r3, #4
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d005      	beq.n	8003dca <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc2:	f043 0202 	orr.w	r2, r3, #2
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d005      	beq.n	8003de0 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd8:	f043 0201 	orr.w	r2, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2229      	movs	r2, #41	; 0x29
 8003de6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2204      	movs	r2, #4
 8003dec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e032      	b.n	8003e62 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e02:	d01a      	beq.n	8003e3a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003e04:	f7ff fbd8 	bl	80035b8 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d302      	bcc.n	8003e1a <HAL_DMA2D_PollForTransfer+0x182>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10f      	bne.n	8003e3a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1e:	f043 0220 	orr.w	r2, r3, #32
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2203      	movs	r2, #3
 8003e2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e013      	b.n	8003e62 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0a1      	beq.n	8003d8c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2212      	movs	r2, #18
 8003e4e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_DMA2D_ConfigLayer+0x20>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e079      	b.n	8003f80 <HAL_DMA2D_ConfigLayer+0x114>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	3318      	adds	r3, #24
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	041b      	lsls	r3, r3, #16
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003eb6:	4b35      	ldr	r3, [pc, #212]	; (8003f8c <HAL_DMA2D_ConfigLayer+0x120>)
 8003eb8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b0a      	cmp	r3, #10
 8003ec0:	d003      	beq.n	8003eca <HAL_DMA2D_ConfigLayer+0x5e>
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b09      	cmp	r3, #9
 8003ec8:	d107      	bne.n	8003eda <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	e005      	b.n	8003ee6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	061b      	lsls	r3, r3, #24
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d120      	bne.n	8003f2e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	ea02 0103 	and.w	r1, r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	6812      	ldr	r2, [r2, #0]
 8003f0c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b0a      	cmp	r3, #10
 8003f14:	d003      	beq.n	8003f1e <HAL_DMA2D_ConfigLayer+0xb2>
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b09      	cmp	r3, #9
 8003f1c:	d127      	bne.n	8003f6e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	68da      	ldr	r2, [r3, #12]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003f2a:	629a      	str	r2, [r3, #40]	; 0x28
 8003f2c:	e01f      	b.n	8003f6e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	43db      	mvns	r3, r3
 8003f38:	ea02 0103 	and.w	r1, r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	6812      	ldr	r2, [r2, #0]
 8003f4e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b0a      	cmp	r3, #10
 8003f56:	d003      	beq.n	8003f60 <HAL_DMA2D_ConfigLayer+0xf4>
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b09      	cmp	r3, #9
 8003f5e:	d106      	bne.n	8003f6e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003f6c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	371c      	adds	r7, #28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	ff03000f 	.word	0xff03000f

08003f90 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b08b      	sub	sp, #44	; 0x2c
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	041a      	lsls	r2, r3, #16
 8003fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003fc8:	d174      	bne.n	80040b4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003fd0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003fd8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003fe0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d108      	bne.n	8004002 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8004000:	e053      	b.n	80040aa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d106      	bne.n	8004018 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	4313      	orrs	r3, r2
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	4313      	orrs	r3, r2
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
 8004016:	e048      	b.n	80040aa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b02      	cmp	r3, #2
 800401e:	d111      	bne.n	8004044 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	0cdb      	lsrs	r3, r3, #19
 8004024:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	0a9b      	lsrs	r3, r3, #10
 800402a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	08db      	lsrs	r3, r3, #3
 8004030:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	02db      	lsls	r3, r3, #11
 800403a:	4313      	orrs	r3, r2
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	4313      	orrs	r3, r2
 8004040:	627b      	str	r3, [r7, #36]	; 0x24
 8004042:	e032      	b.n	80040aa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	2b03      	cmp	r3, #3
 800404a:	d117      	bne.n	800407c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	0fdb      	lsrs	r3, r3, #31
 8004050:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	0cdb      	lsrs	r3, r3, #19
 8004056:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	0adb      	lsrs	r3, r3, #11
 800405c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	08db      	lsrs	r3, r3, #3
 8004062:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	029b      	lsls	r3, r3, #10
 800406c:	431a      	orrs	r2, r3
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	03db      	lsls	r3, r3, #15
 8004072:	4313      	orrs	r3, r2
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
 800407a:	e016      	b.n	80040aa <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	0f1b      	lsrs	r3, r3, #28
 8004080:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	0d1b      	lsrs	r3, r3, #20
 8004086:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	0b1b      	lsrs	r3, r3, #12
 800408c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	091b      	lsrs	r3, r3, #4
 8004092:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	011a      	lsls	r2, r3, #4
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	021b      	lsls	r3, r3, #8
 800409c:	431a      	orrs	r2, r3
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	031b      	lsls	r3, r3, #12
 80040a2:	4313      	orrs	r3, r2
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80040b2:	e003      	b.n	80040bc <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	60da      	str	r2, [r3, #12]
}
 80040bc:	bf00      	nop
 80040be:	372c      	adds	r7, #44	; 0x2c
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b089      	sub	sp, #36	; 0x24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040da:	2300      	movs	r3, #0
 80040dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	e177      	b.n	80043d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040e4:	2201      	movs	r2, #1
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4013      	ands	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	f040 8166 	bne.w	80043ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d00b      	beq.n	8004122 <HAL_GPIO_Init+0x5a>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d007      	beq.n	8004122 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004116:	2b11      	cmp	r3, #17
 8004118:	d003      	beq.n	8004122 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b12      	cmp	r3, #18
 8004120:	d130      	bne.n	8004184 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	2203      	movs	r2, #3
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	43db      	mvns	r3, r3
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	4013      	ands	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	4313      	orrs	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004158:	2201      	movs	r2, #1
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	43db      	mvns	r3, r3
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	4013      	ands	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	091b      	lsrs	r3, r3, #4
 800416e:	f003 0201 	and.w	r2, r3, #1
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	4313      	orrs	r3, r2
 800417c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	2203      	movs	r2, #3
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4013      	ands	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d003      	beq.n	80041c4 <HAL_GPIO_Init+0xfc>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b12      	cmp	r3, #18
 80041c2:	d123      	bne.n	800420c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	08da      	lsrs	r2, r3, #3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3208      	adds	r2, #8
 80041cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	220f      	movs	r2, #15
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	43db      	mvns	r3, r3
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4013      	ands	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	08da      	lsrs	r2, r3, #3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3208      	adds	r2, #8
 8004206:	69b9      	ldr	r1, [r7, #24]
 8004208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	2203      	movs	r2, #3
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	43db      	mvns	r3, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4013      	ands	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 0203 	and.w	r2, r3, #3
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	4313      	orrs	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80c0 	beq.w	80043ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	4b65      	ldr	r3, [pc, #404]	; (80043e8 <HAL_GPIO_Init+0x320>)
 8004254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004256:	4a64      	ldr	r2, [pc, #400]	; (80043e8 <HAL_GPIO_Init+0x320>)
 8004258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800425c:	6453      	str	r3, [r2, #68]	; 0x44
 800425e:	4b62      	ldr	r3, [pc, #392]	; (80043e8 <HAL_GPIO_Init+0x320>)
 8004260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800426a:	4a60      	ldr	r2, [pc, #384]	; (80043ec <HAL_GPIO_Init+0x324>)
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	089b      	lsrs	r3, r3, #2
 8004270:	3302      	adds	r3, #2
 8004272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	220f      	movs	r2, #15
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43db      	mvns	r3, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4013      	ands	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a57      	ldr	r2, [pc, #348]	; (80043f0 <HAL_GPIO_Init+0x328>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d037      	beq.n	8004306 <HAL_GPIO_Init+0x23e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a56      	ldr	r2, [pc, #344]	; (80043f4 <HAL_GPIO_Init+0x32c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d031      	beq.n	8004302 <HAL_GPIO_Init+0x23a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a55      	ldr	r2, [pc, #340]	; (80043f8 <HAL_GPIO_Init+0x330>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d02b      	beq.n	80042fe <HAL_GPIO_Init+0x236>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a54      	ldr	r2, [pc, #336]	; (80043fc <HAL_GPIO_Init+0x334>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d025      	beq.n	80042fa <HAL_GPIO_Init+0x232>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a53      	ldr	r2, [pc, #332]	; (8004400 <HAL_GPIO_Init+0x338>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d01f      	beq.n	80042f6 <HAL_GPIO_Init+0x22e>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a52      	ldr	r2, [pc, #328]	; (8004404 <HAL_GPIO_Init+0x33c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d019      	beq.n	80042f2 <HAL_GPIO_Init+0x22a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a51      	ldr	r2, [pc, #324]	; (8004408 <HAL_GPIO_Init+0x340>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d013      	beq.n	80042ee <HAL_GPIO_Init+0x226>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a50      	ldr	r2, [pc, #320]	; (800440c <HAL_GPIO_Init+0x344>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d00d      	beq.n	80042ea <HAL_GPIO_Init+0x222>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a4f      	ldr	r2, [pc, #316]	; (8004410 <HAL_GPIO_Init+0x348>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d007      	beq.n	80042e6 <HAL_GPIO_Init+0x21e>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a4e      	ldr	r2, [pc, #312]	; (8004414 <HAL_GPIO_Init+0x34c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d101      	bne.n	80042e2 <HAL_GPIO_Init+0x21a>
 80042de:	2309      	movs	r3, #9
 80042e0:	e012      	b.n	8004308 <HAL_GPIO_Init+0x240>
 80042e2:	230a      	movs	r3, #10
 80042e4:	e010      	b.n	8004308 <HAL_GPIO_Init+0x240>
 80042e6:	2308      	movs	r3, #8
 80042e8:	e00e      	b.n	8004308 <HAL_GPIO_Init+0x240>
 80042ea:	2307      	movs	r3, #7
 80042ec:	e00c      	b.n	8004308 <HAL_GPIO_Init+0x240>
 80042ee:	2306      	movs	r3, #6
 80042f0:	e00a      	b.n	8004308 <HAL_GPIO_Init+0x240>
 80042f2:	2305      	movs	r3, #5
 80042f4:	e008      	b.n	8004308 <HAL_GPIO_Init+0x240>
 80042f6:	2304      	movs	r3, #4
 80042f8:	e006      	b.n	8004308 <HAL_GPIO_Init+0x240>
 80042fa:	2303      	movs	r3, #3
 80042fc:	e004      	b.n	8004308 <HAL_GPIO_Init+0x240>
 80042fe:	2302      	movs	r3, #2
 8004300:	e002      	b.n	8004308 <HAL_GPIO_Init+0x240>
 8004302:	2301      	movs	r3, #1
 8004304:	e000      	b.n	8004308 <HAL_GPIO_Init+0x240>
 8004306:	2300      	movs	r3, #0
 8004308:	69fa      	ldr	r2, [r7, #28]
 800430a:	f002 0203 	and.w	r2, r2, #3
 800430e:	0092      	lsls	r2, r2, #2
 8004310:	4093      	lsls	r3, r2
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	4313      	orrs	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004318:	4934      	ldr	r1, [pc, #208]	; (80043ec <HAL_GPIO_Init+0x324>)
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	089b      	lsrs	r3, r3, #2
 800431e:	3302      	adds	r3, #2
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004326:	4b3c      	ldr	r3, [pc, #240]	; (8004418 <HAL_GPIO_Init+0x350>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	43db      	mvns	r3, r3
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	4013      	ands	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800434a:	4a33      	ldr	r2, [pc, #204]	; (8004418 <HAL_GPIO_Init+0x350>)
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004350:	4b31      	ldr	r3, [pc, #196]	; (8004418 <HAL_GPIO_Init+0x350>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	43db      	mvns	r3, r3
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4013      	ands	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004374:	4a28      	ldr	r2, [pc, #160]	; (8004418 <HAL_GPIO_Init+0x350>)
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800437a:	4b27      	ldr	r3, [pc, #156]	; (8004418 <HAL_GPIO_Init+0x350>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	43db      	mvns	r3, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4013      	ands	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800439e:	4a1e      	ldr	r2, [pc, #120]	; (8004418 <HAL_GPIO_Init+0x350>)
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043a4:	4b1c      	ldr	r3, [pc, #112]	; (8004418 <HAL_GPIO_Init+0x350>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	43db      	mvns	r3, r3
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	4013      	ands	r3, r2
 80043b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043c8:	4a13      	ldr	r2, [pc, #76]	; (8004418 <HAL_GPIO_Init+0x350>)
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	3301      	adds	r3, #1
 80043d2:	61fb      	str	r3, [r7, #28]
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	2b0f      	cmp	r3, #15
 80043d8:	f67f ae84 	bls.w	80040e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043dc:	bf00      	nop
 80043de:	3724      	adds	r7, #36	; 0x24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	40023800 	.word	0x40023800
 80043ec:	40013800 	.word	0x40013800
 80043f0:	40020000 	.word	0x40020000
 80043f4:	40020400 	.word	0x40020400
 80043f8:	40020800 	.word	0x40020800
 80043fc:	40020c00 	.word	0x40020c00
 8004400:	40021000 	.word	0x40021000
 8004404:	40021400 	.word	0x40021400
 8004408:	40021800 	.word	0x40021800
 800440c:	40021c00 	.word	0x40021c00
 8004410:	40022000 	.word	0x40022000
 8004414:	40022400 	.word	0x40022400
 8004418:	40013c00 	.word	0x40013c00

0800441c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004426:	2300      	movs	r3, #0
 8004428:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800442a:	2300      	movs	r3, #0
 800442c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800442e:	2300      	movs	r3, #0
 8004430:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004432:	2300      	movs	r3, #0
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	e0d9      	b.n	80045ec <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004438:	2201      	movs	r2, #1
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	4013      	ands	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	429a      	cmp	r2, r3
 8004450:	f040 80c9 	bne.w	80045e6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004454:	4a6a      	ldr	r2, [pc, #424]	; (8004600 <HAL_GPIO_DeInit+0x1e4>)
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	089b      	lsrs	r3, r3, #2
 800445a:	3302      	adds	r3, #2
 800445c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004460:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	220f      	movs	r2, #15
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	4013      	ands	r3, r2
 8004474:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a62      	ldr	r2, [pc, #392]	; (8004604 <HAL_GPIO_DeInit+0x1e8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d037      	beq.n	80044ee <HAL_GPIO_DeInit+0xd2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a61      	ldr	r2, [pc, #388]	; (8004608 <HAL_GPIO_DeInit+0x1ec>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d031      	beq.n	80044ea <HAL_GPIO_DeInit+0xce>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a60      	ldr	r2, [pc, #384]	; (800460c <HAL_GPIO_DeInit+0x1f0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d02b      	beq.n	80044e6 <HAL_GPIO_DeInit+0xca>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a5f      	ldr	r2, [pc, #380]	; (8004610 <HAL_GPIO_DeInit+0x1f4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d025      	beq.n	80044e2 <HAL_GPIO_DeInit+0xc6>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a5e      	ldr	r2, [pc, #376]	; (8004614 <HAL_GPIO_DeInit+0x1f8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d01f      	beq.n	80044de <HAL_GPIO_DeInit+0xc2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a5d      	ldr	r2, [pc, #372]	; (8004618 <HAL_GPIO_DeInit+0x1fc>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d019      	beq.n	80044da <HAL_GPIO_DeInit+0xbe>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a5c      	ldr	r2, [pc, #368]	; (800461c <HAL_GPIO_DeInit+0x200>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d013      	beq.n	80044d6 <HAL_GPIO_DeInit+0xba>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a5b      	ldr	r2, [pc, #364]	; (8004620 <HAL_GPIO_DeInit+0x204>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00d      	beq.n	80044d2 <HAL_GPIO_DeInit+0xb6>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a5a      	ldr	r2, [pc, #360]	; (8004624 <HAL_GPIO_DeInit+0x208>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d007      	beq.n	80044ce <HAL_GPIO_DeInit+0xb2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a59      	ldr	r2, [pc, #356]	; (8004628 <HAL_GPIO_DeInit+0x20c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d101      	bne.n	80044ca <HAL_GPIO_DeInit+0xae>
 80044c6:	2309      	movs	r3, #9
 80044c8:	e012      	b.n	80044f0 <HAL_GPIO_DeInit+0xd4>
 80044ca:	230a      	movs	r3, #10
 80044cc:	e010      	b.n	80044f0 <HAL_GPIO_DeInit+0xd4>
 80044ce:	2308      	movs	r3, #8
 80044d0:	e00e      	b.n	80044f0 <HAL_GPIO_DeInit+0xd4>
 80044d2:	2307      	movs	r3, #7
 80044d4:	e00c      	b.n	80044f0 <HAL_GPIO_DeInit+0xd4>
 80044d6:	2306      	movs	r3, #6
 80044d8:	e00a      	b.n	80044f0 <HAL_GPIO_DeInit+0xd4>
 80044da:	2305      	movs	r3, #5
 80044dc:	e008      	b.n	80044f0 <HAL_GPIO_DeInit+0xd4>
 80044de:	2304      	movs	r3, #4
 80044e0:	e006      	b.n	80044f0 <HAL_GPIO_DeInit+0xd4>
 80044e2:	2303      	movs	r3, #3
 80044e4:	e004      	b.n	80044f0 <HAL_GPIO_DeInit+0xd4>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e002      	b.n	80044f0 <HAL_GPIO_DeInit+0xd4>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <HAL_GPIO_DeInit+0xd4>
 80044ee:	2300      	movs	r3, #0
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	f002 0203 	and.w	r2, r2, #3
 80044f6:	0092      	lsls	r2, r2, #2
 80044f8:	4093      	lsls	r3, r2
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d132      	bne.n	8004566 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004500:	4b4a      	ldr	r3, [pc, #296]	; (800462c <HAL_GPIO_DeInit+0x210>)
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	43db      	mvns	r3, r3
 8004508:	4948      	ldr	r1, [pc, #288]	; (800462c <HAL_GPIO_DeInit+0x210>)
 800450a:	4013      	ands	r3, r2
 800450c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800450e:	4b47      	ldr	r3, [pc, #284]	; (800462c <HAL_GPIO_DeInit+0x210>)
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	43db      	mvns	r3, r3
 8004516:	4945      	ldr	r1, [pc, #276]	; (800462c <HAL_GPIO_DeInit+0x210>)
 8004518:	4013      	ands	r3, r2
 800451a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800451c:	4b43      	ldr	r3, [pc, #268]	; (800462c <HAL_GPIO_DeInit+0x210>)
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	43db      	mvns	r3, r3
 8004524:	4941      	ldr	r1, [pc, #260]	; (800462c <HAL_GPIO_DeInit+0x210>)
 8004526:	4013      	ands	r3, r2
 8004528:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800452a:	4b40      	ldr	r3, [pc, #256]	; (800462c <HAL_GPIO_DeInit+0x210>)
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	43db      	mvns	r3, r3
 8004532:	493e      	ldr	r1, [pc, #248]	; (800462c <HAL_GPIO_DeInit+0x210>)
 8004534:	4013      	ands	r3, r2
 8004536:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	220f      	movs	r2, #15
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004548:	4a2d      	ldr	r2, [pc, #180]	; (8004600 <HAL_GPIO_DeInit+0x1e4>)
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	089b      	lsrs	r3, r3, #2
 800454e:	3302      	adds	r3, #2
 8004550:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	43da      	mvns	r2, r3
 8004558:	4829      	ldr	r0, [pc, #164]	; (8004600 <HAL_GPIO_DeInit+0x1e4>)
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	089b      	lsrs	r3, r3, #2
 800455e:	400a      	ands	r2, r1
 8004560:	3302      	adds	r3, #2
 8004562:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	2103      	movs	r1, #3
 8004570:	fa01 f303 	lsl.w	r3, r1, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	401a      	ands	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	08da      	lsrs	r2, r3, #3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3208      	adds	r2, #8
 8004584:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	220f      	movs	r2, #15
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	43db      	mvns	r3, r3
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	08d2      	lsrs	r2, r2, #3
 800459c:	4019      	ands	r1, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3208      	adds	r2, #8
 80045a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	2103      	movs	r1, #3
 80045b0:	fa01 f303 	lsl.w	r3, r1, r3
 80045b4:	43db      	mvns	r3, r3
 80045b6:	401a      	ands	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	2101      	movs	r1, #1
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	fa01 f303 	lsl.w	r3, r1, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	401a      	ands	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	2103      	movs	r1, #3
 80045da:	fa01 f303 	lsl.w	r3, r1, r3
 80045de:	43db      	mvns	r3, r3
 80045e0:	401a      	ands	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	3301      	adds	r3, #1
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2b0f      	cmp	r3, #15
 80045f0:	f67f af22 	bls.w	8004438 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80045f4:	bf00      	nop
 80045f6:	371c      	adds	r7, #28
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	40013800 	.word	0x40013800
 8004604:	40020000 	.word	0x40020000
 8004608:	40020400 	.word	0x40020400
 800460c:	40020800 	.word	0x40020800
 8004610:	40020c00 	.word	0x40020c00
 8004614:	40021000 	.word	0x40021000
 8004618:	40021400 	.word	0x40021400
 800461c:	40021800 	.word	0x40021800
 8004620:	40021c00 	.word	0x40021c00
 8004624:	40022000 	.word	0x40022000
 8004628:	40022400 	.word	0x40022400
 800462c:	40013c00 	.word	0x40013c00

08004630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	460b      	mov	r3, r1
 800463a:	807b      	strh	r3, [r7, #2]
 800463c:	4613      	mov	r3, r2
 800463e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004640:	787b      	ldrb	r3, [r7, #1]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004646:	887a      	ldrh	r2, [r7, #2]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800464c:	e003      	b.n	8004656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800464e:	887b      	ldrh	r3, [r7, #2]
 8004650:	041a      	lsls	r2, r3, #16
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	619a      	str	r2, [r3, #24]
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
	...

08004664 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e11f      	b.n	80048b6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d106      	bne.n	8004690 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7fe fb74 	bl	8002d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2224      	movs	r2, #36	; 0x24
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0201 	bic.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046c8:	f001 f8b4 	bl	8005834 <HAL_RCC_GetPCLK1Freq>
 80046cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	4a7b      	ldr	r2, [pc, #492]	; (80048c0 <HAL_I2C_Init+0x25c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d807      	bhi.n	80046e8 <HAL_I2C_Init+0x84>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4a7a      	ldr	r2, [pc, #488]	; (80048c4 <HAL_I2C_Init+0x260>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	bf94      	ite	ls
 80046e0:	2301      	movls	r3, #1
 80046e2:	2300      	movhi	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	e006      	b.n	80046f6 <HAL_I2C_Init+0x92>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4a77      	ldr	r2, [pc, #476]	; (80048c8 <HAL_I2C_Init+0x264>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	bf94      	ite	ls
 80046f0:	2301      	movls	r3, #1
 80046f2:	2300      	movhi	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e0db      	b.n	80048b6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4a72      	ldr	r2, [pc, #456]	; (80048cc <HAL_I2C_Init+0x268>)
 8004702:	fba2 2303 	umull	r2, r3, r2, r3
 8004706:	0c9b      	lsrs	r3, r3, #18
 8004708:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	430a      	orrs	r2, r1
 800471c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	4a64      	ldr	r2, [pc, #400]	; (80048c0 <HAL_I2C_Init+0x25c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d802      	bhi.n	8004738 <HAL_I2C_Init+0xd4>
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	3301      	adds	r3, #1
 8004736:	e009      	b.n	800474c <HAL_I2C_Init+0xe8>
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800473e:	fb02 f303 	mul.w	r3, r2, r3
 8004742:	4a63      	ldr	r2, [pc, #396]	; (80048d0 <HAL_I2C_Init+0x26c>)
 8004744:	fba2 2303 	umull	r2, r3, r2, r3
 8004748:	099b      	lsrs	r3, r3, #6
 800474a:	3301      	adds	r3, #1
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6812      	ldr	r2, [r2, #0]
 8004750:	430b      	orrs	r3, r1
 8004752:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800475e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	4956      	ldr	r1, [pc, #344]	; (80048c0 <HAL_I2C_Init+0x25c>)
 8004768:	428b      	cmp	r3, r1
 800476a:	d80d      	bhi.n	8004788 <HAL_I2C_Init+0x124>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	1e59      	subs	r1, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	fbb1 f3f3 	udiv	r3, r1, r3
 800477a:	3301      	adds	r3, #1
 800477c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004780:	2b04      	cmp	r3, #4
 8004782:	bf38      	it	cc
 8004784:	2304      	movcc	r3, #4
 8004786:	e04f      	b.n	8004828 <HAL_I2C_Init+0x1c4>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d111      	bne.n	80047b4 <HAL_I2C_Init+0x150>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	1e58      	subs	r0, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6859      	ldr	r1, [r3, #4]
 8004798:	460b      	mov	r3, r1
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	440b      	add	r3, r1
 800479e:	fbb0 f3f3 	udiv	r3, r0, r3
 80047a2:	3301      	adds	r3, #1
 80047a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	bf0c      	ite	eq
 80047ac:	2301      	moveq	r3, #1
 80047ae:	2300      	movne	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	e012      	b.n	80047da <HAL_I2C_Init+0x176>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	1e58      	subs	r0, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6859      	ldr	r1, [r3, #4]
 80047bc:	460b      	mov	r3, r1
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	0099      	lsls	r1, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047ca:	3301      	adds	r3, #1
 80047cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	bf0c      	ite	eq
 80047d4:	2301      	moveq	r3, #1
 80047d6:	2300      	movne	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_I2C_Init+0x17e>
 80047de:	2301      	movs	r3, #1
 80047e0:	e022      	b.n	8004828 <HAL_I2C_Init+0x1c4>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10e      	bne.n	8004808 <HAL_I2C_Init+0x1a4>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	1e58      	subs	r0, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6859      	ldr	r1, [r3, #4]
 80047f2:	460b      	mov	r3, r1
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	440b      	add	r3, r1
 80047f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80047fc:	3301      	adds	r3, #1
 80047fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004806:	e00f      	b.n	8004828 <HAL_I2C_Init+0x1c4>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	1e58      	subs	r0, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6859      	ldr	r1, [r3, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	0099      	lsls	r1, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	fbb0 f3f3 	udiv	r3, r0, r3
 800481e:	3301      	adds	r3, #1
 8004820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004824:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	6809      	ldr	r1, [r1, #0]
 800482c:	4313      	orrs	r3, r2
 800482e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69da      	ldr	r2, [r3, #28]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004856:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6911      	ldr	r1, [r2, #16]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	68d2      	ldr	r2, [r2, #12]
 8004862:	4311      	orrs	r1, r2
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	430b      	orrs	r3, r1
 800486a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695a      	ldr	r2, [r3, #20]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0201 	orr.w	r2, r2, #1
 8004896:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	000186a0 	.word	0x000186a0
 80048c4:	001e847f 	.word	0x001e847f
 80048c8:	003d08ff 	.word	0x003d08ff
 80048cc:	431bde83 	.word	0x431bde83
 80048d0:	10624dd3 	.word	0x10624dd3

080048d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	d129      	bne.n	800493e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2224      	movs	r2, #36	; 0x24
 80048ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 0201 	bic.w	r2, r2, #1
 8004900:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0210 	bic.w	r2, r2, #16
 8004910:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f042 0201 	orr.w	r2, r2, #1
 8004930:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2220      	movs	r2, #32
 8004936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	e000      	b.n	8004940 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800493e:	2302      	movs	r3, #2
  }
}
 8004940:	4618      	mov	r0, r3
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004956:	2300      	movs	r3, #0
 8004958:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b20      	cmp	r3, #32
 8004964:	d12a      	bne.n	80049bc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2224      	movs	r2, #36	; 0x24
 800496a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0201 	bic.w	r2, r2, #1
 800497c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004986:	89fb      	ldrh	r3, [r7, #14]
 8004988:	f023 030f 	bic.w	r3, r3, #15
 800498c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	b29a      	uxth	r2, r3
 8004992:	89fb      	ldrh	r3, [r7, #14]
 8004994:	4313      	orrs	r3, r2
 8004996:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	89fa      	ldrh	r2, [r7, #14]
 800499e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0201 	orr.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049b8:	2300      	movs	r3, #0
 80049ba:	e000      	b.n	80049be <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80049bc:	2302      	movs	r3, #2
  }
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e0bf      	b.n	8004b5e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d106      	bne.n	80049f8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f7fe fa2a 	bl	8002e4c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699a      	ldr	r2, [r3, #24]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004a0e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6999      	ldr	r1, [r3, #24]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004a24:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6899      	ldr	r1, [r3, #8]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	4b4a      	ldr	r3, [pc, #296]	; (8004b68 <HAL_LTDC_Init+0x19c>)
 8004a40:	400b      	ands	r3, r1
 8004a42:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	041b      	lsls	r3, r3, #16
 8004a4a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6899      	ldr	r1, [r3, #8]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699a      	ldr	r2, [r3, #24]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68d9      	ldr	r1, [r3, #12]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	4b3e      	ldr	r3, [pc, #248]	; (8004b68 <HAL_LTDC_Init+0x19c>)
 8004a6e:	400b      	ands	r3, r1
 8004a70:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	041b      	lsls	r3, r3, #16
 8004a78:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68d9      	ldr	r1, [r3, #12]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a1a      	ldr	r2, [r3, #32]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6919      	ldr	r1, [r3, #16]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	4b33      	ldr	r3, [pc, #204]	; (8004b68 <HAL_LTDC_Init+0x19c>)
 8004a9c:	400b      	ands	r3, r1
 8004a9e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	041b      	lsls	r3, r3, #16
 8004aa6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6919      	ldr	r1, [r3, #16]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6959      	ldr	r1, [r3, #20]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	4b27      	ldr	r3, [pc, #156]	; (8004b68 <HAL_LTDC_Init+0x19c>)
 8004aca:	400b      	ands	r3, r1
 8004acc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad2:	041b      	lsls	r3, r3, #16
 8004ad4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6959      	ldr	r1, [r3, #20]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004af2:	021b      	lsls	r3, r3, #8
 8004af4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004afc:	041b      	lsls	r3, r3, #16
 8004afe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0206 	orr.w	r2, r2, #6
 8004b3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699a      	ldr	r2, [r3, #24]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0201 	orr.w	r2, r2, #1
 8004b4a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	f000f800 	.word	0xf000f800

08004b6c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004b6c:	b5b0      	push	{r4, r5, r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d101      	bne.n	8004b86 <HAL_LTDC_ConfigLayer+0x1a>
 8004b82:	2302      	movs	r3, #2
 8004b84:	e02c      	b.n	8004be0 <HAL_LTDC_ConfigLayer+0x74>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2202      	movs	r2, #2
 8004b92:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2134      	movs	r1, #52	; 0x34
 8004b9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	4614      	mov	r4, r2
 8004baa:	461d      	mov	r5, r3
 8004bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bb8:	682b      	ldr	r3, [r5, #0]
 8004bba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	68b9      	ldr	r1, [r7, #8]
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f83b 	bl	8004c3c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bdb0      	pop	{r4, r5, r7, pc}

08004be8 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <HAL_LTDC_EnableDither+0x16>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	e016      	b.n	8004c2c <HAL_LTDC_EnableDither+0x44>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2202      	movs	r2, #2
 8004c0a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8004c0e:	4b0a      	ldr	r3, [pc, #40]	; (8004c38 <HAL_LTDC_EnableDither+0x50>)
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	4a09      	ldr	r2, [pc, #36]	; (8004c38 <HAL_LTDC_EnableDither+0x50>)
 8004c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c18:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	40016800 	.word	0x40016800

08004c3c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b089      	sub	sp, #36	; 0x24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	0c1b      	lsrs	r3, r3, #16
 8004c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c58:	4413      	add	r3, r2
 8004c5a:	041b      	lsls	r3, r3, #16
 8004c5c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	461a      	mov	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	01db      	lsls	r3, r3, #7
 8004c68:	4413      	add	r3, r2
 8004c6a:	3384      	adds	r3, #132	; 0x84
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	6812      	ldr	r2, [r2, #0]
 8004c72:	4611      	mov	r1, r2
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	01d2      	lsls	r2, r2, #7
 8004c78:	440a      	add	r2, r1
 8004c7a:	3284      	adds	r2, #132	; 0x84
 8004c7c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004c80:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	0c1b      	lsrs	r3, r3, #16
 8004c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c92:	4413      	add	r3, r2
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	01db      	lsls	r3, r3, #7
 8004ca0:	440b      	add	r3, r1
 8004ca2:	3384      	adds	r3, #132	; 0x84
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cba:	4413      	add	r3, r2
 8004cbc:	041b      	lsls	r3, r3, #16
 8004cbe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	01db      	lsls	r3, r3, #7
 8004cca:	4413      	add	r3, r2
 8004ccc:	3384      	adds	r3, #132	; 0x84
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	6812      	ldr	r2, [r2, #0]
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	01d2      	lsls	r2, r2, #7
 8004cda:	440a      	add	r2, r1
 8004cdc:	3284      	adds	r2, #132	; 0x84
 8004cde:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004ce2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cf2:	4413      	add	r3, r2
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	01db      	lsls	r3, r3, #7
 8004d00:	440b      	add	r3, r1
 8004d02:	3384      	adds	r3, #132	; 0x84
 8004d04:	4619      	mov	r1, r3
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	461a      	mov	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	01db      	lsls	r3, r3, #7
 8004d16:	4413      	add	r3, r2
 8004d18:	3384      	adds	r3, #132	; 0x84
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	6812      	ldr	r2, [r2, #0]
 8004d20:	4611      	mov	r1, r2
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	01d2      	lsls	r2, r2, #7
 8004d26:	440a      	add	r2, r1
 8004d28:	3284      	adds	r2, #132	; 0x84
 8004d2a:	f023 0307 	bic.w	r3, r3, #7
 8004d2e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	461a      	mov	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	01db      	lsls	r3, r3, #7
 8004d3a:	4413      	add	r3, r2
 8004d3c:	3384      	adds	r3, #132	; 0x84
 8004d3e:	461a      	mov	r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004d4c:	021b      	lsls	r3, r3, #8
 8004d4e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004d56:	041b      	lsls	r3, r3, #16
 8004d58:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	061b      	lsls	r3, r3, #24
 8004d60:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	461a      	mov	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	01db      	lsls	r3, r3, #7
 8004d6c:	4413      	add	r3, r2
 8004d6e:	3384      	adds	r3, #132	; 0x84
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	461a      	mov	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	01db      	lsls	r3, r3, #7
 8004d7c:	4413      	add	r3, r2
 8004d7e:	3384      	adds	r3, #132	; 0x84
 8004d80:	461a      	mov	r2, r3
 8004d82:	2300      	movs	r3, #0
 8004d84:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	431a      	orrs	r2, r3
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	431a      	orrs	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	01db      	lsls	r3, r3, #7
 8004da0:	440b      	add	r3, r1
 8004da2:	3384      	adds	r3, #132	; 0x84
 8004da4:	4619      	mov	r1, r3
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	461a      	mov	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	01db      	lsls	r3, r3, #7
 8004db6:	4413      	add	r3, r2
 8004db8:	3384      	adds	r3, #132	; 0x84
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	6812      	ldr	r2, [r2, #0]
 8004dc0:	4611      	mov	r1, r2
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	01d2      	lsls	r2, r2, #7
 8004dc6:	440a      	add	r2, r1
 8004dc8:	3284      	adds	r2, #132	; 0x84
 8004dca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004dce:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	01db      	lsls	r3, r3, #7
 8004dda:	4413      	add	r3, r2
 8004ddc:	3384      	adds	r3, #132	; 0x84
 8004dde:	461a      	mov	r2, r3
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	461a      	mov	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	01db      	lsls	r3, r3, #7
 8004df0:	4413      	add	r3, r2
 8004df2:	3384      	adds	r3, #132	; 0x84
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	6812      	ldr	r2, [r2, #0]
 8004dfa:	4611      	mov	r1, r2
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	01d2      	lsls	r2, r2, #7
 8004e00:	440a      	add	r2, r1
 8004e02:	3284      	adds	r2, #132	; 0x84
 8004e04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004e08:	f023 0307 	bic.w	r3, r3, #7
 8004e0c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	69da      	ldr	r2, [r3, #28]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	68f9      	ldr	r1, [r7, #12]
 8004e18:	6809      	ldr	r1, [r1, #0]
 8004e1a:	4608      	mov	r0, r1
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	01c9      	lsls	r1, r1, #7
 8004e20:	4401      	add	r1, r0
 8004e22:	3184      	adds	r1, #132	; 0x84
 8004e24:	4313      	orrs	r3, r2
 8004e26:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	01db      	lsls	r3, r3, #7
 8004e32:	4413      	add	r3, r2
 8004e34:	3384      	adds	r3, #132	; 0x84
 8004e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	01db      	lsls	r3, r3, #7
 8004e42:	4413      	add	r3, r2
 8004e44:	3384      	adds	r3, #132	; 0x84
 8004e46:	461a      	mov	r2, r3
 8004e48:	2300      	movs	r3, #0
 8004e4a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	461a      	mov	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	01db      	lsls	r3, r3, #7
 8004e56:	4413      	add	r3, r2
 8004e58:	3384      	adds	r3, #132	; 0x84
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d102      	bne.n	8004e70 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004e6a:	2304      	movs	r3, #4
 8004e6c:	61fb      	str	r3, [r7, #28]
 8004e6e:	e01b      	b.n	8004ea8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d102      	bne.n	8004e7e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	61fb      	str	r3, [r7, #28]
 8004e7c:	e014      	b.n	8004ea8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d00b      	beq.n	8004e9e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d007      	beq.n	8004e9e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d003      	beq.n	8004e9e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004e9a:	2b07      	cmp	r3, #7
 8004e9c:	d102      	bne.n	8004ea4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	61fb      	str	r3, [r7, #28]
 8004ea2:	e001      	b.n	8004ea8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	461a      	mov	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	01db      	lsls	r3, r3, #7
 8004eb2:	4413      	add	r3, r2
 8004eb4:	3384      	adds	r3, #132	; 0x84
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	6812      	ldr	r2, [r2, #0]
 8004ebc:	4611      	mov	r1, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	01d2      	lsls	r2, r2, #7
 8004ec2:	440a      	add	r2, r1
 8004ec4:	3284      	adds	r2, #132	; 0x84
 8004ec6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004eca:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed0:	69fa      	ldr	r2, [r7, #28]
 8004ed2:	fb02 f303 	mul.w	r3, r2, r3
 8004ed6:	041a      	lsls	r2, r3, #16
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	6859      	ldr	r1, [r3, #4]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	1acb      	subs	r3, r1, r3
 8004ee2:	69f9      	ldr	r1, [r7, #28]
 8004ee4:	fb01 f303 	mul.w	r3, r1, r3
 8004ee8:	3303      	adds	r3, #3
 8004eea:	68f9      	ldr	r1, [r7, #12]
 8004eec:	6809      	ldr	r1, [r1, #0]
 8004eee:	4608      	mov	r0, r1
 8004ef0:	6879      	ldr	r1, [r7, #4]
 8004ef2:	01c9      	lsls	r1, r1, #7
 8004ef4:	4401      	add	r1, r0
 8004ef6:	3184      	adds	r1, #132	; 0x84
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	461a      	mov	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	01db      	lsls	r3, r3, #7
 8004f06:	4413      	add	r3, r2
 8004f08:	3384      	adds	r3, #132	; 0x84
 8004f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	4611      	mov	r1, r2
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	01d2      	lsls	r2, r2, #7
 8004f16:	440a      	add	r2, r1
 8004f18:	3284      	adds	r2, #132	; 0x84
 8004f1a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004f1e:	f023 0307 	bic.w	r3, r3, #7
 8004f22:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	01db      	lsls	r3, r3, #7
 8004f2e:	4413      	add	r3, r2
 8004f30:	3384      	adds	r3, #132	; 0x84
 8004f32:	461a      	mov	r2, r3
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f38:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	01db      	lsls	r3, r3, #7
 8004f44:	4413      	add	r3, r2
 8004f46:	3384      	adds	r3, #132	; 0x84
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	6812      	ldr	r2, [r2, #0]
 8004f4e:	4611      	mov	r1, r2
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	01d2      	lsls	r2, r2, #7
 8004f54:	440a      	add	r2, r1
 8004f56:	3284      	adds	r2, #132	; 0x84
 8004f58:	f043 0301 	orr.w	r3, r3, #1
 8004f5c:	6013      	str	r3, [r2, #0]
}
 8004f5e:	bf00      	nop
 8004f60:	3724      	adds	r7, #36	; 0x24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
	...

08004f6c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004f76:	2300      	movs	r3, #0
 8004f78:	603b      	str	r3, [r7, #0]
 8004f7a:	4b20      	ldr	r3, [pc, #128]	; (8004ffc <HAL_PWREx_EnableOverDrive+0x90>)
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	4a1f      	ldr	r2, [pc, #124]	; (8004ffc <HAL_PWREx_EnableOverDrive+0x90>)
 8004f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f84:	6413      	str	r3, [r2, #64]	; 0x40
 8004f86:	4b1d      	ldr	r3, [pc, #116]	; (8004ffc <HAL_PWREx_EnableOverDrive+0x90>)
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f8e:	603b      	str	r3, [r7, #0]
 8004f90:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004f92:	4b1b      	ldr	r3, [pc, #108]	; (8005000 <HAL_PWREx_EnableOverDrive+0x94>)
 8004f94:	2201      	movs	r2, #1
 8004f96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f98:	f7fe fb0e 	bl	80035b8 <HAL_GetTick>
 8004f9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004f9e:	e009      	b.n	8004fb4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004fa0:	f7fe fb0a 	bl	80035b8 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fae:	d901      	bls.n	8004fb4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e01f      	b.n	8004ff4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004fb4:	4b13      	ldr	r3, [pc, #76]	; (8005004 <HAL_PWREx_EnableOverDrive+0x98>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc0:	d1ee      	bne.n	8004fa0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004fc2:	4b11      	ldr	r3, [pc, #68]	; (8005008 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fc8:	f7fe faf6 	bl	80035b8 <HAL_GetTick>
 8004fcc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004fce:	e009      	b.n	8004fe4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004fd0:	f7fe faf2 	bl	80035b8 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fde:	d901      	bls.n	8004fe4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e007      	b.n	8004ff4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004fe4:	4b07      	ldr	r3, [pc, #28]	; (8005004 <HAL_PWREx_EnableOverDrive+0x98>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ff0:	d1ee      	bne.n	8004fd0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40023800 	.word	0x40023800
 8005000:	420e0040 	.word	0x420e0040
 8005004:	40007000 	.word	0x40007000
 8005008:	420e0044 	.word	0x420e0044

0800500c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e25b      	b.n	80054d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d075      	beq.n	8005116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800502a:	4ba3      	ldr	r3, [pc, #652]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
 8005032:	2b04      	cmp	r3, #4
 8005034:	d00c      	beq.n	8005050 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005036:	4ba0      	ldr	r3, [pc, #640]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800503e:	2b08      	cmp	r3, #8
 8005040:	d112      	bne.n	8005068 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005042:	4b9d      	ldr	r3, [pc, #628]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800504e:	d10b      	bne.n	8005068 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005050:	4b99      	ldr	r3, [pc, #612]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d05b      	beq.n	8005114 <HAL_RCC_OscConfig+0x108>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d157      	bne.n	8005114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e236      	b.n	80054d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005070:	d106      	bne.n	8005080 <HAL_RCC_OscConfig+0x74>
 8005072:	4b91      	ldr	r3, [pc, #580]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a90      	ldr	r2, [pc, #576]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 8005078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	e01d      	b.n	80050bc <HAL_RCC_OscConfig+0xb0>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005088:	d10c      	bne.n	80050a4 <HAL_RCC_OscConfig+0x98>
 800508a:	4b8b      	ldr	r3, [pc, #556]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a8a      	ldr	r2, [pc, #552]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 8005090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	4b88      	ldr	r3, [pc, #544]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a87      	ldr	r2, [pc, #540]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 800509c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	e00b      	b.n	80050bc <HAL_RCC_OscConfig+0xb0>
 80050a4:	4b84      	ldr	r3, [pc, #528]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a83      	ldr	r2, [pc, #524]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 80050aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	4b81      	ldr	r3, [pc, #516]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a80      	ldr	r2, [pc, #512]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 80050b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d013      	beq.n	80050ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c4:	f7fe fa78 	bl	80035b8 <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050cc:	f7fe fa74 	bl	80035b8 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b64      	cmp	r3, #100	; 0x64
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e1fb      	b.n	80054d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050de:	4b76      	ldr	r3, [pc, #472]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0f0      	beq.n	80050cc <HAL_RCC_OscConfig+0xc0>
 80050ea:	e014      	b.n	8005116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ec:	f7fe fa64 	bl	80035b8 <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050f4:	f7fe fa60 	bl	80035b8 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b64      	cmp	r3, #100	; 0x64
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e1e7      	b.n	80054d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005106:	4b6c      	ldr	r3, [pc, #432]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1f0      	bne.n	80050f4 <HAL_RCC_OscConfig+0xe8>
 8005112:	e000      	b.n	8005116 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d063      	beq.n	80051ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005122:	4b65      	ldr	r3, [pc, #404]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 030c 	and.w	r3, r3, #12
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00b      	beq.n	8005146 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800512e:	4b62      	ldr	r3, [pc, #392]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005136:	2b08      	cmp	r3, #8
 8005138:	d11c      	bne.n	8005174 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800513a:	4b5f      	ldr	r3, [pc, #380]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d116      	bne.n	8005174 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005146:	4b5c      	ldr	r3, [pc, #368]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d005      	beq.n	800515e <HAL_RCC_OscConfig+0x152>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d001      	beq.n	800515e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e1bb      	b.n	80054d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800515e:	4b56      	ldr	r3, [pc, #344]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	4952      	ldr	r1, [pc, #328]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 800516e:	4313      	orrs	r3, r2
 8005170:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005172:	e03a      	b.n	80051ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d020      	beq.n	80051be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800517c:	4b4f      	ldr	r3, [pc, #316]	; (80052bc <HAL_RCC_OscConfig+0x2b0>)
 800517e:	2201      	movs	r2, #1
 8005180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005182:	f7fe fa19 	bl	80035b8 <HAL_GetTick>
 8005186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005188:	e008      	b.n	800519c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800518a:	f7fe fa15 	bl	80035b8 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d901      	bls.n	800519c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e19c      	b.n	80054d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800519c:	4b46      	ldr	r3, [pc, #280]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d0f0      	beq.n	800518a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051a8:	4b43      	ldr	r3, [pc, #268]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	4940      	ldr	r1, [pc, #256]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	600b      	str	r3, [r1, #0]
 80051bc:	e015      	b.n	80051ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051be:	4b3f      	ldr	r3, [pc, #252]	; (80052bc <HAL_RCC_OscConfig+0x2b0>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c4:	f7fe f9f8 	bl	80035b8 <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051cc:	f7fe f9f4 	bl	80035b8 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e17b      	b.n	80054d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051de:	4b36      	ldr	r3, [pc, #216]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1f0      	bne.n	80051cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d030      	beq.n	8005258 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d016      	beq.n	800522c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051fe:	4b30      	ldr	r3, [pc, #192]	; (80052c0 <HAL_RCC_OscConfig+0x2b4>)
 8005200:	2201      	movs	r2, #1
 8005202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005204:	f7fe f9d8 	bl	80035b8 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800520c:	f7fe f9d4 	bl	80035b8 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e15b      	b.n	80054d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800521e:	4b26      	ldr	r3, [pc, #152]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 8005220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0f0      	beq.n	800520c <HAL_RCC_OscConfig+0x200>
 800522a:	e015      	b.n	8005258 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800522c:	4b24      	ldr	r3, [pc, #144]	; (80052c0 <HAL_RCC_OscConfig+0x2b4>)
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005232:	f7fe f9c1 	bl	80035b8 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800523a:	f7fe f9bd 	bl	80035b8 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e144      	b.n	80054d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800524c:	4b1a      	ldr	r3, [pc, #104]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 800524e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1f0      	bne.n	800523a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 80a0 	beq.w	80053a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005266:	2300      	movs	r3, #0
 8005268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800526a:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10f      	bne.n	8005296 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005276:	2300      	movs	r3, #0
 8005278:	60bb      	str	r3, [r7, #8]
 800527a:	4b0f      	ldr	r3, [pc, #60]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	4a0e      	ldr	r2, [pc, #56]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 8005280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005284:	6413      	str	r3, [r2, #64]	; 0x40
 8005286:	4b0c      	ldr	r3, [pc, #48]	; (80052b8 <HAL_RCC_OscConfig+0x2ac>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528e:	60bb      	str	r3, [r7, #8]
 8005290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005292:	2301      	movs	r3, #1
 8005294:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005296:	4b0b      	ldr	r3, [pc, #44]	; (80052c4 <HAL_RCC_OscConfig+0x2b8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d121      	bne.n	80052e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052a2:	4b08      	ldr	r3, [pc, #32]	; (80052c4 <HAL_RCC_OscConfig+0x2b8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a07      	ldr	r2, [pc, #28]	; (80052c4 <HAL_RCC_OscConfig+0x2b8>)
 80052a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ae:	f7fe f983 	bl	80035b8 <HAL_GetTick>
 80052b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b4:	e011      	b.n	80052da <HAL_RCC_OscConfig+0x2ce>
 80052b6:	bf00      	nop
 80052b8:	40023800 	.word	0x40023800
 80052bc:	42470000 	.word	0x42470000
 80052c0:	42470e80 	.word	0x42470e80
 80052c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052c8:	f7fe f976 	bl	80035b8 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e0fd      	b.n	80054d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052da:	4b81      	ldr	r3, [pc, #516]	; (80054e0 <HAL_RCC_OscConfig+0x4d4>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0f0      	beq.n	80052c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d106      	bne.n	80052fc <HAL_RCC_OscConfig+0x2f0>
 80052ee:	4b7d      	ldr	r3, [pc, #500]	; (80054e4 <HAL_RCC_OscConfig+0x4d8>)
 80052f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f2:	4a7c      	ldr	r2, [pc, #496]	; (80054e4 <HAL_RCC_OscConfig+0x4d8>)
 80052f4:	f043 0301 	orr.w	r3, r3, #1
 80052f8:	6713      	str	r3, [r2, #112]	; 0x70
 80052fa:	e01c      	b.n	8005336 <HAL_RCC_OscConfig+0x32a>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	2b05      	cmp	r3, #5
 8005302:	d10c      	bne.n	800531e <HAL_RCC_OscConfig+0x312>
 8005304:	4b77      	ldr	r3, [pc, #476]	; (80054e4 <HAL_RCC_OscConfig+0x4d8>)
 8005306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005308:	4a76      	ldr	r2, [pc, #472]	; (80054e4 <HAL_RCC_OscConfig+0x4d8>)
 800530a:	f043 0304 	orr.w	r3, r3, #4
 800530e:	6713      	str	r3, [r2, #112]	; 0x70
 8005310:	4b74      	ldr	r3, [pc, #464]	; (80054e4 <HAL_RCC_OscConfig+0x4d8>)
 8005312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005314:	4a73      	ldr	r2, [pc, #460]	; (80054e4 <HAL_RCC_OscConfig+0x4d8>)
 8005316:	f043 0301 	orr.w	r3, r3, #1
 800531a:	6713      	str	r3, [r2, #112]	; 0x70
 800531c:	e00b      	b.n	8005336 <HAL_RCC_OscConfig+0x32a>
 800531e:	4b71      	ldr	r3, [pc, #452]	; (80054e4 <HAL_RCC_OscConfig+0x4d8>)
 8005320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005322:	4a70      	ldr	r2, [pc, #448]	; (80054e4 <HAL_RCC_OscConfig+0x4d8>)
 8005324:	f023 0301 	bic.w	r3, r3, #1
 8005328:	6713      	str	r3, [r2, #112]	; 0x70
 800532a:	4b6e      	ldr	r3, [pc, #440]	; (80054e4 <HAL_RCC_OscConfig+0x4d8>)
 800532c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532e:	4a6d      	ldr	r2, [pc, #436]	; (80054e4 <HAL_RCC_OscConfig+0x4d8>)
 8005330:	f023 0304 	bic.w	r3, r3, #4
 8005334:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d015      	beq.n	800536a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800533e:	f7fe f93b 	bl	80035b8 <HAL_GetTick>
 8005342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005344:	e00a      	b.n	800535c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005346:	f7fe f937 	bl	80035b8 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	f241 3288 	movw	r2, #5000	; 0x1388
 8005354:	4293      	cmp	r3, r2
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e0bc      	b.n	80054d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800535c:	4b61      	ldr	r3, [pc, #388]	; (80054e4 <HAL_RCC_OscConfig+0x4d8>)
 800535e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0ee      	beq.n	8005346 <HAL_RCC_OscConfig+0x33a>
 8005368:	e014      	b.n	8005394 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800536a:	f7fe f925 	bl	80035b8 <HAL_GetTick>
 800536e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005370:	e00a      	b.n	8005388 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005372:	f7fe f921 	bl	80035b8 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005380:	4293      	cmp	r3, r2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e0a6      	b.n	80054d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005388:	4b56      	ldr	r3, [pc, #344]	; (80054e4 <HAL_RCC_OscConfig+0x4d8>)
 800538a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1ee      	bne.n	8005372 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005394:	7dfb      	ldrb	r3, [r7, #23]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d105      	bne.n	80053a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800539a:	4b52      	ldr	r3, [pc, #328]	; (80054e4 <HAL_RCC_OscConfig+0x4d8>)
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	4a51      	ldr	r2, [pc, #324]	; (80054e4 <HAL_RCC_OscConfig+0x4d8>)
 80053a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 8092 	beq.w	80054d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053b0:	4b4c      	ldr	r3, [pc, #304]	; (80054e4 <HAL_RCC_OscConfig+0x4d8>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 030c 	and.w	r3, r3, #12
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d05c      	beq.n	8005476 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d141      	bne.n	8005448 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c4:	4b48      	ldr	r3, [pc, #288]	; (80054e8 <HAL_RCC_OscConfig+0x4dc>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ca:	f7fe f8f5 	bl	80035b8 <HAL_GetTick>
 80053ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d0:	e008      	b.n	80053e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053d2:	f7fe f8f1 	bl	80035b8 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e078      	b.n	80054d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053e4:	4b3f      	ldr	r3, [pc, #252]	; (80054e4 <HAL_RCC_OscConfig+0x4d8>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1f0      	bne.n	80053d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	69da      	ldr	r2, [r3, #28]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	431a      	orrs	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fe:	019b      	lsls	r3, r3, #6
 8005400:	431a      	orrs	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005406:	085b      	lsrs	r3, r3, #1
 8005408:	3b01      	subs	r3, #1
 800540a:	041b      	lsls	r3, r3, #16
 800540c:	431a      	orrs	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005412:	061b      	lsls	r3, r3, #24
 8005414:	4933      	ldr	r1, [pc, #204]	; (80054e4 <HAL_RCC_OscConfig+0x4d8>)
 8005416:	4313      	orrs	r3, r2
 8005418:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800541a:	4b33      	ldr	r3, [pc, #204]	; (80054e8 <HAL_RCC_OscConfig+0x4dc>)
 800541c:	2201      	movs	r2, #1
 800541e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005420:	f7fe f8ca 	bl	80035b8 <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005428:	f7fe f8c6 	bl	80035b8 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e04d      	b.n	80054d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800543a:	4b2a      	ldr	r3, [pc, #168]	; (80054e4 <HAL_RCC_OscConfig+0x4d8>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0f0      	beq.n	8005428 <HAL_RCC_OscConfig+0x41c>
 8005446:	e045      	b.n	80054d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005448:	4b27      	ldr	r3, [pc, #156]	; (80054e8 <HAL_RCC_OscConfig+0x4dc>)
 800544a:	2200      	movs	r2, #0
 800544c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800544e:	f7fe f8b3 	bl	80035b8 <HAL_GetTick>
 8005452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005454:	e008      	b.n	8005468 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005456:	f7fe f8af 	bl	80035b8 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d901      	bls.n	8005468 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e036      	b.n	80054d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005468:	4b1e      	ldr	r3, [pc, #120]	; (80054e4 <HAL_RCC_OscConfig+0x4d8>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1f0      	bne.n	8005456 <HAL_RCC_OscConfig+0x44a>
 8005474:	e02e      	b.n	80054d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d101      	bne.n	8005482 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e029      	b.n	80054d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005482:	4b18      	ldr	r3, [pc, #96]	; (80054e4 <HAL_RCC_OscConfig+0x4d8>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	429a      	cmp	r2, r3
 8005494:	d11c      	bne.n	80054d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d115      	bne.n	80054d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054aa:	4013      	ands	r3, r2
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d10d      	bne.n	80054d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80054be:	429a      	cmp	r2, r3
 80054c0:	d106      	bne.n	80054d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d001      	beq.n	80054d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e000      	b.n	80054d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	40007000 	.word	0x40007000
 80054e4:	40023800 	.word	0x40023800
 80054e8:	42470060 	.word	0x42470060

080054ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e0cc      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005500:	4b68      	ldr	r3, [pc, #416]	; (80056a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 030f 	and.w	r3, r3, #15
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d90c      	bls.n	8005528 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800550e:	4b65      	ldr	r3, [pc, #404]	; (80056a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	b2d2      	uxtb	r2, r2
 8005514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005516:	4b63      	ldr	r3, [pc, #396]	; (80056a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	429a      	cmp	r2, r3
 8005522:	d001      	beq.n	8005528 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e0b8      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d020      	beq.n	8005576 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d005      	beq.n	800554c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005540:	4b59      	ldr	r3, [pc, #356]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	4a58      	ldr	r2, [pc, #352]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005546:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800554a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0308 	and.w	r3, r3, #8
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005558:	4b53      	ldr	r3, [pc, #332]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	4a52      	ldr	r2, [pc, #328]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 800555e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005562:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005564:	4b50      	ldr	r3, [pc, #320]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	494d      	ldr	r1, [pc, #308]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005572:	4313      	orrs	r3, r2
 8005574:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d044      	beq.n	800560c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d107      	bne.n	800559a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800558a:	4b47      	ldr	r3, [pc, #284]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d119      	bne.n	80055ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e07f      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d003      	beq.n	80055aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055a6:	2b03      	cmp	r3, #3
 80055a8:	d107      	bne.n	80055ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055aa:	4b3f      	ldr	r3, [pc, #252]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d109      	bne.n	80055ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e06f      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ba:	4b3b      	ldr	r3, [pc, #236]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e067      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055ca:	4b37      	ldr	r3, [pc, #220]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f023 0203 	bic.w	r2, r3, #3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	4934      	ldr	r1, [pc, #208]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055dc:	f7fd ffec 	bl	80035b8 <HAL_GetTick>
 80055e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e2:	e00a      	b.n	80055fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055e4:	f7fd ffe8 	bl	80035b8 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e04f      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fa:	4b2b      	ldr	r3, [pc, #172]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 020c 	and.w	r2, r3, #12
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	429a      	cmp	r2, r3
 800560a:	d1eb      	bne.n	80055e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800560c:	4b25      	ldr	r3, [pc, #148]	; (80056a4 <HAL_RCC_ClockConfig+0x1b8>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 030f 	and.w	r3, r3, #15
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	429a      	cmp	r2, r3
 8005618:	d20c      	bcs.n	8005634 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561a:	4b22      	ldr	r3, [pc, #136]	; (80056a4 <HAL_RCC_ClockConfig+0x1b8>)
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005622:	4b20      	ldr	r3, [pc, #128]	; (80056a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 030f 	and.w	r3, r3, #15
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	429a      	cmp	r2, r3
 800562e:	d001      	beq.n	8005634 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e032      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	d008      	beq.n	8005652 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005640:	4b19      	ldr	r3, [pc, #100]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	4916      	ldr	r1, [pc, #88]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 800564e:	4313      	orrs	r3, r2
 8005650:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d009      	beq.n	8005672 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800565e:	4b12      	ldr	r3, [pc, #72]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	490e      	ldr	r1, [pc, #56]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 800566e:	4313      	orrs	r3, r2
 8005670:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005672:	f000 f821 	bl	80056b8 <HAL_RCC_GetSysClockFreq>
 8005676:	4601      	mov	r1, r0
 8005678:	4b0b      	ldr	r3, [pc, #44]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	091b      	lsrs	r3, r3, #4
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	4a0a      	ldr	r2, [pc, #40]	; (80056ac <HAL_RCC_ClockConfig+0x1c0>)
 8005684:	5cd3      	ldrb	r3, [r2, r3]
 8005686:	fa21 f303 	lsr.w	r3, r1, r3
 800568a:	4a09      	ldr	r2, [pc, #36]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 800568c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800568e:	4b09      	ldr	r3, [pc, #36]	; (80056b4 <HAL_RCC_ClockConfig+0x1c8>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4618      	mov	r0, r3
 8005694:	f7fd ff4c 	bl	8003530 <HAL_InitTick>

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	40023c00 	.word	0x40023c00
 80056a8:	40023800 	.word	0x40023800
 80056ac:	08009608 	.word	0x08009608
 80056b0:	20000044 	.word	0x20000044
 80056b4:	20000048 	.word	0x20000048

080056b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056be:	2300      	movs	r3, #0
 80056c0:	607b      	str	r3, [r7, #4]
 80056c2:	2300      	movs	r3, #0
 80056c4:	60fb      	str	r3, [r7, #12]
 80056c6:	2300      	movs	r3, #0
 80056c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056ce:	4b50      	ldr	r3, [pc, #320]	; (8005810 <HAL_RCC_GetSysClockFreq+0x158>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 030c 	and.w	r3, r3, #12
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d007      	beq.n	80056ea <HAL_RCC_GetSysClockFreq+0x32>
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d008      	beq.n	80056f0 <HAL_RCC_GetSysClockFreq+0x38>
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f040 808d 	bne.w	80057fe <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056e4:	4b4b      	ldr	r3, [pc, #300]	; (8005814 <HAL_RCC_GetSysClockFreq+0x15c>)
 80056e6:	60bb      	str	r3, [r7, #8]
       break;
 80056e8:	e08c      	b.n	8005804 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056ea:	4b4b      	ldr	r3, [pc, #300]	; (8005818 <HAL_RCC_GetSysClockFreq+0x160>)
 80056ec:	60bb      	str	r3, [r7, #8]
      break;
 80056ee:	e089      	b.n	8005804 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056f0:	4b47      	ldr	r3, [pc, #284]	; (8005810 <HAL_RCC_GetSysClockFreq+0x158>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056fa:	4b45      	ldr	r3, [pc, #276]	; (8005810 <HAL_RCC_GetSysClockFreq+0x158>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d023      	beq.n	800574e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005706:	4b42      	ldr	r3, [pc, #264]	; (8005810 <HAL_RCC_GetSysClockFreq+0x158>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	099b      	lsrs	r3, r3, #6
 800570c:	f04f 0400 	mov.w	r4, #0
 8005710:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005714:	f04f 0200 	mov.w	r2, #0
 8005718:	ea03 0501 	and.w	r5, r3, r1
 800571c:	ea04 0602 	and.w	r6, r4, r2
 8005720:	4a3d      	ldr	r2, [pc, #244]	; (8005818 <HAL_RCC_GetSysClockFreq+0x160>)
 8005722:	fb02 f106 	mul.w	r1, r2, r6
 8005726:	2200      	movs	r2, #0
 8005728:	fb02 f205 	mul.w	r2, r2, r5
 800572c:	440a      	add	r2, r1
 800572e:	493a      	ldr	r1, [pc, #232]	; (8005818 <HAL_RCC_GetSysClockFreq+0x160>)
 8005730:	fba5 0101 	umull	r0, r1, r5, r1
 8005734:	1853      	adds	r3, r2, r1
 8005736:	4619      	mov	r1, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f04f 0400 	mov.w	r4, #0
 800573e:	461a      	mov	r2, r3
 8005740:	4623      	mov	r3, r4
 8005742:	f7fa fd53 	bl	80001ec <__aeabi_uldivmod>
 8005746:	4603      	mov	r3, r0
 8005748:	460c      	mov	r4, r1
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	e049      	b.n	80057e2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800574e:	4b30      	ldr	r3, [pc, #192]	; (8005810 <HAL_RCC_GetSysClockFreq+0x158>)
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	099b      	lsrs	r3, r3, #6
 8005754:	f04f 0400 	mov.w	r4, #0
 8005758:	f240 11ff 	movw	r1, #511	; 0x1ff
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	ea03 0501 	and.w	r5, r3, r1
 8005764:	ea04 0602 	and.w	r6, r4, r2
 8005768:	4629      	mov	r1, r5
 800576a:	4632      	mov	r2, r6
 800576c:	f04f 0300 	mov.w	r3, #0
 8005770:	f04f 0400 	mov.w	r4, #0
 8005774:	0154      	lsls	r4, r2, #5
 8005776:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800577a:	014b      	lsls	r3, r1, #5
 800577c:	4619      	mov	r1, r3
 800577e:	4622      	mov	r2, r4
 8005780:	1b49      	subs	r1, r1, r5
 8005782:	eb62 0206 	sbc.w	r2, r2, r6
 8005786:	f04f 0300 	mov.w	r3, #0
 800578a:	f04f 0400 	mov.w	r4, #0
 800578e:	0194      	lsls	r4, r2, #6
 8005790:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005794:	018b      	lsls	r3, r1, #6
 8005796:	1a5b      	subs	r3, r3, r1
 8005798:	eb64 0402 	sbc.w	r4, r4, r2
 800579c:	f04f 0100 	mov.w	r1, #0
 80057a0:	f04f 0200 	mov.w	r2, #0
 80057a4:	00e2      	lsls	r2, r4, #3
 80057a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80057aa:	00d9      	lsls	r1, r3, #3
 80057ac:	460b      	mov	r3, r1
 80057ae:	4614      	mov	r4, r2
 80057b0:	195b      	adds	r3, r3, r5
 80057b2:	eb44 0406 	adc.w	r4, r4, r6
 80057b6:	f04f 0100 	mov.w	r1, #0
 80057ba:	f04f 0200 	mov.w	r2, #0
 80057be:	02a2      	lsls	r2, r4, #10
 80057c0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80057c4:	0299      	lsls	r1, r3, #10
 80057c6:	460b      	mov	r3, r1
 80057c8:	4614      	mov	r4, r2
 80057ca:	4618      	mov	r0, r3
 80057cc:	4621      	mov	r1, r4
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f04f 0400 	mov.w	r4, #0
 80057d4:	461a      	mov	r2, r3
 80057d6:	4623      	mov	r3, r4
 80057d8:	f7fa fd08 	bl	80001ec <__aeabi_uldivmod>
 80057dc:	4603      	mov	r3, r0
 80057de:	460c      	mov	r4, r1
 80057e0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057e2:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <HAL_RCC_GetSysClockFreq+0x158>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	0c1b      	lsrs	r3, r3, #16
 80057e8:	f003 0303 	and.w	r3, r3, #3
 80057ec:	3301      	adds	r3, #1
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057fa:	60bb      	str	r3, [r7, #8]
      break;
 80057fc:	e002      	b.n	8005804 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057fe:	4b05      	ldr	r3, [pc, #20]	; (8005814 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005800:	60bb      	str	r3, [r7, #8]
      break;
 8005802:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005804:	68bb      	ldr	r3, [r7, #8]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800580e:	bf00      	nop
 8005810:	40023800 	.word	0x40023800
 8005814:	00f42400 	.word	0x00f42400
 8005818:	017d7840 	.word	0x017d7840

0800581c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005820:	4b03      	ldr	r3, [pc, #12]	; (8005830 <HAL_RCC_GetHCLKFreq+0x14>)
 8005822:	681b      	ldr	r3, [r3, #0]
}
 8005824:	4618      	mov	r0, r3
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	20000044 	.word	0x20000044

08005834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005838:	f7ff fff0 	bl	800581c <HAL_RCC_GetHCLKFreq>
 800583c:	4601      	mov	r1, r0
 800583e:	4b05      	ldr	r3, [pc, #20]	; (8005854 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	0a9b      	lsrs	r3, r3, #10
 8005844:	f003 0307 	and.w	r3, r3, #7
 8005848:	4a03      	ldr	r2, [pc, #12]	; (8005858 <HAL_RCC_GetPCLK1Freq+0x24>)
 800584a:	5cd3      	ldrb	r3, [r2, r3]
 800584c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005850:	4618      	mov	r0, r3
 8005852:	bd80      	pop	{r7, pc}
 8005854:	40023800 	.word	0x40023800
 8005858:	08009618 	.word	0x08009618

0800585c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005860:	f7ff ffdc 	bl	800581c <HAL_RCC_GetHCLKFreq>
 8005864:	4601      	mov	r1, r0
 8005866:	4b05      	ldr	r3, [pc, #20]	; (800587c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	0b5b      	lsrs	r3, r3, #13
 800586c:	f003 0307 	and.w	r3, r3, #7
 8005870:	4a03      	ldr	r2, [pc, #12]	; (8005880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005872:	5cd3      	ldrb	r3, [r2, r3]
 8005874:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005878:	4618      	mov	r0, r3
 800587a:	bd80      	pop	{r7, pc}
 800587c:	40023800 	.word	0x40023800
 8005880:	08009618 	.word	0x08009618

08005884 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10b      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d105      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d075      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058b8:	4bad      	ldr	r3, [pc, #692]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058be:	f7fd fe7b 	bl	80035b8 <HAL_GetTick>
 80058c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058c4:	e008      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80058c6:	f7fd fe77 	bl	80035b8 <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d901      	bls.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e18b      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058d8:	4ba6      	ldr	r3, [pc, #664]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1f0      	bne.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d009      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	019a      	lsls	r2, r3, #6
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	071b      	lsls	r3, r3, #28
 80058fc:	499d      	ldr	r1, [pc, #628]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01f      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005910:	4b98      	ldr	r3, [pc, #608]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005916:	0f1b      	lsrs	r3, r3, #28
 8005918:	f003 0307 	and.w	r3, r3, #7
 800591c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	019a      	lsls	r2, r3, #6
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	061b      	lsls	r3, r3, #24
 800592a:	431a      	orrs	r2, r3
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	071b      	lsls	r3, r3, #28
 8005930:	4990      	ldr	r1, [pc, #576]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005932:	4313      	orrs	r3, r2
 8005934:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005938:	4b8e      	ldr	r3, [pc, #568]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800593a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800593e:	f023 021f 	bic.w	r2, r3, #31
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	3b01      	subs	r3, #1
 8005948:	498a      	ldr	r1, [pc, #552]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800594a:	4313      	orrs	r3, r2
 800594c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00d      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	019a      	lsls	r2, r3, #6
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	061b      	lsls	r3, r3, #24
 8005968:	431a      	orrs	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	071b      	lsls	r3, r3, #28
 8005970:	4980      	ldr	r1, [pc, #512]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005972:	4313      	orrs	r3, r2
 8005974:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005978:	4b7d      	ldr	r3, [pc, #500]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800597a:	2201      	movs	r2, #1
 800597c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800597e:	f7fd fe1b 	bl	80035b8 <HAL_GetTick>
 8005982:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005984:	e008      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005986:	f7fd fe17 	bl	80035b8 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d901      	bls.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e12b      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005998:	4b76      	ldr	r3, [pc, #472]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d0f0      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d105      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d079      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80059bc:	4b6e      	ldr	r3, [pc, #440]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059c2:	f7fd fdf9 	bl	80035b8 <HAL_GetTick>
 80059c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059c8:	e008      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80059ca:	f7fd fdf5 	bl	80035b8 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e109      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059dc:	4b65      	ldr	r3, [pc, #404]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059e8:	d0ef      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0304 	and.w	r3, r3, #4
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d020      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80059f6:	4b5f      	ldr	r3, [pc, #380]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80059f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fc:	0f1b      	lsrs	r3, r3, #28
 80059fe:	f003 0307 	and.w	r3, r3, #7
 8005a02:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	019a      	lsls	r2, r3, #6
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	061b      	lsls	r3, r3, #24
 8005a10:	431a      	orrs	r2, r3
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	071b      	lsls	r3, r3, #28
 8005a16:	4957      	ldr	r1, [pc, #348]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a1e:	4b55      	ldr	r3, [pc, #340]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a24:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	021b      	lsls	r3, r3, #8
 8005a30:	4950      	ldr	r1, [pc, #320]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d01e      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a44:	4b4b      	ldr	r3, [pc, #300]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4a:	0e1b      	lsrs	r3, r3, #24
 8005a4c:	f003 030f 	and.w	r3, r3, #15
 8005a50:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	019a      	lsls	r2, r3, #6
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	061b      	lsls	r3, r3, #24
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	071b      	lsls	r3, r3, #28
 8005a64:	4943      	ldr	r1, [pc, #268]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005a6c:	4b41      	ldr	r3, [pc, #260]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	493e      	ldr	r1, [pc, #248]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005a82:	4b3d      	ldr	r3, [pc, #244]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a84:	2201      	movs	r2, #1
 8005a86:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a88:	f7fd fd96 	bl	80035b8 <HAL_GetTick>
 8005a8c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a8e:	e008      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005a90:	f7fd fd92 	bl	80035b8 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e0a6      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005aa2:	4b34      	ldr	r3, [pc, #208]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aae:	d1ef      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0320 	and.w	r3, r3, #32
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 808d 	beq.w	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	4b2c      	ldr	r3, [pc, #176]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	4a2b      	ldr	r2, [pc, #172]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005acc:	6413      	str	r3, [r2, #64]	; 0x40
 8005ace:	4b29      	ldr	r3, [pc, #164]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005ada:	4b28      	ldr	r3, [pc, #160]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a27      	ldr	r2, [pc, #156]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ae6:	f7fd fd67 	bl	80035b8 <HAL_GetTick>
 8005aea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005aec:	e008      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005aee:	f7fd fd63 	bl	80035b8 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e077      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b00:	4b1e      	ldr	r3, [pc, #120]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0f0      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b0c:	4b19      	ldr	r3, [pc, #100]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b14:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d039      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d032      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b2a:	4b12      	ldr	r3, [pc, #72]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b32:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b34:	4b12      	ldr	r3, [pc, #72]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005b36:	2201      	movs	r2, #1
 8005b38:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b3a:	4b11      	ldr	r3, [pc, #68]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b40:	4a0c      	ldr	r2, [pc, #48]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b46:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d11e      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b52:	f7fd fd31 	bl	80035b8 <HAL_GetTick>
 8005b56:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b58:	e014      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b5a:	f7fd fd2d 	bl	80035b8 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d90b      	bls.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e03f      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005b70:	42470068 	.word	0x42470068
 8005b74:	40023800 	.word	0x40023800
 8005b78:	42470070 	.word	0x42470070
 8005b7c:	40007000 	.word	0x40007000
 8005b80:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b84:	4b1c      	ldr	r3, [pc, #112]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0e4      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b9c:	d10d      	bne.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005b9e:	4b16      	ldr	r3, [pc, #88]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005baa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb2:	4911      	ldr	r1, [pc, #68]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	608b      	str	r3, [r1, #8]
 8005bb8:	e005      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005bba:	4b0f      	ldr	r3, [pc, #60]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	4a0e      	ldr	r2, [pc, #56]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bc0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005bc4:	6093      	str	r3, [r2, #8]
 8005bc6:	4b0c      	ldr	r3, [pc, #48]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bd2:	4909      	ldr	r1, [pc, #36]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0310 	and.w	r3, r3, #16
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d004      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005bea:	4b04      	ldr	r3, [pc, #16]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005bec:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3718      	adds	r7, #24
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	40023800 	.word	0x40023800
 8005bfc:	424711e0 	.word	0x424711e0

08005c00 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e025      	b.n	8005c60 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d106      	bne.n	8005c2e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7fd fb85 	bl	8003338 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2202      	movs	r2, #2
 8005c32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	4619      	mov	r1, r3
 8005c40:	4610      	mov	r0, r2
 8005c42:	f001 fc47 	bl	80074d4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6818      	ldr	r0, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	6839      	ldr	r1, [r7, #0]
 8005c52:	f001 fcb2 	bl	80075ba <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3708      	adds	r7, #8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d101      	bne.n	8005c84 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005c80:	2302      	movs	r3, #2
 8005c82:	e018      	b.n	8005cb6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	68b9      	ldr	r1, [r7, #8]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f001 fd0f 	bl	80076b8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d104      	bne.n	8005cac <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2205      	movs	r2, #5
 8005ca6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005caa:	e003      	b.n	8005cb4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b082      	sub	sp, #8
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d101      	bne.n	8005cd8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e00e      	b.n	8005cf6 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6839      	ldr	r1, [r7, #0]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f001 fd22 	bl	8007730 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b082      	sub	sp, #8
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e056      	b.n	8005dbe <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d106      	bne.n	8005d30 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7fd f99c 	bl	8003068 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	431a      	orrs	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	431a      	orrs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	ea42 0103 	orr.w	r1, r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	0c1b      	lsrs	r3, r3, #16
 8005d8e:	f003 0104 	and.w	r1, r3, #4
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69da      	ldr	r2, [r3, #28]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b082      	sub	sp, #8
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e01a      	b.n	8005e0e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dee:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7fd f981 	bl	80030f8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b088      	sub	sp, #32
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	60f8      	str	r0, [r7, #12]
 8005e1e:	60b9      	str	r1, [r7, #8]
 8005e20:	603b      	str	r3, [r7, #0]
 8005e22:	4613      	mov	r3, r2
 8005e24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <HAL_SPI_Transmit+0x22>
 8005e34:	2302      	movs	r3, #2
 8005e36:	e11e      	b.n	8006076 <HAL_SPI_Transmit+0x260>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e40:	f7fd fbba 	bl	80035b8 <HAL_GetTick>
 8005e44:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e46:	88fb      	ldrh	r3, [r7, #6]
 8005e48:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d002      	beq.n	8005e5c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e56:	2302      	movs	r3, #2
 8005e58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e5a:	e103      	b.n	8006064 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d002      	beq.n	8005e68 <HAL_SPI_Transmit+0x52>
 8005e62:	88fb      	ldrh	r3, [r7, #6]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d102      	bne.n	8005e6e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e6c:	e0fa      	b.n	8006064 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2203      	movs	r2, #3
 8005e72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	88fa      	ldrh	r2, [r7, #6]
 8005e86:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	88fa      	ldrh	r2, [r7, #6]
 8005e8c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eb4:	d107      	bne.n	8005ec6 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ec4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed0:	2b40      	cmp	r3, #64	; 0x40
 8005ed2:	d007      	beq.n	8005ee4 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ee2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eec:	d14b      	bne.n	8005f86 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d002      	beq.n	8005efc <HAL_SPI_Transmit+0xe6>
 8005ef6:	8afb      	ldrh	r3, [r7, #22]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d13e      	bne.n	8005f7a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f00:	881a      	ldrh	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0c:	1c9a      	adds	r2, r3, #2
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f20:	e02b      	b.n	8005f7a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d112      	bne.n	8005f56 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f34:	881a      	ldrh	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f40:	1c9a      	adds	r2, r3, #2
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f54:	e011      	b.n	8005f7a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f56:	f7fd fb2f 	bl	80035b8 <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d803      	bhi.n	8005f6e <HAL_SPI_Transmit+0x158>
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6c:	d102      	bne.n	8005f74 <HAL_SPI_Transmit+0x15e>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d102      	bne.n	8005f7a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f78:	e074      	b.n	8006064 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1ce      	bne.n	8005f22 <HAL_SPI_Transmit+0x10c>
 8005f84:	e04c      	b.n	8006020 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <HAL_SPI_Transmit+0x17e>
 8005f8e:	8afb      	ldrh	r3, [r7, #22]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d140      	bne.n	8006016 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	330c      	adds	r3, #12
 8005f9e:	7812      	ldrb	r2, [r2, #0]
 8005fa0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005fba:	e02c      	b.n	8006016 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d113      	bne.n	8005ff2 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	330c      	adds	r3, #12
 8005fd4:	7812      	ldrb	r2, [r2, #0]
 8005fd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fdc:	1c5a      	adds	r2, r3, #1
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ff0:	e011      	b.n	8006016 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ff2:	f7fd fae1 	bl	80035b8 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d803      	bhi.n	800600a <HAL_SPI_Transmit+0x1f4>
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006008:	d102      	bne.n	8006010 <HAL_SPI_Transmit+0x1fa>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d102      	bne.n	8006016 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006014:	e026      	b.n	8006064 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800601a:	b29b      	uxth	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1cd      	bne.n	8005fbc <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	6839      	ldr	r1, [r7, #0]
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 fbb3 	bl	8006790 <SPI_EndRxTxTransaction>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2220      	movs	r2, #32
 8006034:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10a      	bne.n	8006054 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800603e:	2300      	movs	r3, #0
 8006040:	613b      	str	r3, [r7, #16]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	613b      	str	r3, [r7, #16]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	613b      	str	r3, [r7, #16]
 8006052:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	77fb      	strb	r3, [r7, #31]
 8006060:	e000      	b.n	8006064 <HAL_SPI_Transmit+0x24e>
  }

error:
 8006062:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006074:	7ffb      	ldrb	r3, [r7, #31]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3720      	adds	r7, #32
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b088      	sub	sp, #32
 8006082:	af02      	add	r7, sp, #8
 8006084:	60f8      	str	r0, [r7, #12]
 8006086:	60b9      	str	r1, [r7, #8]
 8006088:	603b      	str	r3, [r7, #0]
 800608a:	4613      	mov	r3, r2
 800608c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800608e:	2300      	movs	r3, #0
 8006090:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800609a:	d112      	bne.n	80060c2 <HAL_SPI_Receive+0x44>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10e      	bne.n	80060c2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2204      	movs	r2, #4
 80060a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80060ac:	88fa      	ldrh	r2, [r7, #6]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	4613      	mov	r3, r2
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	68b9      	ldr	r1, [r7, #8]
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f000 f8e9 	bl	8006290 <HAL_SPI_TransmitReceive>
 80060be:	4603      	mov	r3, r0
 80060c0:	e0e2      	b.n	8006288 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_SPI_Receive+0x52>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e0db      	b.n	8006288 <HAL_SPI_Receive+0x20a>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060d8:	f7fd fa6e 	bl	80035b8 <HAL_GetTick>
 80060dc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d002      	beq.n	80060f0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80060ea:	2302      	movs	r3, #2
 80060ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060ee:	e0c2      	b.n	8006276 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <HAL_SPI_Receive+0x7e>
 80060f6:	88fb      	ldrh	r3, [r7, #6]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d102      	bne.n	8006102 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006100:	e0b9      	b.n	8006276 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2204      	movs	r2, #4
 8006106:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	88fa      	ldrh	r2, [r7, #6]
 800611a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	88fa      	ldrh	r2, [r7, #6]
 8006120:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006148:	d107      	bne.n	800615a <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006158:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006164:	2b40      	cmp	r3, #64	; 0x40
 8006166:	d007      	beq.n	8006178 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006176:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d162      	bne.n	8006246 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006180:	e02e      	b.n	80061e0 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b01      	cmp	r3, #1
 800618e:	d115      	bne.n	80061bc <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f103 020c 	add.w	r2, r3, #12
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619c:	7812      	ldrb	r2, [r2, #0]
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061ba:	e011      	b.n	80061e0 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061bc:	f7fd f9fc 	bl	80035b8 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d803      	bhi.n	80061d4 <HAL_SPI_Receive+0x156>
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d2:	d102      	bne.n	80061da <HAL_SPI_Receive+0x15c>
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d102      	bne.n	80061e0 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80061de:	e04a      	b.n	8006276 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1cb      	bne.n	8006182 <HAL_SPI_Receive+0x104>
 80061ea:	e031      	b.n	8006250 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d113      	bne.n	8006222 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68da      	ldr	r2, [r3, #12]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	b292      	uxth	r2, r2
 8006206:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620c:	1c9a      	adds	r2, r3, #2
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006216:	b29b      	uxth	r3, r3
 8006218:	3b01      	subs	r3, #1
 800621a:	b29a      	uxth	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006220:	e011      	b.n	8006246 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006222:	f7fd f9c9 	bl	80035b8 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	429a      	cmp	r2, r3
 8006230:	d803      	bhi.n	800623a <HAL_SPI_Receive+0x1bc>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006238:	d102      	bne.n	8006240 <HAL_SPI_Receive+0x1c2>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d102      	bne.n	8006246 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006244:	e017      	b.n	8006276 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800624a:	b29b      	uxth	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1cd      	bne.n	80061ec <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	6839      	ldr	r1, [r7, #0]
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 fa35 	bl	80066c4 <SPI_EndRxTransaction>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2220      	movs	r2, #32
 8006264:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626a:	2b00      	cmp	r3, #0
 800626c:	d002      	beq.n	8006274 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	75fb      	strb	r3, [r7, #23]
 8006272:	e000      	b.n	8006276 <HAL_SPI_Receive+0x1f8>
  }

error :
 8006274:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006286:	7dfb      	ldrb	r3, [r7, #23]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08c      	sub	sp, #48	; 0x30
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
 800629c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800629e:	2301      	movs	r3, #1
 80062a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d101      	bne.n	80062b6 <HAL_SPI_TransmitReceive+0x26>
 80062b2:	2302      	movs	r3, #2
 80062b4:	e18a      	b.n	80065cc <HAL_SPI_TransmitReceive+0x33c>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062be:	f7fd f97b 	bl	80035b8 <HAL_GetTick>
 80062c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80062d4:	887b      	ldrh	r3, [r7, #2]
 80062d6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d00f      	beq.n	8006300 <HAL_SPI_TransmitReceive+0x70>
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062e6:	d107      	bne.n	80062f8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d103      	bne.n	80062f8 <HAL_SPI_TransmitReceive+0x68>
 80062f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	d003      	beq.n	8006300 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80062f8:	2302      	movs	r3, #2
 80062fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062fe:	e15b      	b.n	80065b8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d005      	beq.n	8006312 <HAL_SPI_TransmitReceive+0x82>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <HAL_SPI_TransmitReceive+0x82>
 800630c:	887b      	ldrh	r3, [r7, #2]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d103      	bne.n	800631a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006318:	e14e      	b.n	80065b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b04      	cmp	r3, #4
 8006324:	d003      	beq.n	800632e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2205      	movs	r2, #5
 800632a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	887a      	ldrh	r2, [r7, #2]
 800633e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	887a      	ldrh	r2, [r7, #2]
 8006344:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	887a      	ldrh	r2, [r7, #2]
 8006350:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	887a      	ldrh	r2, [r7, #2]
 8006356:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636e:	2b40      	cmp	r3, #64	; 0x40
 8006370:	d007      	beq.n	8006382 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006380:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800638a:	d178      	bne.n	800647e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d002      	beq.n	800639a <HAL_SPI_TransmitReceive+0x10a>
 8006394:	8b7b      	ldrh	r3, [r7, #26]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d166      	bne.n	8006468 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639e:	881a      	ldrh	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063aa:	1c9a      	adds	r2, r3, #2
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	3b01      	subs	r3, #1
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063be:	e053      	b.n	8006468 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d11b      	bne.n	8006406 <HAL_SPI_TransmitReceive+0x176>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d016      	beq.n	8006406 <HAL_SPI_TransmitReceive+0x176>
 80063d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d113      	bne.n	8006406 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e2:	881a      	ldrh	r2, [r3, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ee:	1c9a      	adds	r2, r3, #2
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	3b01      	subs	r3, #1
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	2b01      	cmp	r3, #1
 8006412:	d119      	bne.n	8006448 <HAL_SPI_TransmitReceive+0x1b8>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006418:	b29b      	uxth	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d014      	beq.n	8006448 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68da      	ldr	r2, [r3, #12]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006428:	b292      	uxth	r2, r2
 800642a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006430:	1c9a      	adds	r2, r3, #2
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800643a:	b29b      	uxth	r3, r3
 800643c:	3b01      	subs	r3, #1
 800643e:	b29a      	uxth	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006444:	2301      	movs	r3, #1
 8006446:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006448:	f7fd f8b6 	bl	80035b8 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006454:	429a      	cmp	r2, r3
 8006456:	d807      	bhi.n	8006468 <HAL_SPI_TransmitReceive+0x1d8>
 8006458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645e:	d003      	beq.n	8006468 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006466:	e0a7      	b.n	80065b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800646c:	b29b      	uxth	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1a6      	bne.n	80063c0 <HAL_SPI_TransmitReceive+0x130>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006476:	b29b      	uxth	r3, r3
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1a1      	bne.n	80063c0 <HAL_SPI_TransmitReceive+0x130>
 800647c:	e07c      	b.n	8006578 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <HAL_SPI_TransmitReceive+0x1fc>
 8006486:	8b7b      	ldrh	r3, [r7, #26]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d16b      	bne.n	8006564 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	330c      	adds	r3, #12
 8006496:	7812      	ldrb	r2, [r2, #0]
 8006498:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649e:	1c5a      	adds	r2, r3, #1
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	3b01      	subs	r3, #1
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064b2:	e057      	b.n	8006564 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d11c      	bne.n	80064fc <HAL_SPI_TransmitReceive+0x26c>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d017      	beq.n	80064fc <HAL_SPI_TransmitReceive+0x26c>
 80064cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d114      	bne.n	80064fc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	330c      	adds	r3, #12
 80064dc:	7812      	ldrb	r2, [r2, #0]
 80064de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e4:	1c5a      	adds	r2, r3, #1
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064f8:	2300      	movs	r3, #0
 80064fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	2b01      	cmp	r3, #1
 8006508:	d119      	bne.n	800653e <HAL_SPI_TransmitReceive+0x2ae>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800650e:	b29b      	uxth	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	d014      	beq.n	800653e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68da      	ldr	r2, [r3, #12]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651e:	b2d2      	uxtb	r2, r2
 8006520:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006530:	b29b      	uxth	r3, r3
 8006532:	3b01      	subs	r3, #1
 8006534:	b29a      	uxth	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800653a:	2301      	movs	r3, #1
 800653c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800653e:	f7fd f83b 	bl	80035b8 <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800654a:	429a      	cmp	r2, r3
 800654c:	d803      	bhi.n	8006556 <HAL_SPI_TransmitReceive+0x2c6>
 800654e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006554:	d102      	bne.n	800655c <HAL_SPI_TransmitReceive+0x2cc>
 8006556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006558:	2b00      	cmp	r3, #0
 800655a:	d103      	bne.n	8006564 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006562:	e029      	b.n	80065b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006568:	b29b      	uxth	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1a2      	bne.n	80064b4 <HAL_SPI_TransmitReceive+0x224>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006572:	b29b      	uxth	r3, r3
 8006574:	2b00      	cmp	r3, #0
 8006576:	d19d      	bne.n	80064b4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800657a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 f907 	bl	8006790 <SPI_EndRxTxTransaction>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d006      	beq.n	8006596 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2220      	movs	r2, #32
 8006592:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006594:	e010      	b.n	80065b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10b      	bne.n	80065b6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	e000      	b.n	80065b8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80065b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3730      	adds	r7, #48	; 0x30
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065e2:	b2db      	uxtb	r3, r3
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	603b      	str	r3, [r7, #0]
 80065fc:	4613      	mov	r3, r2
 80065fe:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006600:	e04c      	b.n	800669c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006608:	d048      	beq.n	800669c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800660a:	f7fc ffd5 	bl	80035b8 <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	429a      	cmp	r2, r3
 8006618:	d902      	bls.n	8006620 <SPI_WaitFlagStateUntilTimeout+0x30>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d13d      	bne.n	800669c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800662e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006638:	d111      	bne.n	800665e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006642:	d004      	beq.n	800664e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800664c:	d107      	bne.n	800665e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800665c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006666:	d10f      	bne.n	8006688 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006676:	601a      	str	r2, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006686:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e00f      	b.n	80066bc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689a      	ldr	r2, [r3, #8]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	4013      	ands	r3, r2
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	bf0c      	ite	eq
 80066ac:	2301      	moveq	r3, #1
 80066ae:	2300      	movne	r3, #0
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	461a      	mov	r2, r3
 80066b4:	79fb      	ldrb	r3, [r7, #7]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d1a3      	bne.n	8006602 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066d8:	d111      	bne.n	80066fe <SPI_EndRxTransaction+0x3a>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066e2:	d004      	beq.n	80066ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ec:	d107      	bne.n	80066fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066fc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006706:	d12a      	bne.n	800675e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006710:	d012      	beq.n	8006738 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2200      	movs	r2, #0
 800671a:	2180      	movs	r1, #128	; 0x80
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f7ff ff67 	bl	80065f0 <SPI_WaitFlagStateUntilTimeout>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d02d      	beq.n	8006784 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800672c:	f043 0220 	orr.w	r2, r3, #32
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e026      	b.n	8006786 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	2200      	movs	r2, #0
 8006740:	2101      	movs	r1, #1
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f7ff ff54 	bl	80065f0 <SPI_WaitFlagStateUntilTimeout>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d01a      	beq.n	8006784 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006752:	f043 0220 	orr.w	r2, r3, #32
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e013      	b.n	8006786 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	2200      	movs	r2, #0
 8006766:	2101      	movs	r1, #1
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f7ff ff41 	bl	80065f0 <SPI_WaitFlagStateUntilTimeout>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d007      	beq.n	8006784 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006778:	f043 0220 	orr.w	r2, r3, #32
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e000      	b.n	8006786 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
	...

08006790 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af02      	add	r7, sp, #8
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800679c:	4b1b      	ldr	r3, [pc, #108]	; (800680c <SPI_EndRxTxTransaction+0x7c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a1b      	ldr	r2, [pc, #108]	; (8006810 <SPI_EndRxTxTransaction+0x80>)
 80067a2:	fba2 2303 	umull	r2, r3, r2, r3
 80067a6:	0d5b      	lsrs	r3, r3, #21
 80067a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80067ac:	fb02 f303 	mul.w	r3, r2, r3
 80067b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067ba:	d112      	bne.n	80067e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2200      	movs	r2, #0
 80067c4:	2180      	movs	r1, #128	; 0x80
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f7ff ff12 	bl	80065f0 <SPI_WaitFlagStateUntilTimeout>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d016      	beq.n	8006800 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d6:	f043 0220 	orr.w	r2, r3, #32
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e00f      	b.n	8006802 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00a      	beq.n	80067fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f8:	2b80      	cmp	r3, #128	; 0x80
 80067fa:	d0f2      	beq.n	80067e2 <SPI_EndRxTxTransaction+0x52>
 80067fc:	e000      	b.n	8006800 <SPI_EndRxTxTransaction+0x70>
        break;
 80067fe:	bf00      	nop
  }

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3718      	adds	r7, #24
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	20000044 	.word	0x20000044
 8006810:	165e9f81 	.word	0x165e9f81

08006814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e01d      	b.n	8006862 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d106      	bne.n	8006840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fc fc7a 	bl	8003134 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3304      	adds	r3, #4
 8006850:	4619      	mov	r1, r3
 8006852:	4610      	mov	r0, r2
 8006854:	f000 f944 	bl	8006ae0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b082      	sub	sp, #8
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	f003 0302 	and.w	r3, r3, #2
 800687c:	2b02      	cmp	r3, #2
 800687e:	d122      	bne.n	80068c6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b02      	cmp	r3, #2
 800688c:	d11b      	bne.n	80068c6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f06f 0202 	mvn.w	r2, #2
 8006896:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	f003 0303 	and.w	r3, r3, #3
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 f8f8 	bl	8006aa2 <HAL_TIM_IC_CaptureCallback>
 80068b2:	e005      	b.n	80068c0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 f8ea 	bl	8006a8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f8fb 	bl	8006ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	2b04      	cmp	r3, #4
 80068d2:	d122      	bne.n	800691a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f003 0304 	and.w	r3, r3, #4
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d11b      	bne.n	800691a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f06f 0204 	mvn.w	r2, #4
 80068ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2202      	movs	r2, #2
 80068f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d003      	beq.n	8006908 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f8ce 	bl	8006aa2 <HAL_TIM_IC_CaptureCallback>
 8006906:	e005      	b.n	8006914 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f8c0 	bl	8006a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f8d1 	bl	8006ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	f003 0308 	and.w	r3, r3, #8
 8006924:	2b08      	cmp	r3, #8
 8006926:	d122      	bne.n	800696e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	f003 0308 	and.w	r3, r3, #8
 8006932:	2b08      	cmp	r3, #8
 8006934:	d11b      	bne.n	800696e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f06f 0208 	mvn.w	r2, #8
 800693e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2204      	movs	r2, #4
 8006944:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	f003 0303 	and.w	r3, r3, #3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d003      	beq.n	800695c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 f8a4 	bl	8006aa2 <HAL_TIM_IC_CaptureCallback>
 800695a:	e005      	b.n	8006968 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f896 	bl	8006a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f8a7 	bl	8006ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	f003 0310 	and.w	r3, r3, #16
 8006978:	2b10      	cmp	r3, #16
 800697a:	d122      	bne.n	80069c2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	f003 0310 	and.w	r3, r3, #16
 8006986:	2b10      	cmp	r3, #16
 8006988:	d11b      	bne.n	80069c2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f06f 0210 	mvn.w	r2, #16
 8006992:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2208      	movs	r2, #8
 8006998:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	69db      	ldr	r3, [r3, #28]
 80069a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d003      	beq.n	80069b0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f87a 	bl	8006aa2 <HAL_TIM_IC_CaptureCallback>
 80069ae:	e005      	b.n	80069bc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f86c 	bl	8006a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f87d 	bl	8006ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d10e      	bne.n	80069ee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d107      	bne.n	80069ee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f06f 0201 	mvn.w	r2, #1
 80069e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f846 	bl	8006a7a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f8:	2b80      	cmp	r3, #128	; 0x80
 80069fa:	d10e      	bne.n	8006a1a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a06:	2b80      	cmp	r3, #128	; 0x80
 8006a08:	d107      	bne.n	8006a1a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f989 	bl	8006d2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a24:	2b40      	cmp	r3, #64	; 0x40
 8006a26:	d10e      	bne.n	8006a46 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a32:	2b40      	cmp	r3, #64	; 0x40
 8006a34:	d107      	bne.n	8006a46 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f842 	bl	8006aca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	f003 0320 	and.w	r3, r3, #32
 8006a50:	2b20      	cmp	r3, #32
 8006a52:	d10e      	bne.n	8006a72 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	f003 0320 	and.w	r3, r3, #32
 8006a5e:	2b20      	cmp	r3, #32
 8006a60:	d107      	bne.n	8006a72 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f06f 0220 	mvn.w	r2, #32
 8006a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f953 	bl	8006d18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a72:	bf00      	nop
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b083      	sub	sp, #12
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006a82:	bf00      	nop
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b083      	sub	sp, #12
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a96:	bf00      	nop
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b083      	sub	sp, #12
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006aaa:	bf00      	nop
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006abe:	bf00      	nop
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b083      	sub	sp, #12
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ad2:	bf00      	nop
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
	...

08006ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a40      	ldr	r2, [pc, #256]	; (8006bf4 <TIM_Base_SetConfig+0x114>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d013      	beq.n	8006b20 <TIM_Base_SetConfig+0x40>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006afe:	d00f      	beq.n	8006b20 <TIM_Base_SetConfig+0x40>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a3d      	ldr	r2, [pc, #244]	; (8006bf8 <TIM_Base_SetConfig+0x118>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d00b      	beq.n	8006b20 <TIM_Base_SetConfig+0x40>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a3c      	ldr	r2, [pc, #240]	; (8006bfc <TIM_Base_SetConfig+0x11c>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d007      	beq.n	8006b20 <TIM_Base_SetConfig+0x40>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a3b      	ldr	r2, [pc, #236]	; (8006c00 <TIM_Base_SetConfig+0x120>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d003      	beq.n	8006b20 <TIM_Base_SetConfig+0x40>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a3a      	ldr	r2, [pc, #232]	; (8006c04 <TIM_Base_SetConfig+0x124>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d108      	bne.n	8006b32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a2f      	ldr	r2, [pc, #188]	; (8006bf4 <TIM_Base_SetConfig+0x114>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d02b      	beq.n	8006b92 <TIM_Base_SetConfig+0xb2>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b40:	d027      	beq.n	8006b92 <TIM_Base_SetConfig+0xb2>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a2c      	ldr	r2, [pc, #176]	; (8006bf8 <TIM_Base_SetConfig+0x118>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d023      	beq.n	8006b92 <TIM_Base_SetConfig+0xb2>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a2b      	ldr	r2, [pc, #172]	; (8006bfc <TIM_Base_SetConfig+0x11c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d01f      	beq.n	8006b92 <TIM_Base_SetConfig+0xb2>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a2a      	ldr	r2, [pc, #168]	; (8006c00 <TIM_Base_SetConfig+0x120>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d01b      	beq.n	8006b92 <TIM_Base_SetConfig+0xb2>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a29      	ldr	r2, [pc, #164]	; (8006c04 <TIM_Base_SetConfig+0x124>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d017      	beq.n	8006b92 <TIM_Base_SetConfig+0xb2>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a28      	ldr	r2, [pc, #160]	; (8006c08 <TIM_Base_SetConfig+0x128>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d013      	beq.n	8006b92 <TIM_Base_SetConfig+0xb2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a27      	ldr	r2, [pc, #156]	; (8006c0c <TIM_Base_SetConfig+0x12c>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d00f      	beq.n	8006b92 <TIM_Base_SetConfig+0xb2>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a26      	ldr	r2, [pc, #152]	; (8006c10 <TIM_Base_SetConfig+0x130>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d00b      	beq.n	8006b92 <TIM_Base_SetConfig+0xb2>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a25      	ldr	r2, [pc, #148]	; (8006c14 <TIM_Base_SetConfig+0x134>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d007      	beq.n	8006b92 <TIM_Base_SetConfig+0xb2>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a24      	ldr	r2, [pc, #144]	; (8006c18 <TIM_Base_SetConfig+0x138>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d003      	beq.n	8006b92 <TIM_Base_SetConfig+0xb2>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a23      	ldr	r2, [pc, #140]	; (8006c1c <TIM_Base_SetConfig+0x13c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d108      	bne.n	8006ba4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a0a      	ldr	r2, [pc, #40]	; (8006bf4 <TIM_Base_SetConfig+0x114>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d003      	beq.n	8006bd8 <TIM_Base_SetConfig+0xf8>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a0c      	ldr	r2, [pc, #48]	; (8006c04 <TIM_Base_SetConfig+0x124>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d103      	bne.n	8006be0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	691a      	ldr	r2, [r3, #16]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	615a      	str	r2, [r3, #20]
}
 8006be6:	bf00      	nop
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	40010000 	.word	0x40010000
 8006bf8:	40000400 	.word	0x40000400
 8006bfc:	40000800 	.word	0x40000800
 8006c00:	40000c00 	.word	0x40000c00
 8006c04:	40010400 	.word	0x40010400
 8006c08:	40014000 	.word	0x40014000
 8006c0c:	40014400 	.word	0x40014400
 8006c10:	40014800 	.word	0x40014800
 8006c14:	40001800 	.word	0x40001800
 8006c18:	40001c00 	.word	0x40001c00
 8006c1c:	40002000 	.word	0x40002000

08006c20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d101      	bne.n	8006c38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c34:	2302      	movs	r3, #2
 8006c36:	e05a      	b.n	8006cee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2202      	movs	r2, #2
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a21      	ldr	r2, [pc, #132]	; (8006cfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d022      	beq.n	8006cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c84:	d01d      	beq.n	8006cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a1d      	ldr	r2, [pc, #116]	; (8006d00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d018      	beq.n	8006cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a1b      	ldr	r2, [pc, #108]	; (8006d04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d013      	beq.n	8006cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a1a      	ldr	r2, [pc, #104]	; (8006d08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d00e      	beq.n	8006cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a18      	ldr	r2, [pc, #96]	; (8006d0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d009      	beq.n	8006cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a17      	ldr	r2, [pc, #92]	; (8006d10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d004      	beq.n	8006cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a15      	ldr	r2, [pc, #84]	; (8006d14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d10c      	bne.n	8006cdc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	40010000 	.word	0x40010000
 8006d00:	40000400 	.word	0x40000400
 8006d04:	40000800 	.word	0x40000800
 8006d08:	40000c00 	.word	0x40000c00
 8006d0c:	40010400 	.word	0x40010400
 8006d10:	40014000 	.word	0x40014000
 8006d14:	40001800 	.word	0x40001800

08006d18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e03f      	b.n	8006dd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d106      	bne.n	8006d6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7fc fa0c 	bl	8003184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2224      	movs	r2, #36	; 0x24
 8006d70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68da      	ldr	r2, [r3, #12]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f829 	bl	8006ddc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	691a      	ldr	r2, [r3, #16]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	695a      	ldr	r2, [r3, #20]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006da8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68da      	ldr	r2, [r3, #12]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006db8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2220      	movs	r2, #32
 8006dcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
	...

08006ddc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de0:	b085      	sub	sp, #20
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68da      	ldr	r2, [r3, #12]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	431a      	orrs	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006e1e:	f023 030c 	bic.w	r3, r3, #12
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	6812      	ldr	r2, [r2, #0]
 8006e26:	68f9      	ldr	r1, [r7, #12]
 8006e28:	430b      	orrs	r3, r1
 8006e2a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	699a      	ldr	r2, [r3, #24]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e4a:	f040 818b 	bne.w	8007164 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4ac1      	ldr	r2, [pc, #772]	; (8007158 <UART_SetConfig+0x37c>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d005      	beq.n	8006e64 <UART_SetConfig+0x88>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4abf      	ldr	r2, [pc, #764]	; (800715c <UART_SetConfig+0x380>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	f040 80bd 	bne.w	8006fde <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e64:	f7fe fcfa 	bl	800585c <HAL_RCC_GetPCLK2Freq>
 8006e68:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	461d      	mov	r5, r3
 8006e6e:	f04f 0600 	mov.w	r6, #0
 8006e72:	46a8      	mov	r8, r5
 8006e74:	46b1      	mov	r9, r6
 8006e76:	eb18 0308 	adds.w	r3, r8, r8
 8006e7a:	eb49 0409 	adc.w	r4, r9, r9
 8006e7e:	4698      	mov	r8, r3
 8006e80:	46a1      	mov	r9, r4
 8006e82:	eb18 0805 	adds.w	r8, r8, r5
 8006e86:	eb49 0906 	adc.w	r9, r9, r6
 8006e8a:	f04f 0100 	mov.w	r1, #0
 8006e8e:	f04f 0200 	mov.w	r2, #0
 8006e92:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006e96:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006e9a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006e9e:	4688      	mov	r8, r1
 8006ea0:	4691      	mov	r9, r2
 8006ea2:	eb18 0005 	adds.w	r0, r8, r5
 8006ea6:	eb49 0106 	adc.w	r1, r9, r6
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	461d      	mov	r5, r3
 8006eb0:	f04f 0600 	mov.w	r6, #0
 8006eb4:	196b      	adds	r3, r5, r5
 8006eb6:	eb46 0406 	adc.w	r4, r6, r6
 8006eba:	461a      	mov	r2, r3
 8006ebc:	4623      	mov	r3, r4
 8006ebe:	f7f9 f995 	bl	80001ec <__aeabi_uldivmod>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	460c      	mov	r4, r1
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	4ba5      	ldr	r3, [pc, #660]	; (8007160 <UART_SetConfig+0x384>)
 8006eca:	fba3 2302 	umull	r2, r3, r3, r2
 8006ece:	095b      	lsrs	r3, r3, #5
 8006ed0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	461d      	mov	r5, r3
 8006ed8:	f04f 0600 	mov.w	r6, #0
 8006edc:	46a9      	mov	r9, r5
 8006ede:	46b2      	mov	sl, r6
 8006ee0:	eb19 0309 	adds.w	r3, r9, r9
 8006ee4:	eb4a 040a 	adc.w	r4, sl, sl
 8006ee8:	4699      	mov	r9, r3
 8006eea:	46a2      	mov	sl, r4
 8006eec:	eb19 0905 	adds.w	r9, r9, r5
 8006ef0:	eb4a 0a06 	adc.w	sl, sl, r6
 8006ef4:	f04f 0100 	mov.w	r1, #0
 8006ef8:	f04f 0200 	mov.w	r2, #0
 8006efc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f08:	4689      	mov	r9, r1
 8006f0a:	4692      	mov	sl, r2
 8006f0c:	eb19 0005 	adds.w	r0, r9, r5
 8006f10:	eb4a 0106 	adc.w	r1, sl, r6
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	461d      	mov	r5, r3
 8006f1a:	f04f 0600 	mov.w	r6, #0
 8006f1e:	196b      	adds	r3, r5, r5
 8006f20:	eb46 0406 	adc.w	r4, r6, r6
 8006f24:	461a      	mov	r2, r3
 8006f26:	4623      	mov	r3, r4
 8006f28:	f7f9 f960 	bl	80001ec <__aeabi_uldivmod>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	460c      	mov	r4, r1
 8006f30:	461a      	mov	r2, r3
 8006f32:	4b8b      	ldr	r3, [pc, #556]	; (8007160 <UART_SetConfig+0x384>)
 8006f34:	fba3 1302 	umull	r1, r3, r3, r2
 8006f38:	095b      	lsrs	r3, r3, #5
 8006f3a:	2164      	movs	r1, #100	; 0x64
 8006f3c:	fb01 f303 	mul.w	r3, r1, r3
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	00db      	lsls	r3, r3, #3
 8006f44:	3332      	adds	r3, #50	; 0x32
 8006f46:	4a86      	ldr	r2, [pc, #536]	; (8007160 <UART_SetConfig+0x384>)
 8006f48:	fba2 2303 	umull	r2, r3, r2, r3
 8006f4c:	095b      	lsrs	r3, r3, #5
 8006f4e:	005b      	lsls	r3, r3, #1
 8006f50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f54:	4498      	add	r8, r3
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	461d      	mov	r5, r3
 8006f5a:	f04f 0600 	mov.w	r6, #0
 8006f5e:	46a9      	mov	r9, r5
 8006f60:	46b2      	mov	sl, r6
 8006f62:	eb19 0309 	adds.w	r3, r9, r9
 8006f66:	eb4a 040a 	adc.w	r4, sl, sl
 8006f6a:	4699      	mov	r9, r3
 8006f6c:	46a2      	mov	sl, r4
 8006f6e:	eb19 0905 	adds.w	r9, r9, r5
 8006f72:	eb4a 0a06 	adc.w	sl, sl, r6
 8006f76:	f04f 0100 	mov.w	r1, #0
 8006f7a:	f04f 0200 	mov.w	r2, #0
 8006f7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f8a:	4689      	mov	r9, r1
 8006f8c:	4692      	mov	sl, r2
 8006f8e:	eb19 0005 	adds.w	r0, r9, r5
 8006f92:	eb4a 0106 	adc.w	r1, sl, r6
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	461d      	mov	r5, r3
 8006f9c:	f04f 0600 	mov.w	r6, #0
 8006fa0:	196b      	adds	r3, r5, r5
 8006fa2:	eb46 0406 	adc.w	r4, r6, r6
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	4623      	mov	r3, r4
 8006faa:	f7f9 f91f 	bl	80001ec <__aeabi_uldivmod>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	460c      	mov	r4, r1
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	4b6a      	ldr	r3, [pc, #424]	; (8007160 <UART_SetConfig+0x384>)
 8006fb6:	fba3 1302 	umull	r1, r3, r3, r2
 8006fba:	095b      	lsrs	r3, r3, #5
 8006fbc:	2164      	movs	r1, #100	; 0x64
 8006fbe:	fb01 f303 	mul.w	r3, r1, r3
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	00db      	lsls	r3, r3, #3
 8006fc6:	3332      	adds	r3, #50	; 0x32
 8006fc8:	4a65      	ldr	r2, [pc, #404]	; (8007160 <UART_SetConfig+0x384>)
 8006fca:	fba2 2303 	umull	r2, r3, r2, r3
 8006fce:	095b      	lsrs	r3, r3, #5
 8006fd0:	f003 0207 	and.w	r2, r3, #7
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4442      	add	r2, r8
 8006fda:	609a      	str	r2, [r3, #8]
 8006fdc:	e26f      	b.n	80074be <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006fde:	f7fe fc29 	bl	8005834 <HAL_RCC_GetPCLK1Freq>
 8006fe2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	461d      	mov	r5, r3
 8006fe8:	f04f 0600 	mov.w	r6, #0
 8006fec:	46a8      	mov	r8, r5
 8006fee:	46b1      	mov	r9, r6
 8006ff0:	eb18 0308 	adds.w	r3, r8, r8
 8006ff4:	eb49 0409 	adc.w	r4, r9, r9
 8006ff8:	4698      	mov	r8, r3
 8006ffa:	46a1      	mov	r9, r4
 8006ffc:	eb18 0805 	adds.w	r8, r8, r5
 8007000:	eb49 0906 	adc.w	r9, r9, r6
 8007004:	f04f 0100 	mov.w	r1, #0
 8007008:	f04f 0200 	mov.w	r2, #0
 800700c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007010:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007014:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007018:	4688      	mov	r8, r1
 800701a:	4691      	mov	r9, r2
 800701c:	eb18 0005 	adds.w	r0, r8, r5
 8007020:	eb49 0106 	adc.w	r1, r9, r6
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	461d      	mov	r5, r3
 800702a:	f04f 0600 	mov.w	r6, #0
 800702e:	196b      	adds	r3, r5, r5
 8007030:	eb46 0406 	adc.w	r4, r6, r6
 8007034:	461a      	mov	r2, r3
 8007036:	4623      	mov	r3, r4
 8007038:	f7f9 f8d8 	bl	80001ec <__aeabi_uldivmod>
 800703c:	4603      	mov	r3, r0
 800703e:	460c      	mov	r4, r1
 8007040:	461a      	mov	r2, r3
 8007042:	4b47      	ldr	r3, [pc, #284]	; (8007160 <UART_SetConfig+0x384>)
 8007044:	fba3 2302 	umull	r2, r3, r3, r2
 8007048:	095b      	lsrs	r3, r3, #5
 800704a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	461d      	mov	r5, r3
 8007052:	f04f 0600 	mov.w	r6, #0
 8007056:	46a9      	mov	r9, r5
 8007058:	46b2      	mov	sl, r6
 800705a:	eb19 0309 	adds.w	r3, r9, r9
 800705e:	eb4a 040a 	adc.w	r4, sl, sl
 8007062:	4699      	mov	r9, r3
 8007064:	46a2      	mov	sl, r4
 8007066:	eb19 0905 	adds.w	r9, r9, r5
 800706a:	eb4a 0a06 	adc.w	sl, sl, r6
 800706e:	f04f 0100 	mov.w	r1, #0
 8007072:	f04f 0200 	mov.w	r2, #0
 8007076:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800707a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800707e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007082:	4689      	mov	r9, r1
 8007084:	4692      	mov	sl, r2
 8007086:	eb19 0005 	adds.w	r0, r9, r5
 800708a:	eb4a 0106 	adc.w	r1, sl, r6
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	461d      	mov	r5, r3
 8007094:	f04f 0600 	mov.w	r6, #0
 8007098:	196b      	adds	r3, r5, r5
 800709a:	eb46 0406 	adc.w	r4, r6, r6
 800709e:	461a      	mov	r2, r3
 80070a0:	4623      	mov	r3, r4
 80070a2:	f7f9 f8a3 	bl	80001ec <__aeabi_uldivmod>
 80070a6:	4603      	mov	r3, r0
 80070a8:	460c      	mov	r4, r1
 80070aa:	461a      	mov	r2, r3
 80070ac:	4b2c      	ldr	r3, [pc, #176]	; (8007160 <UART_SetConfig+0x384>)
 80070ae:	fba3 1302 	umull	r1, r3, r3, r2
 80070b2:	095b      	lsrs	r3, r3, #5
 80070b4:	2164      	movs	r1, #100	; 0x64
 80070b6:	fb01 f303 	mul.w	r3, r1, r3
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	00db      	lsls	r3, r3, #3
 80070be:	3332      	adds	r3, #50	; 0x32
 80070c0:	4a27      	ldr	r2, [pc, #156]	; (8007160 <UART_SetConfig+0x384>)
 80070c2:	fba2 2303 	umull	r2, r3, r2, r3
 80070c6:	095b      	lsrs	r3, r3, #5
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070ce:	4498      	add	r8, r3
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	461d      	mov	r5, r3
 80070d4:	f04f 0600 	mov.w	r6, #0
 80070d8:	46a9      	mov	r9, r5
 80070da:	46b2      	mov	sl, r6
 80070dc:	eb19 0309 	adds.w	r3, r9, r9
 80070e0:	eb4a 040a 	adc.w	r4, sl, sl
 80070e4:	4699      	mov	r9, r3
 80070e6:	46a2      	mov	sl, r4
 80070e8:	eb19 0905 	adds.w	r9, r9, r5
 80070ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80070f0:	f04f 0100 	mov.w	r1, #0
 80070f4:	f04f 0200 	mov.w	r2, #0
 80070f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007100:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007104:	4689      	mov	r9, r1
 8007106:	4692      	mov	sl, r2
 8007108:	eb19 0005 	adds.w	r0, r9, r5
 800710c:	eb4a 0106 	adc.w	r1, sl, r6
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	461d      	mov	r5, r3
 8007116:	f04f 0600 	mov.w	r6, #0
 800711a:	196b      	adds	r3, r5, r5
 800711c:	eb46 0406 	adc.w	r4, r6, r6
 8007120:	461a      	mov	r2, r3
 8007122:	4623      	mov	r3, r4
 8007124:	f7f9 f862 	bl	80001ec <__aeabi_uldivmod>
 8007128:	4603      	mov	r3, r0
 800712a:	460c      	mov	r4, r1
 800712c:	461a      	mov	r2, r3
 800712e:	4b0c      	ldr	r3, [pc, #48]	; (8007160 <UART_SetConfig+0x384>)
 8007130:	fba3 1302 	umull	r1, r3, r3, r2
 8007134:	095b      	lsrs	r3, r3, #5
 8007136:	2164      	movs	r1, #100	; 0x64
 8007138:	fb01 f303 	mul.w	r3, r1, r3
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	00db      	lsls	r3, r3, #3
 8007140:	3332      	adds	r3, #50	; 0x32
 8007142:	4a07      	ldr	r2, [pc, #28]	; (8007160 <UART_SetConfig+0x384>)
 8007144:	fba2 2303 	umull	r2, r3, r2, r3
 8007148:	095b      	lsrs	r3, r3, #5
 800714a:	f003 0207 	and.w	r2, r3, #7
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4442      	add	r2, r8
 8007154:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007156:	e1b2      	b.n	80074be <UART_SetConfig+0x6e2>
 8007158:	40011000 	.word	0x40011000
 800715c:	40011400 	.word	0x40011400
 8007160:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4ad7      	ldr	r2, [pc, #860]	; (80074c8 <UART_SetConfig+0x6ec>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d005      	beq.n	800717a <UART_SetConfig+0x39e>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4ad6      	ldr	r2, [pc, #856]	; (80074cc <UART_SetConfig+0x6f0>)
 8007174:	4293      	cmp	r3, r2
 8007176:	f040 80d1 	bne.w	800731c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800717a:	f7fe fb6f 	bl	800585c <HAL_RCC_GetPCLK2Freq>
 800717e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	469a      	mov	sl, r3
 8007184:	f04f 0b00 	mov.w	fp, #0
 8007188:	46d0      	mov	r8, sl
 800718a:	46d9      	mov	r9, fp
 800718c:	eb18 0308 	adds.w	r3, r8, r8
 8007190:	eb49 0409 	adc.w	r4, r9, r9
 8007194:	4698      	mov	r8, r3
 8007196:	46a1      	mov	r9, r4
 8007198:	eb18 080a 	adds.w	r8, r8, sl
 800719c:	eb49 090b 	adc.w	r9, r9, fp
 80071a0:	f04f 0100 	mov.w	r1, #0
 80071a4:	f04f 0200 	mov.w	r2, #0
 80071a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80071ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80071b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80071b4:	4688      	mov	r8, r1
 80071b6:	4691      	mov	r9, r2
 80071b8:	eb1a 0508 	adds.w	r5, sl, r8
 80071bc:	eb4b 0609 	adc.w	r6, fp, r9
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	4619      	mov	r1, r3
 80071c6:	f04f 0200 	mov.w	r2, #0
 80071ca:	f04f 0300 	mov.w	r3, #0
 80071ce:	f04f 0400 	mov.w	r4, #0
 80071d2:	0094      	lsls	r4, r2, #2
 80071d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80071d8:	008b      	lsls	r3, r1, #2
 80071da:	461a      	mov	r2, r3
 80071dc:	4623      	mov	r3, r4
 80071de:	4628      	mov	r0, r5
 80071e0:	4631      	mov	r1, r6
 80071e2:	f7f9 f803 	bl	80001ec <__aeabi_uldivmod>
 80071e6:	4603      	mov	r3, r0
 80071e8:	460c      	mov	r4, r1
 80071ea:	461a      	mov	r2, r3
 80071ec:	4bb8      	ldr	r3, [pc, #736]	; (80074d0 <UART_SetConfig+0x6f4>)
 80071ee:	fba3 2302 	umull	r2, r3, r3, r2
 80071f2:	095b      	lsrs	r3, r3, #5
 80071f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	469b      	mov	fp, r3
 80071fc:	f04f 0c00 	mov.w	ip, #0
 8007200:	46d9      	mov	r9, fp
 8007202:	46e2      	mov	sl, ip
 8007204:	eb19 0309 	adds.w	r3, r9, r9
 8007208:	eb4a 040a 	adc.w	r4, sl, sl
 800720c:	4699      	mov	r9, r3
 800720e:	46a2      	mov	sl, r4
 8007210:	eb19 090b 	adds.w	r9, r9, fp
 8007214:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007218:	f04f 0100 	mov.w	r1, #0
 800721c:	f04f 0200 	mov.w	r2, #0
 8007220:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007224:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007228:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800722c:	4689      	mov	r9, r1
 800722e:	4692      	mov	sl, r2
 8007230:	eb1b 0509 	adds.w	r5, fp, r9
 8007234:	eb4c 060a 	adc.w	r6, ip, sl
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	4619      	mov	r1, r3
 800723e:	f04f 0200 	mov.w	r2, #0
 8007242:	f04f 0300 	mov.w	r3, #0
 8007246:	f04f 0400 	mov.w	r4, #0
 800724a:	0094      	lsls	r4, r2, #2
 800724c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007250:	008b      	lsls	r3, r1, #2
 8007252:	461a      	mov	r2, r3
 8007254:	4623      	mov	r3, r4
 8007256:	4628      	mov	r0, r5
 8007258:	4631      	mov	r1, r6
 800725a:	f7f8 ffc7 	bl	80001ec <__aeabi_uldivmod>
 800725e:	4603      	mov	r3, r0
 8007260:	460c      	mov	r4, r1
 8007262:	461a      	mov	r2, r3
 8007264:	4b9a      	ldr	r3, [pc, #616]	; (80074d0 <UART_SetConfig+0x6f4>)
 8007266:	fba3 1302 	umull	r1, r3, r3, r2
 800726a:	095b      	lsrs	r3, r3, #5
 800726c:	2164      	movs	r1, #100	; 0x64
 800726e:	fb01 f303 	mul.w	r3, r1, r3
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	011b      	lsls	r3, r3, #4
 8007276:	3332      	adds	r3, #50	; 0x32
 8007278:	4a95      	ldr	r2, [pc, #596]	; (80074d0 <UART_SetConfig+0x6f4>)
 800727a:	fba2 2303 	umull	r2, r3, r2, r3
 800727e:	095b      	lsrs	r3, r3, #5
 8007280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007284:	4498      	add	r8, r3
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	469b      	mov	fp, r3
 800728a:	f04f 0c00 	mov.w	ip, #0
 800728e:	46d9      	mov	r9, fp
 8007290:	46e2      	mov	sl, ip
 8007292:	eb19 0309 	adds.w	r3, r9, r9
 8007296:	eb4a 040a 	adc.w	r4, sl, sl
 800729a:	4699      	mov	r9, r3
 800729c:	46a2      	mov	sl, r4
 800729e:	eb19 090b 	adds.w	r9, r9, fp
 80072a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80072a6:	f04f 0100 	mov.w	r1, #0
 80072aa:	f04f 0200 	mov.w	r2, #0
 80072ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80072b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80072ba:	4689      	mov	r9, r1
 80072bc:	4692      	mov	sl, r2
 80072be:	eb1b 0509 	adds.w	r5, fp, r9
 80072c2:	eb4c 060a 	adc.w	r6, ip, sl
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	4619      	mov	r1, r3
 80072cc:	f04f 0200 	mov.w	r2, #0
 80072d0:	f04f 0300 	mov.w	r3, #0
 80072d4:	f04f 0400 	mov.w	r4, #0
 80072d8:	0094      	lsls	r4, r2, #2
 80072da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80072de:	008b      	lsls	r3, r1, #2
 80072e0:	461a      	mov	r2, r3
 80072e2:	4623      	mov	r3, r4
 80072e4:	4628      	mov	r0, r5
 80072e6:	4631      	mov	r1, r6
 80072e8:	f7f8 ff80 	bl	80001ec <__aeabi_uldivmod>
 80072ec:	4603      	mov	r3, r0
 80072ee:	460c      	mov	r4, r1
 80072f0:	461a      	mov	r2, r3
 80072f2:	4b77      	ldr	r3, [pc, #476]	; (80074d0 <UART_SetConfig+0x6f4>)
 80072f4:	fba3 1302 	umull	r1, r3, r3, r2
 80072f8:	095b      	lsrs	r3, r3, #5
 80072fa:	2164      	movs	r1, #100	; 0x64
 80072fc:	fb01 f303 	mul.w	r3, r1, r3
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	3332      	adds	r3, #50	; 0x32
 8007306:	4a72      	ldr	r2, [pc, #456]	; (80074d0 <UART_SetConfig+0x6f4>)
 8007308:	fba2 2303 	umull	r2, r3, r2, r3
 800730c:	095b      	lsrs	r3, r3, #5
 800730e:	f003 020f 	and.w	r2, r3, #15
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4442      	add	r2, r8
 8007318:	609a      	str	r2, [r3, #8]
 800731a:	e0d0      	b.n	80074be <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800731c:	f7fe fa8a 	bl	8005834 <HAL_RCC_GetPCLK1Freq>
 8007320:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	469a      	mov	sl, r3
 8007326:	f04f 0b00 	mov.w	fp, #0
 800732a:	46d0      	mov	r8, sl
 800732c:	46d9      	mov	r9, fp
 800732e:	eb18 0308 	adds.w	r3, r8, r8
 8007332:	eb49 0409 	adc.w	r4, r9, r9
 8007336:	4698      	mov	r8, r3
 8007338:	46a1      	mov	r9, r4
 800733a:	eb18 080a 	adds.w	r8, r8, sl
 800733e:	eb49 090b 	adc.w	r9, r9, fp
 8007342:	f04f 0100 	mov.w	r1, #0
 8007346:	f04f 0200 	mov.w	r2, #0
 800734a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800734e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007352:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007356:	4688      	mov	r8, r1
 8007358:	4691      	mov	r9, r2
 800735a:	eb1a 0508 	adds.w	r5, sl, r8
 800735e:	eb4b 0609 	adc.w	r6, fp, r9
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	4619      	mov	r1, r3
 8007368:	f04f 0200 	mov.w	r2, #0
 800736c:	f04f 0300 	mov.w	r3, #0
 8007370:	f04f 0400 	mov.w	r4, #0
 8007374:	0094      	lsls	r4, r2, #2
 8007376:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800737a:	008b      	lsls	r3, r1, #2
 800737c:	461a      	mov	r2, r3
 800737e:	4623      	mov	r3, r4
 8007380:	4628      	mov	r0, r5
 8007382:	4631      	mov	r1, r6
 8007384:	f7f8 ff32 	bl	80001ec <__aeabi_uldivmod>
 8007388:	4603      	mov	r3, r0
 800738a:	460c      	mov	r4, r1
 800738c:	461a      	mov	r2, r3
 800738e:	4b50      	ldr	r3, [pc, #320]	; (80074d0 <UART_SetConfig+0x6f4>)
 8007390:	fba3 2302 	umull	r2, r3, r3, r2
 8007394:	095b      	lsrs	r3, r3, #5
 8007396:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	469b      	mov	fp, r3
 800739e:	f04f 0c00 	mov.w	ip, #0
 80073a2:	46d9      	mov	r9, fp
 80073a4:	46e2      	mov	sl, ip
 80073a6:	eb19 0309 	adds.w	r3, r9, r9
 80073aa:	eb4a 040a 	adc.w	r4, sl, sl
 80073ae:	4699      	mov	r9, r3
 80073b0:	46a2      	mov	sl, r4
 80073b2:	eb19 090b 	adds.w	r9, r9, fp
 80073b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80073ba:	f04f 0100 	mov.w	r1, #0
 80073be:	f04f 0200 	mov.w	r2, #0
 80073c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80073ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80073ce:	4689      	mov	r9, r1
 80073d0:	4692      	mov	sl, r2
 80073d2:	eb1b 0509 	adds.w	r5, fp, r9
 80073d6:	eb4c 060a 	adc.w	r6, ip, sl
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	4619      	mov	r1, r3
 80073e0:	f04f 0200 	mov.w	r2, #0
 80073e4:	f04f 0300 	mov.w	r3, #0
 80073e8:	f04f 0400 	mov.w	r4, #0
 80073ec:	0094      	lsls	r4, r2, #2
 80073ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80073f2:	008b      	lsls	r3, r1, #2
 80073f4:	461a      	mov	r2, r3
 80073f6:	4623      	mov	r3, r4
 80073f8:	4628      	mov	r0, r5
 80073fa:	4631      	mov	r1, r6
 80073fc:	f7f8 fef6 	bl	80001ec <__aeabi_uldivmod>
 8007400:	4603      	mov	r3, r0
 8007402:	460c      	mov	r4, r1
 8007404:	461a      	mov	r2, r3
 8007406:	4b32      	ldr	r3, [pc, #200]	; (80074d0 <UART_SetConfig+0x6f4>)
 8007408:	fba3 1302 	umull	r1, r3, r3, r2
 800740c:	095b      	lsrs	r3, r3, #5
 800740e:	2164      	movs	r1, #100	; 0x64
 8007410:	fb01 f303 	mul.w	r3, r1, r3
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	011b      	lsls	r3, r3, #4
 8007418:	3332      	adds	r3, #50	; 0x32
 800741a:	4a2d      	ldr	r2, [pc, #180]	; (80074d0 <UART_SetConfig+0x6f4>)
 800741c:	fba2 2303 	umull	r2, r3, r2, r3
 8007420:	095b      	lsrs	r3, r3, #5
 8007422:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007426:	4498      	add	r8, r3
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	469b      	mov	fp, r3
 800742c:	f04f 0c00 	mov.w	ip, #0
 8007430:	46d9      	mov	r9, fp
 8007432:	46e2      	mov	sl, ip
 8007434:	eb19 0309 	adds.w	r3, r9, r9
 8007438:	eb4a 040a 	adc.w	r4, sl, sl
 800743c:	4699      	mov	r9, r3
 800743e:	46a2      	mov	sl, r4
 8007440:	eb19 090b 	adds.w	r9, r9, fp
 8007444:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007448:	f04f 0100 	mov.w	r1, #0
 800744c:	f04f 0200 	mov.w	r2, #0
 8007450:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007454:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007458:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800745c:	4689      	mov	r9, r1
 800745e:	4692      	mov	sl, r2
 8007460:	eb1b 0509 	adds.w	r5, fp, r9
 8007464:	eb4c 060a 	adc.w	r6, ip, sl
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	4619      	mov	r1, r3
 800746e:	f04f 0200 	mov.w	r2, #0
 8007472:	f04f 0300 	mov.w	r3, #0
 8007476:	f04f 0400 	mov.w	r4, #0
 800747a:	0094      	lsls	r4, r2, #2
 800747c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007480:	008b      	lsls	r3, r1, #2
 8007482:	461a      	mov	r2, r3
 8007484:	4623      	mov	r3, r4
 8007486:	4628      	mov	r0, r5
 8007488:	4631      	mov	r1, r6
 800748a:	f7f8 feaf 	bl	80001ec <__aeabi_uldivmod>
 800748e:	4603      	mov	r3, r0
 8007490:	460c      	mov	r4, r1
 8007492:	461a      	mov	r2, r3
 8007494:	4b0e      	ldr	r3, [pc, #56]	; (80074d0 <UART_SetConfig+0x6f4>)
 8007496:	fba3 1302 	umull	r1, r3, r3, r2
 800749a:	095b      	lsrs	r3, r3, #5
 800749c:	2164      	movs	r1, #100	; 0x64
 800749e:	fb01 f303 	mul.w	r3, r1, r3
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	011b      	lsls	r3, r3, #4
 80074a6:	3332      	adds	r3, #50	; 0x32
 80074a8:	4a09      	ldr	r2, [pc, #36]	; (80074d0 <UART_SetConfig+0x6f4>)
 80074aa:	fba2 2303 	umull	r2, r3, r2, r3
 80074ae:	095b      	lsrs	r3, r3, #5
 80074b0:	f003 020f 	and.w	r2, r3, #15
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4442      	add	r2, r8
 80074ba:	609a      	str	r2, [r3, #8]
}
 80074bc:	e7ff      	b.n	80074be <UART_SetConfig+0x6e2>
 80074be:	bf00      	nop
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c8:	40011000 	.word	0x40011000
 80074cc:	40011400 	.word	0x40011400
 80074d0:	51eb851f 	.word	0x51eb851f

080074d4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80074de:	2300      	movs	r3, #0
 80074e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d029      	beq.n	8007542 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80074fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80074fe:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007508:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800750e:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8007514:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800751a:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8007520:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8007526:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800752c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8007532:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	4313      	orrs	r3, r2
 8007538:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	601a      	str	r2, [r3, #0]
 8007540:	e034      	b.n	80075ac <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800754e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007558:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800755e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	4313      	orrs	r3, r2
 8007564:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007572:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007576:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007580:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8007586:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800758c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8007592:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8007598:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	4313      	orrs	r3, r2
 800759e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b087      	sub	sp, #28
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80075c6:	2300      	movs	r3, #0
 80075c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80075ca:	2300      	movs	r3, #0
 80075cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d02e      	beq.n	8007632 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80075e0:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	3b01      	subs	r3, #1
 80075ee:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80075f0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80075fa:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	3b01      	subs	r3, #1
 8007602:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007604:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	3b01      	subs	r3, #1
 800760c:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800760e:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	695b      	ldr	r3, [r3, #20]
 8007614:	3b01      	subs	r3, #1
 8007616:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007618:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	3b01      	subs	r3, #1
 8007620:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007622:	4313      	orrs	r3, r2
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	4313      	orrs	r3, r2
 8007628:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	609a      	str	r2, [r3, #8]
 8007630:	e03b      	b.n	80076aa <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800763e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007642:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	3b01      	subs	r3, #1
 800764a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	3b01      	subs	r3, #1
 8007652:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007654:	4313      	orrs	r3, r2
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	4313      	orrs	r3, r2
 800765a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007668:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	3b01      	subs	r3, #1
 8007676:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007678:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	3b01      	subs	r3, #1
 8007680:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007682:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	3b01      	subs	r3, #1
 800768a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800768c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	3b01      	subs	r3, #1
 8007694:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007696:	4313      	orrs	r3, r2
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	4313      	orrs	r3, r2
 800769c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	697a      	ldr	r2, [r7, #20]
 80076a2:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	371c      	adds	r7, #28
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80076c8:	2300      	movs	r3, #0
 80076ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80076d4:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	3b01      	subs	r3, #1
 80076dc:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80076de:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80076e6:	4313      	orrs	r3, r2
 80076e8:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80076f0:	f7fb ff62 	bl	80035b8 <HAL_GetTick>
 80076f4:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80076f6:	e010      	b.n	800771a <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fe:	d00c      	beq.n	800771a <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d007      	beq.n	8007716 <FMC_SDRAM_SendCommand+0x5e>
 8007706:	f7fb ff57 	bl	80035b8 <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	429a      	cmp	r2, r3
 8007714:	d201      	bcs.n	800771a <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e006      	b.n	8007728 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	f003 0320 	and.w	r3, r3, #32
 8007722:	2b20      	cmp	r3, #32
 8007724:	d0e8      	beq.n	80076f8 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3718      	adds	r7, #24
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	695a      	ldr	r2, [r3, #20]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	005b      	lsls	r3, r3, #1
 8007742:	431a      	orrs	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 8007756:	b480      	push	{r7}
 8007758:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 800775a:	bf00      	nop
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <_ZdlPvj>:
 8007764:	f000 b81a 	b.w	800779c <_ZdlPv>

08007768 <_Znwj>:
 8007768:	b510      	push	{r4, lr}
 800776a:	2800      	cmp	r0, #0
 800776c:	bf14      	ite	ne
 800776e:	4604      	movne	r4, r0
 8007770:	2401      	moveq	r4, #1
 8007772:	4620      	mov	r0, r4
 8007774:	f000 f848 	bl	8007808 <malloc>
 8007778:	b930      	cbnz	r0, 8007788 <_Znwj+0x20>
 800777a:	f000 f807 	bl	800778c <_ZSt15get_new_handlerv>
 800777e:	b908      	cbnz	r0, 8007784 <_Znwj+0x1c>
 8007780:	f000 f811 	bl	80077a6 <abort>
 8007784:	4780      	blx	r0
 8007786:	e7f4      	b.n	8007772 <_Znwj+0xa>
 8007788:	bd10      	pop	{r4, pc}
	...

0800778c <_ZSt15get_new_handlerv>:
 800778c:	4b02      	ldr	r3, [pc, #8]	; (8007798 <_ZSt15get_new_handlerv+0xc>)
 800778e:	6818      	ldr	r0, [r3, #0]
 8007790:	f3bf 8f5b 	dmb	ish
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	20000574 	.word	0x20000574

0800779c <_ZdlPv>:
 800779c:	f000 b83c 	b.w	8007818 <free>

080077a0 <_ZSt17__throw_bad_allocv>:
 80077a0:	b508      	push	{r3, lr}
 80077a2:	f000 f800 	bl	80077a6 <abort>

080077a6 <abort>:
 80077a6:	b508      	push	{r3, lr}
 80077a8:	2006      	movs	r0, #6
 80077aa:	f000 f997 	bl	8007adc <raise>
 80077ae:	2001      	movs	r0, #1
 80077b0:	f7fb fe1c 	bl	80033ec <_exit>

080077b4 <__errno>:
 80077b4:	4b01      	ldr	r3, [pc, #4]	; (80077bc <__errno+0x8>)
 80077b6:	6818      	ldr	r0, [r3, #0]
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	20000050 	.word	0x20000050

080077c0 <__libc_init_array>:
 80077c0:	b570      	push	{r4, r5, r6, lr}
 80077c2:	4e0d      	ldr	r6, [pc, #52]	; (80077f8 <__libc_init_array+0x38>)
 80077c4:	4c0d      	ldr	r4, [pc, #52]	; (80077fc <__libc_init_array+0x3c>)
 80077c6:	1ba4      	subs	r4, r4, r6
 80077c8:	10a4      	asrs	r4, r4, #2
 80077ca:	2500      	movs	r5, #0
 80077cc:	42a5      	cmp	r5, r4
 80077ce:	d109      	bne.n	80077e4 <__libc_init_array+0x24>
 80077d0:	4e0b      	ldr	r6, [pc, #44]	; (8007800 <__libc_init_array+0x40>)
 80077d2:	4c0c      	ldr	r4, [pc, #48]	; (8007804 <__libc_init_array+0x44>)
 80077d4:	f000 f9a0 	bl	8007b18 <_init>
 80077d8:	1ba4      	subs	r4, r4, r6
 80077da:	10a4      	asrs	r4, r4, #2
 80077dc:	2500      	movs	r5, #0
 80077de:	42a5      	cmp	r5, r4
 80077e0:	d105      	bne.n	80077ee <__libc_init_array+0x2e>
 80077e2:	bd70      	pop	{r4, r5, r6, pc}
 80077e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077e8:	4798      	blx	r3
 80077ea:	3501      	adds	r5, #1
 80077ec:	e7ee      	b.n	80077cc <__libc_init_array+0xc>
 80077ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077f2:	4798      	blx	r3
 80077f4:	3501      	adds	r5, #1
 80077f6:	e7f2      	b.n	80077de <__libc_init_array+0x1e>
 80077f8:	08009630 	.word	0x08009630
 80077fc:	08009630 	.word	0x08009630
 8007800:	08009630 	.word	0x08009630
 8007804:	08009634 	.word	0x08009634

08007808 <malloc>:
 8007808:	4b02      	ldr	r3, [pc, #8]	; (8007814 <malloc+0xc>)
 800780a:	4601      	mov	r1, r0
 800780c:	6818      	ldr	r0, [r3, #0]
 800780e:	f000 b87b 	b.w	8007908 <_malloc_r>
 8007812:	bf00      	nop
 8007814:	20000050 	.word	0x20000050

08007818 <free>:
 8007818:	4b02      	ldr	r3, [pc, #8]	; (8007824 <free+0xc>)
 800781a:	4601      	mov	r1, r0
 800781c:	6818      	ldr	r0, [r3, #0]
 800781e:	f000 b825 	b.w	800786c <_free_r>
 8007822:	bf00      	nop
 8007824:	20000050 	.word	0x20000050

08007828 <memmove>:
 8007828:	4288      	cmp	r0, r1
 800782a:	b510      	push	{r4, lr}
 800782c:	eb01 0302 	add.w	r3, r1, r2
 8007830:	d807      	bhi.n	8007842 <memmove+0x1a>
 8007832:	1e42      	subs	r2, r0, #1
 8007834:	4299      	cmp	r1, r3
 8007836:	d00a      	beq.n	800784e <memmove+0x26>
 8007838:	f811 4b01 	ldrb.w	r4, [r1], #1
 800783c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007840:	e7f8      	b.n	8007834 <memmove+0xc>
 8007842:	4283      	cmp	r3, r0
 8007844:	d9f5      	bls.n	8007832 <memmove+0xa>
 8007846:	1881      	adds	r1, r0, r2
 8007848:	1ad2      	subs	r2, r2, r3
 800784a:	42d3      	cmn	r3, r2
 800784c:	d100      	bne.n	8007850 <memmove+0x28>
 800784e:	bd10      	pop	{r4, pc}
 8007850:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007854:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007858:	e7f7      	b.n	800784a <memmove+0x22>

0800785a <memset>:
 800785a:	4402      	add	r2, r0
 800785c:	4603      	mov	r3, r0
 800785e:	4293      	cmp	r3, r2
 8007860:	d100      	bne.n	8007864 <memset+0xa>
 8007862:	4770      	bx	lr
 8007864:	f803 1b01 	strb.w	r1, [r3], #1
 8007868:	e7f9      	b.n	800785e <memset+0x4>
	...

0800786c <_free_r>:
 800786c:	b538      	push	{r3, r4, r5, lr}
 800786e:	4605      	mov	r5, r0
 8007870:	2900      	cmp	r1, #0
 8007872:	d045      	beq.n	8007900 <_free_r+0x94>
 8007874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007878:	1f0c      	subs	r4, r1, #4
 800787a:	2b00      	cmp	r3, #0
 800787c:	bfb8      	it	lt
 800787e:	18e4      	addlt	r4, r4, r3
 8007880:	f000 f948 	bl	8007b14 <__malloc_lock>
 8007884:	4a1f      	ldr	r2, [pc, #124]	; (8007904 <_free_r+0x98>)
 8007886:	6813      	ldr	r3, [r2, #0]
 8007888:	4610      	mov	r0, r2
 800788a:	b933      	cbnz	r3, 800789a <_free_r+0x2e>
 800788c:	6063      	str	r3, [r4, #4]
 800788e:	6014      	str	r4, [r2, #0]
 8007890:	4628      	mov	r0, r5
 8007892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007896:	f000 b93e 	b.w	8007b16 <__malloc_unlock>
 800789a:	42a3      	cmp	r3, r4
 800789c:	d90c      	bls.n	80078b8 <_free_r+0x4c>
 800789e:	6821      	ldr	r1, [r4, #0]
 80078a0:	1862      	adds	r2, r4, r1
 80078a2:	4293      	cmp	r3, r2
 80078a4:	bf04      	itt	eq
 80078a6:	681a      	ldreq	r2, [r3, #0]
 80078a8:	685b      	ldreq	r3, [r3, #4]
 80078aa:	6063      	str	r3, [r4, #4]
 80078ac:	bf04      	itt	eq
 80078ae:	1852      	addeq	r2, r2, r1
 80078b0:	6022      	streq	r2, [r4, #0]
 80078b2:	6004      	str	r4, [r0, #0]
 80078b4:	e7ec      	b.n	8007890 <_free_r+0x24>
 80078b6:	4613      	mov	r3, r2
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	b10a      	cbz	r2, 80078c0 <_free_r+0x54>
 80078bc:	42a2      	cmp	r2, r4
 80078be:	d9fa      	bls.n	80078b6 <_free_r+0x4a>
 80078c0:	6819      	ldr	r1, [r3, #0]
 80078c2:	1858      	adds	r0, r3, r1
 80078c4:	42a0      	cmp	r0, r4
 80078c6:	d10b      	bne.n	80078e0 <_free_r+0x74>
 80078c8:	6820      	ldr	r0, [r4, #0]
 80078ca:	4401      	add	r1, r0
 80078cc:	1858      	adds	r0, r3, r1
 80078ce:	4282      	cmp	r2, r0
 80078d0:	6019      	str	r1, [r3, #0]
 80078d2:	d1dd      	bne.n	8007890 <_free_r+0x24>
 80078d4:	6810      	ldr	r0, [r2, #0]
 80078d6:	6852      	ldr	r2, [r2, #4]
 80078d8:	605a      	str	r2, [r3, #4]
 80078da:	4401      	add	r1, r0
 80078dc:	6019      	str	r1, [r3, #0]
 80078de:	e7d7      	b.n	8007890 <_free_r+0x24>
 80078e0:	d902      	bls.n	80078e8 <_free_r+0x7c>
 80078e2:	230c      	movs	r3, #12
 80078e4:	602b      	str	r3, [r5, #0]
 80078e6:	e7d3      	b.n	8007890 <_free_r+0x24>
 80078e8:	6820      	ldr	r0, [r4, #0]
 80078ea:	1821      	adds	r1, r4, r0
 80078ec:	428a      	cmp	r2, r1
 80078ee:	bf04      	itt	eq
 80078f0:	6811      	ldreq	r1, [r2, #0]
 80078f2:	6852      	ldreq	r2, [r2, #4]
 80078f4:	6062      	str	r2, [r4, #4]
 80078f6:	bf04      	itt	eq
 80078f8:	1809      	addeq	r1, r1, r0
 80078fa:	6021      	streq	r1, [r4, #0]
 80078fc:	605c      	str	r4, [r3, #4]
 80078fe:	e7c7      	b.n	8007890 <_free_r+0x24>
 8007900:	bd38      	pop	{r3, r4, r5, pc}
 8007902:	bf00      	nop
 8007904:	20000578 	.word	0x20000578

08007908 <_malloc_r>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	1ccd      	adds	r5, r1, #3
 800790c:	f025 0503 	bic.w	r5, r5, #3
 8007910:	3508      	adds	r5, #8
 8007912:	2d0c      	cmp	r5, #12
 8007914:	bf38      	it	cc
 8007916:	250c      	movcc	r5, #12
 8007918:	2d00      	cmp	r5, #0
 800791a:	4606      	mov	r6, r0
 800791c:	db01      	blt.n	8007922 <_malloc_r+0x1a>
 800791e:	42a9      	cmp	r1, r5
 8007920:	d903      	bls.n	800792a <_malloc_r+0x22>
 8007922:	230c      	movs	r3, #12
 8007924:	6033      	str	r3, [r6, #0]
 8007926:	2000      	movs	r0, #0
 8007928:	bd70      	pop	{r4, r5, r6, pc}
 800792a:	f000 f8f3 	bl	8007b14 <__malloc_lock>
 800792e:	4a21      	ldr	r2, [pc, #132]	; (80079b4 <_malloc_r+0xac>)
 8007930:	6814      	ldr	r4, [r2, #0]
 8007932:	4621      	mov	r1, r4
 8007934:	b991      	cbnz	r1, 800795c <_malloc_r+0x54>
 8007936:	4c20      	ldr	r4, [pc, #128]	; (80079b8 <_malloc_r+0xb0>)
 8007938:	6823      	ldr	r3, [r4, #0]
 800793a:	b91b      	cbnz	r3, 8007944 <_malloc_r+0x3c>
 800793c:	4630      	mov	r0, r6
 800793e:	f000 f895 	bl	8007a6c <_sbrk_r>
 8007942:	6020      	str	r0, [r4, #0]
 8007944:	4629      	mov	r1, r5
 8007946:	4630      	mov	r0, r6
 8007948:	f000 f890 	bl	8007a6c <_sbrk_r>
 800794c:	1c43      	adds	r3, r0, #1
 800794e:	d124      	bne.n	800799a <_malloc_r+0x92>
 8007950:	230c      	movs	r3, #12
 8007952:	6033      	str	r3, [r6, #0]
 8007954:	4630      	mov	r0, r6
 8007956:	f000 f8de 	bl	8007b16 <__malloc_unlock>
 800795a:	e7e4      	b.n	8007926 <_malloc_r+0x1e>
 800795c:	680b      	ldr	r3, [r1, #0]
 800795e:	1b5b      	subs	r3, r3, r5
 8007960:	d418      	bmi.n	8007994 <_malloc_r+0x8c>
 8007962:	2b0b      	cmp	r3, #11
 8007964:	d90f      	bls.n	8007986 <_malloc_r+0x7e>
 8007966:	600b      	str	r3, [r1, #0]
 8007968:	50cd      	str	r5, [r1, r3]
 800796a:	18cc      	adds	r4, r1, r3
 800796c:	4630      	mov	r0, r6
 800796e:	f000 f8d2 	bl	8007b16 <__malloc_unlock>
 8007972:	f104 000b 	add.w	r0, r4, #11
 8007976:	1d23      	adds	r3, r4, #4
 8007978:	f020 0007 	bic.w	r0, r0, #7
 800797c:	1ac3      	subs	r3, r0, r3
 800797e:	d0d3      	beq.n	8007928 <_malloc_r+0x20>
 8007980:	425a      	negs	r2, r3
 8007982:	50e2      	str	r2, [r4, r3]
 8007984:	e7d0      	b.n	8007928 <_malloc_r+0x20>
 8007986:	428c      	cmp	r4, r1
 8007988:	684b      	ldr	r3, [r1, #4]
 800798a:	bf16      	itet	ne
 800798c:	6063      	strne	r3, [r4, #4]
 800798e:	6013      	streq	r3, [r2, #0]
 8007990:	460c      	movne	r4, r1
 8007992:	e7eb      	b.n	800796c <_malloc_r+0x64>
 8007994:	460c      	mov	r4, r1
 8007996:	6849      	ldr	r1, [r1, #4]
 8007998:	e7cc      	b.n	8007934 <_malloc_r+0x2c>
 800799a:	1cc4      	adds	r4, r0, #3
 800799c:	f024 0403 	bic.w	r4, r4, #3
 80079a0:	42a0      	cmp	r0, r4
 80079a2:	d005      	beq.n	80079b0 <_malloc_r+0xa8>
 80079a4:	1a21      	subs	r1, r4, r0
 80079a6:	4630      	mov	r0, r6
 80079a8:	f000 f860 	bl	8007a6c <_sbrk_r>
 80079ac:	3001      	adds	r0, #1
 80079ae:	d0cf      	beq.n	8007950 <_malloc_r+0x48>
 80079b0:	6025      	str	r5, [r4, #0]
 80079b2:	e7db      	b.n	800796c <_malloc_r+0x64>
 80079b4:	20000578 	.word	0x20000578
 80079b8:	2000057c 	.word	0x2000057c

080079bc <srand>:
 80079bc:	b538      	push	{r3, r4, r5, lr}
 80079be:	4b0d      	ldr	r3, [pc, #52]	; (80079f4 <srand+0x38>)
 80079c0:	681c      	ldr	r4, [r3, #0]
 80079c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80079c4:	4605      	mov	r5, r0
 80079c6:	b97b      	cbnz	r3, 80079e8 <srand+0x2c>
 80079c8:	2018      	movs	r0, #24
 80079ca:	f7ff ff1d 	bl	8007808 <malloc>
 80079ce:	4a0a      	ldr	r2, [pc, #40]	; (80079f8 <srand+0x3c>)
 80079d0:	4b0a      	ldr	r3, [pc, #40]	; (80079fc <srand+0x40>)
 80079d2:	63a0      	str	r0, [r4, #56]	; 0x38
 80079d4:	e9c0 2300 	strd	r2, r3, [r0]
 80079d8:	4b09      	ldr	r3, [pc, #36]	; (8007a00 <srand+0x44>)
 80079da:	6083      	str	r3, [r0, #8]
 80079dc:	230b      	movs	r3, #11
 80079de:	8183      	strh	r3, [r0, #12]
 80079e0:	2201      	movs	r2, #1
 80079e2:	2300      	movs	r3, #0
 80079e4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80079e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80079ea:	2200      	movs	r2, #0
 80079ec:	611d      	str	r5, [r3, #16]
 80079ee:	615a      	str	r2, [r3, #20]
 80079f0:	bd38      	pop	{r3, r4, r5, pc}
 80079f2:	bf00      	nop
 80079f4:	20000050 	.word	0x20000050
 80079f8:	abcd330e 	.word	0xabcd330e
 80079fc:	e66d1234 	.word	0xe66d1234
 8007a00:	0005deec 	.word	0x0005deec

08007a04 <rand>:
 8007a04:	b538      	push	{r3, r4, r5, lr}
 8007a06:	4b13      	ldr	r3, [pc, #76]	; (8007a54 <rand+0x50>)
 8007a08:	681c      	ldr	r4, [r3, #0]
 8007a0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007a0c:	b97b      	cbnz	r3, 8007a2e <rand+0x2a>
 8007a0e:	2018      	movs	r0, #24
 8007a10:	f7ff fefa 	bl	8007808 <malloc>
 8007a14:	4a10      	ldr	r2, [pc, #64]	; (8007a58 <rand+0x54>)
 8007a16:	4b11      	ldr	r3, [pc, #68]	; (8007a5c <rand+0x58>)
 8007a18:	63a0      	str	r0, [r4, #56]	; 0x38
 8007a1a:	e9c0 2300 	strd	r2, r3, [r0]
 8007a1e:	4b10      	ldr	r3, [pc, #64]	; (8007a60 <rand+0x5c>)
 8007a20:	6083      	str	r3, [r0, #8]
 8007a22:	230b      	movs	r3, #11
 8007a24:	8183      	strh	r3, [r0, #12]
 8007a26:	2201      	movs	r2, #1
 8007a28:	2300      	movs	r3, #0
 8007a2a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007a2e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007a30:	480c      	ldr	r0, [pc, #48]	; (8007a64 <rand+0x60>)
 8007a32:	690a      	ldr	r2, [r1, #16]
 8007a34:	694b      	ldr	r3, [r1, #20]
 8007a36:	4c0c      	ldr	r4, [pc, #48]	; (8007a68 <rand+0x64>)
 8007a38:	4350      	muls	r0, r2
 8007a3a:	fb04 0003 	mla	r0, r4, r3, r0
 8007a3e:	fba2 2304 	umull	r2, r3, r2, r4
 8007a42:	4403      	add	r3, r0
 8007a44:	1c54      	adds	r4, r2, #1
 8007a46:	f143 0500 	adc.w	r5, r3, #0
 8007a4a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8007a4e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8007a52:	bd38      	pop	{r3, r4, r5, pc}
 8007a54:	20000050 	.word	0x20000050
 8007a58:	abcd330e 	.word	0xabcd330e
 8007a5c:	e66d1234 	.word	0xe66d1234
 8007a60:	0005deec 	.word	0x0005deec
 8007a64:	5851f42d 	.word	0x5851f42d
 8007a68:	4c957f2d 	.word	0x4c957f2d

08007a6c <_sbrk_r>:
 8007a6c:	b538      	push	{r3, r4, r5, lr}
 8007a6e:	4c06      	ldr	r4, [pc, #24]	; (8007a88 <_sbrk_r+0x1c>)
 8007a70:	2300      	movs	r3, #0
 8007a72:	4605      	mov	r5, r0
 8007a74:	4608      	mov	r0, r1
 8007a76:	6023      	str	r3, [r4, #0]
 8007a78:	f7fb fcc2 	bl	8003400 <_sbrk>
 8007a7c:	1c43      	adds	r3, r0, #1
 8007a7e:	d102      	bne.n	8007a86 <_sbrk_r+0x1a>
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	b103      	cbz	r3, 8007a86 <_sbrk_r+0x1a>
 8007a84:	602b      	str	r3, [r5, #0]
 8007a86:	bd38      	pop	{r3, r4, r5, pc}
 8007a88:	20000588 	.word	0x20000588

08007a8c <_raise_r>:
 8007a8c:	291f      	cmp	r1, #31
 8007a8e:	b538      	push	{r3, r4, r5, lr}
 8007a90:	4604      	mov	r4, r0
 8007a92:	460d      	mov	r5, r1
 8007a94:	d904      	bls.n	8007aa0 <_raise_r+0x14>
 8007a96:	2316      	movs	r3, #22
 8007a98:	6003      	str	r3, [r0, #0]
 8007a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a9e:	bd38      	pop	{r3, r4, r5, pc}
 8007aa0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007aa2:	b112      	cbz	r2, 8007aaa <_raise_r+0x1e>
 8007aa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007aa8:	b94b      	cbnz	r3, 8007abe <_raise_r+0x32>
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f000 f830 	bl	8007b10 <_getpid_r>
 8007ab0:	462a      	mov	r2, r5
 8007ab2:	4601      	mov	r1, r0
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007aba:	f000 b817 	b.w	8007aec <_kill_r>
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d00a      	beq.n	8007ad8 <_raise_r+0x4c>
 8007ac2:	1c59      	adds	r1, r3, #1
 8007ac4:	d103      	bne.n	8007ace <_raise_r+0x42>
 8007ac6:	2316      	movs	r3, #22
 8007ac8:	6003      	str	r3, [r0, #0]
 8007aca:	2001      	movs	r0, #1
 8007acc:	e7e7      	b.n	8007a9e <_raise_r+0x12>
 8007ace:	2400      	movs	r4, #0
 8007ad0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	4798      	blx	r3
 8007ad8:	2000      	movs	r0, #0
 8007ada:	e7e0      	b.n	8007a9e <_raise_r+0x12>

08007adc <raise>:
 8007adc:	4b02      	ldr	r3, [pc, #8]	; (8007ae8 <raise+0xc>)
 8007ade:	4601      	mov	r1, r0
 8007ae0:	6818      	ldr	r0, [r3, #0]
 8007ae2:	f7ff bfd3 	b.w	8007a8c <_raise_r>
 8007ae6:	bf00      	nop
 8007ae8:	20000050 	.word	0x20000050

08007aec <_kill_r>:
 8007aec:	b538      	push	{r3, r4, r5, lr}
 8007aee:	4c07      	ldr	r4, [pc, #28]	; (8007b0c <_kill_r+0x20>)
 8007af0:	2300      	movs	r3, #0
 8007af2:	4605      	mov	r5, r0
 8007af4:	4608      	mov	r0, r1
 8007af6:	4611      	mov	r1, r2
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	f7fb fc67 	bl	80033cc <_kill>
 8007afe:	1c43      	adds	r3, r0, #1
 8007b00:	d102      	bne.n	8007b08 <_kill_r+0x1c>
 8007b02:	6823      	ldr	r3, [r4, #0]
 8007b04:	b103      	cbz	r3, 8007b08 <_kill_r+0x1c>
 8007b06:	602b      	str	r3, [r5, #0]
 8007b08:	bd38      	pop	{r3, r4, r5, pc}
 8007b0a:	bf00      	nop
 8007b0c:	20000588 	.word	0x20000588

08007b10 <_getpid_r>:
 8007b10:	f7fb bc54 	b.w	80033bc <_getpid>

08007b14 <__malloc_lock>:
 8007b14:	4770      	bx	lr

08007b16 <__malloc_unlock>:
 8007b16:	4770      	bx	lr

08007b18 <_init>:
 8007b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1a:	bf00      	nop
 8007b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b1e:	bc08      	pop	{r3}
 8007b20:	469e      	mov	lr, r3
 8007b22:	4770      	bx	lr

08007b24 <_fini>:
 8007b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b26:	bf00      	nop
 8007b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b2a:	bc08      	pop	{r3}
 8007b2c:	469e      	mov	lr, r3
 8007b2e:	4770      	bx	lr
