
Animacje_Nowy_Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dd0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b74  08006f7c  08006f7c  00016f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008af0  08008af0  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  08008af0  08008af0  00018af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008af8  08008af8  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008af8  08008af8  00018af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008afc  08008afc  00018afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08008b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  200000b4  08008bb4  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000544  08008bb4  00020544  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019909  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003639  00000000  00000000  000399ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014f0  00000000  00000000  0003d028  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001360  00000000  00000000  0003e518  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006e77  00000000  00000000  0003f878  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012b8c  00000000  00000000  000466ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e5e61  00000000  00000000  0005927b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f0dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c6c  00000000  00000000  0013f158  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000004e  00000000  00000000  00144dc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000b4 	.word	0x200000b4
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006f64 	.word	0x08006f64

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200000b8 	.word	0x200000b8
 80001e8:	08006f64 	.word	0x08006f64

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80004f0:	f000 fde8 	bl	80010c4 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80004f4:	20ca      	movs	r0, #202	; 0xca
 80004f6:	f000 f95d 	bl	80007b4 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80004fa:	20c3      	movs	r0, #195	; 0xc3
 80004fc:	f000 f967 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000500:	2008      	movs	r0, #8
 8000502:	f000 f964 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000506:	2050      	movs	r0, #80	; 0x50
 8000508:	f000 f961 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800050c:	20cf      	movs	r0, #207	; 0xcf
 800050e:	f000 f951 	bl	80007b4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000512:	2000      	movs	r0, #0
 8000514:	f000 f95b 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000518:	20c1      	movs	r0, #193	; 0xc1
 800051a:	f000 f958 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800051e:	2030      	movs	r0, #48	; 0x30
 8000520:	f000 f955 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000524:	20ed      	movs	r0, #237	; 0xed
 8000526:	f000 f945 	bl	80007b4 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 800052a:	2064      	movs	r0, #100	; 0x64
 800052c:	f000 f94f 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000530:	2003      	movs	r0, #3
 8000532:	f000 f94c 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000536:	2012      	movs	r0, #18
 8000538:	f000 f949 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800053c:	2081      	movs	r0, #129	; 0x81
 800053e:	f000 f946 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000542:	20e8      	movs	r0, #232	; 0xe8
 8000544:	f000 f936 	bl	80007b4 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000548:	2085      	movs	r0, #133	; 0x85
 800054a:	f000 f940 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800054e:	2000      	movs	r0, #0
 8000550:	f000 f93d 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000554:	2078      	movs	r0, #120	; 0x78
 8000556:	f000 f93a 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 800055a:	20cb      	movs	r0, #203	; 0xcb
 800055c:	f000 f92a 	bl	80007b4 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000560:	2039      	movs	r0, #57	; 0x39
 8000562:	f000 f934 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000566:	202c      	movs	r0, #44	; 0x2c
 8000568:	f000 f931 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800056c:	2000      	movs	r0, #0
 800056e:	f000 f92e 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000572:	2034      	movs	r0, #52	; 0x34
 8000574:	f000 f92b 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8000578:	2002      	movs	r0, #2
 800057a:	f000 f928 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800057e:	20f7      	movs	r0, #247	; 0xf7
 8000580:	f000 f918 	bl	80007b4 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000584:	2020      	movs	r0, #32
 8000586:	f000 f922 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800058a:	20ea      	movs	r0, #234	; 0xea
 800058c:	f000 f912 	bl	80007b4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000590:	2000      	movs	r0, #0
 8000592:	f000 f91c 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000596:	2000      	movs	r0, #0
 8000598:	f000 f919 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800059c:	20b1      	movs	r0, #177	; 0xb1
 800059e:	f000 f909 	bl	80007b4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 f913 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80005a8:	201b      	movs	r0, #27
 80005aa:	f000 f910 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80005ae:	20b6      	movs	r0, #182	; 0xb6
 80005b0:	f000 f900 	bl	80007b4 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80005b4:	200a      	movs	r0, #10
 80005b6:	f000 f90a 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80005ba:	20a2      	movs	r0, #162	; 0xa2
 80005bc:	f000 f907 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80005c0:	20c0      	movs	r0, #192	; 0xc0
 80005c2:	f000 f8f7 	bl	80007b4 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80005c6:	2010      	movs	r0, #16
 80005c8:	f000 f901 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80005cc:	20c1      	movs	r0, #193	; 0xc1
 80005ce:	f000 f8f1 	bl	80007b4 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80005d2:	2010      	movs	r0, #16
 80005d4:	f000 f8fb 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80005d8:	20c5      	movs	r0, #197	; 0xc5
 80005da:	f000 f8eb 	bl	80007b4 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80005de:	2045      	movs	r0, #69	; 0x45
 80005e0:	f000 f8f5 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80005e4:	2015      	movs	r0, #21
 80005e6:	f000 f8f2 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80005ea:	20c7      	movs	r0, #199	; 0xc7
 80005ec:	f000 f8e2 	bl	80007b4 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80005f0:	2090      	movs	r0, #144	; 0x90
 80005f2:	f000 f8ec 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80005f6:	2036      	movs	r0, #54	; 0x36
 80005f8:	f000 f8dc 	bl	80007b4 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80005fc:	20c8      	movs	r0, #200	; 0xc8
 80005fe:	f000 f8e6 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8000602:	20f2      	movs	r0, #242	; 0xf2
 8000604:	f000 f8d6 	bl	80007b4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000608:	2000      	movs	r0, #0
 800060a:	f000 f8e0 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800060e:	20b0      	movs	r0, #176	; 0xb0
 8000610:	f000 f8d0 	bl	80007b4 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000614:	20c2      	movs	r0, #194	; 0xc2
 8000616:	f000 f8da 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800061a:	20b6      	movs	r0, #182	; 0xb6
 800061c:	f000 f8ca 	bl	80007b4 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000620:	200a      	movs	r0, #10
 8000622:	f000 f8d4 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000626:	20a7      	movs	r0, #167	; 0xa7
 8000628:	f000 f8d1 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800062c:	2027      	movs	r0, #39	; 0x27
 800062e:	f000 f8ce 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000632:	2004      	movs	r0, #4
 8000634:	f000 f8cb 	bl	80007ce <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000638:	202a      	movs	r0, #42	; 0x2a
 800063a:	f000 f8bb 	bl	80007b4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800063e:	2000      	movs	r0, #0
 8000640:	f000 f8c5 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000644:	2000      	movs	r0, #0
 8000646:	f000 f8c2 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800064a:	2000      	movs	r0, #0
 800064c:	f000 f8bf 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8000650:	20ef      	movs	r0, #239	; 0xef
 8000652:	f000 f8bc 	bl	80007ce <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000656:	202b      	movs	r0, #43	; 0x2b
 8000658:	f000 f8ac 	bl	80007b4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800065c:	2000      	movs	r0, #0
 800065e:	f000 f8b6 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000662:	2000      	movs	r0, #0
 8000664:	f000 f8b3 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8000668:	2001      	movs	r0, #1
 800066a:	f000 f8b0 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800066e:	203f      	movs	r0, #63	; 0x3f
 8000670:	f000 f8ad 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8000674:	20f6      	movs	r0, #246	; 0xf6
 8000676:	f000 f89d 	bl	80007b4 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800067a:	2001      	movs	r0, #1
 800067c:	f000 f8a7 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000680:	2000      	movs	r0, #0
 8000682:	f000 f8a4 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8000686:	2006      	movs	r0, #6
 8000688:	f000 f8a1 	bl	80007ce <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800068c:	202c      	movs	r0, #44	; 0x2c
 800068e:	f000 f891 	bl	80007b4 <ili9341_WriteReg>
  LCD_Delay(200);
 8000692:	20c8      	movs	r0, #200	; 0xc8
 8000694:	f000 fe04 	bl	80012a0 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8000698:	2026      	movs	r0, #38	; 0x26
 800069a:	f000 f88b 	bl	80007b4 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800069e:	2001      	movs	r0, #1
 80006a0:	f000 f895 	bl	80007ce <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80006a4:	20e0      	movs	r0, #224	; 0xe0
 80006a6:	f000 f885 	bl	80007b4 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80006aa:	200f      	movs	r0, #15
 80006ac:	f000 f88f 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80006b0:	2029      	movs	r0, #41	; 0x29
 80006b2:	f000 f88c 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80006b6:	2024      	movs	r0, #36	; 0x24
 80006b8:	f000 f889 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80006bc:	200c      	movs	r0, #12
 80006be:	f000 f886 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80006c2:	200e      	movs	r0, #14
 80006c4:	f000 f883 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80006c8:	2009      	movs	r0, #9
 80006ca:	f000 f880 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80006ce:	204e      	movs	r0, #78	; 0x4e
 80006d0:	f000 f87d 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80006d4:	2078      	movs	r0, #120	; 0x78
 80006d6:	f000 f87a 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80006da:	203c      	movs	r0, #60	; 0x3c
 80006dc:	f000 f877 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80006e0:	2009      	movs	r0, #9
 80006e2:	f000 f874 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80006e6:	2013      	movs	r0, #19
 80006e8:	f000 f871 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80006ec:	2005      	movs	r0, #5
 80006ee:	f000 f86e 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80006f2:	2017      	movs	r0, #23
 80006f4:	f000 f86b 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80006f8:	2011      	movs	r0, #17
 80006fa:	f000 f868 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80006fe:	2000      	movs	r0, #0
 8000700:	f000 f865 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000704:	20e1      	movs	r0, #225	; 0xe1
 8000706:	f000 f855 	bl	80007b4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800070a:	2000      	movs	r0, #0
 800070c:	f000 f85f 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8000710:	2016      	movs	r0, #22
 8000712:	f000 f85c 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000716:	201b      	movs	r0, #27
 8000718:	f000 f859 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800071c:	2004      	movs	r0, #4
 800071e:	f000 f856 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000722:	2011      	movs	r0, #17
 8000724:	f000 f853 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8000728:	2007      	movs	r0, #7
 800072a:	f000 f850 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800072e:	2031      	movs	r0, #49	; 0x31
 8000730:	f000 f84d 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000734:	2033      	movs	r0, #51	; 0x33
 8000736:	f000 f84a 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800073a:	2042      	movs	r0, #66	; 0x42
 800073c:	f000 f847 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000740:	2005      	movs	r0, #5
 8000742:	f000 f844 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000746:	200c      	movs	r0, #12
 8000748:	f000 f841 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800074c:	200a      	movs	r0, #10
 800074e:	f000 f83e 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8000752:	2028      	movs	r0, #40	; 0x28
 8000754:	f000 f83b 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000758:	202f      	movs	r0, #47	; 0x2f
 800075a:	f000 f838 	bl	80007ce <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800075e:	200f      	movs	r0, #15
 8000760:	f000 f835 	bl	80007ce <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000764:	2011      	movs	r0, #17
 8000766:	f000 f825 	bl	80007b4 <ili9341_WriteReg>
  LCD_Delay(200);
 800076a:	20c8      	movs	r0, #200	; 0xc8
 800076c:	f000 fd98 	bl	80012a0 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000770:	2029      	movs	r0, #41	; 0x29
 8000772:	f000 f81f 	bl	80007b4 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8000776:	202c      	movs	r0, #44	; 0x2c
 8000778:	f000 f81c 	bl	80007b4 <ili9341_WriteReg>
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}

08000780 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8000784:	f000 fc9e 	bl	80010c4 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8000788:	2103      	movs	r1, #3
 800078a:	20d3      	movs	r0, #211	; 0xd3
 800078c:	f000 f82c 	bl	80007e8 <ili9341_ReadData>
 8000790:	4603      	mov	r3, r0
 8000792:	b29b      	uxth	r3, r3
}
 8000794:	4618      	mov	r0, r3
 8000796:	bd80      	pop	{r7, pc}

08000798 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800079c:	2029      	movs	r0, #41	; 0x29
 800079e:	f000 f809 	bl	80007b4 <ili9341_WriteReg>
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80007aa:	2028      	movs	r0, #40	; 0x28
 80007ac:	f000 f802 	bl	80007b4 <ili9341_WriteReg>
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fd19 	bl	80011f8 <LCD_IO_WriteReg>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	4603      	mov	r3, r0
 80007d6:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80007d8:	88fb      	ldrh	r3, [r7, #6]
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fcea 	bl	80011b4 <LCD_IO_WriteData>
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	460a      	mov	r2, r1
 80007f2:	80fb      	strh	r3, [r7, #6]
 80007f4:	4613      	mov	r3, r2
 80007f6:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80007f8:	797a      	ldrb	r2, [r7, #5]
 80007fa:	88fb      	ldrh	r3, [r7, #6]
 80007fc:	4611      	mov	r1, r2
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 fd1c 	bl	800123c <LCD_IO_ReadData>
 8000804:	4603      	mov	r3, r0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8000812:	23f0      	movs	r3, #240	; 0xf0
}
 8000814:	4618      	mov	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8000822:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8000826:	4618      	mov	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000834:	f001 ff74 	bl	8002720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000838:	f000 f856 	bl	80008e8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083c:	f000 fafa 	bl	8000e34 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8000840:	f000 fa78 	bl	8000d34 <_ZL19MX_USART1_UART_Initv>
  MX_LTDC_Init();
 8000844:	f000 f97c 	bl	8000b40 <_ZL12MX_LTDC_Initv>
  MX_DMA2D_Init();
 8000848:	f000 f8ee 	bl	8000a28 <_ZL13MX_DMA2D_Initv>
  MX_I2C3_Init();
 800084c:	f000 f928 	bl	8000aa0 <_ZL12MX_I2C3_Initv>
  MX_SPI5_Init();
 8000850:	f000 fa34 	bl	8000cbc <_ZL12MX_SPI5_Initv>
  MX_MBEDTLS_Init();
 8000854:	f005 fee5 	bl	8006622 <MX_MBEDTLS_Init>
  MX_FMC_Init();
 8000858:	f000 fa9a 	bl	8000d90 <_ZL11MX_FMC_Initv>

  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 800085c:	f000 fd2c 	bl	80012b8 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER,LCD_FRAME_BUFFER);
 8000860:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000864:	2000      	movs	r0, #0
 8000866:	f000 fda9 	bl	80013bc <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 800086a:	2000      	movs	r0, #0
 800086c:	f000 fe0a 	bl	8001484 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8000870:	f000 ff9e 	bl	80017b0 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000874:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000878:	f000 fe5c 	bl	8001534 <BSP_LCD_Clear>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  figFall(i);
//	  i++;
	  printf("Test\r\n");
 800087c:	4815      	ldr	r0, [pc, #84]	; (80008d4 <main+0xa4>)
 800087e:	f006 f80d 	bl	800689c <puts>
//		  for(int j=100;j<200;j++)
//			  BSP_LCD_DrawPixel(i,j,1);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000882:	f04f 30ff 	mov.w	r0, #4294967295
 8000886:	f000 fe0d 	bl	80014a4 <BSP_LCD_SetTextColor>
	  BSP_LCD_DisplayStringAtLine(1,(uint8_t*)"TEST LINE 1");
 800088a:	4913      	ldr	r1, [pc, #76]	; (80008d8 <main+0xa8>)
 800088c:	2001      	movs	r0, #1
 800088e:	f000 ff77 	bl	8001780 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000892:	f04f 30ff 	mov.w	r0, #4294967295
 8000896:	f000 fe05 	bl	80014a4 <BSP_LCD_SetTextColor>
	  BSP_LCD_DisplayStringAtLine(6,(uint8_t*)"TEST LINE 2");
 800089a:	4910      	ldr	r1, [pc, #64]	; (80008dc <main+0xac>)
 800089c:	2006      	movs	r0, #6
 800089e:	f000 ff6f 	bl	8001780 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80008a2:	f04f 30ff 	mov.w	r0, #4294967295
 80008a6:	f000 fdfd 	bl	80014a4 <BSP_LCD_SetTextColor>
	  BSP_LCD_DisplayStringAtLine(3,(uint8_t*)"TEST LINE 3");
 80008aa:	490d      	ldr	r1, [pc, #52]	; (80008e0 <main+0xb0>)
 80008ac:	2003      	movs	r0, #3
 80008ae:	f000 ff67 	bl	8001780 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80008b2:	f04f 30ff 	mov.w	r0, #4294967295
 80008b6:	f000 fdf5 	bl	80014a4 <BSP_LCD_SetTextColor>
	  BSP_LCD_DisplayStringAtLine(9,(uint8_t*)"TEST LINE 4");
 80008ba:	490a      	ldr	r1, [pc, #40]	; (80008e4 <main+0xb4>)
 80008bc:	2009      	movs	r0, #9
 80008be:	f000 ff5f 	bl	8001780 <BSP_LCD_DisplayStringAtLine>
	  HAL_Delay(1000);
 80008c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c6:	f001 ff9d 	bl	8002804 <HAL_Delay>
	  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80008ca:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80008ce:	f000 fe31 	bl	8001534 <BSP_LCD_Clear>
	  printf("Test\r\n");
 80008d2:	e7d3      	b.n	800087c <main+0x4c>
 80008d4:	08006f7c 	.word	0x08006f7c
 80008d8:	08006f84 	.word	0x08006f84
 80008dc:	08006f90 	.word	0x08006f90
 80008e0:	08006f9c 	.word	0x08006f9c
 80008e4:	08006fa8 	.word	0x08006fa8

080008e8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b0a0      	sub	sp, #128	; 0x80
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80008f2:	2230      	movs	r2, #48	; 0x30
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f005 fec4 	bl	8006684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	2230      	movs	r2, #48	; 0x30
 8000912:	2100      	movs	r1, #0
 8000914:	4618      	mov	r0, r3
 8000916:	f005 feb5 	bl	8006684 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	4b40      	ldr	r3, [pc, #256]	; (8000a20 <_Z18SystemClock_Configv+0x138>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	4a3f      	ldr	r2, [pc, #252]	; (8000a20 <_Z18SystemClock_Configv+0x138>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000928:	6413      	str	r3, [r2, #64]	; 0x40
 800092a:	4b3d      	ldr	r3, [pc, #244]	; (8000a20 <_Z18SystemClock_Configv+0x138>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b3a      	ldr	r3, [pc, #232]	; (8000a24 <_Z18SystemClock_Configv+0x13c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a39      	ldr	r2, [pc, #228]	; (8000a24 <_Z18SystemClock_Configv+0x13c>)
 8000940:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000944:	6013      	str	r3, [r2, #0]
 8000946:	4b37      	ldr	r3, [pc, #220]	; (8000a24 <_Z18SystemClock_Configv+0x13c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000952:	2302      	movs	r3, #2
 8000954:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000956:	2301      	movs	r3, #1
 8000958:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095a:	2310      	movs	r3, #16
 800095c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095e:	2302      	movs	r3, #2
 8000960:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000962:	2300      	movs	r3, #0
 8000964:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000966:	2310      	movs	r3, #16
 8000968:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 360;
 800096a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800096e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000970:	2302      	movs	r3, #2
 8000972:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000974:	2304      	movs	r3, #4
 8000976:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000978:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800097c:	4618      	mov	r0, r3
 800097e:	f003 fc5f 	bl	8004240 <HAL_RCC_OscConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	bf14      	ite	ne
 8000988:	2301      	movne	r3, #1
 800098a:	2300      	moveq	r3, #0
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 8000992:	f000 fabd 	bl	8000f10 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000996:	f003 fc03 	bl	80041a0 <HAL_PWREx_EnableOverDrive>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	bf14      	ite	ne
 80009a0:	2301      	movne	r3, #1
 80009a2:	2300      	moveq	r3, #0
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 80009aa:	f000 fab1 	bl	8000f10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ae:	230f      	movs	r3, #15
 80009b0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b2:	2302      	movs	r3, #2
 80009b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009ca:	2105      	movs	r1, #5
 80009cc:	4618      	mov	r0, r3
 80009ce:	f003 fea7 	bl	8004720 <HAL_RCC_ClockConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	bf14      	ite	ne
 80009d8:	2301      	movne	r3, #1
 80009da:	2300      	moveq	r3, #0
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <_Z18SystemClock_Configv+0xfe>
  {
    Error_Handler();
 80009e2:	f000 fa95 	bl	8000f10 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80009e6:	2308      	movs	r3, #8
 80009e8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 432;
 80009ea:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80009ee:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80009f4:	2300      	movs	r3, #0
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	4618      	mov	r0, r3
 80009fe:	f004 f85b 	bl	8004ab8 <HAL_RCCEx_PeriphCLKConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	bf14      	ite	ne
 8000a08:	2301      	movne	r3, #1
 8000a0a:	2300      	moveq	r3, #0
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <_Z18SystemClock_Configv+0x12e>
  {
    Error_Handler();
 8000a12:	f000 fa7d 	bl	8000f10 <Error_Handler>
  }
}
 8000a16:	bf00      	nop
 8000a18:	3780      	adds	r7, #128	; 0x80
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40007000 	.word	0x40007000

08000a28 <_ZL13MX_DMA2D_Initv>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <_ZL13MX_DMA2D_Initv+0x70>)
 8000a2e:	4a1b      	ldr	r2, [pc, #108]	; (8000a9c <_ZL13MX_DMA2D_Initv+0x74>)
 8000a30:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <_ZL13MX_DMA2D_Initv+0x70>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <_ZL13MX_DMA2D_Initv+0x70>)
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <_ZL13MX_DMA2D_Initv+0x70>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <_ZL13MX_DMA2D_Initv+0x70>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <_ZL13MX_DMA2D_Initv+0x70>)
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <_ZL13MX_DMA2D_Initv+0x70>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <_ZL13MX_DMA2D_Initv+0x70>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a5c:	480e      	ldr	r0, [pc, #56]	; (8000a98 <_ZL13MX_DMA2D_Initv+0x70>)
 8000a5e:	f002 f9c1 	bl	8002de4 <HAL_DMA2D_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	bf14      	ite	ne
 8000a68:	2301      	movne	r3, #1
 8000a6a:	2300      	moveq	r3, #0
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <_ZL13MX_DMA2D_Initv+0x4e>
  {
    Error_Handler();
 8000a72:	f000 fa4d 	bl	8000f10 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a76:	2101      	movs	r1, #1
 8000a78:	4807      	ldr	r0, [pc, #28]	; (8000a98 <_ZL13MX_DMA2D_Initv+0x70>)
 8000a7a:	f002 fb11 	bl	80030a0 <HAL_DMA2D_ConfigLayer>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	bf14      	ite	ne
 8000a84:	2301      	movne	r3, #1
 8000a86:	2300      	moveq	r3, #0
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <_ZL13MX_DMA2D_Initv+0x6a>
  {
    Error_Handler();
 8000a8e:	f000 fa3f 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200000d0 	.word	0x200000d0
 8000a9c:	4002b000 	.word	0x4002b000

08000aa0 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000aa4:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <_ZL12MX_I2C3_Initv+0x94>)
 8000aa6:	4a24      	ldr	r2, [pc, #144]	; (8000b38 <_ZL12MX_I2C3_Initv+0x98>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000aaa:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <_ZL12MX_I2C3_Initv+0x94>)
 8000aac:	4a23      	ldr	r2, [pc, #140]	; (8000b3c <_ZL12MX_I2C3_Initv+0x9c>)
 8000aae:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ab0:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <_ZL12MX_I2C3_Initv+0x94>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000ab6:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <_ZL12MX_I2C3_Initv+0x94>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <_ZL12MX_I2C3_Initv+0x94>)
 8000abe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ac2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <_ZL12MX_I2C3_Initv+0x94>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <_ZL12MX_I2C3_Initv+0x94>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <_ZL12MX_I2C3_Initv+0x94>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <_ZL12MX_I2C3_Initv+0x94>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000adc:	4815      	ldr	r0, [pc, #84]	; (8000b34 <_ZL12MX_I2C3_Initv+0x94>)
 8000ade:	f002 fedb 	bl	8003898 <HAL_I2C_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bf14      	ite	ne
 8000ae8:	2301      	movne	r3, #1
 8000aea:	2300      	moveq	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 8000af2:	f000 fa0d 	bl	8000f10 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000af6:	2100      	movs	r1, #0
 8000af8:	480e      	ldr	r0, [pc, #56]	; (8000b34 <_ZL12MX_I2C3_Initv+0x94>)
 8000afa:	f003 f805 	bl	8003b08 <HAL_I2CEx_ConfigAnalogFilter>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	bf14      	ite	ne
 8000b04:	2301      	movne	r3, #1
 8000b06:	2300      	moveq	r3, #0
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <_ZL12MX_I2C3_Initv+0x72>
  {
    Error_Handler();
 8000b0e:	f000 f9ff 	bl	8000f10 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b12:	2100      	movs	r1, #0
 8000b14:	4807      	ldr	r0, [pc, #28]	; (8000b34 <_ZL12MX_I2C3_Initv+0x94>)
 8000b16:	f003 f833 	bl	8003b80 <HAL_I2CEx_ConfigDigitalFilter>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	bf14      	ite	ne
 8000b20:	2301      	movne	r3, #1
 8000b22:	2300      	moveq	r3, #0
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <_ZL12MX_I2C3_Initv+0x8e>
  {
    Error_Handler();
 8000b2a:	f000 f9f1 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000110 	.word	0x20000110
 8000b38:	40005c00 	.word	0x40005c00
 8000b3c:	000186a0 	.word	0x000186a0

08000b40 <_ZL12MX_LTDC_Initv>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b09a      	sub	sp, #104	; 0x68
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b4a:	2234      	movs	r2, #52	; 0x34
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f005 fd98 	bl	8006684 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000b54:	463b      	mov	r3, r7
 8000b56:	2234      	movs	r2, #52	; 0x34
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f005 fd92 	bl	8006684 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b60:	4b54      	ldr	r3, [pc, #336]	; (8000cb4 <_ZL12MX_LTDC_Initv+0x174>)
 8000b62:	4a55      	ldr	r2, [pc, #340]	; (8000cb8 <_ZL12MX_LTDC_Initv+0x178>)
 8000b64:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b66:	4b53      	ldr	r3, [pc, #332]	; (8000cb4 <_ZL12MX_LTDC_Initv+0x174>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b6c:	4b51      	ldr	r3, [pc, #324]	; (8000cb4 <_ZL12MX_LTDC_Initv+0x174>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b72:	4b50      	ldr	r3, [pc, #320]	; (8000cb4 <_ZL12MX_LTDC_Initv+0x174>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b78:	4b4e      	ldr	r3, [pc, #312]	; (8000cb4 <_ZL12MX_LTDC_Initv+0x174>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000b7e:	4b4d      	ldr	r3, [pc, #308]	; (8000cb4 <_ZL12MX_LTDC_Initv+0x174>)
 8000b80:	2207      	movs	r2, #7
 8000b82:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000b84:	4b4b      	ldr	r3, [pc, #300]	; (8000cb4 <_ZL12MX_LTDC_Initv+0x174>)
 8000b86:	2203      	movs	r2, #3
 8000b88:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000b8a:	4b4a      	ldr	r3, [pc, #296]	; (8000cb4 <_ZL12MX_LTDC_Initv+0x174>)
 8000b8c:	220e      	movs	r2, #14
 8000b8e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000b90:	4b48      	ldr	r3, [pc, #288]	; (8000cb4 <_ZL12MX_LTDC_Initv+0x174>)
 8000b92:	2205      	movs	r2, #5
 8000b94:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 334;
 8000b96:	4b47      	ldr	r3, [pc, #284]	; (8000cb4 <_ZL12MX_LTDC_Initv+0x174>)
 8000b98:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 8000b9c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 245;
 8000b9e:	4b45      	ldr	r3, [pc, #276]	; (8000cb4 <_ZL12MX_LTDC_Initv+0x174>)
 8000ba0:	22f5      	movs	r2, #245	; 0xf5
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 340;
 8000ba4:	4b43      	ldr	r3, [pc, #268]	; (8000cb4 <_ZL12MX_LTDC_Initv+0x174>)
 8000ba6:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8000baa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 247;
 8000bac:	4b41      	ldr	r3, [pc, #260]	; (8000cb4 <_ZL12MX_LTDC_Initv+0x174>)
 8000bae:	22f7      	movs	r2, #247	; 0xf7
 8000bb0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000bb2:	4b40      	ldr	r3, [pc, #256]	; (8000cb4 <_ZL12MX_LTDC_Initv+0x174>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000bba:	4b3e      	ldr	r3, [pc, #248]	; (8000cb4 <_ZL12MX_LTDC_Initv+0x174>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000bc2:	4b3c      	ldr	r3, [pc, #240]	; (8000cb4 <_ZL12MX_LTDC_Initv+0x174>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000bca:	483a      	ldr	r0, [pc, #232]	; (8000cb4 <_ZL12MX_LTDC_Initv+0x174>)
 8000bcc:	f003 f818 	bl	8003c00 <HAL_LTDC_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	bf14      	ite	ne
 8000bd6:	2301      	movne	r3, #1
 8000bd8:	2300      	moveq	r3, #0
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <_ZL12MX_LTDC_Initv+0xa4>
  {
    Error_Handler();
 8000be0:	f000 f996 	bl	8000f10 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c04:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000c06:	2305      	movs	r3, #5
 8000c08:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4820      	ldr	r0, [pc, #128]	; (8000cb4 <_ZL12MX_LTDC_Initv+0x174>)
 8000c32:	f003 f8b5 	bl	8003da0 <HAL_LTDC_ConfigLayer>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	bf14      	ite	ne
 8000c3c:	2301      	movne	r3, #1
 8000c3e:	2300      	moveq	r3, #0
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <_ZL12MX_LTDC_Initv+0x10a>
  {
    Error_Handler();
 8000c46:	f000 f963 	bl	8000f10 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c66:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000c68:	2305      	movs	r3, #5
 8000c6a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4808      	ldr	r0, [pc, #32]	; (8000cb4 <_ZL12MX_LTDC_Initv+0x174>)
 8000c92:	f003 f885 	bl	8003da0 <HAL_LTDC_ConfigLayer>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	bf14      	ite	ne
 8000c9c:	2301      	movne	r3, #1
 8000c9e:	2300      	moveq	r3, #0
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <_ZL12MX_LTDC_Initv+0x16a>
  {
    Error_Handler();
 8000ca6:	f000 f933 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	3768      	adds	r7, #104	; 0x68
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000164 	.word	0x20000164
 8000cb8:	40016800 	.word	0x40016800

08000cbc <_ZL12MX_SPI5_Initv>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <_ZL12MX_SPI5_Initv+0x70>)
 8000cc2:	4a1b      	ldr	r2, [pc, #108]	; (8000d30 <_ZL12MX_SPI5_Initv+0x74>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <_ZL12MX_SPI5_Initv+0x70>)
 8000cc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ccc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <_ZL12MX_SPI5_Initv+0x70>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <_ZL12MX_SPI5_Initv+0x70>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <_ZL12MX_SPI5_Initv+0x70>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <_ZL12MX_SPI5_Initv+0x70>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <_ZL12MX_SPI5_Initv+0x70>)
 8000ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cec:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <_ZL12MX_SPI5_Initv+0x70>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cf4:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <_ZL12MX_SPI5_Initv+0x70>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <_ZL12MX_SPI5_Initv+0x70>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <_ZL12MX_SPI5_Initv+0x70>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <_ZL12MX_SPI5_Initv+0x70>)
 8000d08:	220a      	movs	r2, #10
 8000d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000d0c:	4807      	ldr	r0, [pc, #28]	; (8000d2c <_ZL12MX_SPI5_Initv+0x70>)
 8000d0e:	f004 f910 	bl	8004f32 <HAL_SPI_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	bf14      	ite	ne
 8000d18:	2301      	movne	r3, #1
 8000d1a:	2300      	moveq	r3, #0
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <_ZL12MX_SPI5_Initv+0x6a>
  {
    Error_Handler();
 8000d22:	f000 f8f5 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	2000020c 	.word	0x2000020c
 8000d30:	40015000 	.word	0x40015000

08000d34 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d3a:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <_ZL19MX_USART1_UART_Initv+0x58>)
 8000d3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d58:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d6a:	4807      	ldr	r0, [pc, #28]	; (8000d88 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d6c:	f004 fe6c 	bl	8005a48 <HAL_UART_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	bf14      	ite	ne
 8000d76:	2301      	movne	r3, #1
 8000d78:	2300      	moveq	r3, #0
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000d80:	f000 f8c6 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000264 	.word	0x20000264
 8000d8c:	40011000 	.word	0x40011000

08000d90 <_ZL11MX_FMC_Initv>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
 8000da4:	615a      	str	r2, [r3, #20]
 8000da6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000da8:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <_ZL11MX_FMC_Initv+0x9c>)
 8000daa:	4a21      	ldr	r2, [pc, #132]	; (8000e30 <_ZL11MX_FMC_Initv+0xa0>)
 8000dac:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000dae:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <_ZL11MX_FMC_Initv+0x9c>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <_ZL11MX_FMC_Initv+0x9c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000dba:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <_ZL11MX_FMC_Initv+0x9c>)
 8000dbc:	2204      	movs	r2, #4
 8000dbe:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <_ZL11MX_FMC_Initv+0x9c>)
 8000dc2:	2210      	movs	r2, #16
 8000dc4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000dc6:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <_ZL11MX_FMC_Initv+0x9c>)
 8000dc8:	2240      	movs	r2, #64	; 0x40
 8000dca:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <_ZL11MX_FMC_Initv+0x9c>)
 8000dce:	2280      	movs	r2, #128	; 0x80
 8000dd0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <_ZL11MX_FMC_Initv+0x9c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <_ZL11MX_FMC_Initv+0x9c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <_ZL11MX_FMC_Initv+0x9c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <_ZL11MX_FMC_Initv+0x9c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000dea:	2310      	movs	r3, #16
 8000dec:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000dee:	2310      	movs	r3, #16
 8000df0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000df2:	2310      	movs	r3, #16
 8000df4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000df6:	2310      	movs	r3, #16
 8000df8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000dfa:	2310      	movs	r3, #16
 8000dfc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000dfe:	2310      	movs	r3, #16
 8000e00:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000e02:	2310      	movs	r3, #16
 8000e04:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4808      	ldr	r0, [pc, #32]	; (8000e2c <_ZL11MX_FMC_Initv+0x9c>)
 8000e0c:	f004 f812 	bl	8004e34 <HAL_SDRAM_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	bf14      	ite	ne
 8000e16:	2301      	movne	r3, #1
 8000e18:	2300      	moveq	r3, #0
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <_ZL11MX_FMC_Initv+0x94>
  {
    Error_Handler( );
 8000e20:	f000 f876 	bl	8000f10 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000e24:	bf00      	nop
 8000e26:	3720      	adds	r7, #32
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200002a4 	.word	0x200002a4
 8000e30:	a0000140 	.word	0xa0000140

08000e34 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
 8000e3e:	4b33      	ldr	r3, [pc, #204]	; (8000f0c <_ZL12MX_GPIO_Initv+0xd8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a32      	ldr	r2, [pc, #200]	; (8000f0c <_ZL12MX_GPIO_Initv+0xd8>)
 8000e44:	f043 0320 	orr.w	r3, r3, #32
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b30      	ldr	r3, [pc, #192]	; (8000f0c <_ZL12MX_GPIO_Initv+0xd8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0320 	and.w	r3, r3, #32
 8000e52:	61fb      	str	r3, [r7, #28]
 8000e54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
 8000e5a:	4b2c      	ldr	r3, [pc, #176]	; (8000f0c <_ZL12MX_GPIO_Initv+0xd8>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a2b      	ldr	r2, [pc, #172]	; (8000f0c <_ZL12MX_GPIO_Initv+0xd8>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b29      	ldr	r3, [pc, #164]	; (8000f0c <_ZL12MX_GPIO_Initv+0xd8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	61bb      	str	r3, [r7, #24]
 8000e70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <_ZL12MX_GPIO_Initv+0xd8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a24      	ldr	r2, [pc, #144]	; (8000f0c <_ZL12MX_GPIO_Initv+0xd8>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <_ZL12MX_GPIO_Initv+0xd8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <_ZL12MX_GPIO_Initv+0xd8>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a1d      	ldr	r2, [pc, #116]	; (8000f0c <_ZL12MX_GPIO_Initv+0xd8>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <_ZL12MX_GPIO_Initv+0xd8>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <_ZL12MX_GPIO_Initv+0xd8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a16      	ldr	r2, [pc, #88]	; (8000f0c <_ZL12MX_GPIO_Initv+0xd8>)
 8000eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <_ZL12MX_GPIO_Initv+0xd8>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <_ZL12MX_GPIO_Initv+0xd8>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <_ZL12MX_GPIO_Initv+0xd8>)
 8000ed0:	f043 0310 	orr.w	r3, r3, #16
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <_ZL12MX_GPIO_Initv+0xd8>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0310 	and.w	r3, r3, #16
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <_ZL12MX_GPIO_Initv+0xd8>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <_ZL12MX_GPIO_Initv+0xd8>)
 8000eec:	f043 0308 	orr.w	r3, r3, #8
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <_ZL12MX_GPIO_Initv+0xd8>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0308 	and.w	r3, r3, #8
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]

}
 8000efe:	bf00      	nop
 8000f00:	3724      	adds	r7, #36	; 0x24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40023800 	.word	0x40023800

08000f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <_write>:
 */
#include "main.h"

UART_HandleTypeDef huart1;

int _write(int file, char* ptr, int len){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
	//HAL_UART_Transmit(&huart1,  reinterpret_cast<uint8_t*>(ptr), len, 50);
	HAL_UART_Transmit(&huart1,(uint8_t*)((void*)(ptr)), len, 50);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	2332      	movs	r3, #50	; 0x32
 8000f32:	68b9      	ldr	r1, [r7, #8]
 8000f34:	4803      	ldr	r0, [pc, #12]	; (8000f44 <_write+0x24>)
 8000f36:	f004 fdd4 	bl	8005ae2 <HAL_UART_Transmit>
	return len;
 8000f3a:	687b      	ldr	r3, [r7, #4]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000264 	.word	0x20000264

08000f48 <SPIx_Init>:
  * @brief  SPIx Bus initialization
  * @param  None
  * @retval None
  */
static void SPIx_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000f4c:	4819      	ldr	r0, [pc, #100]	; (8000fb4 <SPIx_Init+0x6c>)
 8000f4e:	f004 fc5b 	bl	8005808 <HAL_SPI_GetState>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d12b      	bne.n	8000fb0 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <SPIx_Init+0x6c>)
 8000f5a:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <SPIx_Init+0x70>)
 8000f5c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <SPIx_Init+0x6c>)
 8000f60:	2218      	movs	r2, #24
 8000f62:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <SPIx_Init+0x6c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000f6a:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <SPIx_Init+0x6c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000f70:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <SPIx_Init+0x6c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <SPIx_Init+0x6c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <SPIx_Init+0x6c>)
 8000f7e:	2207      	movs	r2, #7
 8000f80:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <SPIx_Init+0x6c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <SPIx_Init+0x6c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <SPIx_Init+0x6c>)
 8000f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f94:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <SPIx_Init+0x6c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <SPIx_Init+0x6c>)
 8000f9e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fa2:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8000fa4:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <SPIx_Init+0x6c>)
 8000fa6:	f000 f853 	bl	8001050 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000faa:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <SPIx_Init+0x6c>)
 8000fac:	f003 ffc1 	bl	8004f32 <HAL_SPI_Init>
  } 
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200002d8 	.word	0x200002d8
 8000fb8:	40015000 	.word	0x40015000

08000fbc <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <SPIx_Read+0x38>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f107 0108 	add.w	r1, r7, #8
 8000fd6:	4808      	ldr	r0, [pc, #32]	; (8000ff8 <SPIx_Read+0x3c>)
 8000fd8:	f004 f96b 	bl	80052b2 <HAL_SPI_Receive>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8000fe6:	f000 f827 	bl	8001038 <SPIx_Error>
  }
  
  return readvalue;
 8000fea:	68bb      	ldr	r3, [r7, #8]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000038 	.word	0x20000038
 8000ff8:	200002d8 	.word	0x200002d8

08000ffc <SPIx_Write>:
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  * @retval None
  */
static void SPIx_Write(uint16_t Value)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <SPIx_Write+0x34>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	1db9      	adds	r1, r7, #6
 8001010:	2201      	movs	r2, #1
 8001012:	4808      	ldr	r0, [pc, #32]	; (8001034 <SPIx_Write+0x38>)
 8001014:	f004 f819 	bl	800504a <HAL_SPI_Transmit>
 8001018:	4603      	mov	r3, r0
 800101a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001022:	f000 f809 	bl	8001038 <SPIx_Error>
  }
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000038 	.word	0x20000038
 8001034:	200002d8 	.word	0x200002d8

08001038 <SPIx_Error>:
  * @brief  SPIx error treatment function.
  * @param  None
  * @retval None
  */
static void SPIx_Error(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800103c:	4803      	ldr	r0, [pc, #12]	; (800104c <SPIx_Error+0x14>)
 800103e:	f003 ffdc 	bl	8004ffa <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001042:	f7ff ff81 	bl	8000f48 <SPIx_Init>
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200002d8 	.word	0x200002d8

08001050 <SPIx_MspInit>:
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <SPIx_MspInit+0x6c>)
 800105e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001060:	4a16      	ldr	r2, [pc, #88]	; (80010bc <SPIx_MspInit+0x6c>)
 8001062:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001066:	6453      	str	r3, [r2, #68]	; 0x44
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <SPIx_MspInit+0x6c>)
 800106a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	4b10      	ldr	r3, [pc, #64]	; (80010bc <SPIx_MspInit+0x6c>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107c:	4a0f      	ldr	r2, [pc, #60]	; (80010bc <SPIx_MspInit+0x6c>)
 800107e:	f043 0320 	orr.w	r3, r3, #32
 8001082:	6313      	str	r3, [r2, #48]	; 0x30
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <SPIx_MspInit+0x6c>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	f003 0320 	and.w	r3, r3, #32
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001090:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001094:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800109a:	2302      	movs	r3, #2
 800109c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800109e:	2301      	movs	r3, #1
 80010a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80010a2:	2305      	movs	r3, #5
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <SPIx_MspInit+0x70>)
 80010ae:	f002 f925 	bl	80032fc <HAL_GPIO_Init>
}
 80010b2:	bf00      	nop
 80010b4:	3728      	adds	r7, #40	; 0x28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40021400 	.word	0x40021400

080010c4 <LCD_IO_Init>:
  * @brief  Configures the LCD_SPI interface.
  * @param  None
  * @retval None
  */
void LCD_IO_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80010ca:	4b36      	ldr	r3, [pc, #216]	; (80011a4 <LCD_IO_Init+0xe0>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d164      	bne.n	800119c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80010d2:	4b34      	ldr	r3, [pc, #208]	; (80011a4 <LCD_IO_Init+0xe0>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	4b32      	ldr	r3, [pc, #200]	; (80011a8 <LCD_IO_Init+0xe4>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	4a31      	ldr	r2, [pc, #196]	; (80011a8 <LCD_IO_Init+0xe4>)
 80010e2:	f043 0308 	orr.w	r3, r3, #8
 80010e6:	6313      	str	r3, [r2, #48]	; 0x30
 80010e8:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <LCD_IO_Init+0xe4>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80010f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80010fa:	2301      	movs	r3, #1
 80010fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001102:	2302      	movs	r3, #2
 8001104:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	4619      	mov	r1, r3
 800110c:	4827      	ldr	r0, [pc, #156]	; (80011ac <LCD_IO_Init+0xe8>)
 800110e:	f002 f8f5 	bl	80032fc <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <LCD_IO_Init+0xe4>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a23      	ldr	r2, [pc, #140]	; (80011a8 <LCD_IO_Init+0xe4>)
 800111c:	f043 0308 	orr.w	r3, r3, #8
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <LCD_IO_Init+0xe4>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800112e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001132:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800113c:	2302      	movs	r3, #2
 800113e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	4619      	mov	r1, r3
 8001146:	4819      	ldr	r0, [pc, #100]	; (80011ac <LCD_IO_Init+0xe8>)
 8001148:	f002 f8d8 	bl	80032fc <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <LCD_IO_Init+0xe4>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <LCD_IO_Init+0xe4>)
 8001156:	f043 0304 	orr.w	r3, r3, #4
 800115a:	6313      	str	r3, [r2, #48]	; 0x30
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <LCD_IO_Init+0xe4>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001168:	2304      	movs	r3, #4
 800116a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800116c:	2301      	movs	r3, #1
 800116e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001174:	2302      	movs	r3, #2
 8001176:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	4619      	mov	r1, r3
 800117e:	480c      	ldr	r0, [pc, #48]	; (80011b0 <LCD_IO_Init+0xec>)
 8001180:	f002 f8bc 	bl	80032fc <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001184:	2200      	movs	r2, #0
 8001186:	2104      	movs	r1, #4
 8001188:	4809      	ldr	r0, [pc, #36]	; (80011b0 <LCD_IO_Init+0xec>)
 800118a:	f002 fb6b 	bl	8003864 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800118e:	2201      	movs	r2, #1
 8001190:	2104      	movs	r1, #4
 8001192:	4807      	ldr	r0, [pc, #28]	; (80011b0 <LCD_IO_Init+0xec>)
 8001194:	f002 fb66 	bl	8003864 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001198:	f7ff fed6 	bl	8000f48 <SPIx_Init>
  }
}
 800119c:	bf00      	nop
 800119e:	3720      	adds	r7, #32
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000330 	.word	0x20000330
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020c00 	.word	0x40020c00
 80011b0:	40020800 	.word	0x40020800

080011b4 <LCD_IO_WriteData>:
  * @brief  Writes register value.
  * @param  None
  * @retval None
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80011be:	2201      	movs	r2, #1
 80011c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c4:	480a      	ldr	r0, [pc, #40]	; (80011f0 <LCD_IO_WriteData+0x3c>)
 80011c6:	f002 fb4d 	bl	8003864 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80011ca:	2200      	movs	r2, #0
 80011cc:	2104      	movs	r1, #4
 80011ce:	4809      	ldr	r0, [pc, #36]	; (80011f4 <LCD_IO_WriteData+0x40>)
 80011d0:	f002 fb48 	bl	8003864 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff10 	bl	8000ffc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80011dc:	2201      	movs	r2, #1
 80011de:	2104      	movs	r1, #4
 80011e0:	4804      	ldr	r0, [pc, #16]	; (80011f4 <LCD_IO_WriteData+0x40>)
 80011e2:	f002 fb3f 	bl	8003864 <HAL_GPIO_WritePin>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40020c00 	.word	0x40020c00
 80011f4:	40020800 	.word	0x40020800

080011f8 <LCD_IO_WriteReg>:
  * @brief  Writes register address.
  * @param  None
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001208:	480a      	ldr	r0, [pc, #40]	; (8001234 <LCD_IO_WriteReg+0x3c>)
 800120a:	f002 fb2b 	bl	8003864 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800120e:	2200      	movs	r2, #0
 8001210:	2104      	movs	r1, #4
 8001212:	4809      	ldr	r0, [pc, #36]	; (8001238 <LCD_IO_WriteReg+0x40>)
 8001214:	f002 fb26 	bl	8003864 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	b29b      	uxth	r3, r3
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff feed 	bl	8000ffc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001222:	2201      	movs	r2, #1
 8001224:	2104      	movs	r1, #4
 8001226:	4804      	ldr	r0, [pc, #16]	; (8001238 <LCD_IO_WriteReg+0x40>)
 8001228:	f002 fb1c 	bl	8003864 <HAL_GPIO_WritePin>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40020c00 	.word	0x40020c00
 8001238:	40020800 	.word	0x40020800

0800123c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	460a      	mov	r2, r1
 8001246:	80fb      	strh	r3, [r7, #6]
 8001248:	4613      	mov	r3, r2
 800124a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001250:	2200      	movs	r2, #0
 8001252:	2104      	movs	r1, #4
 8001254:	4810      	ldr	r0, [pc, #64]	; (8001298 <LCD_IO_ReadData+0x5c>)
 8001256:	f002 fb05 	bl	8003864 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001260:	480e      	ldr	r0, [pc, #56]	; (800129c <LCD_IO_ReadData+0x60>)
 8001262:	f002 faff 	bl	8003864 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001266:	88fb      	ldrh	r3, [r7, #6]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fec7 	bl	8000ffc <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800126e:	797b      	ldrb	r3, [r7, #5]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fea3 	bl	8000fbc <SPIx_Read>
 8001276:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001278:	2201      	movs	r2, #1
 800127a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127e:	4807      	ldr	r0, [pc, #28]	; (800129c <LCD_IO_ReadData+0x60>)
 8001280:	f002 faf0 	bl	8003864 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001284:	2201      	movs	r2, #1
 8001286:	2104      	movs	r1, #4
 8001288:	4803      	ldr	r0, [pc, #12]	; (8001298 <LCD_IO_ReadData+0x5c>)
 800128a:	f002 faeb 	bl	8003864 <HAL_GPIO_WritePin>
  
  return readvalue;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40020800 	.word	0x40020800
 800129c:	40020c00 	.word	0x40020c00

080012a0 <LCD_Delay>:
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  * @retval None
  */
void LCD_Delay(uint32_t Delay)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f001 faab 	bl	8002804 <HAL_Delay>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80012bc:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <BSP_LCD_Init+0xbc>)
 80012be:	4a2e      	ldr	r2, [pc, #184]	; (8001378 <BSP_LCD_Init+0xc0>)
 80012c0:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80012c2:	4b2c      	ldr	r3, [pc, #176]	; (8001374 <BSP_LCD_Init+0xbc>)
 80012c4:	2209      	movs	r2, #9
 80012c6:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80012c8:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <BSP_LCD_Init+0xbc>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80012ce:	4b29      	ldr	r3, [pc, #164]	; (8001374 <BSP_LCD_Init+0xbc>)
 80012d0:	221d      	movs	r2, #29
 80012d2:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80012d4:	4b27      	ldr	r3, [pc, #156]	; (8001374 <BSP_LCD_Init+0xbc>)
 80012d6:	2203      	movs	r2, #3
 80012d8:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80012da:	4b26      	ldr	r3, [pc, #152]	; (8001374 <BSP_LCD_Init+0xbc>)
 80012dc:	f240 120d 	movw	r2, #269	; 0x10d
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80012e2:	4b24      	ldr	r3, [pc, #144]	; (8001374 <BSP_LCD_Init+0xbc>)
 80012e4:	f240 1243 	movw	r2, #323	; 0x143
 80012e8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80012ea:	4b22      	ldr	r3, [pc, #136]	; (8001374 <BSP_LCD_Init+0xbc>)
 80012ec:	f240 1217 	movw	r2, #279	; 0x117
 80012f0:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <BSP_LCD_Init+0xbc>)
 80012f4:	f240 1247 	movw	r2, #327	; 0x147
 80012f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80012fa:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <BSP_LCD_Init+0xbc>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <BSP_LCD_Init+0xbc>)
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <BSP_LCD_Init+0xbc>)
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001312:	4b1a      	ldr	r3, [pc, #104]	; (800137c <BSP_LCD_Init+0xc4>)
 8001314:	2208      	movs	r2, #8
 8001316:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001318:	4b18      	ldr	r3, [pc, #96]	; (800137c <BSP_LCD_Init+0xc4>)
 800131a:	22c0      	movs	r2, #192	; 0xc0
 800131c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800131e:	4b17      	ldr	r3, [pc, #92]	; (800137c <BSP_LCD_Init+0xc4>)
 8001320:	2204      	movs	r2, #4
 8001322:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001324:	4b15      	ldr	r3, [pc, #84]	; (800137c <BSP_LCD_Init+0xc4>)
 8001326:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800132a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 800132c:	4813      	ldr	r0, [pc, #76]	; (800137c <BSP_LCD_Init+0xc4>)
 800132e:	f003 fbc3 	bl	8004ab8 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <BSP_LCD_Init+0xbc>)
 8001334:	2200      	movs	r2, #0
 8001336:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001338:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <BSP_LCD_Init+0xbc>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <BSP_LCD_Init+0xbc>)
 8001340:	2200      	movs	r2, #0
 8001342:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <BSP_LCD_Init+0xbc>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
    
    MspInit();
 800134a:	f000 fa41 	bl	80017d0 <MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800134e:	4809      	ldr	r0, [pc, #36]	; (8001374 <BSP_LCD_Init+0xbc>)
 8001350:	f002 fc56 	bl	8003c00 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <BSP_LCD_Init+0xc8>)
 8001356:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <BSP_LCD_Init+0xcc>)
 8001358:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <BSP_LCD_Init+0xc8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8001362:	f000 fc23 	bl	8001bac <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001366:	4808      	ldr	r0, [pc, #32]	; (8001388 <BSP_LCD_Init+0xd0>)
 8001368:	f000 f8b4 	bl	80014d4 <BSP_LCD_SetFont>

  return LCD_OK;
 800136c:	2300      	movs	r3, #0
}  
 800136e:	4618      	mov	r0, r3
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000334 	.word	0x20000334
 8001378:	40016800 	.word	0x40016800
 800137c:	2000041c 	.word	0x2000041c
 8001380:	20000538 	.word	0x20000538
 8001384:	20000000 	.word	0x20000000
 8001388:	2000003c 	.word	0x2000003c

0800138c <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001390:	4b03      	ldr	r3, [pc, #12]	; (80013a0 <BSP_LCD_GetXSize+0x14>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001396:	4798      	blx	r3
 8001398:	4603      	mov	r3, r0
}
 800139a:	4618      	mov	r0, r3
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000538 	.word	0x20000538

080013a4 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None    
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <BSP_LCD_GetYSize+0x14>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ae:	4798      	blx	r3
 80013b0:	4603      	mov	r3, r0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000538 	.word	0x20000538

080013bc <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80013bc:	b580      	push	{r7, lr}
 80013be:	b090      	sub	sp, #64	; 0x40
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80013cc:	f7ff ffde 	bl	800138c <BSP_LCD_GetXSize>
 80013d0:	4603      	mov	r3, r0
 80013d2:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80013d8:	f7ff ffe4 	bl	80013a4 <BSP_LCD_GetYSize>
 80013dc:	4603      	mov	r3, r0
 80013de:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80013e8:	23ff      	movs	r3, #255	; 0xff
 80013ea:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001402:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001408:	2307      	movs	r3, #7
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800140c:	f7ff ffbe 	bl	800138c <BSP_LCD_GetXSize>
 8001410:	4603      	mov	r3, r0
 8001412:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001414:	f7ff ffc6 	bl	80013a4 <BSP_LCD_GetYSize>
 8001418:	4603      	mov	r3, r0
 800141a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 800141c:	88fa      	ldrh	r2, [r7, #6]
 800141e:	f107 030c 	add.w	r3, r7, #12
 8001422:	4619      	mov	r1, r3
 8001424:	4814      	ldr	r0, [pc, #80]	; (8001478 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001426:	f002 fcbb 	bl	8003da0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800142a:	88fa      	ldrh	r2, [r7, #6]
 800142c:	4913      	ldr	r1, [pc, #76]	; (800147c <BSP_LCD_LayerDefaultInit+0xc0>)
 800142e:	4613      	mov	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	440b      	add	r3, r1
 8001438:	3304      	adds	r3, #4
 800143a:	f04f 32ff 	mov.w	r2, #4294967295
 800143e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001440:	88fa      	ldrh	r2, [r7, #6]
 8001442:	490e      	ldr	r1, [pc, #56]	; (800147c <BSP_LCD_LayerDefaultInit+0xc0>)
 8001444:	4613      	mov	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	3308      	adds	r3, #8
 8001450:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <BSP_LCD_LayerDefaultInit+0xc4>)
 8001452:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001454:	88fa      	ldrh	r2, [r7, #6]
 8001456:	4909      	ldr	r1, [pc, #36]	; (800147c <BSP_LCD_LayerDefaultInit+0xc0>)
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001466:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001468:	4803      	ldr	r0, [pc, #12]	; (8001478 <BSP_LCD_LayerDefaultInit+0xbc>)
 800146a:	f002 fcd7 	bl	8003e1c <HAL_LTDC_EnableDither>
}
 800146e:	bf00      	nop
 8001470:	3740      	adds	r7, #64	; 0x40
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000334 	.word	0x20000334
 800147c:	20000450 	.word	0x20000450
 8001480:	2000003c 	.word	0x2000003c

08001484 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800148c:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <BSP_LCD_SelectLayer+0x1c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6013      	str	r3, [r2, #0]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	2000044c 	.word	0x2000044c

080014a4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <BSP_LCD_SetTextColor+0x28>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4907      	ldr	r1, [pc, #28]	; (80014d0 <BSP_LCD_SetTextColor+0x2c>)
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	440b      	add	r3, r1
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	601a      	str	r2, [r3, #0]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	2000044c 	.word	0x2000044c
 80014d0:	20000450 	.word	0x20000450

080014d4 <BSP_LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <BSP_LCD_SetFont+0x2c>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4908      	ldr	r1, [pc, #32]	; (8001504 <BSP_LCD_SetFont+0x30>)
 80014e2:	4613      	mov	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4413      	add	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	3308      	adds	r3, #8
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	601a      	str	r2, [r3, #0]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	2000044c 	.word	0x2000044c
 8001504:	20000450 	.word	0x20000450

08001508 <BSP_LCD_GetFont>:
  * @brief  Gets the Text Font.
  * @param  None
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <BSP_LCD_GetFont+0x24>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4907      	ldr	r1, [pc, #28]	; (8001530 <BSP_LCD_GetFont+0x28>)
 8001512:	4613      	mov	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	3308      	adds	r3, #8
 800151e:	681b      	ldr	r3, [r3, #0]
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	2000044c 	.word	0x2000044c
 8001530:	20000450 	.word	0x20000450

08001534 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001536:	b085      	sub	sp, #20
 8001538:	af02      	add	r7, sp, #8
 800153a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800153c:	4b0f      	ldr	r3, [pc, #60]	; (800157c <BSP_LCD_Clear+0x48>)
 800153e:	681c      	ldr	r4, [r3, #0]
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <BSP_LCD_Clear+0x48>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <BSP_LCD_Clear+0x4c>)
 8001546:	2134      	movs	r1, #52	; 0x34
 8001548:	fb01 f303 	mul.w	r3, r1, r3
 800154c:	4413      	add	r3, r2
 800154e:	335c      	adds	r3, #92	; 0x5c
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	461d      	mov	r5, r3
 8001554:	f7ff ff1a 	bl	800138c <BSP_LCD_GetXSize>
 8001558:	4606      	mov	r6, r0
 800155a:	f7ff ff23 	bl	80013a4 <BSP_LCD_GetYSize>
 800155e:	4602      	mov	r2, r0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	2300      	movs	r3, #0
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	4613      	mov	r3, r2
 800156a:	4632      	mov	r2, r6
 800156c:	4629      	mov	r1, r5
 800156e:	4620      	mov	r0, r4
 8001570:	f000 fae4 	bl	8001b3c <FillBuffer>
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800157c:	2000044c 	.word	0x2000044c
 8001580:	20000334 	.word	0x20000334

08001584 <BSP_LCD_DisplayChar>:
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
 800158e:	460b      	mov	r3, r1
 8001590:	80bb      	strh	r3, [r7, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <BSP_LCD_DisplayChar+0x80>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	491b      	ldr	r1, [pc, #108]	; (8001608 <BSP_LCD_DisplayChar+0x84>)
 800159c:	4613      	mov	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	3308      	adds	r3, #8
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6819      	ldr	r1, [r3, #0]
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80015b2:	4b14      	ldr	r3, [pc, #80]	; (8001604 <BSP_LCD_DisplayChar+0x80>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4c14      	ldr	r4, [pc, #80]	; (8001608 <BSP_LCD_DisplayChar+0x84>)
 80015b8:	4613      	mov	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4423      	add	r3, r4
 80015c2:	3308      	adds	r3, #8
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80015c8:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80015cc:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <BSP_LCD_DisplayChar+0x80>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4c0d      	ldr	r4, [pc, #52]	; (8001608 <BSP_LCD_DisplayChar+0x84>)
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4423      	add	r3, r4
 80015dc:	3308      	adds	r3, #8
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	889b      	ldrh	r3, [r3, #4]
 80015e2:	3307      	adds	r3, #7
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	da00      	bge.n	80015ea <BSP_LCD_DisplayChar+0x66>
 80015e8:	3307      	adds	r3, #7
 80015ea:	10db      	asrs	r3, r3, #3
 80015ec:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80015f0:	18ca      	adds	r2, r1, r3
 80015f2:	88b9      	ldrh	r1, [r7, #4]
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 f9e6 	bl	80019c8 <DrawChar>
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	bd90      	pop	{r4, r7, pc}
 8001604:	2000044c 	.word	0x2000044c
 8001608:	20000450 	.word	0x20000450

0800160c <BSP_LCD_DisplayStringAt>:
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 800160c:	b5b0      	push	{r4, r5, r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
 8001612:	60ba      	str	r2, [r7, #8]
 8001614:	461a      	mov	r2, r3
 8001616:	4603      	mov	r3, r0
 8001618:	81fb      	strh	r3, [r7, #14]
 800161a:	460b      	mov	r3, r1
 800161c:	81bb      	strh	r3, [r7, #12]
 800161e:	4613      	mov	r3, r2
 8001620:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001622:	2301      	movs	r3, #1
 8001624:	83fb      	strh	r3, [r7, #30]
 8001626:	2300      	movs	r3, #0
 8001628:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001636:	e002      	b.n	800163e <BSP_LCD_DisplayStringAt+0x32>
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	3301      	adds	r3, #1
 800163c:	61bb      	str	r3, [r7, #24]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	617a      	str	r2, [r7, #20]
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f6      	bne.n	8001638 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800164a:	f7ff fe9f 	bl	800138c <BSP_LCD_GetXSize>
 800164e:	4b4a      	ldr	r3, [pc, #296]	; (8001778 <BSP_LCD_DisplayStringAt+0x16c>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	494a      	ldr	r1, [pc, #296]	; (800177c <BSP_LCD_DisplayStringAt+0x170>)
 8001654:	4613      	mov	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	3308      	adds	r3, #8
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	889b      	ldrh	r3, [r3, #4]
 8001664:	fbb0 f3f3 	udiv	r3, r0, r3
 8001668:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d01c      	beq.n	80016aa <BSP_LCD_DisplayStringAt+0x9e>
 8001670:	2b03      	cmp	r3, #3
 8001672:	d017      	beq.n	80016a4 <BSP_LCD_DisplayStringAt+0x98>
 8001674:	2b01      	cmp	r3, #1
 8001676:	d12e      	bne.n	80016d6 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	1ad1      	subs	r1, r2, r3
 800167e:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <BSP_LCD_DisplayStringAt+0x16c>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	483e      	ldr	r0, [pc, #248]	; (800177c <BSP_LCD_DisplayStringAt+0x170>)
 8001684:	4613      	mov	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4413      	add	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4403      	add	r3, r0
 800168e:	3308      	adds	r3, #8
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	889b      	ldrh	r3, [r3, #4]
 8001694:	fb03 f301 	mul.w	r3, r3, r1
 8001698:	085b      	lsrs	r3, r3, #1
 800169a:	b29a      	uxth	r2, r3
 800169c:	89fb      	ldrh	r3, [r7, #14]
 800169e:	4413      	add	r3, r2
 80016a0:	83fb      	strh	r3, [r7, #30]
      break;
 80016a2:	e01b      	b.n	80016dc <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80016a4:	89fb      	ldrh	r3, [r7, #14]
 80016a6:	83fb      	strh	r3, [r7, #30]
      break;
 80016a8:	e018      	b.n	80016dc <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	b299      	uxth	r1, r3
 80016b2:	4b31      	ldr	r3, [pc, #196]	; (8001778 <BSP_LCD_DisplayStringAt+0x16c>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4831      	ldr	r0, [pc, #196]	; (800177c <BSP_LCD_DisplayStringAt+0x170>)
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4403      	add	r3, r0
 80016c2:	3308      	adds	r3, #8
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	889b      	ldrh	r3, [r3, #4]
 80016c8:	fb11 f303 	smulbb	r3, r1, r3
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	89fb      	ldrh	r3, [r7, #14]
 80016d0:	4413      	add	r3, r2
 80016d2:	83fb      	strh	r3, [r7, #30]
      break;
 80016d4:	e002      	b.n	80016dc <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 80016d6:	89fb      	ldrh	r3, [r7, #14]
 80016d8:	83fb      	strh	r3, [r7, #30]
      break;
 80016da:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80016dc:	e01a      	b.n	8001714 <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	781a      	ldrb	r2, [r3, #0]
 80016e2:	89b9      	ldrh	r1, [r7, #12]
 80016e4:	8bfb      	ldrh	r3, [r7, #30]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ff4c 	bl	8001584 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80016ec:	4b22      	ldr	r3, [pc, #136]	; (8001778 <BSP_LCD_DisplayStringAt+0x16c>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4922      	ldr	r1, [pc, #136]	; (800177c <BSP_LCD_DisplayStringAt+0x170>)
 80016f2:	4613      	mov	r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4413      	add	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	440b      	add	r3, r1
 80016fc:	3308      	adds	r3, #8
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	889a      	ldrh	r2, [r3, #4]
 8001702:	8bfb      	ldrh	r3, [r7, #30]
 8001704:	4413      	add	r3, r2
 8001706:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	3301      	adds	r3, #1
 800170c:	60bb      	str	r3, [r7, #8]
    i++;
 800170e:	8bbb      	ldrh	r3, [r7, #28]
 8001710:	3301      	adds	r3, #1
 8001712:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	bf14      	ite	ne
 800171c:	2301      	movne	r3, #1
 800171e:	2300      	moveq	r3, #0
 8001720:	b2dc      	uxtb	r4, r3
 8001722:	f7ff fe33 	bl	800138c <BSP_LCD_GetXSize>
 8001726:	4605      	mov	r5, r0
 8001728:	8bb9      	ldrh	r1, [r7, #28]
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <BSP_LCD_DisplayStringAt+0x16c>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4813      	ldr	r0, [pc, #76]	; (800177c <BSP_LCD_DisplayStringAt+0x170>)
 8001730:	4613      	mov	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4403      	add	r3, r0
 800173a:	3308      	adds	r3, #8
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	889b      	ldrh	r3, [r3, #4]
 8001740:	fb03 f301 	mul.w	r3, r3, r1
 8001744:	1aeb      	subs	r3, r5, r3
 8001746:	b299      	uxth	r1, r3
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <BSP_LCD_DisplayStringAt+0x16c>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	480b      	ldr	r0, [pc, #44]	; (800177c <BSP_LCD_DisplayStringAt+0x170>)
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4403      	add	r3, r0
 8001758:	3308      	adds	r3, #8
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	889b      	ldrh	r3, [r3, #4]
 800175e:	4299      	cmp	r1, r3
 8001760:	bf2c      	ite	cs
 8001762:	2301      	movcs	r3, #1
 8001764:	2300      	movcc	r3, #0
 8001766:	b2db      	uxtb	r3, r3
 8001768:	4023      	ands	r3, r4
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1b6      	bne.n	80016de <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 8001770:	bf00      	nop
 8001772:	3720      	adds	r7, #32
 8001774:	46bd      	mov	sp, r7
 8001776:	bdb0      	pop	{r4, r5, r7, pc}
 8001778:	2000044c 	.word	0x2000044c
 800177c:	20000450 	.word	0x20000450

08001780 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800178c:	f7ff febc 	bl	8001508 <BSP_LCD_GetFont>
 8001790:	4603      	mov	r3, r0
 8001792:	88db      	ldrh	r3, [r3, #6]
 8001794:	88fa      	ldrh	r2, [r7, #6]
 8001796:	fb12 f303 	smulbb	r3, r2, r3
 800179a:	b299      	uxth	r1, r3
 800179c:	2303      	movs	r3, #3
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	2000      	movs	r0, #0
 80017a2:	f7ff ff33 	bl	800160c <BSP_LCD_DisplayStringAt>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <BSP_LCD_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <BSP_LCD_DisplayOn+0x1c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80017be:	4b03      	ldr	r3, [pc, #12]	; (80017cc <BSP_LCD_DisplayOn+0x1c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	4798      	blx	r3
  }
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000538 	.word	0x20000538

080017d0 <MspInit>:
  * @brief  Initializes the LTDC MSP.
  * @param  None
  * @retval None
  */
static void MspInit(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08e      	sub	sp, #56	; 0x38
 80017d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __LTDC_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
 80017da:	4b61      	ldr	r3, [pc, #388]	; (8001960 <MspInit+0x190>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	4a60      	ldr	r2, [pc, #384]	; (8001960 <MspInit+0x190>)
 80017e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017e4:	6453      	str	r3, [r2, #68]	; 0x44
 80017e6:	4b5e      	ldr	r3, [pc, #376]	; (8001960 <MspInit+0x190>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017ee:	623b      	str	r3, [r7, #32]
 80017f0:	6a3b      	ldr	r3, [r7, #32]
  __DMA2D_CLK_ENABLE(); 
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
 80017f6:	4b5a      	ldr	r3, [pc, #360]	; (8001960 <MspInit+0x190>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a59      	ldr	r2, [pc, #356]	; (8001960 <MspInit+0x190>)
 80017fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b57      	ldr	r3, [pc, #348]	; (8001960 <MspInit+0x190>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800180a:	61fb      	str	r3, [r7, #28]
 800180c:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __GPIOA_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
 8001812:	4b53      	ldr	r3, [pc, #332]	; (8001960 <MspInit+0x190>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a52      	ldr	r2, [pc, #328]	; (8001960 <MspInit+0x190>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b50      	ldr	r3, [pc, #320]	; (8001960 <MspInit+0x190>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	61bb      	str	r3, [r7, #24]
 8001828:	69bb      	ldr	r3, [r7, #24]
  __GPIOB_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	4b4c      	ldr	r3, [pc, #304]	; (8001960 <MspInit+0x190>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a4b      	ldr	r2, [pc, #300]	; (8001960 <MspInit+0x190>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b49      	ldr	r3, [pc, #292]	; (8001960 <MspInit+0x190>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697b      	ldr	r3, [r7, #20]
  __GPIOC_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	4b45      	ldr	r3, [pc, #276]	; (8001960 <MspInit+0x190>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a44      	ldr	r2, [pc, #272]	; (8001960 <MspInit+0x190>)
 8001850:	f043 0304 	orr.w	r3, r3, #4
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b42      	ldr	r3, [pc, #264]	; (8001960 <MspInit+0x190>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
  __GPIOD_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	4b3e      	ldr	r3, [pc, #248]	; (8001960 <MspInit+0x190>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a3d      	ldr	r2, [pc, #244]	; (8001960 <MspInit+0x190>)
 800186c:	f043 0308 	orr.w	r3, r3, #8
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b3b      	ldr	r3, [pc, #236]	; (8001960 <MspInit+0x190>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
  __GPIOF_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	4b37      	ldr	r3, [pc, #220]	; (8001960 <MspInit+0x190>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a36      	ldr	r2, [pc, #216]	; (8001960 <MspInit+0x190>)
 8001888:	f043 0320 	orr.w	r3, r3, #32
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b34      	ldr	r3, [pc, #208]	; (8001960 <MspInit+0x190>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0320 	and.w	r3, r3, #32
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
  __GPIOG_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	4b30      	ldr	r3, [pc, #192]	; (8001960 <MspInit+0x190>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a2f      	ldr	r2, [pc, #188]	; (8001960 <MspInit+0x190>)
 80018a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <MspInit+0x190>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80018b6:	f641 0358 	movw	r3, #6232	; 0x1858
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80018c4:	2302      	movs	r3, #2
 80018c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80018c8:	230e      	movs	r3, #14
 80018ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80018cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d0:	4619      	mov	r1, r3
 80018d2:	4824      	ldr	r0, [pc, #144]	; (8001964 <MspInit+0x194>)
 80018d4:	f001 fd12 	bl	80032fc <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80018d8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80018de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e2:	4619      	mov	r1, r3
 80018e4:	4820      	ldr	r0, [pc, #128]	; (8001968 <MspInit+0x198>)
 80018e6:	f001 fd09 	bl	80032fc <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80018ea:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80018f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f4:	4619      	mov	r1, r3
 80018f6:	481d      	ldr	r0, [pc, #116]	; (800196c <MspInit+0x19c>)
 80018f8:	f001 fd00 	bl	80032fc <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80018fc:	2348      	movs	r3, #72	; 0x48
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001904:	4619      	mov	r1, r3
 8001906:	481a      	ldr	r0, [pc, #104]	; (8001970 <MspInit+0x1a0>)
 8001908:	f001 fcf8 	bl	80032fc <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800190c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8001912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001916:	4619      	mov	r1, r3
 8001918:	4816      	ldr	r0, [pc, #88]	; (8001974 <MspInit+0x1a4>)
 800191a:	f001 fcef 	bl	80032fc <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800191e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001928:	4619      	mov	r1, r3
 800192a:	4813      	ldr	r0, [pc, #76]	; (8001978 <MspInit+0x1a8>)
 800192c:	f001 fce6 	bl	80032fc <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001930:	2303      	movs	r3, #3
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001934:	2309      	movs	r3, #9
 8001936:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193c:	4619      	mov	r1, r3
 800193e:	480a      	ldr	r0, [pc, #40]	; (8001968 <MspInit+0x198>)
 8001940:	f001 fcdc 	bl	80032fc <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001944:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800194a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800194e:	4619      	mov	r1, r3
 8001950:	4809      	ldr	r0, [pc, #36]	; (8001978 <MspInit+0x1a8>)
 8001952:	f001 fcd3 	bl	80032fc <HAL_GPIO_Init>
}
 8001956:	bf00      	nop
 8001958:	3738      	adds	r7, #56	; 0x38
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	40020000 	.word	0x40020000
 8001968:	40020400 	.word	0x40020400
 800196c:	40020800 	.word	0x40020800
 8001970:	40020c00 	.word	0x40020c00
 8001974:	40021400 	.word	0x40021400
 8001978:	40021800 	.word	0x40021800

0800197c <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800197c:	b5b0      	push	{r4, r5, r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	603a      	str	r2, [r7, #0]
 8001986:	80fb      	strh	r3, [r7, #6]
 8001988:	460b      	mov	r3, r1
 800198a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <BSP_LCD_DrawPixel+0x44>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0c      	ldr	r2, [pc, #48]	; (80019c4 <BSP_LCD_DrawPixel+0x48>)
 8001992:	2134      	movs	r1, #52	; 0x34
 8001994:	fb01 f303 	mul.w	r3, r1, r3
 8001998:	4413      	add	r3, r2
 800199a:	335c      	adds	r3, #92	; 0x5c
 800199c:	681c      	ldr	r4, [r3, #0]
 800199e:	88bd      	ldrh	r5, [r7, #4]
 80019a0:	f7ff fcf4 	bl	800138c <BSP_LCD_GetXSize>
 80019a4:	4603      	mov	r3, r0
 80019a6:	fb03 f205 	mul.w	r2, r3, r5
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4423      	add	r3, r4
 80019b2:	461a      	mov	r2, r3
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	6013      	str	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bdb0      	pop	{r4, r5, r7, pc}
 80019c0:	2000044c 	.word	0x2000044c
 80019c4:	20000334 	.word	0x20000334

080019c8 <DrawChar>:
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	603a      	str	r2, [r7, #0]
 80019d2:	80fb      	strh	r3, [r7, #6]
 80019d4:	460b      	mov	r3, r1
 80019d6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80019e4:	4b53      	ldr	r3, [pc, #332]	; (8001b34 <DrawChar+0x16c>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4953      	ldr	r1, [pc, #332]	; (8001b38 <DrawChar+0x170>)
 80019ea:	4613      	mov	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4413      	add	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	3308      	adds	r3, #8
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	88db      	ldrh	r3, [r3, #6]
 80019fa:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80019fc:	4b4d      	ldr	r3, [pc, #308]	; (8001b34 <DrawChar+0x16c>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	494d      	ldr	r1, [pc, #308]	; (8001b38 <DrawChar+0x170>)
 8001a02:	4613      	mov	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	3308      	adds	r3, #8
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	889b      	ldrh	r3, [r3, #4]
 8001a12:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8001a14:	8a3b      	ldrh	r3, [r7, #16]
 8001a16:	3307      	adds	r3, #7
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	da00      	bge.n	8001a1e <DrawChar+0x56>
 8001a1c:	3307      	adds	r3, #7
 8001a1e:	10db      	asrs	r3, r3, #3
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	8a3b      	ldrh	r3, [r7, #16]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	e076      	b.n	8001b22 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001a34:	8a3b      	ldrh	r3, [r7, #16]
 8001a36:	3307      	adds	r3, #7
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	da00      	bge.n	8001a3e <DrawChar+0x76>
 8001a3c:	3307      	adds	r3, #7
 8001a3e:	10db      	asrs	r3, r3, #3
 8001a40:	461a      	mov	r2, r3
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fb03 f302 	mul.w	r3, r3, r2
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8001a4e:	8a3b      	ldrh	r3, [r7, #16]
 8001a50:	3307      	adds	r3, #7
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	da00      	bge.n	8001a58 <DrawChar+0x90>
 8001a56:	3307      	adds	r3, #7
 8001a58:	10db      	asrs	r3, r3, #3
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d002      	beq.n	8001a64 <DrawChar+0x9c>
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d004      	beq.n	8001a6c <DrawChar+0xa4>
 8001a62:	e00c      	b.n	8001a7e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	617b      	str	r3, [r7, #20]
      break;
 8001a6a:	e016      	b.n	8001a9a <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	3201      	adds	r2, #1
 8001a76:	7812      	ldrb	r2, [r2, #0]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]
      break;
 8001a7c:	e00d      	b.n	8001a9a <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	041a      	lsls	r2, r3, #16
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	3301      	adds	r3, #1
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	3202      	adds	r2, #2
 8001a92:	7812      	ldrb	r2, [r2, #0]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	617b      	str	r3, [r7, #20]
      break;
 8001a98:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
 8001a9e:	e036      	b.n	8001b0e <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001aa0:	8a3a      	ldrh	r2, [r7, #16]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	1ad2      	subs	r2, r2, r3
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	2201      	movs	r2, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d012      	beq.n	8001ae2 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b298      	uxth	r0, r3
 8001ac6:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <DrawChar+0x16c>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	491b      	ldr	r1, [pc, #108]	; (8001b38 <DrawChar+0x170>)
 8001acc:	4613      	mov	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	88bb      	ldrh	r3, [r7, #4]
 8001ada:	4619      	mov	r1, r3
 8001adc:	f7ff ff4e 	bl	800197c <BSP_LCD_DrawPixel>
 8001ae0:	e012      	b.n	8001b08 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	4413      	add	r3, r2
 8001aea:	b298      	uxth	r0, r3
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <DrawChar+0x16c>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4911      	ldr	r1, [pc, #68]	; (8001b38 <DrawChar+0x170>)
 8001af2:	4613      	mov	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4413      	add	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	440b      	add	r3, r1
 8001afc:	3304      	adds	r3, #4
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	88bb      	ldrh	r3, [r7, #4]
 8001b02:	4619      	mov	r1, r3
 8001b04:	f7ff ff3a 	bl	800197c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	8a3b      	ldrh	r3, [r7, #16]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d3c4      	bcc.n	8001aa0 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8001b16:	88bb      	ldrh	r3, [r7, #4]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	8a7b      	ldrh	r3, [r7, #18]
 8001b24:	69fa      	ldr	r2, [r7, #28]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d384      	bcc.n	8001a34 <DrawChar+0x6c>
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	3720      	adds	r7, #32
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	2000044c 	.word	0x2000044c
 8001b38:	20000450 	.word	0x20000450

08001b3c <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  * @retval None
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af02      	add	r7, sp, #8
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8001b4a:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <FillBuffer+0x68>)
 8001b4c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b50:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001b52:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <FillBuffer+0x68>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8001b58:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <FillBuffer+0x68>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <FillBuffer+0x68>)
 8001b60:	4a11      	ldr	r2, [pc, #68]	; (8001ba8 <FillBuffer+0x6c>)
 8001b62:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8001b64:	480f      	ldr	r0, [pc, #60]	; (8001ba4 <FillBuffer+0x68>)
 8001b66:	f001 f93d 	bl	8002de4 <HAL_DMA2D_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d115      	bne.n	8001b9c <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8001b70:	68f9      	ldr	r1, [r7, #12]
 8001b72:	480c      	ldr	r0, [pc, #48]	; (8001ba4 <FillBuffer+0x68>)
 8001b74:	f001 fa94 	bl	80030a0 <HAL_DMA2D_ConfigLayer>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10e      	bne.n	8001b9c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69f9      	ldr	r1, [r7, #28]
 8001b88:	4806      	ldr	r0, [pc, #24]	; (8001ba4 <FillBuffer+0x68>)
 8001b8a:	f001 f974 	bl	8002e76 <HAL_DMA2D_Start>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d103      	bne.n	8001b9c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8001b94:	210a      	movs	r1, #10
 8001b96:	4803      	ldr	r0, [pc, #12]	; (8001ba4 <FillBuffer+0x68>)
 8001b98:	f001 f998 	bl	8002ecc <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001b9c:	bf00      	nop
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	200003dc 	.word	0x200003dc
 8001ba8:	4002b000 	.word	0x4002b000

08001bac <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param  None
  * @retval None
  */
void BSP_SDRAM_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001bb0:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <BSP_SDRAM_Init+0x90>)
 8001bb2:	4a23      	ldr	r2, [pc, #140]	; (8001c40 <BSP_SDRAM_Init+0x94>)
 8001bb4:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8001bb6:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <BSP_SDRAM_Init+0x98>)
 8001bb8:	2202      	movs	r2, #2
 8001bba:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8001bbc:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <BSP_SDRAM_Init+0x98>)
 8001bbe:	2207      	movs	r2, #7
 8001bc0:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <BSP_SDRAM_Init+0x98>)
 8001bc4:	2204      	movs	r2, #4
 8001bc6:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <BSP_SDRAM_Init+0x98>)
 8001bca:	2207      	movs	r2, #7
 8001bcc:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8001bce:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <BSP_SDRAM_Init+0x98>)
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <BSP_SDRAM_Init+0x98>)
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8001bda:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <BSP_SDRAM_Init+0x98>)
 8001bdc:	2202      	movs	r2, #2
 8001bde:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8001be0:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <BSP_SDRAM_Init+0x90>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <BSP_SDRAM_Init+0x90>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <BSP_SDRAM_Init+0x90>)
 8001bee:	2204      	movs	r2, #4
 8001bf0:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <BSP_SDRAM_Init+0x90>)
 8001bf4:	2210      	movs	r2, #16
 8001bf6:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001bf8:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <BSP_SDRAM_Init+0x90>)
 8001bfa:	2240      	movs	r2, #64	; 0x40
 8001bfc:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <BSP_SDRAM_Init+0x90>)
 8001c00:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001c04:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001c06:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <BSP_SDRAM_Init+0x90>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <BSP_SDRAM_Init+0x90>)
 8001c0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c12:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8001c14:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <BSP_SDRAM_Init+0x90>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8001c1a:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <BSP_SDRAM_Init+0x90>)
 8001c1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c20:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  MspInit();
 8001c22:	f000 f871 	bl	8001d08 <MspInit>
  HAL_SDRAM_Init(&SdramHandle, &Timing);
 8001c26:	4907      	ldr	r1, [pc, #28]	; (8001c44 <BSP_SDRAM_Init+0x98>)
 8001c28:	4804      	ldr	r0, [pc, #16]	; (8001c3c <BSP_SDRAM_Init+0x90>)
 8001c2a:	f003 f903 	bl	8004e34 <HAL_SDRAM_Init>
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001c2e:	f240 506a 	movw	r0, #1386	; 0x56a
 8001c32:	f000 f809 	bl	8001c48 <BSP_SDRAM_Initialization_sequence>
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000468 	.word	0x20000468
 8001c40:	a0000140 	.word	0xa0000140
 8001c44:	2000049c 	.word	0x2000049c

08001c48 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8001c54:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001c5a:	4b29      	ldr	r3, [pc, #164]	; (8001d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c5c:	2208      	movs	r2, #8
 8001c5e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001c60:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001c66:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001c6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c70:	4923      	ldr	r1, [pc, #140]	; (8001d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c72:	4824      	ldr	r0, [pc, #144]	; (8001d04 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001c74:	f003 f912 	bl	8004e9c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f000 fdc3 	bl	8002804 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8001c7e:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c80:	2202      	movs	r2, #2
 8001c82:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001c84:	4b1e      	ldr	r3, [pc, #120]	; (8001d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c86:	2208      	movs	r2, #8
 8001c88:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001c90:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8001c96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c9a:	4919      	ldr	r1, [pc, #100]	; (8001d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c9c:	4819      	ldr	r0, [pc, #100]	; (8001d04 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001c9e:	f003 f8fd 	bl	8004e9c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001ca2:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001ca8:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001caa:	2208      	movs	r2, #8
 8001cac:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8001cae:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001cb4:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cbe:	4910      	ldr	r1, [pc, #64]	; (8001d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001cc0:	4810      	ldr	r0, [pc, #64]	; (8001d04 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001cc2:	f003 f8eb 	bl	8004e9c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8001cc6:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001cca:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001cce:	2204      	movs	r2, #4
 8001cd0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001cd4:	2208      	movs	r2, #8
 8001cd6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4a07      	ldr	r2, [pc, #28]	; (8001d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ce2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001ce4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ce8:	4905      	ldr	r1, [pc, #20]	; (8001d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001cea:	4806      	ldr	r0, [pc, #24]	; (8001d04 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001cec:	f003 f8d6 	bl	8004e9c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4804      	ldr	r0, [pc, #16]	; (8001d04 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001cf4:	f003 f8fd 	bl	8004ef2 <HAL_SDRAM_ProgramRefreshRate>
}
 8001cf8:	bf00      	nop
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	200004b8 	.word	0x200004b8
 8001d04:	20000468 	.word	0x20000468

08001d08 <MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  None
  * @retval None
  */
static void MspInit(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08e      	sub	sp, #56	; 0x38
 8001d0c:	af00      	add	r7, sp, #0
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;
  SDRAM_HandleTypeDef  *hsdram = &SdramHandle;
 8001d0e:	4b79      	ldr	r3, [pc, #484]	; (8001ef4 <MspInit+0x1ec>)
 8001d10:	637b      	str	r3, [r7, #52]	; 0x34

  /* Enable FMC clock */
  __FMC_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	4b78      	ldr	r3, [pc, #480]	; (8001ef8 <MspInit+0x1f0>)
 8001d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1a:	4a77      	ldr	r2, [pc, #476]	; (8001ef8 <MspInit+0x1f0>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6393      	str	r3, [r2, #56]	; 0x38
 8001d22:	4b75      	ldr	r3, [pc, #468]	; (8001ef8 <MspInit+0x1f0>)
 8001d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	61fb      	str	r3, [r7, #28]
 8001d2c:	69fb      	ldr	r3, [r7, #28]

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	4b71      	ldr	r3, [pc, #452]	; (8001ef8 <MspInit+0x1f0>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a70      	ldr	r2, [pc, #448]	; (8001ef8 <MspInit+0x1f0>)
 8001d38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b6e      	ldr	r3, [pc, #440]	; (8001ef8 <MspInit+0x1f0>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d46:	61bb      	str	r3, [r7, #24]
 8001d48:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __GPIOB_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	4b6a      	ldr	r3, [pc, #424]	; (8001ef8 <MspInit+0x1f0>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a69      	ldr	r2, [pc, #420]	; (8001ef8 <MspInit+0x1f0>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b67      	ldr	r3, [pc, #412]	; (8001ef8 <MspInit+0x1f0>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697b      	ldr	r3, [r7, #20]
  __GPIOC_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	4b63      	ldr	r3, [pc, #396]	; (8001ef8 <MspInit+0x1f0>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a62      	ldr	r2, [pc, #392]	; (8001ef8 <MspInit+0x1f0>)
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b60      	ldr	r3, [pc, #384]	; (8001ef8 <MspInit+0x1f0>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]
  __GPIOD_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b5c      	ldr	r3, [pc, #368]	; (8001ef8 <MspInit+0x1f0>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a5b      	ldr	r2, [pc, #364]	; (8001ef8 <MspInit+0x1f0>)
 8001d8c:	f043 0308 	orr.w	r3, r3, #8
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b59      	ldr	r3, [pc, #356]	; (8001ef8 <MspInit+0x1f0>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
  __GPIOE_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	4b55      	ldr	r3, [pc, #340]	; (8001ef8 <MspInit+0x1f0>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a54      	ldr	r2, [pc, #336]	; (8001ef8 <MspInit+0x1f0>)
 8001da8:	f043 0310 	orr.w	r3, r3, #16
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b52      	ldr	r3, [pc, #328]	; (8001ef8 <MspInit+0x1f0>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0310 	and.w	r3, r3, #16
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
  __GPIOF_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	4b4e      	ldr	r3, [pc, #312]	; (8001ef8 <MspInit+0x1f0>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a4d      	ldr	r2, [pc, #308]	; (8001ef8 <MspInit+0x1f0>)
 8001dc4:	f043 0320 	orr.w	r3, r3, #32
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b4b      	ldr	r3, [pc, #300]	; (8001ef8 <MspInit+0x1f0>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
  __GPIOG_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	4b47      	ldr	r3, [pc, #284]	; (8001ef8 <MspInit+0x1f0>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a46      	ldr	r2, [pc, #280]	; (8001ef8 <MspInit+0x1f0>)
 8001de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b44      	ldr	r3, [pc, #272]	; (8001ef8 <MspInit+0x1f0>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001df6:	2302      	movs	r3, #2
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8001dfe:	230c      	movs	r3, #12
 8001e00:	633b      	str	r3, [r7, #48]	; 0x30

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8001e02:	2360      	movs	r3, #96	; 0x60
 8001e04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8001e06:	f107 0320 	add.w	r3, r7, #32
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	483b      	ldr	r0, [pc, #236]	; (8001efc <MspInit+0x1f4>)
 8001e0e:	f001 fa75 	bl	80032fc <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8001e12:	2301      	movs	r3, #1
 8001e14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8001e16:	f107 0320 	add.w	r3, r7, #32
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4838      	ldr	r0, [pc, #224]	; (8001f00 <MspInit+0x1f8>)
 8001e1e:	f001 fa6d 	bl	80032fc <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8001e22:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001e26:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001e28:	f107 0320 	add.w	r3, r7, #32
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4835      	ldr	r0, [pc, #212]	; (8001f04 <MspInit+0x1fc>)
 8001e30:	f001 fa64 	bl	80032fc <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8001e34:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001e38:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001e3a:	f107 0320 	add.w	r3, r7, #32
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4831      	ldr	r0, [pc, #196]	; (8001f08 <MspInit+0x200>)
 8001e42:	f001 fa5b 	bl	80032fc <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8001e46:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001e4a:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001e4c:	f107 0320 	add.w	r3, r7, #32
 8001e50:	4619      	mov	r1, r3
 8001e52:	482e      	ldr	r0, [pc, #184]	; (8001f0c <MspInit+0x204>)
 8001e54:	f001 fa52 	bl	80032fc <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8001e58:	f248 1333 	movw	r3, #33075	; 0x8133
 8001e5c:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001e5e:	f107 0320 	add.w	r3, r7, #32
 8001e62:	4619      	mov	r1, r3
 8001e64:	482a      	ldr	r0, [pc, #168]	; (8001f10 <MspInit+0x208>)
 8001e66:	f001 fa49 	bl	80032fc <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001e6a:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <MspInit+0x20c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001e70:	4b28      	ldr	r3, [pc, #160]	; (8001f14 <MspInit+0x20c>)
 8001e72:	2280      	movs	r2, #128	; 0x80
 8001e74:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001e76:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <MspInit+0x20c>)
 8001e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e7c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8001e7e:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <MspInit+0x20c>)
 8001e80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e84:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e86:	4b23      	ldr	r3, [pc, #140]	; (8001f14 <MspInit+0x20c>)
 8001e88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e8c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001e8e:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <MspInit+0x20c>)
 8001e90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e94:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8001e96:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <MspInit+0x20c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <MspInit+0x20c>)
 8001e9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ea2:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001ea4:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <MspInit+0x20c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001eaa:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <MspInit+0x20c>)
 8001eac:	2203      	movs	r2, #3
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001eb0:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <MspInit+0x20c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001eb6:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <MspInit+0x20c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8001ebc:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <MspInit+0x20c>)
 8001ebe:	4a16      	ldr	r2, [pc, #88]	; (8001f18 <MspInit+0x210>)
 8001ec0:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8001ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec4:	4a13      	ldr	r2, [pc, #76]	; (8001f14 <MspInit+0x20c>)
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ec8:	4a12      	ldr	r2, [pc, #72]	; (8001f14 <MspInit+0x20c>)
 8001eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ecc:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8001ece:	4811      	ldr	r0, [pc, #68]	; (8001f14 <MspInit+0x20c>)
 8001ed0:	f000 fe7a 	bl	8002bc8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8001ed4:	480f      	ldr	r0, [pc, #60]	; (8001f14 <MspInit+0x20c>)
 8001ed6:	f000 fdc9 	bl	8002a6c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0, 0);
 8001eda:	2200      	movs	r2, #0
 8001edc:	2100      	movs	r1, #0
 8001ede:	2038      	movs	r0, #56	; 0x38
 8001ee0:	f000 fd8d 	bl	80029fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001ee4:	2038      	movs	r0, #56	; 0x38
 8001ee6:	f000 fda6 	bl	8002a36 <HAL_NVIC_EnableIRQ>
}
 8001eea:	bf00      	nop
 8001eec:	3738      	adds	r7, #56	; 0x38
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000468 	.word	0x20000468
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40020400 	.word	0x40020400
 8001f00:	40020800 	.word	0x40020800
 8001f04:	40020c00 	.word	0x40020c00
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40021400 	.word	0x40021400
 8001f10:	40021800 	.word	0x40021800
 8001f14:	200004c8 	.word	0x200004c8
 8001f18:	40026410 	.word	0x40026410

08001f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <HAL_MspInit+0x4c>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	4a0f      	ldr	r2, [pc, #60]	; (8001f68 <HAL_MspInit+0x4c>)
 8001f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f30:	6453      	str	r3, [r2, #68]	; 0x44
 8001f32:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <HAL_MspInit+0x4c>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	603b      	str	r3, [r7, #0]
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <HAL_MspInit+0x4c>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	4a08      	ldr	r2, [pc, #32]	; (8001f68 <HAL_MspInit+0x4c>)
 8001f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_MspInit+0x4c>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800

08001f6c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <HAL_DMA2D_MspInit+0x3c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d10d      	bne.n	8001f9a <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <HAL_DMA2D_MspInit+0x40>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a09      	ldr	r2, [pc, #36]	; (8001fac <HAL_DMA2D_MspInit+0x40>)
 8001f88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4b07      	ldr	r3, [pc, #28]	; (8001fac <HAL_DMA2D_MspInit+0x40>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	4002b000 	.word	0x4002b000
 8001fac:	40023800 	.word	0x40023800

08001fb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	; 0x28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a29      	ldr	r2, [pc, #164]	; (8002074 <HAL_I2C_MspInit+0xc4>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d14b      	bne.n	800206a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	4b28      	ldr	r3, [pc, #160]	; (8002078 <HAL_I2C_MspInit+0xc8>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a27      	ldr	r2, [pc, #156]	; (8002078 <HAL_I2C_MspInit+0xc8>)
 8001fdc:	f043 0304 	orr.w	r3, r3, #4
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b25      	ldr	r3, [pc, #148]	; (8002078 <HAL_I2C_MspInit+0xc8>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	4b21      	ldr	r3, [pc, #132]	; (8002078 <HAL_I2C_MspInit+0xc8>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	4a20      	ldr	r2, [pc, #128]	; (8002078 <HAL_I2C_MspInit+0xc8>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffe:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <HAL_I2C_MspInit+0xc8>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800200a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800200e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002010:	2312      	movs	r3, #18
 8002012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002014:	2301      	movs	r3, #1
 8002016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002018:	2303      	movs	r3, #3
 800201a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800201c:	2304      	movs	r3, #4
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	4619      	mov	r1, r3
 8002026:	4815      	ldr	r0, [pc, #84]	; (800207c <HAL_I2C_MspInit+0xcc>)
 8002028:	f001 f968 	bl	80032fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800202c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002032:	2312      	movs	r3, #18
 8002034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002036:	2301      	movs	r3, #1
 8002038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203a:	2303      	movs	r3, #3
 800203c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800203e:	2304      	movs	r3, #4
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	480d      	ldr	r0, [pc, #52]	; (8002080 <HAL_I2C_MspInit+0xd0>)
 800204a:	f001 f957 	bl	80032fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_I2C_MspInit+0xc8>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	4a08      	ldr	r2, [pc, #32]	; (8002078 <HAL_I2C_MspInit+0xc8>)
 8002058:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800205c:	6413      	str	r3, [r2, #64]	; 0x40
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_I2C_MspInit+0xc8>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800206a:	bf00      	nop
 800206c:	3728      	adds	r7, #40	; 0x28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40005c00 	.word	0x40005c00
 8002078:	40023800 	.word	0x40023800
 800207c:	40020800 	.word	0x40020800
 8002080:	40020000 	.word	0x40020000

08002084 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08e      	sub	sp, #56	; 0x38
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a77      	ldr	r2, [pc, #476]	; (8002280 <HAL_LTDC_MspInit+0x1fc>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	f040 80e7 	bne.w	8002276 <HAL_LTDC_MspInit+0x1f2>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
 80020ac:	4b75      	ldr	r3, [pc, #468]	; (8002284 <HAL_LTDC_MspInit+0x200>)
 80020ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b0:	4a74      	ldr	r2, [pc, #464]	; (8002284 <HAL_LTDC_MspInit+0x200>)
 80020b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020b6:	6453      	str	r3, [r2, #68]	; 0x44
 80020b8:	4b72      	ldr	r3, [pc, #456]	; (8002284 <HAL_LTDC_MspInit+0x200>)
 80020ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020c0:	623b      	str	r3, [r7, #32]
 80020c2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
 80020c8:	4b6e      	ldr	r3, [pc, #440]	; (8002284 <HAL_LTDC_MspInit+0x200>)
 80020ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020cc:	4a6d      	ldr	r2, [pc, #436]	; (8002284 <HAL_LTDC_MspInit+0x200>)
 80020ce:	f043 0320 	orr.w	r3, r3, #32
 80020d2:	6313      	str	r3, [r2, #48]	; 0x30
 80020d4:	4b6b      	ldr	r3, [pc, #428]	; (8002284 <HAL_LTDC_MspInit+0x200>)
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e0:	2300      	movs	r3, #0
 80020e2:	61bb      	str	r3, [r7, #24]
 80020e4:	4b67      	ldr	r3, [pc, #412]	; (8002284 <HAL_LTDC_MspInit+0x200>)
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	4a66      	ldr	r2, [pc, #408]	; (8002284 <HAL_LTDC_MspInit+0x200>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6313      	str	r3, [r2, #48]	; 0x30
 80020f0:	4b64      	ldr	r3, [pc, #400]	; (8002284 <HAL_LTDC_MspInit+0x200>)
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	61bb      	str	r3, [r7, #24]
 80020fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	4b60      	ldr	r3, [pc, #384]	; (8002284 <HAL_LTDC_MspInit+0x200>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	4a5f      	ldr	r2, [pc, #380]	; (8002284 <HAL_LTDC_MspInit+0x200>)
 8002106:	f043 0302 	orr.w	r3, r3, #2
 800210a:	6313      	str	r3, [r2, #48]	; 0x30
 800210c:	4b5d      	ldr	r3, [pc, #372]	; (8002284 <HAL_LTDC_MspInit+0x200>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002118:	2300      	movs	r3, #0
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	4b59      	ldr	r3, [pc, #356]	; (8002284 <HAL_LTDC_MspInit+0x200>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	4a58      	ldr	r2, [pc, #352]	; (8002284 <HAL_LTDC_MspInit+0x200>)
 8002122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002126:	6313      	str	r3, [r2, #48]	; 0x30
 8002128:	4b56      	ldr	r3, [pc, #344]	; (8002284 <HAL_LTDC_MspInit+0x200>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	4b52      	ldr	r3, [pc, #328]	; (8002284 <HAL_LTDC_MspInit+0x200>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	4a51      	ldr	r2, [pc, #324]	; (8002284 <HAL_LTDC_MspInit+0x200>)
 800213e:	f043 0304 	orr.w	r3, r3, #4
 8002142:	6313      	str	r3, [r2, #48]	; 0x30
 8002144:	4b4f      	ldr	r3, [pc, #316]	; (8002284 <HAL_LTDC_MspInit+0x200>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002150:	2300      	movs	r3, #0
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	4b4b      	ldr	r3, [pc, #300]	; (8002284 <HAL_LTDC_MspInit+0x200>)
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	4a4a      	ldr	r2, [pc, #296]	; (8002284 <HAL_LTDC_MspInit+0x200>)
 800215a:	f043 0308 	orr.w	r3, r3, #8
 800215e:	6313      	str	r3, [r2, #48]	; 0x30
 8002160:	4b48      	ldr	r3, [pc, #288]	; (8002284 <HAL_LTDC_MspInit+0x200>)
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002172:	2302      	movs	r3, #2
 8002174:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	2300      	movs	r3, #0
 800217c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800217e:	230e      	movs	r3, #14
 8002180:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002186:	4619      	mov	r1, r3
 8002188:	483f      	ldr	r0, [pc, #252]	; (8002288 <HAL_LTDC_MspInit+0x204>)
 800218a:	f001 f8b7 	bl	80032fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 800218e:	f641 0358 	movw	r3, #6232	; 0x1858
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021a0:	230e      	movs	r3, #14
 80021a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a8:	4619      	mov	r1, r3
 80021aa:	4838      	ldr	r0, [pc, #224]	; (800228c <HAL_LTDC_MspInit+0x208>)
 80021ac:	f001 f8a6 	bl	80032fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021b0:	2303      	movs	r3, #3
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b4:	2302      	movs	r3, #2
 80021b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021bc:	2300      	movs	r3, #0
 80021be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80021c0:	2309      	movs	r3, #9
 80021c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c8:	4619      	mov	r1, r3
 80021ca:	4831      	ldr	r0, [pc, #196]	; (8002290 <HAL_LTDC_MspInit+0x20c>)
 80021cc:	f001 f896 	bl	80032fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 80021d0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021de:	2300      	movs	r3, #0
 80021e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021e2:	230e      	movs	r3, #14
 80021e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ea:	4619      	mov	r1, r3
 80021ec:	4828      	ldr	r0, [pc, #160]	; (8002290 <HAL_LTDC_MspInit+0x20c>)
 80021ee:	f001 f885 	bl	80032fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 80021f2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2300      	movs	r3, #0
 8002202:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002204:	230e      	movs	r3, #14
 8002206:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220c:	4619      	mov	r1, r3
 800220e:	4821      	ldr	r0, [pc, #132]	; (8002294 <HAL_LTDC_MspInit+0x210>)
 8002210:	f001 f874 	bl	80032fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002214:	23c0      	movs	r3, #192	; 0xc0
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002218:	2302      	movs	r3, #2
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002220:	2300      	movs	r3, #0
 8002222:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002224:	230e      	movs	r3, #14
 8002226:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222c:	4619      	mov	r1, r3
 800222e:	481a      	ldr	r0, [pc, #104]	; (8002298 <HAL_LTDC_MspInit+0x214>)
 8002230:	f001 f864 	bl	80032fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002234:	2308      	movs	r3, #8
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002244:	230e      	movs	r3, #14
 8002246:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224c:	4619      	mov	r1, r3
 800224e:	4813      	ldr	r0, [pc, #76]	; (800229c <HAL_LTDC_MspInit+0x218>)
 8002250:	f001 f854 	bl	80032fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002254:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	2302      	movs	r3, #2
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002262:	2300      	movs	r3, #0
 8002264:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002266:	2309      	movs	r3, #9
 8002268:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800226a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226e:	4619      	mov	r1, r3
 8002270:	4808      	ldr	r0, [pc, #32]	; (8002294 <HAL_LTDC_MspInit+0x210>)
 8002272:	f001 f843 	bl	80032fc <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002276:	bf00      	nop
 8002278:	3738      	adds	r7, #56	; 0x38
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40016800 	.word	0x40016800
 8002284:	40023800 	.word	0x40023800
 8002288:	40021400 	.word	0x40021400
 800228c:	40020000 	.word	0x40020000
 8002290:	40020400 	.word	0x40020400
 8002294:	40021800 	.word	0x40021800
 8002298:	40020800 	.word	0x40020800
 800229c:	40020c00 	.word	0x40020c00

080022a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08a      	sub	sp, #40	; 0x28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a19      	ldr	r2, [pc, #100]	; (8002324 <HAL_SPI_MspInit+0x84>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d12c      	bne.n	800231c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	4b18      	ldr	r3, [pc, #96]	; (8002328 <HAL_SPI_MspInit+0x88>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	4a17      	ldr	r2, [pc, #92]	; (8002328 <HAL_SPI_MspInit+0x88>)
 80022cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022d0:	6453      	str	r3, [r2, #68]	; 0x44
 80022d2:	4b15      	ldr	r3, [pc, #84]	; (8002328 <HAL_SPI_MspInit+0x88>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_SPI_MspInit+0x88>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a10      	ldr	r2, [pc, #64]	; (8002328 <HAL_SPI_MspInit+0x88>)
 80022e8:	f043 0320 	orr.w	r3, r3, #32
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <HAL_SPI_MspInit+0x88>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80022fa:	f44f 7360 	mov.w	r3, #896	; 0x380
 80022fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002308:	2303      	movs	r3, #3
 800230a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800230c:	2305      	movs	r3, #5
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	4619      	mov	r1, r3
 8002316:	4805      	ldr	r0, [pc, #20]	; (800232c <HAL_SPI_MspInit+0x8c>)
 8002318:	f000 fff0 	bl	80032fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800231c:	bf00      	nop
 800231e:	3728      	adds	r7, #40	; 0x28
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40015000 	.word	0x40015000
 8002328:	40023800 	.word	0x40023800
 800232c:	40021400 	.word	0x40021400

08002330 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a08      	ldr	r2, [pc, #32]	; (8002360 <HAL_SPI_MspDeInit+0x30>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d10a      	bne.n	8002358 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002342:	4b08      	ldr	r3, [pc, #32]	; (8002364 <HAL_SPI_MspDeInit+0x34>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	4a07      	ldr	r2, [pc, #28]	; (8002364 <HAL_SPI_MspDeInit+0x34>)
 8002348:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800234c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 800234e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002352:	4805      	ldr	r0, [pc, #20]	; (8002368 <HAL_SPI_MspDeInit+0x38>)
 8002354:	f001 f97c 	bl	8003650 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40015000 	.word	0x40015000
 8002364:	40023800 	.word	0x40023800
 8002368:	40021400 	.word	0x40021400

0800236c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a19      	ldr	r2, [pc, #100]	; (80023f0 <HAL_UART_MspInit+0x84>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d12c      	bne.n	80023e8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <HAL_UART_MspInit+0x88>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	4a17      	ldr	r2, [pc, #92]	; (80023f4 <HAL_UART_MspInit+0x88>)
 8002398:	f043 0310 	orr.w	r3, r3, #16
 800239c:	6453      	str	r3, [r2, #68]	; 0x44
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <HAL_UART_MspInit+0x88>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	f003 0310 	and.w	r3, r3, #16
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <HAL_UART_MspInit+0x88>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a10      	ldr	r2, [pc, #64]	; (80023f4 <HAL_UART_MspInit+0x88>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <HAL_UART_MspInit+0x88>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023cc:	2302      	movs	r3, #2
 80023ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d4:	2303      	movs	r3, #3
 80023d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023d8:	2307      	movs	r3, #7
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	4619      	mov	r1, r3
 80023e2:	4805      	ldr	r0, [pc, #20]	; (80023f8 <HAL_UART_MspInit+0x8c>)
 80023e4:	f000 ff8a 	bl	80032fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023e8:	bf00      	nop
 80023ea:	3728      	adds	r7, #40	; 0x28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40011000 	.word	0x40011000
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020000 	.word	0x40020000

080023fc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002410:	4b3b      	ldr	r3, [pc, #236]	; (8002500 <HAL_FMC_MspInit+0x104>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d16f      	bne.n	80024f8 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002418:	4b39      	ldr	r3, [pc, #228]	; (8002500 <HAL_FMC_MspInit+0x104>)
 800241a:	2201      	movs	r2, #1
 800241c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	603b      	str	r3, [r7, #0]
 8002422:	4b38      	ldr	r3, [pc, #224]	; (8002504 <HAL_FMC_MspInit+0x108>)
 8002424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002426:	4a37      	ldr	r2, [pc, #220]	; (8002504 <HAL_FMC_MspInit+0x108>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6393      	str	r3, [r2, #56]	; 0x38
 800242e:	4b35      	ldr	r3, [pc, #212]	; (8002504 <HAL_FMC_MspInit+0x108>)
 8002430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800243a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800243e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002448:	2303      	movs	r3, #3
 800244a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800244c:	230c      	movs	r3, #12
 800244e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002450:	1d3b      	adds	r3, r7, #4
 8002452:	4619      	mov	r1, r3
 8002454:	482c      	ldr	r0, [pc, #176]	; (8002508 <HAL_FMC_MspInit+0x10c>)
 8002456:	f000 ff51 	bl	80032fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800245a:	2301      	movs	r3, #1
 800245c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245e:	2302      	movs	r3, #2
 8002460:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002466:	2303      	movs	r3, #3
 8002468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800246a:	230c      	movs	r3, #12
 800246c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	4619      	mov	r1, r3
 8002472:	4826      	ldr	r0, [pc, #152]	; (800250c <HAL_FMC_MspInit+0x110>)
 8002474:	f000 ff42 	bl	80032fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8002478:	f248 1333 	movw	r3, #33075	; 0x8133
 800247c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247e:	2302      	movs	r3, #2
 8002480:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002486:	2303      	movs	r3, #3
 8002488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800248a:	230c      	movs	r3, #12
 800248c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800248e:	1d3b      	adds	r3, r7, #4
 8002490:	4619      	mov	r1, r3
 8002492:	481f      	ldr	r0, [pc, #124]	; (8002510 <HAL_FMC_MspInit+0x114>)
 8002494:	f000 ff32 	bl	80032fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002498:	f64f 7383 	movw	r3, #65411	; 0xff83
 800249c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a6:	2303      	movs	r3, #3
 80024a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024aa:	230c      	movs	r3, #12
 80024ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	4619      	mov	r1, r3
 80024b2:	4818      	ldr	r0, [pc, #96]	; (8002514 <HAL_FMC_MspInit+0x118>)
 80024b4:	f000 ff22 	bl	80032fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80024b8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80024bc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024be:	2302      	movs	r3, #2
 80024c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c6:	2303      	movs	r3, #3
 80024c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024ca:	230c      	movs	r3, #12
 80024cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	4619      	mov	r1, r3
 80024d2:	4811      	ldr	r0, [pc, #68]	; (8002518 <HAL_FMC_MspInit+0x11c>)
 80024d4:	f000 ff12 	bl	80032fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80024d8:	2360      	movs	r3, #96	; 0x60
 80024da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e4:	2303      	movs	r3, #3
 80024e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024e8:	230c      	movs	r3, #12
 80024ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ec:	1d3b      	adds	r3, r7, #4
 80024ee:	4619      	mov	r1, r3
 80024f0:	480a      	ldr	r0, [pc, #40]	; (800251c <HAL_FMC_MspInit+0x120>)
 80024f2:	f000 ff03 	bl	80032fc <HAL_GPIO_Init>
 80024f6:	e000      	b.n	80024fa <HAL_FMC_MspInit+0xfe>
    return;
 80024f8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20000528 	.word	0x20000528
 8002504:	40023800 	.word	0x40023800
 8002508:	40021400 	.word	0x40021400
 800250c:	40020800 	.word	0x40020800
 8002510:	40021800 	.word	0x40021800
 8002514:	40021000 	.word	0x40021000
 8002518:	40020c00 	.word	0x40020c00
 800251c:	40020400 	.word	0x40020400

08002520 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002528:	f7ff ff68 	bl	80023fc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002546:	e7fe      	b.n	8002546 <HardFault_Handler+0x4>

08002548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800254c:	e7fe      	b.n	800254c <MemManage_Handler+0x4>

0800254e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002552:	e7fe      	b.n	8002552 <BusFault_Handler+0x4>

08002554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <UsageFault_Handler+0x4>

0800255a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002588:	f000 f91c 	bl	80027c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}

08002590 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	e00a      	b.n	80025b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025a2:	f3af 8000 	nop.w
 80025a6:	4601      	mov	r1, r0
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	60ba      	str	r2, [r7, #8]
 80025ae:	b2ca      	uxtb	r2, r1
 80025b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3301      	adds	r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	dbf0      	blt.n	80025a2 <_read+0x12>
	}

return len;
 80025c0:	687b      	ldr	r3, [r7, #4]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <_close>:
	}
	return len;
}

int _close(int file)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
	return -1;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025f2:	605a      	str	r2, [r3, #4]
	return 0;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <_isatty>:

int _isatty(int file)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
	return 1;
 800260a:	2301      	movs	r3, #1
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
	return 0;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800263c:	4a14      	ldr	r2, [pc, #80]	; (8002690 <_sbrk+0x5c>)
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <_sbrk+0x60>)
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002648:	4b13      	ldr	r3, [pc, #76]	; (8002698 <_sbrk+0x64>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d102      	bne.n	8002656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <_sbrk+0x64>)
 8002652:	4a12      	ldr	r2, [pc, #72]	; (800269c <_sbrk+0x68>)
 8002654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <_sbrk+0x64>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4413      	add	r3, r2
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	429a      	cmp	r2, r3
 8002662:	d207      	bcs.n	8002674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002664:	f003 ffe4 	bl	8006630 <__errno>
 8002668:	4602      	mov	r2, r0
 800266a:	230c      	movs	r3, #12
 800266c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
 8002672:	e009      	b.n	8002688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002674:	4b08      	ldr	r3, [pc, #32]	; (8002698 <_sbrk+0x64>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <_sbrk+0x64>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4413      	add	r3, r2
 8002682:	4a05      	ldr	r2, [pc, #20]	; (8002698 <_sbrk+0x64>)
 8002684:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002686:	68fb      	ldr	r3, [r7, #12]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20030000 	.word	0x20030000
 8002694:	00000400 	.word	0x00000400
 8002698:	2000052c 	.word	0x2000052c
 800269c:	20000548 	.word	0x20000548

080026a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026a4:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <SystemInit+0x28>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026aa:	4a07      	ldr	r2, [pc, #28]	; (80026c8 <SystemInit+0x28>)
 80026ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026b4:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <SystemInit+0x28>)
 80026b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026ba:	609a      	str	r2, [r3, #8]
#endif
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80026cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002704 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026d2:	e003      	b.n	80026dc <LoopCopyDataInit>

080026d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026da:	3104      	adds	r1, #4

080026dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026dc:	480b      	ldr	r0, [pc, #44]	; (800270c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026de:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026e4:	d3f6      	bcc.n	80026d4 <CopyDataInit>
  ldr  r2, =_sbss
 80026e6:	4a0b      	ldr	r2, [pc, #44]	; (8002714 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80026e8:	e002      	b.n	80026f0 <LoopFillZerobss>

080026ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80026ec:	f842 3b04 	str.w	r3, [r2], #4

080026f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80026f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80026f4:	d3f9      	bcc.n	80026ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026f6:	f7ff ffd3 	bl	80026a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026fa:	f003 ff9f 	bl	800663c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026fe:	f7fe f897 	bl	8000830 <main>
  bx  lr    
 8002702:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002704:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002708:	08008b00 	.word	0x08008b00
  ldr  r0, =_sdata
 800270c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002710:	200000b4 	.word	0x200000b4
  ldr  r2, =_sbss
 8002714:	200000b4 	.word	0x200000b4
  ldr  r3, = _ebss
 8002718:	20000544 	.word	0x20000544

0800271c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800271c:	e7fe      	b.n	800271c <ADC_IRQHandler>
	...

08002720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002724:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <HAL_Init+0x40>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0d      	ldr	r2, [pc, #52]	; (8002760 <HAL_Init+0x40>)
 800272a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800272e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <HAL_Init+0x40>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <HAL_Init+0x40>)
 8002736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800273a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800273c:	4b08      	ldr	r3, [pc, #32]	; (8002760 <HAL_Init+0x40>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a07      	ldr	r2, [pc, #28]	; (8002760 <HAL_Init+0x40>)
 8002742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002746:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002748:	2003      	movs	r0, #3
 800274a:	f000 f94d 	bl	80029e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800274e:	2000      	movs	r0, #0
 8002750:	f000 f808 	bl	8002764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002754:	f7ff fbe2 	bl	8001f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023c00 	.word	0x40023c00

08002764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800276c:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <HAL_InitTick+0x54>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_InitTick+0x58>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	4619      	mov	r1, r3
 8002776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800277a:	fbb3 f3f1 	udiv	r3, r3, r1
 800277e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f965 	bl	8002a52 <HAL_SYSTICK_Config>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e00e      	b.n	80027b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b0f      	cmp	r3, #15
 8002796:	d80a      	bhi.n	80027ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002798:	2200      	movs	r2, #0
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	f04f 30ff 	mov.w	r0, #4294967295
 80027a0:	f000 f92d 	bl	80029fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027a4:	4a06      	ldr	r2, [pc, #24]	; (80027c0 <HAL_InitTick+0x5c>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	e000      	b.n	80027b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20000044 	.word	0x20000044
 80027bc:	2000004c 	.word	0x2000004c
 80027c0:	20000048 	.word	0x20000048

080027c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_IncTick+0x20>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_IncTick+0x24>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	4a04      	ldr	r2, [pc, #16]	; (80027e8 <HAL_IncTick+0x24>)
 80027d6:	6013      	str	r3, [r2, #0]
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	2000004c 	.word	0x2000004c
 80027e8:	2000053c 	.word	0x2000053c

080027ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return uwTick;
 80027f0:	4b03      	ldr	r3, [pc, #12]	; (8002800 <HAL_GetTick+0x14>)
 80027f2:	681b      	ldr	r3, [r3, #0]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	2000053c 	.word	0x2000053c

08002804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800280c:	f7ff ffee 	bl	80027ec <HAL_GetTick>
 8002810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d005      	beq.n	800282a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <HAL_Delay+0x40>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4413      	add	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800282a:	bf00      	nop
 800282c:	f7ff ffde 	bl	80027ec <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	429a      	cmp	r2, r3
 800283a:	d8f7      	bhi.n	800282c <HAL_Delay+0x28>
  {
  }
}
 800283c:	bf00      	nop
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	2000004c 	.word	0x2000004c

08002848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <__NVIC_SetPriorityGrouping+0x44>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002864:	4013      	ands	r3, r2
 8002866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287a:	4a04      	ldr	r2, [pc, #16]	; (800288c <__NVIC_SetPriorityGrouping+0x44>)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	60d3      	str	r3, [r2, #12]
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002894:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	0a1b      	lsrs	r3, r3, #8
 800289a:	f003 0307 	and.w	r3, r3, #7
}
 800289e:	4618      	mov	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	db0b      	blt.n	80028d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	f003 021f 	and.w	r2, r3, #31
 80028c4:	4907      	ldr	r1, [pc, #28]	; (80028e4 <__NVIC_EnableIRQ+0x38>)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	2001      	movs	r0, #1
 80028ce:	fa00 f202 	lsl.w	r2, r0, r2
 80028d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	e000e100 	.word	0xe000e100

080028e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	6039      	str	r1, [r7, #0]
 80028f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	db0a      	blt.n	8002912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	490c      	ldr	r1, [pc, #48]	; (8002934 <__NVIC_SetPriority+0x4c>)
 8002902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002906:	0112      	lsls	r2, r2, #4
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	440b      	add	r3, r1
 800290c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002910:	e00a      	b.n	8002928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	b2da      	uxtb	r2, r3
 8002916:	4908      	ldr	r1, [pc, #32]	; (8002938 <__NVIC_SetPriority+0x50>)
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	3b04      	subs	r3, #4
 8002920:	0112      	lsls	r2, r2, #4
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	440b      	add	r3, r1
 8002926:	761a      	strb	r2, [r3, #24]
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	e000e100 	.word	0xe000e100
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800293c:	b480      	push	{r7}
 800293e:	b089      	sub	sp, #36	; 0x24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f1c3 0307 	rsb	r3, r3, #7
 8002956:	2b04      	cmp	r3, #4
 8002958:	bf28      	it	cs
 800295a:	2304      	movcs	r3, #4
 800295c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	3304      	adds	r3, #4
 8002962:	2b06      	cmp	r3, #6
 8002964:	d902      	bls.n	800296c <NVIC_EncodePriority+0x30>
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	3b03      	subs	r3, #3
 800296a:	e000      	b.n	800296e <NVIC_EncodePriority+0x32>
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002970:	f04f 32ff 	mov.w	r2, #4294967295
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43da      	mvns	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	401a      	ands	r2, r3
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002984:	f04f 31ff 	mov.w	r1, #4294967295
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	fa01 f303 	lsl.w	r3, r1, r3
 800298e:	43d9      	mvns	r1, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002994:	4313      	orrs	r3, r2
         );
}
 8002996:	4618      	mov	r0, r3
 8002998:	3724      	adds	r7, #36	; 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b4:	d301      	bcc.n	80029ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029b6:	2301      	movs	r3, #1
 80029b8:	e00f      	b.n	80029da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ba:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <SysTick_Config+0x40>)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3b01      	subs	r3, #1
 80029c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029c2:	210f      	movs	r1, #15
 80029c4:	f04f 30ff 	mov.w	r0, #4294967295
 80029c8:	f7ff ff8e 	bl	80028e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <SysTick_Config+0x40>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029d2:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <SysTick_Config+0x40>)
 80029d4:	2207      	movs	r2, #7
 80029d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	e000e010 	.word	0xe000e010

080029e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff ff29 	bl	8002848 <__NVIC_SetPriorityGrouping>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b086      	sub	sp, #24
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	4603      	mov	r3, r0
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
 8002a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a10:	f7ff ff3e 	bl	8002890 <__NVIC_GetPriorityGrouping>
 8002a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	68b9      	ldr	r1, [r7, #8]
 8002a1a:	6978      	ldr	r0, [r7, #20]
 8002a1c:	f7ff ff8e 	bl	800293c <NVIC_EncodePriority>
 8002a20:	4602      	mov	r2, r0
 8002a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a26:	4611      	mov	r1, r2
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff ff5d 	bl	80028e8 <__NVIC_SetPriority>
}
 8002a2e:	bf00      	nop
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff ff31 	bl	80028ac <__NVIC_EnableIRQ>
}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff ffa2 	bl	80029a4 <SysTick_Config>
 8002a60:	4603      	mov	r3, r0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a78:	f7ff feb8 	bl	80027ec <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e099      	b.n	8002bbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0201 	bic.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aa8:	e00f      	b.n	8002aca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aaa:	f7ff fe9f 	bl	80027ec <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b05      	cmp	r3, #5
 8002ab6:	d908      	bls.n	8002aca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2220      	movs	r2, #32
 8002abc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2203      	movs	r2, #3
 8002ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e078      	b.n	8002bbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1e8      	bne.n	8002aaa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	4b38      	ldr	r3, [pc, #224]	; (8002bc4 <HAL_DMA_Init+0x158>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002af6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d107      	bne.n	8002b34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f023 0307 	bic.w	r3, r3, #7
 8002b4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d117      	bne.n	8002b8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00e      	beq.n	8002b8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f8bd 	bl	8002cf0 <DMA_CheckFifoParam>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2240      	movs	r2, #64	; 0x40
 8002b80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e016      	b.n	8002bbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f874 	bl	8002c84 <DMA_CalcBaseAndBitshift>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba4:	223f      	movs	r2, #63	; 0x3f
 8002ba6:	409a      	lsls	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	f010803f 	.word	0xf010803f

08002bc8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e050      	b.n	8002c7c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d101      	bne.n	8002bea <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002be6:	2302      	movs	r3, #2
 8002be8:	e048      	b.n	8002c7c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0201 	bic.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2200      	movs	r2, #0
 8002c08:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2200      	movs	r2, #0
 8002c18:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2221      	movs	r2, #33	; 0x21
 8002c28:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f82a 	bl	8002c84 <DMA_CalcBaseAndBitshift>
 8002c30:	4603      	mov	r3, r0
 8002c32:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5c:	223f      	movs	r2, #63	; 0x3f
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	3b10      	subs	r3, #16
 8002c94:	4a14      	ldr	r2, [pc, #80]	; (8002ce8 <DMA_CalcBaseAndBitshift+0x64>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	091b      	lsrs	r3, r3, #4
 8002c9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c9e:	4a13      	ldr	r2, [pc, #76]	; (8002cec <DMA_CalcBaseAndBitshift+0x68>)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d909      	bls.n	8002cc6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cba:	f023 0303 	bic.w	r3, r3, #3
 8002cbe:	1d1a      	adds	r2, r3, #4
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	659a      	str	r2, [r3, #88]	; 0x58
 8002cc4:	e007      	b.n	8002cd6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cce:	f023 0303 	bic.w	r3, r3, #3
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	aaaaaaab 	.word	0xaaaaaaab
 8002cec:	08008a84 	.word	0x08008a84

08002cf0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d11f      	bne.n	8002d4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d855      	bhi.n	8002dbc <DMA_CheckFifoParam+0xcc>
 8002d10:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <DMA_CheckFifoParam+0x28>)
 8002d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d16:	bf00      	nop
 8002d18:	08002d29 	.word	0x08002d29
 8002d1c:	08002d3b 	.word	0x08002d3b
 8002d20:	08002d29 	.word	0x08002d29
 8002d24:	08002dbd 	.word	0x08002dbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d045      	beq.n	8002dc0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d38:	e042      	b.n	8002dc0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d42:	d13f      	bne.n	8002dc4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d48:	e03c      	b.n	8002dc4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d52:	d121      	bne.n	8002d98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d836      	bhi.n	8002dc8 <DMA_CheckFifoParam+0xd8>
 8002d5a:	a201      	add	r2, pc, #4	; (adr r2, 8002d60 <DMA_CheckFifoParam+0x70>)
 8002d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d60:	08002d71 	.word	0x08002d71
 8002d64:	08002d77 	.word	0x08002d77
 8002d68:	08002d71 	.word	0x08002d71
 8002d6c:	08002d89 	.word	0x08002d89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
      break;
 8002d74:	e02f      	b.n	8002dd6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d024      	beq.n	8002dcc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d86:	e021      	b.n	8002dcc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d90:	d11e      	bne.n	8002dd0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d96:	e01b      	b.n	8002dd0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d902      	bls.n	8002da4 <DMA_CheckFifoParam+0xb4>
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d003      	beq.n	8002daa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002da2:	e018      	b.n	8002dd6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
      break;
 8002da8:	e015      	b.n	8002dd6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00e      	beq.n	8002dd4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	73fb      	strb	r3, [r7, #15]
      break;
 8002dba:	e00b      	b.n	8002dd4 <DMA_CheckFifoParam+0xe4>
      break;
 8002dbc:	bf00      	nop
 8002dbe:	e00a      	b.n	8002dd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002dc0:	bf00      	nop
 8002dc2:	e008      	b.n	8002dd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002dc4:	bf00      	nop
 8002dc6:	e006      	b.n	8002dd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002dc8:	bf00      	nop
 8002dca:	e004      	b.n	8002dd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002dcc:	bf00      	nop
 8002dce:	e002      	b.n	8002dd6 <DMA_CheckFifoParam+0xe6>
      break;   
 8002dd0:	bf00      	nop
 8002dd2:	e000      	b.n	8002dd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002dd4:	bf00      	nop
    }
  } 
  
  return status; 
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e03b      	b.n	8002e6e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff f8ae 	bl	8001f6c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e34:	f023 0107 	bic.w	r1, r3, #7
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	68d1      	ldr	r1, [r2, #12]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	430b      	orrs	r3, r1
 8002e5c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b086      	sub	sp, #24
 8002e7a:	af02      	add	r7, sp, #8
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	607a      	str	r2, [r7, #4]
 8002e82:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_DMA2D_Start+0x1c>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e018      	b.n	8002ec4 <HAL_DMA2D_Start+0x4e>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	68b9      	ldr	r1, [r7, #8]
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 f989 	bl	80031c4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f042 0201 	orr.w	r2, r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d056      	beq.n	8002f96 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8002ee8:	f7ff fc80 	bl	80027ec <HAL_GetTick>
 8002eec:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002eee:	e04b      	b.n	8002f88 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d023      	beq.n	8002f4a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f003 0320 	and.w	r3, r3, #32
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f10:	f043 0202 	orr.w	r2, r3, #2
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d005      	beq.n	8002f2e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f26:	f043 0201 	orr.w	r2, r3, #1
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2221      	movs	r2, #33	; 0x21
 8002f34:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2204      	movs	r2, #4
 8002f3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e0a5      	b.n	8003096 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f50:	d01a      	beq.n	8002f88 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002f52:	f7ff fc4b 	bl	80027ec <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d302      	bcc.n	8002f68 <HAL_DMA2D_PollForTransfer+0x9c>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10f      	bne.n	8002f88 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6c:	f043 0220 	orr.w	r2, r3, #32
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2203      	movs	r2, #3
 8002f78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e086      	b.n	8003096 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0ac      	beq.n	8002ef0 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	f003 0320 	and.w	r3, r3, #32
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d061      	beq.n	800307c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fb8:	f7ff fc18 	bl	80027ec <HAL_GetTick>
 8002fbc:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002fbe:	e056      	b.n	800306e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d02e      	beq.n	8003030 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe0:	f043 0204 	orr.w	r2, r3, #4
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 0320 	and.w	r3, r3, #32
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff6:	f043 0202 	orr.w	r2, r3, #2
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300c:	f043 0201 	orr.w	r2, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2229      	movs	r2, #41	; 0x29
 800301a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2204      	movs	r2, #4
 8003020:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e032      	b.n	8003096 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d01a      	beq.n	800306e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003038:	f7ff fbd8 	bl	80027ec <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d302      	bcc.n	800304e <HAL_DMA2D_PollForTransfer+0x182>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10f      	bne.n	800306e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003052:	f043 0220 	orr.w	r2, r3, #32
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2203      	movs	r2, #3
 800305e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e013      	b.n	8003096 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0a1      	beq.n	8002fc0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2212      	movs	r2, #18
 8003082:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_DMA2D_ConfigLayer+0x20>
 80030bc:	2302      	movs	r3, #2
 80030be:	e079      	b.n	80031b4 <HAL_DMA2D_ConfigLayer+0x114>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	3318      	adds	r3, #24
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	4413      	add	r3, r2
 80030da:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	041b      	lsls	r3, r3, #16
 80030e6:	4313      	orrs	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80030ea:	4b35      	ldr	r3, [pc, #212]	; (80031c0 <HAL_DMA2D_ConfigLayer+0x120>)
 80030ec:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b0a      	cmp	r3, #10
 80030f4:	d003      	beq.n	80030fe <HAL_DMA2D_ConfigLayer+0x5e>
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b09      	cmp	r3, #9
 80030fc:	d107      	bne.n	800310e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	4313      	orrs	r3, r2
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	e005      	b.n	800311a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	061b      	lsls	r3, r3, #24
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d120      	bne.n	8003162 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	43db      	mvns	r3, r3
 800312a:	ea02 0103 	and.w	r1, r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	430a      	orrs	r2, r1
 8003136:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	6812      	ldr	r2, [r2, #0]
 8003140:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b0a      	cmp	r3, #10
 8003148:	d003      	beq.n	8003152 <HAL_DMA2D_ConfigLayer+0xb2>
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b09      	cmp	r3, #9
 8003150:	d127      	bne.n	80031a2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800315e:	629a      	str	r2, [r3, #40]	; 0x28
 8003160:	e01f      	b.n	80031a2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69da      	ldr	r2, [r3, #28]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	43db      	mvns	r3, r3
 800316c:	ea02 0103 	and.w	r1, r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	430a      	orrs	r2, r1
 8003178:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	6812      	ldr	r2, [r2, #0]
 8003182:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b0a      	cmp	r3, #10
 800318a:	d003      	beq.n	8003194 <HAL_DMA2D_ConfigLayer+0xf4>
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b09      	cmp	r3, #9
 8003192:	d106      	bne.n	80031a2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80031a0:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	371c      	adds	r7, #28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	ff03000f 	.word	0xff03000f

080031c4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b08b      	sub	sp, #44	; 0x2c
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	041a      	lsls	r2, r3, #16
 80031e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e2:	431a      	orrs	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031fc:	d174      	bne.n	80032e8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003204:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800320c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003214:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d108      	bne.n	8003236 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	431a      	orrs	r2, r3
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	4313      	orrs	r3, r2
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
 8003234:	e053      	b.n	80032de <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d106      	bne.n	800324c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	4313      	orrs	r3, r2
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	4313      	orrs	r3, r2
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
 800324a:	e048      	b.n	80032de <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d111      	bne.n	8003278 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	0cdb      	lsrs	r3, r3, #19
 8003258:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	0a9b      	lsrs	r3, r3, #10
 800325e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	08db      	lsrs	r3, r3, #3
 8003264:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	02db      	lsls	r3, r3, #11
 800326e:	4313      	orrs	r3, r2
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	4313      	orrs	r3, r2
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
 8003276:	e032      	b.n	80032de <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2b03      	cmp	r3, #3
 800327e:	d117      	bne.n	80032b0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	0fdb      	lsrs	r3, r3, #31
 8003284:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	0cdb      	lsrs	r3, r3, #19
 800328a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	0adb      	lsrs	r3, r3, #11
 8003290:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	08db      	lsrs	r3, r3, #3
 8003296:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	015a      	lsls	r2, r3, #5
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	029b      	lsls	r3, r3, #10
 80032a0:	431a      	orrs	r2, r3
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	03db      	lsls	r3, r3, #15
 80032a6:	4313      	orrs	r3, r2
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
 80032ae:	e016      	b.n	80032de <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	0f1b      	lsrs	r3, r3, #28
 80032b4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	0d1b      	lsrs	r3, r3, #20
 80032ba:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	0b1b      	lsrs	r3, r3, #12
 80032c0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	091b      	lsrs	r3, r3, #4
 80032c6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	011a      	lsls	r2, r3, #4
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	021b      	lsls	r3, r3, #8
 80032d0:	431a      	orrs	r2, r3
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	031b      	lsls	r3, r3, #12
 80032d6:	4313      	orrs	r3, r2
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80032e6:	e003      	b.n	80032f0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	60da      	str	r2, [r3, #12]
}
 80032f0:	bf00      	nop
 80032f2:	372c      	adds	r7, #44	; 0x2c
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b089      	sub	sp, #36	; 0x24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800330a:	2300      	movs	r3, #0
 800330c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800330e:	2300      	movs	r3, #0
 8003310:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
 8003316:	e177      	b.n	8003608 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003318:	2201      	movs	r2, #1
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4013      	ands	r3, r2
 800332a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	429a      	cmp	r2, r3
 8003332:	f040 8166 	bne.w	8003602 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d00b      	beq.n	8003356 <HAL_GPIO_Init+0x5a>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d007      	beq.n	8003356 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800334a:	2b11      	cmp	r3, #17
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b12      	cmp	r3, #18
 8003354:	d130      	bne.n	80033b8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	2203      	movs	r2, #3
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800338c:	2201      	movs	r2, #1
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	091b      	lsrs	r3, r3, #4
 80033a2:	f003 0201 	and.w	r2, r3, #1
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	2203      	movs	r2, #3
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d003      	beq.n	80033f8 <HAL_GPIO_Init+0xfc>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b12      	cmp	r3, #18
 80033f6:	d123      	bne.n	8003440 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	08da      	lsrs	r2, r3, #3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3208      	adds	r2, #8
 8003400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003404:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	220f      	movs	r2, #15
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4313      	orrs	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	08da      	lsrs	r2, r3, #3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3208      	adds	r2, #8
 800343a:	69b9      	ldr	r1, [r7, #24]
 800343c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	2203      	movs	r2, #3
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4013      	ands	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 0203 	and.w	r2, r3, #3
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 80c0 	beq.w	8003602 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	4b65      	ldr	r3, [pc, #404]	; (800361c <HAL_GPIO_Init+0x320>)
 8003488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348a:	4a64      	ldr	r2, [pc, #400]	; (800361c <HAL_GPIO_Init+0x320>)
 800348c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003490:	6453      	str	r3, [r2, #68]	; 0x44
 8003492:	4b62      	ldr	r3, [pc, #392]	; (800361c <HAL_GPIO_Init+0x320>)
 8003494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800349e:	4a60      	ldr	r2, [pc, #384]	; (8003620 <HAL_GPIO_Init+0x324>)
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	089b      	lsrs	r3, r3, #2
 80034a4:	3302      	adds	r3, #2
 80034a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	220f      	movs	r2, #15
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	43db      	mvns	r3, r3
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4013      	ands	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a57      	ldr	r2, [pc, #348]	; (8003624 <HAL_GPIO_Init+0x328>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d037      	beq.n	800353a <HAL_GPIO_Init+0x23e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a56      	ldr	r2, [pc, #344]	; (8003628 <HAL_GPIO_Init+0x32c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d031      	beq.n	8003536 <HAL_GPIO_Init+0x23a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a55      	ldr	r2, [pc, #340]	; (800362c <HAL_GPIO_Init+0x330>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d02b      	beq.n	8003532 <HAL_GPIO_Init+0x236>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a54      	ldr	r2, [pc, #336]	; (8003630 <HAL_GPIO_Init+0x334>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d025      	beq.n	800352e <HAL_GPIO_Init+0x232>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a53      	ldr	r2, [pc, #332]	; (8003634 <HAL_GPIO_Init+0x338>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d01f      	beq.n	800352a <HAL_GPIO_Init+0x22e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a52      	ldr	r2, [pc, #328]	; (8003638 <HAL_GPIO_Init+0x33c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d019      	beq.n	8003526 <HAL_GPIO_Init+0x22a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a51      	ldr	r2, [pc, #324]	; (800363c <HAL_GPIO_Init+0x340>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d013      	beq.n	8003522 <HAL_GPIO_Init+0x226>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a50      	ldr	r2, [pc, #320]	; (8003640 <HAL_GPIO_Init+0x344>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00d      	beq.n	800351e <HAL_GPIO_Init+0x222>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a4f      	ldr	r2, [pc, #316]	; (8003644 <HAL_GPIO_Init+0x348>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d007      	beq.n	800351a <HAL_GPIO_Init+0x21e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a4e      	ldr	r2, [pc, #312]	; (8003648 <HAL_GPIO_Init+0x34c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d101      	bne.n	8003516 <HAL_GPIO_Init+0x21a>
 8003512:	2309      	movs	r3, #9
 8003514:	e012      	b.n	800353c <HAL_GPIO_Init+0x240>
 8003516:	230a      	movs	r3, #10
 8003518:	e010      	b.n	800353c <HAL_GPIO_Init+0x240>
 800351a:	2308      	movs	r3, #8
 800351c:	e00e      	b.n	800353c <HAL_GPIO_Init+0x240>
 800351e:	2307      	movs	r3, #7
 8003520:	e00c      	b.n	800353c <HAL_GPIO_Init+0x240>
 8003522:	2306      	movs	r3, #6
 8003524:	e00a      	b.n	800353c <HAL_GPIO_Init+0x240>
 8003526:	2305      	movs	r3, #5
 8003528:	e008      	b.n	800353c <HAL_GPIO_Init+0x240>
 800352a:	2304      	movs	r3, #4
 800352c:	e006      	b.n	800353c <HAL_GPIO_Init+0x240>
 800352e:	2303      	movs	r3, #3
 8003530:	e004      	b.n	800353c <HAL_GPIO_Init+0x240>
 8003532:	2302      	movs	r3, #2
 8003534:	e002      	b.n	800353c <HAL_GPIO_Init+0x240>
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <HAL_GPIO_Init+0x240>
 800353a:	2300      	movs	r3, #0
 800353c:	69fa      	ldr	r2, [r7, #28]
 800353e:	f002 0203 	and.w	r2, r2, #3
 8003542:	0092      	lsls	r2, r2, #2
 8003544:	4093      	lsls	r3, r2
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4313      	orrs	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800354c:	4934      	ldr	r1, [pc, #208]	; (8003620 <HAL_GPIO_Init+0x324>)
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	089b      	lsrs	r3, r3, #2
 8003552:	3302      	adds	r3, #2
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800355a:	4b3c      	ldr	r3, [pc, #240]	; (800364c <HAL_GPIO_Init+0x350>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	43db      	mvns	r3, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4013      	ands	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800357e:	4a33      	ldr	r2, [pc, #204]	; (800364c <HAL_GPIO_Init+0x350>)
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003584:	4b31      	ldr	r3, [pc, #196]	; (800364c <HAL_GPIO_Init+0x350>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	43db      	mvns	r3, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4013      	ands	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035a8:	4a28      	ldr	r2, [pc, #160]	; (800364c <HAL_GPIO_Init+0x350>)
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035ae:	4b27      	ldr	r3, [pc, #156]	; (800364c <HAL_GPIO_Init+0x350>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	43db      	mvns	r3, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4013      	ands	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035d2:	4a1e      	ldr	r2, [pc, #120]	; (800364c <HAL_GPIO_Init+0x350>)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035d8:	4b1c      	ldr	r3, [pc, #112]	; (800364c <HAL_GPIO_Init+0x350>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	43db      	mvns	r3, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4013      	ands	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035fc:	4a13      	ldr	r2, [pc, #76]	; (800364c <HAL_GPIO_Init+0x350>)
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3301      	adds	r3, #1
 8003606:	61fb      	str	r3, [r7, #28]
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	2b0f      	cmp	r3, #15
 800360c:	f67f ae84 	bls.w	8003318 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003610:	bf00      	nop
 8003612:	3724      	adds	r7, #36	; 0x24
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	40023800 	.word	0x40023800
 8003620:	40013800 	.word	0x40013800
 8003624:	40020000 	.word	0x40020000
 8003628:	40020400 	.word	0x40020400
 800362c:	40020800 	.word	0x40020800
 8003630:	40020c00 	.word	0x40020c00
 8003634:	40021000 	.word	0x40021000
 8003638:	40021400 	.word	0x40021400
 800363c:	40021800 	.word	0x40021800
 8003640:	40021c00 	.word	0x40021c00
 8003644:	40022000 	.word	0x40022000
 8003648:	40022400 	.word	0x40022400
 800364c:	40013c00 	.word	0x40013c00

08003650 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003650:	b480      	push	{r7}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800365a:	2300      	movs	r3, #0
 800365c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003662:	2300      	movs	r3, #0
 8003664:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	e0d9      	b.n	8003820 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800366c:	2201      	movs	r2, #1
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4013      	ands	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	429a      	cmp	r2, r3
 8003684:	f040 80c9 	bne.w	800381a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003688:	4a6a      	ldr	r2, [pc, #424]	; (8003834 <HAL_GPIO_DeInit+0x1e4>)
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	089b      	lsrs	r3, r3, #2
 800368e:	3302      	adds	r3, #2
 8003690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003694:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	220f      	movs	r2, #15
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	4013      	ands	r3, r2
 80036a8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a62      	ldr	r2, [pc, #392]	; (8003838 <HAL_GPIO_DeInit+0x1e8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d037      	beq.n	8003722 <HAL_GPIO_DeInit+0xd2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a61      	ldr	r2, [pc, #388]	; (800383c <HAL_GPIO_DeInit+0x1ec>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d031      	beq.n	800371e <HAL_GPIO_DeInit+0xce>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a60      	ldr	r2, [pc, #384]	; (8003840 <HAL_GPIO_DeInit+0x1f0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d02b      	beq.n	800371a <HAL_GPIO_DeInit+0xca>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a5f      	ldr	r2, [pc, #380]	; (8003844 <HAL_GPIO_DeInit+0x1f4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d025      	beq.n	8003716 <HAL_GPIO_DeInit+0xc6>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a5e      	ldr	r2, [pc, #376]	; (8003848 <HAL_GPIO_DeInit+0x1f8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d01f      	beq.n	8003712 <HAL_GPIO_DeInit+0xc2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a5d      	ldr	r2, [pc, #372]	; (800384c <HAL_GPIO_DeInit+0x1fc>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d019      	beq.n	800370e <HAL_GPIO_DeInit+0xbe>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a5c      	ldr	r2, [pc, #368]	; (8003850 <HAL_GPIO_DeInit+0x200>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d013      	beq.n	800370a <HAL_GPIO_DeInit+0xba>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a5b      	ldr	r2, [pc, #364]	; (8003854 <HAL_GPIO_DeInit+0x204>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00d      	beq.n	8003706 <HAL_GPIO_DeInit+0xb6>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a5a      	ldr	r2, [pc, #360]	; (8003858 <HAL_GPIO_DeInit+0x208>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d007      	beq.n	8003702 <HAL_GPIO_DeInit+0xb2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a59      	ldr	r2, [pc, #356]	; (800385c <HAL_GPIO_DeInit+0x20c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d101      	bne.n	80036fe <HAL_GPIO_DeInit+0xae>
 80036fa:	2309      	movs	r3, #9
 80036fc:	e012      	b.n	8003724 <HAL_GPIO_DeInit+0xd4>
 80036fe:	230a      	movs	r3, #10
 8003700:	e010      	b.n	8003724 <HAL_GPIO_DeInit+0xd4>
 8003702:	2308      	movs	r3, #8
 8003704:	e00e      	b.n	8003724 <HAL_GPIO_DeInit+0xd4>
 8003706:	2307      	movs	r3, #7
 8003708:	e00c      	b.n	8003724 <HAL_GPIO_DeInit+0xd4>
 800370a:	2306      	movs	r3, #6
 800370c:	e00a      	b.n	8003724 <HAL_GPIO_DeInit+0xd4>
 800370e:	2305      	movs	r3, #5
 8003710:	e008      	b.n	8003724 <HAL_GPIO_DeInit+0xd4>
 8003712:	2304      	movs	r3, #4
 8003714:	e006      	b.n	8003724 <HAL_GPIO_DeInit+0xd4>
 8003716:	2303      	movs	r3, #3
 8003718:	e004      	b.n	8003724 <HAL_GPIO_DeInit+0xd4>
 800371a:	2302      	movs	r3, #2
 800371c:	e002      	b.n	8003724 <HAL_GPIO_DeInit+0xd4>
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <HAL_GPIO_DeInit+0xd4>
 8003722:	2300      	movs	r3, #0
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	f002 0203 	and.w	r2, r2, #3
 800372a:	0092      	lsls	r2, r2, #2
 800372c:	4093      	lsls	r3, r2
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	429a      	cmp	r2, r3
 8003732:	d132      	bne.n	800379a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003734:	4b4a      	ldr	r3, [pc, #296]	; (8003860 <HAL_GPIO_DeInit+0x210>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	43db      	mvns	r3, r3
 800373c:	4948      	ldr	r1, [pc, #288]	; (8003860 <HAL_GPIO_DeInit+0x210>)
 800373e:	4013      	ands	r3, r2
 8003740:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003742:	4b47      	ldr	r3, [pc, #284]	; (8003860 <HAL_GPIO_DeInit+0x210>)
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	43db      	mvns	r3, r3
 800374a:	4945      	ldr	r1, [pc, #276]	; (8003860 <HAL_GPIO_DeInit+0x210>)
 800374c:	4013      	ands	r3, r2
 800374e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003750:	4b43      	ldr	r3, [pc, #268]	; (8003860 <HAL_GPIO_DeInit+0x210>)
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	43db      	mvns	r3, r3
 8003758:	4941      	ldr	r1, [pc, #260]	; (8003860 <HAL_GPIO_DeInit+0x210>)
 800375a:	4013      	ands	r3, r2
 800375c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800375e:	4b40      	ldr	r3, [pc, #256]	; (8003860 <HAL_GPIO_DeInit+0x210>)
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	43db      	mvns	r3, r3
 8003766:	493e      	ldr	r1, [pc, #248]	; (8003860 <HAL_GPIO_DeInit+0x210>)
 8003768:	4013      	ands	r3, r2
 800376a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	220f      	movs	r2, #15
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800377c:	4a2d      	ldr	r2, [pc, #180]	; (8003834 <HAL_GPIO_DeInit+0x1e4>)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	089b      	lsrs	r3, r3, #2
 8003782:	3302      	adds	r3, #2
 8003784:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	43da      	mvns	r2, r3
 800378c:	4829      	ldr	r0, [pc, #164]	; (8003834 <HAL_GPIO_DeInit+0x1e4>)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	089b      	lsrs	r3, r3, #2
 8003792:	400a      	ands	r2, r1
 8003794:	3302      	adds	r3, #2
 8003796:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	2103      	movs	r1, #3
 80037a4:	fa01 f303 	lsl.w	r3, r1, r3
 80037a8:	43db      	mvns	r3, r3
 80037aa:	401a      	ands	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	08da      	lsrs	r2, r3, #3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3208      	adds	r2, #8
 80037b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	220f      	movs	r2, #15
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	43db      	mvns	r3, r3
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	08d2      	lsrs	r2, r2, #3
 80037d0:	4019      	ands	r1, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3208      	adds	r2, #8
 80037d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	2103      	movs	r1, #3
 80037e4:	fa01 f303 	lsl.w	r3, r1, r3
 80037e8:	43db      	mvns	r3, r3
 80037ea:	401a      	ands	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	2101      	movs	r1, #1
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	fa01 f303 	lsl.w	r3, r1, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	401a      	ands	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	2103      	movs	r1, #3
 800380e:	fa01 f303 	lsl.w	r3, r1, r3
 8003812:	43db      	mvns	r3, r3
 8003814:	401a      	ands	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	3301      	adds	r3, #1
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2b0f      	cmp	r3, #15
 8003824:	f67f af22 	bls.w	800366c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003828:	bf00      	nop
 800382a:	371c      	adds	r7, #28
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	40013800 	.word	0x40013800
 8003838:	40020000 	.word	0x40020000
 800383c:	40020400 	.word	0x40020400
 8003840:	40020800 	.word	0x40020800
 8003844:	40020c00 	.word	0x40020c00
 8003848:	40021000 	.word	0x40021000
 800384c:	40021400 	.word	0x40021400
 8003850:	40021800 	.word	0x40021800
 8003854:	40021c00 	.word	0x40021c00
 8003858:	40022000 	.word	0x40022000
 800385c:	40022400 	.word	0x40022400
 8003860:	40013c00 	.word	0x40013c00

08003864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	807b      	strh	r3, [r7, #2]
 8003870:	4613      	mov	r3, r2
 8003872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003874:	787b      	ldrb	r3, [r7, #1]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800387a:	887a      	ldrh	r2, [r7, #2]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003880:	e003      	b.n	800388a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003882:	887b      	ldrh	r3, [r7, #2]
 8003884:	041a      	lsls	r2, r3, #16
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	619a      	str	r2, [r3, #24]
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e11f      	b.n	8003aea <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fe fb76 	bl	8001fb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2224      	movs	r2, #36	; 0x24
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038fc:	f001 f8b4 	bl	8004a68 <HAL_RCC_GetPCLK1Freq>
 8003900:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	4a7b      	ldr	r2, [pc, #492]	; (8003af4 <HAL_I2C_Init+0x25c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d807      	bhi.n	800391c <HAL_I2C_Init+0x84>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4a7a      	ldr	r2, [pc, #488]	; (8003af8 <HAL_I2C_Init+0x260>)
 8003910:	4293      	cmp	r3, r2
 8003912:	bf94      	ite	ls
 8003914:	2301      	movls	r3, #1
 8003916:	2300      	movhi	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	e006      	b.n	800392a <HAL_I2C_Init+0x92>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4a77      	ldr	r2, [pc, #476]	; (8003afc <HAL_I2C_Init+0x264>)
 8003920:	4293      	cmp	r3, r2
 8003922:	bf94      	ite	ls
 8003924:	2301      	movls	r3, #1
 8003926:	2300      	movhi	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e0db      	b.n	8003aea <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4a72      	ldr	r2, [pc, #456]	; (8003b00 <HAL_I2C_Init+0x268>)
 8003936:	fba2 2303 	umull	r2, r3, r2, r3
 800393a:	0c9b      	lsrs	r3, r3, #18
 800393c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	430a      	orrs	r2, r1
 8003950:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	4a64      	ldr	r2, [pc, #400]	; (8003af4 <HAL_I2C_Init+0x25c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d802      	bhi.n	800396c <HAL_I2C_Init+0xd4>
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	3301      	adds	r3, #1
 800396a:	e009      	b.n	8003980 <HAL_I2C_Init+0xe8>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003972:	fb02 f303 	mul.w	r3, r2, r3
 8003976:	4a63      	ldr	r2, [pc, #396]	; (8003b04 <HAL_I2C_Init+0x26c>)
 8003978:	fba2 2303 	umull	r2, r3, r2, r3
 800397c:	099b      	lsrs	r3, r3, #6
 800397e:	3301      	adds	r3, #1
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	430b      	orrs	r3, r1
 8003986:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003992:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	4956      	ldr	r1, [pc, #344]	; (8003af4 <HAL_I2C_Init+0x25c>)
 800399c:	428b      	cmp	r3, r1
 800399e:	d80d      	bhi.n	80039bc <HAL_I2C_Init+0x124>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	1e59      	subs	r1, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ae:	3301      	adds	r3, #1
 80039b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	bf38      	it	cc
 80039b8:	2304      	movcc	r3, #4
 80039ba:	e04f      	b.n	8003a5c <HAL_I2C_Init+0x1c4>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d111      	bne.n	80039e8 <HAL_I2C_Init+0x150>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	1e58      	subs	r0, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6859      	ldr	r1, [r3, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	440b      	add	r3, r1
 80039d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d6:	3301      	adds	r3, #1
 80039d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039dc:	2b00      	cmp	r3, #0
 80039de:	bf0c      	ite	eq
 80039e0:	2301      	moveq	r3, #1
 80039e2:	2300      	movne	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	e012      	b.n	8003a0e <HAL_I2C_Init+0x176>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	1e58      	subs	r0, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6859      	ldr	r1, [r3, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	0099      	lsls	r1, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fe:	3301      	adds	r3, #1
 8003a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bf0c      	ite	eq
 8003a08:	2301      	moveq	r3, #1
 8003a0a:	2300      	movne	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_I2C_Init+0x17e>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e022      	b.n	8003a5c <HAL_I2C_Init+0x1c4>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10e      	bne.n	8003a3c <HAL_I2C_Init+0x1a4>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1e58      	subs	r0, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6859      	ldr	r1, [r3, #4]
 8003a26:	460b      	mov	r3, r1
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	440b      	add	r3, r1
 8003a2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a30:	3301      	adds	r3, #1
 8003a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a3a:	e00f      	b.n	8003a5c <HAL_I2C_Init+0x1c4>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	1e58      	subs	r0, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6859      	ldr	r1, [r3, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	0099      	lsls	r1, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a52:	3301      	adds	r3, #1
 8003a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	6809      	ldr	r1, [r1, #0]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69da      	ldr	r2, [r3, #28]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6911      	ldr	r1, [r2, #16]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68d2      	ldr	r2, [r2, #12]
 8003a96:	4311      	orrs	r1, r2
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6812      	ldr	r2, [r2, #0]
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695a      	ldr	r2, [r3, #20]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	000186a0 	.word	0x000186a0
 8003af8:	001e847f 	.word	0x001e847f
 8003afc:	003d08ff 	.word	0x003d08ff
 8003b00:	431bde83 	.word	0x431bde83
 8003b04:	10624dd3 	.word	0x10624dd3

08003b08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d129      	bne.n	8003b72 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2224      	movs	r2, #36	; 0x24
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0201 	bic.w	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0210 	bic.w	r2, r2, #16
 8003b44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0201 	orr.w	r2, r2, #1
 8003b64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e000      	b.n	8003b74 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003b72:	2302      	movs	r3, #2
  }
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	d12a      	bne.n	8003bf0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2224      	movs	r2, #36	; 0x24
 8003b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0201 	bic.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003bba:	89fb      	ldrh	r3, [r7, #14]
 8003bbc:	f023 030f 	bic.w	r3, r3, #15
 8003bc0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	89fb      	ldrh	r3, [r7, #14]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	89fa      	ldrh	r2, [r7, #14]
 8003bd2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0201 	orr.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	e000      	b.n	8003bf2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003bf0:	2302      	movs	r3, #2
  }
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e0bf      	b.n	8003d92 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fe fa2c 	bl	8002084 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003c42:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6999      	ldr	r1, [r3, #24]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c58:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6899      	ldr	r1, [r3, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	4b4a      	ldr	r3, [pc, #296]	; (8003d9c <HAL_LTDC_Init+0x19c>)
 8003c74:	400b      	ands	r3, r1
 8003c76:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	041b      	lsls	r3, r3, #16
 8003c7e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6899      	ldr	r1, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68d9      	ldr	r1, [r3, #12]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	4b3e      	ldr	r3, [pc, #248]	; (8003d9c <HAL_LTDC_Init+0x19c>)
 8003ca2:	400b      	ands	r3, r1
 8003ca4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	041b      	lsls	r3, r3, #16
 8003cac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68d9      	ldr	r1, [r3, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1a      	ldr	r2, [r3, #32]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6919      	ldr	r1, [r3, #16]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	4b33      	ldr	r3, [pc, #204]	; (8003d9c <HAL_LTDC_Init+0x19c>)
 8003cd0:	400b      	ands	r3, r1
 8003cd2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	041b      	lsls	r3, r3, #16
 8003cda:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6919      	ldr	r1, [r3, #16]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6959      	ldr	r1, [r3, #20]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	4b27      	ldr	r3, [pc, #156]	; (8003d9c <HAL_LTDC_Init+0x19c>)
 8003cfe:	400b      	ands	r3, r1
 8003d00:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	041b      	lsls	r3, r3, #16
 8003d08:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6959      	ldr	r1, [r3, #20]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003d30:	041b      	lsls	r3, r3, #16
 8003d32:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0206 	orr.w	r2, r2, #6
 8003d6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699a      	ldr	r2, [r3, #24]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	f000f800 	.word	0xf000f800

08003da0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003da0:	b5b0      	push	{r4, r5, r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <HAL_LTDC_ConfigLayer+0x1a>
 8003db6:	2302      	movs	r3, #2
 8003db8:	e02c      	b.n	8003e14 <HAL_LTDC_ConfigLayer+0x74>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2134      	movs	r1, #52	; 0x34
 8003dd0:	fb01 f303 	mul.w	r3, r1, r3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	4614      	mov	r4, r2
 8003dde:	461d      	mov	r5, r3
 8003de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003de8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dec:	682b      	ldr	r3, [r5, #0]
 8003dee:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	68b9      	ldr	r1, [r7, #8]
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 f83b 	bl	8003e70 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bdb0      	pop	{r4, r5, r7, pc}

08003e1c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d101      	bne.n	8003e32 <HAL_LTDC_EnableDither+0x16>
 8003e2e:	2302      	movs	r3, #2
 8003e30:	e016      	b.n	8003e60 <HAL_LTDC_EnableDither+0x44>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003e42:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <HAL_LTDC_EnableDither+0x50>)
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	4a09      	ldr	r2, [pc, #36]	; (8003e6c <HAL_LTDC_EnableDither+0x50>)
 8003e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	40016800 	.word	0x40016800

08003e70 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b089      	sub	sp, #36	; 0x24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	0c1b      	lsrs	r3, r3, #16
 8003e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e8c:	4413      	add	r3, r2
 8003e8e:	041b      	lsls	r3, r3, #16
 8003e90:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	461a      	mov	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	01db      	lsls	r3, r3, #7
 8003e9c:	4413      	add	r3, r2
 8003e9e:	3384      	adds	r3, #132	; 0x84
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	6812      	ldr	r2, [r2, #0]
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	01d2      	lsls	r2, r2, #7
 8003eac:	440a      	add	r2, r1
 8003eae:	3284      	adds	r2, #132	; 0x84
 8003eb0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003eb4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	0c1b      	lsrs	r3, r3, #16
 8003ec2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec6:	4413      	add	r3, r2
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4619      	mov	r1, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	01db      	lsls	r3, r3, #7
 8003ed4:	440b      	add	r3, r1
 8003ed6:	3384      	adds	r3, #132	; 0x84
 8003ed8:	4619      	mov	r1, r3
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003eee:	4413      	add	r3, r2
 8003ef0:	041b      	lsls	r3, r3, #16
 8003ef2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	01db      	lsls	r3, r3, #7
 8003efe:	4413      	add	r3, r2
 8003f00:	3384      	adds	r3, #132	; 0x84
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	6812      	ldr	r2, [r2, #0]
 8003f08:	4611      	mov	r1, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	01d2      	lsls	r2, r2, #7
 8003f0e:	440a      	add	r2, r1
 8003f10:	3284      	adds	r2, #132	; 0x84
 8003f12:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003f16:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f26:	4413      	add	r3, r2
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4619      	mov	r1, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	01db      	lsls	r3, r3, #7
 8003f34:	440b      	add	r3, r1
 8003f36:	3384      	adds	r3, #132	; 0x84
 8003f38:	4619      	mov	r1, r3
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	01db      	lsls	r3, r3, #7
 8003f4a:	4413      	add	r3, r2
 8003f4c:	3384      	adds	r3, #132	; 0x84
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	4611      	mov	r1, r2
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	01d2      	lsls	r2, r2, #7
 8003f5a:	440a      	add	r2, r1
 8003f5c:	3284      	adds	r2, #132	; 0x84
 8003f5e:	f023 0307 	bic.w	r3, r3, #7
 8003f62:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	01db      	lsls	r3, r3, #7
 8003f6e:	4413      	add	r3, r2
 8003f70:	3384      	adds	r3, #132	; 0x84
 8003f72:	461a      	mov	r2, r3
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003f80:	021b      	lsls	r3, r3, #8
 8003f82:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003f8a:	041b      	lsls	r3, r3, #16
 8003f8c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	061b      	lsls	r3, r3, #24
 8003f94:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	01db      	lsls	r3, r3, #7
 8003fa0:	4413      	add	r3, r2
 8003fa2:	3384      	adds	r3, #132	; 0x84
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	461a      	mov	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	01db      	lsls	r3, r3, #7
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3384      	adds	r3, #132	; 0x84
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4619      	mov	r1, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	01db      	lsls	r3, r3, #7
 8003fd4:	440b      	add	r3, r1
 8003fd6:	3384      	adds	r3, #132	; 0x84
 8003fd8:	4619      	mov	r1, r3
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	01db      	lsls	r3, r3, #7
 8003fea:	4413      	add	r3, r2
 8003fec:	3384      	adds	r3, #132	; 0x84
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	01d2      	lsls	r2, r2, #7
 8003ffa:	440a      	add	r2, r1
 8003ffc:	3284      	adds	r2, #132	; 0x84
 8003ffe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004002:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	461a      	mov	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	01db      	lsls	r3, r3, #7
 800400e:	4413      	add	r3, r2
 8004010:	3384      	adds	r3, #132	; 0x84
 8004012:	461a      	mov	r2, r3
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	01db      	lsls	r3, r3, #7
 8004024:	4413      	add	r3, r2
 8004026:	3384      	adds	r3, #132	; 0x84
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	6812      	ldr	r2, [r2, #0]
 800402e:	4611      	mov	r1, r2
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	01d2      	lsls	r2, r2, #7
 8004034:	440a      	add	r2, r1
 8004036:	3284      	adds	r2, #132	; 0x84
 8004038:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800403c:	f023 0307 	bic.w	r3, r3, #7
 8004040:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	69da      	ldr	r2, [r3, #28]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	68f9      	ldr	r1, [r7, #12]
 800404c:	6809      	ldr	r1, [r1, #0]
 800404e:	4608      	mov	r0, r1
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	01c9      	lsls	r1, r1, #7
 8004054:	4401      	add	r1, r0
 8004056:	3184      	adds	r1, #132	; 0x84
 8004058:	4313      	orrs	r3, r2
 800405a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	461a      	mov	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	01db      	lsls	r3, r3, #7
 8004066:	4413      	add	r3, r2
 8004068:	3384      	adds	r3, #132	; 0x84
 800406a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	461a      	mov	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	01db      	lsls	r3, r3, #7
 8004076:	4413      	add	r3, r2
 8004078:	3384      	adds	r3, #132	; 0x84
 800407a:	461a      	mov	r2, r3
 800407c:	2300      	movs	r3, #0
 800407e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	461a      	mov	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	01db      	lsls	r3, r3, #7
 800408a:	4413      	add	r3, r2
 800408c:	3384      	adds	r3, #132	; 0x84
 800408e:	461a      	mov	r2, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d102      	bne.n	80040a4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800409e:	2304      	movs	r3, #4
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	e01b      	b.n	80040dc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d102      	bne.n	80040b2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80040ac:	2303      	movs	r3, #3
 80040ae:	61fb      	str	r3, [r7, #28]
 80040b0:	e014      	b.n	80040dc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d00b      	beq.n	80040d2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d007      	beq.n	80040d2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80040c6:	2b03      	cmp	r3, #3
 80040c8:	d003      	beq.n	80040d2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80040ce:	2b07      	cmp	r3, #7
 80040d0:	d102      	bne.n	80040d8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80040d2:	2302      	movs	r3, #2
 80040d4:	61fb      	str	r3, [r7, #28]
 80040d6:	e001      	b.n	80040dc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80040d8:	2301      	movs	r3, #1
 80040da:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	01db      	lsls	r3, r3, #7
 80040e6:	4413      	add	r3, r2
 80040e8:	3384      	adds	r3, #132	; 0x84
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	6812      	ldr	r2, [r2, #0]
 80040f0:	4611      	mov	r1, r2
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	01d2      	lsls	r2, r2, #7
 80040f6:	440a      	add	r2, r1
 80040f8:	3284      	adds	r2, #132	; 0x84
 80040fa:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80040fe:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004104:	69fa      	ldr	r2, [r7, #28]
 8004106:	fb02 f303 	mul.w	r3, r2, r3
 800410a:	041a      	lsls	r2, r3, #16
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	6859      	ldr	r1, [r3, #4]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	1acb      	subs	r3, r1, r3
 8004116:	69f9      	ldr	r1, [r7, #28]
 8004118:	fb01 f303 	mul.w	r3, r1, r3
 800411c:	3303      	adds	r3, #3
 800411e:	68f9      	ldr	r1, [r7, #12]
 8004120:	6809      	ldr	r1, [r1, #0]
 8004122:	4608      	mov	r0, r1
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	01c9      	lsls	r1, r1, #7
 8004128:	4401      	add	r1, r0
 800412a:	3184      	adds	r1, #132	; 0x84
 800412c:	4313      	orrs	r3, r2
 800412e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	461a      	mov	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	01db      	lsls	r3, r3, #7
 800413a:	4413      	add	r3, r2
 800413c:	3384      	adds	r3, #132	; 0x84
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	6812      	ldr	r2, [r2, #0]
 8004144:	4611      	mov	r1, r2
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	01d2      	lsls	r2, r2, #7
 800414a:	440a      	add	r2, r1
 800414c:	3284      	adds	r2, #132	; 0x84
 800414e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004152:	f023 0307 	bic.w	r3, r3, #7
 8004156:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	461a      	mov	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	01db      	lsls	r3, r3, #7
 8004162:	4413      	add	r3, r2
 8004164:	3384      	adds	r3, #132	; 0x84
 8004166:	461a      	mov	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	01db      	lsls	r3, r3, #7
 8004178:	4413      	add	r3, r2
 800417a:	3384      	adds	r3, #132	; 0x84
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	6812      	ldr	r2, [r2, #0]
 8004182:	4611      	mov	r1, r2
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	01d2      	lsls	r2, r2, #7
 8004188:	440a      	add	r2, r1
 800418a:	3284      	adds	r2, #132	; 0x84
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	6013      	str	r3, [r2, #0]
}
 8004192:	bf00      	nop
 8004194:	3724      	adds	r7, #36	; 0x24
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
	...

080041a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80041aa:	2300      	movs	r3, #0
 80041ac:	603b      	str	r3, [r7, #0]
 80041ae:	4b20      	ldr	r3, [pc, #128]	; (8004230 <HAL_PWREx_EnableOverDrive+0x90>)
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	4a1f      	ldr	r2, [pc, #124]	; (8004230 <HAL_PWREx_EnableOverDrive+0x90>)
 80041b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b8:	6413      	str	r3, [r2, #64]	; 0x40
 80041ba:	4b1d      	ldr	r3, [pc, #116]	; (8004230 <HAL_PWREx_EnableOverDrive+0x90>)
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c2:	603b      	str	r3, [r7, #0]
 80041c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80041c6:	4b1b      	ldr	r3, [pc, #108]	; (8004234 <HAL_PWREx_EnableOverDrive+0x94>)
 80041c8:	2201      	movs	r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041cc:	f7fe fb0e 	bl	80027ec <HAL_GetTick>
 80041d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041d2:	e009      	b.n	80041e8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041d4:	f7fe fb0a 	bl	80027ec <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041e2:	d901      	bls.n	80041e8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e01f      	b.n	8004228 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041e8:	4b13      	ldr	r3, [pc, #76]	; (8004238 <HAL_PWREx_EnableOverDrive+0x98>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f4:	d1ee      	bne.n	80041d4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80041f6:	4b11      	ldr	r3, [pc, #68]	; (800423c <HAL_PWREx_EnableOverDrive+0x9c>)
 80041f8:	2201      	movs	r2, #1
 80041fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041fc:	f7fe faf6 	bl	80027ec <HAL_GetTick>
 8004200:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004202:	e009      	b.n	8004218 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004204:	f7fe faf2 	bl	80027ec <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004212:	d901      	bls.n	8004218 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e007      	b.n	8004228 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004218:	4b07      	ldr	r3, [pc, #28]	; (8004238 <HAL_PWREx_EnableOverDrive+0x98>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004220:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004224:	d1ee      	bne.n	8004204 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40023800 	.word	0x40023800
 8004234:	420e0040 	.word	0x420e0040
 8004238:	40007000 	.word	0x40007000
 800423c:	420e0044 	.word	0x420e0044

08004240 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e25b      	b.n	800470a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d075      	beq.n	800434a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800425e:	4ba3      	ldr	r3, [pc, #652]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
 8004266:	2b04      	cmp	r3, #4
 8004268:	d00c      	beq.n	8004284 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800426a:	4ba0      	ldr	r3, [pc, #640]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004272:	2b08      	cmp	r3, #8
 8004274:	d112      	bne.n	800429c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004276:	4b9d      	ldr	r3, [pc, #628]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004282:	d10b      	bne.n	800429c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004284:	4b99      	ldr	r3, [pc, #612]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d05b      	beq.n	8004348 <HAL_RCC_OscConfig+0x108>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d157      	bne.n	8004348 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e236      	b.n	800470a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a4:	d106      	bne.n	80042b4 <HAL_RCC_OscConfig+0x74>
 80042a6:	4b91      	ldr	r3, [pc, #580]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a90      	ldr	r2, [pc, #576]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 80042ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	e01d      	b.n	80042f0 <HAL_RCC_OscConfig+0xb0>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042bc:	d10c      	bne.n	80042d8 <HAL_RCC_OscConfig+0x98>
 80042be:	4b8b      	ldr	r3, [pc, #556]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a8a      	ldr	r2, [pc, #552]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 80042c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	4b88      	ldr	r3, [pc, #544]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a87      	ldr	r2, [pc, #540]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 80042d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	e00b      	b.n	80042f0 <HAL_RCC_OscConfig+0xb0>
 80042d8:	4b84      	ldr	r3, [pc, #528]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a83      	ldr	r2, [pc, #524]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 80042de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	4b81      	ldr	r3, [pc, #516]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a80      	ldr	r2, [pc, #512]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 80042ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d013      	beq.n	8004320 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f8:	f7fe fa78 	bl	80027ec <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004300:	f7fe fa74 	bl	80027ec <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b64      	cmp	r3, #100	; 0x64
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e1fb      	b.n	800470a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004312:	4b76      	ldr	r3, [pc, #472]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0f0      	beq.n	8004300 <HAL_RCC_OscConfig+0xc0>
 800431e:	e014      	b.n	800434a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004320:	f7fe fa64 	bl	80027ec <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004328:	f7fe fa60 	bl	80027ec <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b64      	cmp	r3, #100	; 0x64
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e1e7      	b.n	800470a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800433a:	4b6c      	ldr	r3, [pc, #432]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f0      	bne.n	8004328 <HAL_RCC_OscConfig+0xe8>
 8004346:	e000      	b.n	800434a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d063      	beq.n	800441e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004356:	4b65      	ldr	r3, [pc, #404]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 030c 	and.w	r3, r3, #12
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00b      	beq.n	800437a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004362:	4b62      	ldr	r3, [pc, #392]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800436a:	2b08      	cmp	r3, #8
 800436c:	d11c      	bne.n	80043a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800436e:	4b5f      	ldr	r3, [pc, #380]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d116      	bne.n	80043a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800437a:	4b5c      	ldr	r3, [pc, #368]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d005      	beq.n	8004392 <HAL_RCC_OscConfig+0x152>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d001      	beq.n	8004392 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e1bb      	b.n	800470a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004392:	4b56      	ldr	r3, [pc, #344]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	4952      	ldr	r1, [pc, #328]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043a6:	e03a      	b.n	800441e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d020      	beq.n	80043f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043b0:	4b4f      	ldr	r3, [pc, #316]	; (80044f0 <HAL_RCC_OscConfig+0x2b0>)
 80043b2:	2201      	movs	r2, #1
 80043b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b6:	f7fe fa19 	bl	80027ec <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043be:	f7fe fa15 	bl	80027ec <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e19c      	b.n	800470a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d0:	4b46      	ldr	r3, [pc, #280]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043dc:	4b43      	ldr	r3, [pc, #268]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	4940      	ldr	r1, [pc, #256]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	600b      	str	r3, [r1, #0]
 80043f0:	e015      	b.n	800441e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043f2:	4b3f      	ldr	r3, [pc, #252]	; (80044f0 <HAL_RCC_OscConfig+0x2b0>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f8:	f7fe f9f8 	bl	80027ec <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004400:	f7fe f9f4 	bl	80027ec <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e17b      	b.n	800470a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004412:	4b36      	ldr	r3, [pc, #216]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f0      	bne.n	8004400 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0308 	and.w	r3, r3, #8
 8004426:	2b00      	cmp	r3, #0
 8004428:	d030      	beq.n	800448c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d016      	beq.n	8004460 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004432:	4b30      	ldr	r3, [pc, #192]	; (80044f4 <HAL_RCC_OscConfig+0x2b4>)
 8004434:	2201      	movs	r2, #1
 8004436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004438:	f7fe f9d8 	bl	80027ec <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004440:	f7fe f9d4 	bl	80027ec <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e15b      	b.n	800470a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004452:	4b26      	ldr	r3, [pc, #152]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 8004454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <HAL_RCC_OscConfig+0x200>
 800445e:	e015      	b.n	800448c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004460:	4b24      	ldr	r3, [pc, #144]	; (80044f4 <HAL_RCC_OscConfig+0x2b4>)
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004466:	f7fe f9c1 	bl	80027ec <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800446e:	f7fe f9bd 	bl	80027ec <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e144      	b.n	800470a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004480:	4b1a      	ldr	r3, [pc, #104]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 8004482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f0      	bne.n	800446e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 80a0 	beq.w	80045da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800449a:	2300      	movs	r3, #0
 800449c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800449e:	4b13      	ldr	r3, [pc, #76]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10f      	bne.n	80044ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044aa:	2300      	movs	r3, #0
 80044ac:	60bb      	str	r3, [r7, #8]
 80044ae:	4b0f      	ldr	r3, [pc, #60]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	4a0e      	ldr	r2, [pc, #56]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 80044b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b8:	6413      	str	r3, [r2, #64]	; 0x40
 80044ba:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <HAL_RCC_OscConfig+0x2ac>)
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c2:	60bb      	str	r3, [r7, #8]
 80044c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044c6:	2301      	movs	r3, #1
 80044c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ca:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <HAL_RCC_OscConfig+0x2b8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d121      	bne.n	800451a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044d6:	4b08      	ldr	r3, [pc, #32]	; (80044f8 <HAL_RCC_OscConfig+0x2b8>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a07      	ldr	r2, [pc, #28]	; (80044f8 <HAL_RCC_OscConfig+0x2b8>)
 80044dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044e2:	f7fe f983 	bl	80027ec <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e8:	e011      	b.n	800450e <HAL_RCC_OscConfig+0x2ce>
 80044ea:	bf00      	nop
 80044ec:	40023800 	.word	0x40023800
 80044f0:	42470000 	.word	0x42470000
 80044f4:	42470e80 	.word	0x42470e80
 80044f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044fc:	f7fe f976 	bl	80027ec <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e0fd      	b.n	800470a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450e:	4b81      	ldr	r3, [pc, #516]	; (8004714 <HAL_RCC_OscConfig+0x4d4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d106      	bne.n	8004530 <HAL_RCC_OscConfig+0x2f0>
 8004522:	4b7d      	ldr	r3, [pc, #500]	; (8004718 <HAL_RCC_OscConfig+0x4d8>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	4a7c      	ldr	r2, [pc, #496]	; (8004718 <HAL_RCC_OscConfig+0x4d8>)
 8004528:	f043 0301 	orr.w	r3, r3, #1
 800452c:	6713      	str	r3, [r2, #112]	; 0x70
 800452e:	e01c      	b.n	800456a <HAL_RCC_OscConfig+0x32a>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	2b05      	cmp	r3, #5
 8004536:	d10c      	bne.n	8004552 <HAL_RCC_OscConfig+0x312>
 8004538:	4b77      	ldr	r3, [pc, #476]	; (8004718 <HAL_RCC_OscConfig+0x4d8>)
 800453a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453c:	4a76      	ldr	r2, [pc, #472]	; (8004718 <HAL_RCC_OscConfig+0x4d8>)
 800453e:	f043 0304 	orr.w	r3, r3, #4
 8004542:	6713      	str	r3, [r2, #112]	; 0x70
 8004544:	4b74      	ldr	r3, [pc, #464]	; (8004718 <HAL_RCC_OscConfig+0x4d8>)
 8004546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004548:	4a73      	ldr	r2, [pc, #460]	; (8004718 <HAL_RCC_OscConfig+0x4d8>)
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	6713      	str	r3, [r2, #112]	; 0x70
 8004550:	e00b      	b.n	800456a <HAL_RCC_OscConfig+0x32a>
 8004552:	4b71      	ldr	r3, [pc, #452]	; (8004718 <HAL_RCC_OscConfig+0x4d8>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004556:	4a70      	ldr	r2, [pc, #448]	; (8004718 <HAL_RCC_OscConfig+0x4d8>)
 8004558:	f023 0301 	bic.w	r3, r3, #1
 800455c:	6713      	str	r3, [r2, #112]	; 0x70
 800455e:	4b6e      	ldr	r3, [pc, #440]	; (8004718 <HAL_RCC_OscConfig+0x4d8>)
 8004560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004562:	4a6d      	ldr	r2, [pc, #436]	; (8004718 <HAL_RCC_OscConfig+0x4d8>)
 8004564:	f023 0304 	bic.w	r3, r3, #4
 8004568:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d015      	beq.n	800459e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004572:	f7fe f93b 	bl	80027ec <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004578:	e00a      	b.n	8004590 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800457a:	f7fe f937 	bl	80027ec <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	f241 3288 	movw	r2, #5000	; 0x1388
 8004588:	4293      	cmp	r3, r2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e0bc      	b.n	800470a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004590:	4b61      	ldr	r3, [pc, #388]	; (8004718 <HAL_RCC_OscConfig+0x4d8>)
 8004592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0ee      	beq.n	800457a <HAL_RCC_OscConfig+0x33a>
 800459c:	e014      	b.n	80045c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800459e:	f7fe f925 	bl	80027ec <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a4:	e00a      	b.n	80045bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045a6:	f7fe f921 	bl	80027ec <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e0a6      	b.n	800470a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045bc:	4b56      	ldr	r3, [pc, #344]	; (8004718 <HAL_RCC_OscConfig+0x4d8>)
 80045be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1ee      	bne.n	80045a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045c8:	7dfb      	ldrb	r3, [r7, #23]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d105      	bne.n	80045da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ce:	4b52      	ldr	r3, [pc, #328]	; (8004718 <HAL_RCC_OscConfig+0x4d8>)
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	4a51      	ldr	r2, [pc, #324]	; (8004718 <HAL_RCC_OscConfig+0x4d8>)
 80045d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 8092 	beq.w	8004708 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045e4:	4b4c      	ldr	r3, [pc, #304]	; (8004718 <HAL_RCC_OscConfig+0x4d8>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f003 030c 	and.w	r3, r3, #12
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d05c      	beq.n	80046aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d141      	bne.n	800467c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f8:	4b48      	ldr	r3, [pc, #288]	; (800471c <HAL_RCC_OscConfig+0x4dc>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fe:	f7fe f8f5 	bl	80027ec <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004606:	f7fe f8f1 	bl	80027ec <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e078      	b.n	800470a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004618:	4b3f      	ldr	r3, [pc, #252]	; (8004718 <HAL_RCC_OscConfig+0x4d8>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1f0      	bne.n	8004606 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	69da      	ldr	r2, [r3, #28]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	019b      	lsls	r3, r3, #6
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463a:	085b      	lsrs	r3, r3, #1
 800463c:	3b01      	subs	r3, #1
 800463e:	041b      	lsls	r3, r3, #16
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004646:	061b      	lsls	r3, r3, #24
 8004648:	4933      	ldr	r1, [pc, #204]	; (8004718 <HAL_RCC_OscConfig+0x4d8>)
 800464a:	4313      	orrs	r3, r2
 800464c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800464e:	4b33      	ldr	r3, [pc, #204]	; (800471c <HAL_RCC_OscConfig+0x4dc>)
 8004650:	2201      	movs	r2, #1
 8004652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004654:	f7fe f8ca 	bl	80027ec <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800465c:	f7fe f8c6 	bl	80027ec <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e04d      	b.n	800470a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800466e:	4b2a      	ldr	r3, [pc, #168]	; (8004718 <HAL_RCC_OscConfig+0x4d8>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f0      	beq.n	800465c <HAL_RCC_OscConfig+0x41c>
 800467a:	e045      	b.n	8004708 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800467c:	4b27      	ldr	r3, [pc, #156]	; (800471c <HAL_RCC_OscConfig+0x4dc>)
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004682:	f7fe f8b3 	bl	80027ec <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800468a:	f7fe f8af 	bl	80027ec <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e036      	b.n	800470a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469c:	4b1e      	ldr	r3, [pc, #120]	; (8004718 <HAL_RCC_OscConfig+0x4d8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f0      	bne.n	800468a <HAL_RCC_OscConfig+0x44a>
 80046a8:	e02e      	b.n	8004708 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d101      	bne.n	80046b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e029      	b.n	800470a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046b6:	4b18      	ldr	r3, [pc, #96]	; (8004718 <HAL_RCC_OscConfig+0x4d8>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d11c      	bne.n	8004704 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d115      	bne.n	8004704 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046de:	4013      	ands	r3, r2
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d10d      	bne.n	8004704 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d106      	bne.n	8004704 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004700:	429a      	cmp	r2, r3
 8004702:	d001      	beq.n	8004708 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e000      	b.n	800470a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40007000 	.word	0x40007000
 8004718:	40023800 	.word	0x40023800
 800471c:	42470060 	.word	0x42470060

08004720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e0cc      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004734:	4b68      	ldr	r3, [pc, #416]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d90c      	bls.n	800475c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004742:	4b65      	ldr	r3, [pc, #404]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800474a:	4b63      	ldr	r3, [pc, #396]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d001      	beq.n	800475c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0b8      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d020      	beq.n	80047aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004774:	4b59      	ldr	r3, [pc, #356]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	4a58      	ldr	r2, [pc, #352]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800477e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800478c:	4b53      	ldr	r3, [pc, #332]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	4a52      	ldr	r2, [pc, #328]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004798:	4b50      	ldr	r3, [pc, #320]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	494d      	ldr	r1, [pc, #308]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d044      	beq.n	8004840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d107      	bne.n	80047ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047be:	4b47      	ldr	r3, [pc, #284]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d119      	bne.n	80047fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e07f      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d003      	beq.n	80047de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047da:	2b03      	cmp	r3, #3
 80047dc:	d107      	bne.n	80047ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047de:	4b3f      	ldr	r3, [pc, #252]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d109      	bne.n	80047fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e06f      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ee:	4b3b      	ldr	r3, [pc, #236]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e067      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047fe:	4b37      	ldr	r3, [pc, #220]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f023 0203 	bic.w	r2, r3, #3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	4934      	ldr	r1, [pc, #208]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 800480c:	4313      	orrs	r3, r2
 800480e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004810:	f7fd ffec 	bl	80027ec <HAL_GetTick>
 8004814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004816:	e00a      	b.n	800482e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004818:	f7fd ffe8 	bl	80027ec <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	f241 3288 	movw	r2, #5000	; 0x1388
 8004826:	4293      	cmp	r3, r2
 8004828:	d901      	bls.n	800482e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e04f      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482e:	4b2b      	ldr	r3, [pc, #172]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 020c 	and.w	r2, r3, #12
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	429a      	cmp	r2, r3
 800483e:	d1eb      	bne.n	8004818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004840:	4b25      	ldr	r3, [pc, #148]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d20c      	bcs.n	8004868 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484e:	4b22      	ldr	r3, [pc, #136]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	4b20      	ldr	r3, [pc, #128]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d001      	beq.n	8004868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e032      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d008      	beq.n	8004886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004874:	4b19      	ldr	r3, [pc, #100]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4916      	ldr	r1, [pc, #88]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	4313      	orrs	r3, r2
 8004884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d009      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004892:	4b12      	ldr	r3, [pc, #72]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	490e      	ldr	r1, [pc, #56]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048a6:	f000 f821 	bl	80048ec <HAL_RCC_GetSysClockFreq>
 80048aa:	4601      	mov	r1, r0
 80048ac:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	4a0a      	ldr	r2, [pc, #40]	; (80048e0 <HAL_RCC_ClockConfig+0x1c0>)
 80048b8:	5cd3      	ldrb	r3, [r2, r3]
 80048ba:	fa21 f303 	lsr.w	r3, r1, r3
 80048be:	4a09      	ldr	r2, [pc, #36]	; (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 80048c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048c2:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <HAL_RCC_ClockConfig+0x1c8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fd ff4c 	bl	8002764 <HAL_InitTick>

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40023c00 	.word	0x40023c00
 80048dc:	40023800 	.word	0x40023800
 80048e0:	08008a6c 	.word	0x08008a6c
 80048e4:	20000044 	.word	0x20000044
 80048e8:	20000048 	.word	0x20000048

080048ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	607b      	str	r3, [r7, #4]
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	2300      	movs	r3, #0
 80048fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004902:	4b50      	ldr	r3, [pc, #320]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x158>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 030c 	and.w	r3, r3, #12
 800490a:	2b04      	cmp	r3, #4
 800490c:	d007      	beq.n	800491e <HAL_RCC_GetSysClockFreq+0x32>
 800490e:	2b08      	cmp	r3, #8
 8004910:	d008      	beq.n	8004924 <HAL_RCC_GetSysClockFreq+0x38>
 8004912:	2b00      	cmp	r3, #0
 8004914:	f040 808d 	bne.w	8004a32 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004918:	4b4b      	ldr	r3, [pc, #300]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x15c>)
 800491a:	60bb      	str	r3, [r7, #8]
       break;
 800491c:	e08c      	b.n	8004a38 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800491e:	4b4b      	ldr	r3, [pc, #300]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x160>)
 8004920:	60bb      	str	r3, [r7, #8]
      break;
 8004922:	e089      	b.n	8004a38 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004924:	4b47      	ldr	r3, [pc, #284]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x158>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800492c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800492e:	4b45      	ldr	r3, [pc, #276]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x158>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d023      	beq.n	8004982 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800493a:	4b42      	ldr	r3, [pc, #264]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x158>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	099b      	lsrs	r3, r3, #6
 8004940:	f04f 0400 	mov.w	r4, #0
 8004944:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	ea03 0501 	and.w	r5, r3, r1
 8004950:	ea04 0602 	and.w	r6, r4, r2
 8004954:	4a3d      	ldr	r2, [pc, #244]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x160>)
 8004956:	fb02 f106 	mul.w	r1, r2, r6
 800495a:	2200      	movs	r2, #0
 800495c:	fb02 f205 	mul.w	r2, r2, r5
 8004960:	440a      	add	r2, r1
 8004962:	493a      	ldr	r1, [pc, #232]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x160>)
 8004964:	fba5 0101 	umull	r0, r1, r5, r1
 8004968:	1853      	adds	r3, r2, r1
 800496a:	4619      	mov	r1, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f04f 0400 	mov.w	r4, #0
 8004972:	461a      	mov	r2, r3
 8004974:	4623      	mov	r3, r4
 8004976:	f7fb fc39 	bl	80001ec <__aeabi_uldivmod>
 800497a:	4603      	mov	r3, r0
 800497c:	460c      	mov	r4, r1
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	e049      	b.n	8004a16 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004982:	4b30      	ldr	r3, [pc, #192]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x158>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	099b      	lsrs	r3, r3, #6
 8004988:	f04f 0400 	mov.w	r4, #0
 800498c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004990:	f04f 0200 	mov.w	r2, #0
 8004994:	ea03 0501 	and.w	r5, r3, r1
 8004998:	ea04 0602 	and.w	r6, r4, r2
 800499c:	4629      	mov	r1, r5
 800499e:	4632      	mov	r2, r6
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	f04f 0400 	mov.w	r4, #0
 80049a8:	0154      	lsls	r4, r2, #5
 80049aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80049ae:	014b      	lsls	r3, r1, #5
 80049b0:	4619      	mov	r1, r3
 80049b2:	4622      	mov	r2, r4
 80049b4:	1b49      	subs	r1, r1, r5
 80049b6:	eb62 0206 	sbc.w	r2, r2, r6
 80049ba:	f04f 0300 	mov.w	r3, #0
 80049be:	f04f 0400 	mov.w	r4, #0
 80049c2:	0194      	lsls	r4, r2, #6
 80049c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049c8:	018b      	lsls	r3, r1, #6
 80049ca:	1a5b      	subs	r3, r3, r1
 80049cc:	eb64 0402 	sbc.w	r4, r4, r2
 80049d0:	f04f 0100 	mov.w	r1, #0
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	00e2      	lsls	r2, r4, #3
 80049da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049de:	00d9      	lsls	r1, r3, #3
 80049e0:	460b      	mov	r3, r1
 80049e2:	4614      	mov	r4, r2
 80049e4:	195b      	adds	r3, r3, r5
 80049e6:	eb44 0406 	adc.w	r4, r4, r6
 80049ea:	f04f 0100 	mov.w	r1, #0
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	02a2      	lsls	r2, r4, #10
 80049f4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80049f8:	0299      	lsls	r1, r3, #10
 80049fa:	460b      	mov	r3, r1
 80049fc:	4614      	mov	r4, r2
 80049fe:	4618      	mov	r0, r3
 8004a00:	4621      	mov	r1, r4
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f04f 0400 	mov.w	r4, #0
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4623      	mov	r3, r4
 8004a0c:	f7fb fbee 	bl	80001ec <__aeabi_uldivmod>
 8004a10:	4603      	mov	r3, r0
 8004a12:	460c      	mov	r4, r1
 8004a14:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a16:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x158>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	0c1b      	lsrs	r3, r3, #16
 8004a1c:	f003 0303 	and.w	r3, r3, #3
 8004a20:	3301      	adds	r3, #1
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2e:	60bb      	str	r3, [r7, #8]
      break;
 8004a30:	e002      	b.n	8004a38 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a32:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004a34:	60bb      	str	r3, [r7, #8]
      break;
 8004a36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a38:	68bb      	ldr	r3, [r7, #8]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a42:	bf00      	nop
 8004a44:	40023800 	.word	0x40023800
 8004a48:	00f42400 	.word	0x00f42400
 8004a4c:	017d7840 	.word	0x017d7840

08004a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a54:	4b03      	ldr	r3, [pc, #12]	; (8004a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a56:	681b      	ldr	r3, [r3, #0]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	20000044 	.word	0x20000044

08004a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a6c:	f7ff fff0 	bl	8004a50 <HAL_RCC_GetHCLKFreq>
 8004a70:	4601      	mov	r1, r0
 8004a72:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	0a9b      	lsrs	r3, r3, #10
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	4a03      	ldr	r2, [pc, #12]	; (8004a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a7e:	5cd3      	ldrb	r3, [r2, r3]
 8004a80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40023800 	.word	0x40023800
 8004a8c:	08008a7c 	.word	0x08008a7c

08004a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a94:	f7ff ffdc 	bl	8004a50 <HAL_RCC_GetHCLKFreq>
 8004a98:	4601      	mov	r1, r0
 8004a9a:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	0b5b      	lsrs	r3, r3, #13
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	4a03      	ldr	r2, [pc, #12]	; (8004ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aa6:	5cd3      	ldrb	r3, [r2, r3]
 8004aa8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	08008a7c 	.word	0x08008a7c

08004ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10b      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d105      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d075      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004aec:	4bad      	ldr	r3, [pc, #692]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004af2:	f7fd fe7b 	bl	80027ec <HAL_GetTick>
 8004af6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004af8:	e008      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004afa:	f7fd fe77 	bl	80027ec <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d901      	bls.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e18b      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b0c:	4ba6      	ldr	r3, [pc, #664]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1f0      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d009      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	019a      	lsls	r2, r3, #6
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	071b      	lsls	r3, r3, #28
 8004b30:	499d      	ldr	r1, [pc, #628]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d01f      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b44:	4b98      	ldr	r3, [pc, #608]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b4a:	0f1b      	lsrs	r3, r3, #28
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	019a      	lsls	r2, r3, #6
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	061b      	lsls	r3, r3, #24
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	071b      	lsls	r3, r3, #28
 8004b64:	4990      	ldr	r1, [pc, #576]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b6c:	4b8e      	ldr	r3, [pc, #568]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b72:	f023 021f 	bic.w	r2, r3, #31
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	498a      	ldr	r1, [pc, #552]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00d      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	019a      	lsls	r2, r3, #6
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	061b      	lsls	r3, r3, #24
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	071b      	lsls	r3, r3, #28
 8004ba4:	4980      	ldr	r1, [pc, #512]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bac:	4b7d      	ldr	r3, [pc, #500]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004bae:	2201      	movs	r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bb2:	f7fd fe1b 	bl	80027ec <HAL_GetTick>
 8004bb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bb8:	e008      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bba:	f7fd fe17 	bl	80027ec <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e12b      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bcc:	4b76      	ldr	r3, [pc, #472]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0f0      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d105      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d079      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004bf0:	4b6e      	ldr	r3, [pc, #440]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bf6:	f7fd fdf9 	bl	80027ec <HAL_GetTick>
 8004bfa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bfc:	e008      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004bfe:	f7fd fdf5 	bl	80027ec <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e109      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c10:	4b65      	ldr	r3, [pc, #404]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c1c:	d0ef      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d020      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c2a:	4b5f      	ldr	r3, [pc, #380]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c30:	0f1b      	lsrs	r3, r3, #28
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	019a      	lsls	r2, r3, #6
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	061b      	lsls	r3, r3, #24
 8004c44:	431a      	orrs	r2, r3
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	071b      	lsls	r3, r3, #28
 8004c4a:	4957      	ldr	r1, [pc, #348]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c52:	4b55      	ldr	r3, [pc, #340]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c58:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	021b      	lsls	r3, r3, #8
 8004c64:	4950      	ldr	r1, [pc, #320]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d01e      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c78:	4b4b      	ldr	r3, [pc, #300]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7e:	0e1b      	lsrs	r3, r3, #24
 8004c80:	f003 030f 	and.w	r3, r3, #15
 8004c84:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	019a      	lsls	r2, r3, #6
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	061b      	lsls	r3, r3, #24
 8004c90:	431a      	orrs	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	071b      	lsls	r3, r3, #28
 8004c98:	4943      	ldr	r1, [pc, #268]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ca0:	4b41      	ldr	r3, [pc, #260]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ca6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	493e      	ldr	r1, [pc, #248]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004cb6:	4b3d      	ldr	r3, [pc, #244]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cb8:	2201      	movs	r2, #1
 8004cba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cbc:	f7fd fd96 	bl	80027ec <HAL_GetTick>
 8004cc0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004cc4:	f7fd fd92 	bl	80027ec <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e0a6      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cd6:	4b34      	ldr	r3, [pc, #208]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ce2:	d1ef      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0320 	and.w	r3, r3, #32
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 808d 	beq.w	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	4b2c      	ldr	r3, [pc, #176]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	4a2b      	ldr	r2, [pc, #172]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d00:	6413      	str	r3, [r2, #64]	; 0x40
 8004d02:	4b29      	ldr	r3, [pc, #164]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d0e:	4b28      	ldr	r3, [pc, #160]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a27      	ldr	r2, [pc, #156]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d18:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d1a:	f7fd fd67 	bl	80027ec <HAL_GetTick>
 8004d1e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d20:	e008      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d22:	f7fd fd63 	bl	80027ec <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e077      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d34:	4b1e      	ldr	r3, [pc, #120]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0f0      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d40:	4b19      	ldr	r3, [pc, #100]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d48:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d039      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d032      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d5e:	4b12      	ldr	r3, [pc, #72]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d66:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d68:	4b12      	ldr	r3, [pc, #72]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d6e:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d74:	4a0c      	ldr	r2, [pc, #48]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d11e      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d86:	f7fd fd31 	bl	80027ec <HAL_GetTick>
 8004d8a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d8c:	e014      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d8e:	f7fd fd2d 	bl	80027ec <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d90b      	bls.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e03f      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8004da4:	42470068 	.word	0x42470068
 8004da8:	40023800 	.word	0x40023800
 8004dac:	42470070 	.word	0x42470070
 8004db0:	40007000 	.word	0x40007000
 8004db4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db8:	4b1c      	ldr	r3, [pc, #112]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0e4      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dd0:	d10d      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004dd2:	4b16      	ldr	r3, [pc, #88]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dde:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de6:	4911      	ldr	r1, [pc, #68]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	608b      	str	r3, [r1, #8]
 8004dec:	e005      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004dee:	4b0f      	ldr	r3, [pc, #60]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	4a0e      	ldr	r2, [pc, #56]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004df4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004df8:	6093      	str	r3, [r2, #8]
 8004dfa:	4b0c      	ldr	r3, [pc, #48]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004dfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e06:	4909      	ldr	r1, [pc, #36]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0310 	and.w	r3, r3, #16
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d004      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004e1e:	4b04      	ldr	r3, [pc, #16]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004e20:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3718      	adds	r7, #24
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	424711e0 	.word	0x424711e0

08004e34 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e025      	b.n	8004e94 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d106      	bne.n	8004e62 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7fd fb5f 	bl	8002520 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2202      	movs	r2, #2
 8004e66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3304      	adds	r3, #4
 8004e72:	4619      	mov	r1, r3
 8004e74:	4610      	mov	r0, r2
 8004e76:	f001 fa93 	bl	80063a0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6818      	ldr	r0, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	461a      	mov	r2, r3
 8004e84:	6839      	ldr	r1, [r7, #0]
 8004e86:	f001 fafe 	bl	8006486 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d101      	bne.n	8004eb8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	e018      	b.n	8004eea <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	68b9      	ldr	r1, [r7, #8]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f001 fb5b 	bl	8006584 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d104      	bne.n	8004ee0 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2205      	movs	r2, #5
 8004eda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004ede:	e003      	b.n	8004ee8 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b082      	sub	sp, #8
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d101      	bne.n	8004f0c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e00e      	b.n	8004f2a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6839      	ldr	r1, [r7, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f001 fb6e 	bl	80065fc <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b082      	sub	sp, #8
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e056      	b.n	8004ff2 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7fd f99e 	bl	80022a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	431a      	orrs	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	ea42 0103 	orr.w	r1, r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	0c1b      	lsrs	r3, r3, #16
 8004fc2:	f003 0104 	and.w	r1, r3, #4
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69da      	ldr	r2, [r3, #28]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fe0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b082      	sub	sp, #8
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e01a      	b.n	8005042 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005022:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7fd f983 	bl	8002330 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b088      	sub	sp, #32
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	60b9      	str	r1, [r7, #8]
 8005054:	603b      	str	r3, [r7, #0]
 8005056:	4613      	mov	r3, r2
 8005058:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005064:	2b01      	cmp	r3, #1
 8005066:	d101      	bne.n	800506c <HAL_SPI_Transmit+0x22>
 8005068:	2302      	movs	r3, #2
 800506a:	e11e      	b.n	80052aa <HAL_SPI_Transmit+0x260>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005074:	f7fd fbba 	bl	80027ec <HAL_GetTick>
 8005078:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800507a:	88fb      	ldrh	r3, [r7, #6]
 800507c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b01      	cmp	r3, #1
 8005088:	d002      	beq.n	8005090 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800508a:	2302      	movs	r3, #2
 800508c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800508e:	e103      	b.n	8005298 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <HAL_SPI_Transmit+0x52>
 8005096:	88fb      	ldrh	r3, [r7, #6]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d102      	bne.n	80050a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050a0:	e0fa      	b.n	8005298 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2203      	movs	r2, #3
 80050a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	88fa      	ldrh	r2, [r7, #6]
 80050ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	88fa      	ldrh	r2, [r7, #6]
 80050c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e8:	d107      	bne.n	80050fa <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005104:	2b40      	cmp	r3, #64	; 0x40
 8005106:	d007      	beq.n	8005118 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005116:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005120:	d14b      	bne.n	80051ba <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <HAL_SPI_Transmit+0xe6>
 800512a:	8afb      	ldrh	r3, [r7, #22]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d13e      	bne.n	80051ae <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005134:	881a      	ldrh	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005140:	1c9a      	adds	r2, r3, #2
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800514a:	b29b      	uxth	r3, r3
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005154:	e02b      	b.n	80051ae <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b02      	cmp	r3, #2
 8005162:	d112      	bne.n	800518a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005168:	881a      	ldrh	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005174:	1c9a      	adds	r2, r3, #2
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800517e:	b29b      	uxth	r3, r3
 8005180:	3b01      	subs	r3, #1
 8005182:	b29a      	uxth	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	86da      	strh	r2, [r3, #54]	; 0x36
 8005188:	e011      	b.n	80051ae <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800518a:	f7fd fb2f 	bl	80027ec <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d803      	bhi.n	80051a2 <HAL_SPI_Transmit+0x158>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a0:	d102      	bne.n	80051a8 <HAL_SPI_Transmit+0x15e>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d102      	bne.n	80051ae <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051ac:	e074      	b.n	8005298 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1ce      	bne.n	8005156 <HAL_SPI_Transmit+0x10c>
 80051b8:	e04c      	b.n	8005254 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d002      	beq.n	80051c8 <HAL_SPI_Transmit+0x17e>
 80051c2:	8afb      	ldrh	r3, [r7, #22]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d140      	bne.n	800524a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	330c      	adds	r3, #12
 80051d2:	7812      	ldrb	r2, [r2, #0]
 80051d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80051ee:	e02c      	b.n	800524a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d113      	bne.n	8005226 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	330c      	adds	r3, #12
 8005208:	7812      	ldrb	r2, [r2, #0]
 800520a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800521a:	b29b      	uxth	r3, r3
 800521c:	3b01      	subs	r3, #1
 800521e:	b29a      	uxth	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	86da      	strh	r2, [r3, #54]	; 0x36
 8005224:	e011      	b.n	800524a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005226:	f7fd fae1 	bl	80027ec <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	429a      	cmp	r2, r3
 8005234:	d803      	bhi.n	800523e <HAL_SPI_Transmit+0x1f4>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523c:	d102      	bne.n	8005244 <HAL_SPI_Transmit+0x1fa>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d102      	bne.n	800524a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005248:	e026      	b.n	8005298 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800524e:	b29b      	uxth	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1cd      	bne.n	80051f0 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	6839      	ldr	r1, [r7, #0]
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 fbb3 	bl	80059c4 <SPI_EndRxTxTransaction>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d002      	beq.n	800526a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2220      	movs	r2, #32
 8005268:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10a      	bne.n	8005288 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005272:	2300      	movs	r3, #0
 8005274:	613b      	str	r3, [r7, #16]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	613b      	str	r3, [r7, #16]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	613b      	str	r3, [r7, #16]
 8005286:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	77fb      	strb	r3, [r7, #31]
 8005294:	e000      	b.n	8005298 <HAL_SPI_Transmit+0x24e>
  }

error:
 8005296:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3720      	adds	r7, #32
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b088      	sub	sp, #32
 80052b6:	af02      	add	r7, sp, #8
 80052b8:	60f8      	str	r0, [r7, #12]
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	603b      	str	r3, [r7, #0]
 80052be:	4613      	mov	r3, r2
 80052c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052ce:	d112      	bne.n	80052f6 <HAL_SPI_Receive+0x44>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10e      	bne.n	80052f6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2204      	movs	r2, #4
 80052dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80052e0:	88fa      	ldrh	r2, [r7, #6]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	4613      	mov	r3, r2
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	68b9      	ldr	r1, [r7, #8]
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f8e9 	bl	80054c4 <HAL_SPI_TransmitReceive>
 80052f2:	4603      	mov	r3, r0
 80052f4:	e0e2      	b.n	80054bc <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <HAL_SPI_Receive+0x52>
 8005300:	2302      	movs	r3, #2
 8005302:	e0db      	b.n	80054bc <HAL_SPI_Receive+0x20a>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800530c:	f7fd fa6e 	bl	80027ec <HAL_GetTick>
 8005310:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b01      	cmp	r3, #1
 800531c:	d002      	beq.n	8005324 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800531e:	2302      	movs	r3, #2
 8005320:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005322:	e0c2      	b.n	80054aa <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <HAL_SPI_Receive+0x7e>
 800532a:	88fb      	ldrh	r3, [r7, #6]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d102      	bne.n	8005336 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005334:	e0b9      	b.n	80054aa <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2204      	movs	r2, #4
 800533a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	88fa      	ldrh	r2, [r7, #6]
 800534e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	88fa      	ldrh	r2, [r7, #6]
 8005354:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800537c:	d107      	bne.n	800538e <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800538c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005398:	2b40      	cmp	r3, #64	; 0x40
 800539a:	d007      	beq.n	80053ac <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d162      	bne.n	800547a <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80053b4:	e02e      	b.n	8005414 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d115      	bne.n	80053f0 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f103 020c 	add.w	r2, r3, #12
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d0:	7812      	ldrb	r2, [r2, #0]
 80053d2:	b2d2      	uxtb	r2, r2
 80053d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053da:	1c5a      	adds	r2, r3, #1
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053ee:	e011      	b.n	8005414 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053f0:	f7fd f9fc 	bl	80027ec <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d803      	bhi.n	8005408 <HAL_SPI_Receive+0x156>
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005406:	d102      	bne.n	800540e <HAL_SPI_Receive+0x15c>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d102      	bne.n	8005414 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005412:	e04a      	b.n	80054aa <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005418:	b29b      	uxth	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1cb      	bne.n	80053b6 <HAL_SPI_Receive+0x104>
 800541e:	e031      	b.n	8005484 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b01      	cmp	r3, #1
 800542c:	d113      	bne.n	8005456 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005438:	b292      	uxth	r2, r2
 800543a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005440:	1c9a      	adds	r2, r3, #2
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800544a:	b29b      	uxth	r3, r3
 800544c:	3b01      	subs	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005454:	e011      	b.n	800547a <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005456:	f7fd f9c9 	bl	80027ec <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d803      	bhi.n	800546e <HAL_SPI_Receive+0x1bc>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546c:	d102      	bne.n	8005474 <HAL_SPI_Receive+0x1c2>
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d102      	bne.n	800547a <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005478:	e017      	b.n	80054aa <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800547e:	b29b      	uxth	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1cd      	bne.n	8005420 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	6839      	ldr	r1, [r7, #0]
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 fa35 	bl	80058f8 <SPI_EndRxTransaction>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2220      	movs	r2, #32
 8005498:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	75fb      	strb	r3, [r7, #23]
 80054a6:	e000      	b.n	80054aa <HAL_SPI_Receive+0x1f8>
  }

error :
 80054a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80054ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b08c      	sub	sp, #48	; 0x30
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
 80054d0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80054d2:	2301      	movs	r3, #1
 80054d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <HAL_SPI_TransmitReceive+0x26>
 80054e6:	2302      	movs	r3, #2
 80054e8:	e18a      	b.n	8005800 <HAL_SPI_TransmitReceive+0x33c>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054f2:	f7fd f97b 	bl	80027ec <HAL_GetTick>
 80054f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005508:	887b      	ldrh	r3, [r7, #2]
 800550a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800550c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005510:	2b01      	cmp	r3, #1
 8005512:	d00f      	beq.n	8005534 <HAL_SPI_TransmitReceive+0x70>
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800551a:	d107      	bne.n	800552c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d103      	bne.n	800552c <HAL_SPI_TransmitReceive+0x68>
 8005524:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005528:	2b04      	cmp	r3, #4
 800552a:	d003      	beq.n	8005534 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800552c:	2302      	movs	r3, #2
 800552e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005532:	e15b      	b.n	80057ec <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d005      	beq.n	8005546 <HAL_SPI_TransmitReceive+0x82>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <HAL_SPI_TransmitReceive+0x82>
 8005540:	887b      	ldrh	r3, [r7, #2]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d103      	bne.n	800554e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800554c:	e14e      	b.n	80057ec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b04      	cmp	r3, #4
 8005558:	d003      	beq.n	8005562 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2205      	movs	r2, #5
 800555e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	887a      	ldrh	r2, [r7, #2]
 8005572:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	887a      	ldrh	r2, [r7, #2]
 8005578:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	887a      	ldrh	r2, [r7, #2]
 8005584:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	887a      	ldrh	r2, [r7, #2]
 800558a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a2:	2b40      	cmp	r3, #64	; 0x40
 80055a4:	d007      	beq.n	80055b6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055be:	d178      	bne.n	80056b2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <HAL_SPI_TransmitReceive+0x10a>
 80055c8:	8b7b      	ldrh	r3, [r7, #26]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d166      	bne.n	800569c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d2:	881a      	ldrh	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	1c9a      	adds	r2, r3, #2
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	3b01      	subs	r3, #1
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055f2:	e053      	b.n	800569c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d11b      	bne.n	800563a <HAL_SPI_TransmitReceive+0x176>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005606:	b29b      	uxth	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d016      	beq.n	800563a <HAL_SPI_TransmitReceive+0x176>
 800560c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560e:	2b01      	cmp	r3, #1
 8005610:	d113      	bne.n	800563a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005616:	881a      	ldrh	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005622:	1c9a      	adds	r2, r3, #2
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800562c:	b29b      	uxth	r3, r3
 800562e:	3b01      	subs	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005636:	2300      	movs	r3, #0
 8005638:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	2b01      	cmp	r3, #1
 8005646:	d119      	bne.n	800567c <HAL_SPI_TransmitReceive+0x1b8>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800564c:	b29b      	uxth	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d014      	beq.n	800567c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565c:	b292      	uxth	r2, r2
 800565e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005664:	1c9a      	adds	r2, r3, #2
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800566e:	b29b      	uxth	r3, r3
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005678:	2301      	movs	r3, #1
 800567a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800567c:	f7fd f8b6 	bl	80027ec <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005688:	429a      	cmp	r2, r3
 800568a:	d807      	bhi.n	800569c <HAL_SPI_TransmitReceive+0x1d8>
 800568c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005692:	d003      	beq.n	800569c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800569a:	e0a7      	b.n	80057ec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1a6      	bne.n	80055f4 <HAL_SPI_TransmitReceive+0x130>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1a1      	bne.n	80055f4 <HAL_SPI_TransmitReceive+0x130>
 80056b0:	e07c      	b.n	80057ac <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <HAL_SPI_TransmitReceive+0x1fc>
 80056ba:	8b7b      	ldrh	r3, [r7, #26]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d16b      	bne.n	8005798 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	330c      	adds	r3, #12
 80056ca:	7812      	ldrb	r2, [r2, #0]
 80056cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056dc:	b29b      	uxth	r3, r3
 80056de:	3b01      	subs	r3, #1
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056e6:	e057      	b.n	8005798 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d11c      	bne.n	8005730 <HAL_SPI_TransmitReceive+0x26c>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d017      	beq.n	8005730 <HAL_SPI_TransmitReceive+0x26c>
 8005700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005702:	2b01      	cmp	r3, #1
 8005704:	d114      	bne.n	8005730 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	330c      	adds	r3, #12
 8005710:	7812      	ldrb	r2, [r2, #0]
 8005712:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005718:	1c5a      	adds	r2, r3, #1
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005722:	b29b      	uxth	r3, r3
 8005724:	3b01      	subs	r3, #1
 8005726:	b29a      	uxth	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b01      	cmp	r3, #1
 800573c:	d119      	bne.n	8005772 <HAL_SPI_TransmitReceive+0x2ae>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005742:	b29b      	uxth	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	d014      	beq.n	8005772 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005764:	b29b      	uxth	r3, r3
 8005766:	3b01      	subs	r3, #1
 8005768:	b29a      	uxth	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800576e:	2301      	movs	r3, #1
 8005770:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005772:	f7fd f83b 	bl	80027ec <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800577e:	429a      	cmp	r2, r3
 8005780:	d803      	bhi.n	800578a <HAL_SPI_TransmitReceive+0x2c6>
 8005782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005788:	d102      	bne.n	8005790 <HAL_SPI_TransmitReceive+0x2cc>
 800578a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578c:	2b00      	cmp	r3, #0
 800578e:	d103      	bne.n	8005798 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005796:	e029      	b.n	80057ec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800579c:	b29b      	uxth	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1a2      	bne.n	80056e8 <HAL_SPI_TransmitReceive+0x224>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d19d      	bne.n	80056e8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 f907 	bl	80059c4 <SPI_EndRxTxTransaction>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d006      	beq.n	80057ca <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2220      	movs	r2, #32
 80057c6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80057c8:	e010      	b.n	80057ec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10b      	bne.n	80057ea <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057d2:	2300      	movs	r3, #0
 80057d4:	617b      	str	r3, [r7, #20]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	617b      	str	r3, [r7, #20]
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	e000      	b.n	80057ec <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80057ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005800:	4618      	mov	r0, r3
 8005802:	3730      	adds	r7, #48	; 0x30
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005816:	b2db      	uxtb	r3, r3
}
 8005818:	4618      	mov	r0, r3
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	603b      	str	r3, [r7, #0]
 8005830:	4613      	mov	r3, r2
 8005832:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005834:	e04c      	b.n	80058d0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d048      	beq.n	80058d0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800583e:	f7fc ffd5 	bl	80027ec <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d902      	bls.n	8005854 <SPI_WaitFlagStateUntilTimeout+0x30>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d13d      	bne.n	80058d0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005862:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800586c:	d111      	bne.n	8005892 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005876:	d004      	beq.n	8005882 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005880:	d107      	bne.n	8005892 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005890:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800589a:	d10f      	bne.n	80058bc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e00f      	b.n	80058f0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689a      	ldr	r2, [r3, #8]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	4013      	ands	r3, r2
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	429a      	cmp	r2, r3
 80058de:	bf0c      	ite	eq
 80058e0:	2301      	moveq	r3, #1
 80058e2:	2300      	movne	r3, #0
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	461a      	mov	r2, r3
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d1a3      	bne.n	8005836 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af02      	add	r7, sp, #8
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800590c:	d111      	bne.n	8005932 <SPI_EndRxTransaction+0x3a>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005916:	d004      	beq.n	8005922 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005920:	d107      	bne.n	8005932 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005930:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800593a:	d12a      	bne.n	8005992 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005944:	d012      	beq.n	800596c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2200      	movs	r2, #0
 800594e:	2180      	movs	r1, #128	; 0x80
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f7ff ff67 	bl	8005824 <SPI_WaitFlagStateUntilTimeout>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d02d      	beq.n	80059b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005960:	f043 0220 	orr.w	r2, r3, #32
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e026      	b.n	80059ba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	2200      	movs	r2, #0
 8005974:	2101      	movs	r1, #1
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f7ff ff54 	bl	8005824 <SPI_WaitFlagStateUntilTimeout>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d01a      	beq.n	80059b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005986:	f043 0220 	orr.w	r2, r3, #32
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e013      	b.n	80059ba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2200      	movs	r2, #0
 800599a:	2101      	movs	r1, #1
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f7ff ff41 	bl	8005824 <SPI_WaitFlagStateUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d007      	beq.n	80059b8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ac:	f043 0220 	orr.w	r2, r3, #32
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e000      	b.n	80059ba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b088      	sub	sp, #32
 80059c8:	af02      	add	r7, sp, #8
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80059d0:	4b1b      	ldr	r3, [pc, #108]	; (8005a40 <SPI_EndRxTxTransaction+0x7c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a1b      	ldr	r2, [pc, #108]	; (8005a44 <SPI_EndRxTxTransaction+0x80>)
 80059d6:	fba2 2303 	umull	r2, r3, r2, r3
 80059da:	0d5b      	lsrs	r3, r3, #21
 80059dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059e0:	fb02 f303 	mul.w	r3, r2, r3
 80059e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059ee:	d112      	bne.n	8005a16 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2200      	movs	r2, #0
 80059f8:	2180      	movs	r1, #128	; 0x80
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f7ff ff12 	bl	8005824 <SPI_WaitFlagStateUntilTimeout>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d016      	beq.n	8005a34 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0a:	f043 0220 	orr.w	r2, r3, #32
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e00f      	b.n	8005a36 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2c:	2b80      	cmp	r3, #128	; 0x80
 8005a2e:	d0f2      	beq.n	8005a16 <SPI_EndRxTxTransaction+0x52>
 8005a30:	e000      	b.n	8005a34 <SPI_EndRxTxTransaction+0x70>
        break;
 8005a32:	bf00      	nop
  }

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20000044 	.word	0x20000044
 8005a44:	165e9f81 	.word	0x165e9f81

08005a48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e03f      	b.n	8005ada <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d106      	bne.n	8005a74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7fc fc7c 	bl	800236c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2224      	movs	r2, #36	; 0x24
 8005a78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68da      	ldr	r2, [r3, #12]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f90b 	bl	8005ca8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005aa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	695a      	ldr	r2, [r3, #20]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ab0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68da      	ldr	r2, [r3, #12]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ac0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b088      	sub	sp, #32
 8005ae6:	af02      	add	r7, sp, #8
 8005ae8:	60f8      	str	r0, [r7, #12]
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	603b      	str	r3, [r7, #0]
 8005aee:	4613      	mov	r3, r2
 8005af0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b20      	cmp	r3, #32
 8005b00:	f040 8083 	bne.w	8005c0a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <HAL_UART_Transmit+0x2e>
 8005b0a:	88fb      	ldrh	r3, [r7, #6]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e07b      	b.n	8005c0c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d101      	bne.n	8005b22 <HAL_UART_Transmit+0x40>
 8005b1e:	2302      	movs	r3, #2
 8005b20:	e074      	b.n	8005c0c <HAL_UART_Transmit+0x12a>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2221      	movs	r2, #33	; 0x21
 8005b34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005b38:	f7fc fe58 	bl	80027ec <HAL_GetTick>
 8005b3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	88fa      	ldrh	r2, [r7, #6]
 8005b42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	88fa      	ldrh	r2, [r7, #6]
 8005b48:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005b52:	e042      	b.n	8005bda <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b6a:	d122      	bne.n	8005bb2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2200      	movs	r2, #0
 8005b74:	2180      	movs	r1, #128	; 0x80
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 f84c 	bl	8005c14 <UART_WaitOnFlagUntilTimeout>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e042      	b.n	8005c0c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b98:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d103      	bne.n	8005baa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	3302      	adds	r3, #2
 8005ba6:	60bb      	str	r3, [r7, #8]
 8005ba8:	e017      	b.n	8005bda <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	3301      	adds	r3, #1
 8005bae:	60bb      	str	r3, [r7, #8]
 8005bb0:	e013      	b.n	8005bda <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	2180      	movs	r1, #128	; 0x80
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 f829 	bl	8005c14 <UART_WaitOnFlagUntilTimeout>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e01f      	b.n	8005c0c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	1c5a      	adds	r2, r3, #1
 8005bd0:	60ba      	str	r2, [r7, #8]
 8005bd2:	781a      	ldrb	r2, [r3, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1b7      	bne.n	8005b54 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2200      	movs	r2, #0
 8005bec:	2140      	movs	r1, #64	; 0x40
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 f810 	bl	8005c14 <UART_WaitOnFlagUntilTimeout>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e006      	b.n	8005c0c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2220      	movs	r2, #32
 8005c02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	e000      	b.n	8005c0c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005c0a:	2302      	movs	r3, #2
  }
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3718      	adds	r7, #24
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	603b      	str	r3, [r7, #0]
 8005c20:	4613      	mov	r3, r2
 8005c22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c24:	e02c      	b.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2c:	d028      	beq.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d007      	beq.n	8005c44 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c34:	f7fc fdda 	bl	80027ec <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d21d      	bcs.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c52:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	695a      	ldr	r2, [r3, #20]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 0201 	bic.w	r2, r2, #1
 8005c62:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e00f      	b.n	8005ca0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	bf0c      	ite	eq
 8005c90:	2301      	moveq	r3, #1
 8005c92:	2300      	movne	r3, #0
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	461a      	mov	r2, r3
 8005c98:	79fb      	ldrb	r3, [r7, #7]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d0c3      	beq.n	8005c26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cac:	b085      	sub	sp, #20
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	69db      	ldr	r3, [r3, #28]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005cea:	f023 030c 	bic.w	r3, r3, #12
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	6812      	ldr	r2, [r2, #0]
 8005cf2:	68f9      	ldr	r1, [r7, #12]
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699a      	ldr	r2, [r3, #24]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d16:	f040 818b 	bne.w	8006030 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4ac1      	ldr	r2, [pc, #772]	; (8006024 <UART_SetConfig+0x37c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d005      	beq.n	8005d30 <UART_SetConfig+0x88>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4abf      	ldr	r2, [pc, #764]	; (8006028 <UART_SetConfig+0x380>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	f040 80bd 	bne.w	8005eaa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d30:	f7fe feae 	bl	8004a90 <HAL_RCC_GetPCLK2Freq>
 8005d34:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	461d      	mov	r5, r3
 8005d3a:	f04f 0600 	mov.w	r6, #0
 8005d3e:	46a8      	mov	r8, r5
 8005d40:	46b1      	mov	r9, r6
 8005d42:	eb18 0308 	adds.w	r3, r8, r8
 8005d46:	eb49 0409 	adc.w	r4, r9, r9
 8005d4a:	4698      	mov	r8, r3
 8005d4c:	46a1      	mov	r9, r4
 8005d4e:	eb18 0805 	adds.w	r8, r8, r5
 8005d52:	eb49 0906 	adc.w	r9, r9, r6
 8005d56:	f04f 0100 	mov.w	r1, #0
 8005d5a:	f04f 0200 	mov.w	r2, #0
 8005d5e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d62:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d66:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d6a:	4688      	mov	r8, r1
 8005d6c:	4691      	mov	r9, r2
 8005d6e:	eb18 0005 	adds.w	r0, r8, r5
 8005d72:	eb49 0106 	adc.w	r1, r9, r6
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	461d      	mov	r5, r3
 8005d7c:	f04f 0600 	mov.w	r6, #0
 8005d80:	196b      	adds	r3, r5, r5
 8005d82:	eb46 0406 	adc.w	r4, r6, r6
 8005d86:	461a      	mov	r2, r3
 8005d88:	4623      	mov	r3, r4
 8005d8a:	f7fa fa2f 	bl	80001ec <__aeabi_uldivmod>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	460c      	mov	r4, r1
 8005d92:	461a      	mov	r2, r3
 8005d94:	4ba5      	ldr	r3, [pc, #660]	; (800602c <UART_SetConfig+0x384>)
 8005d96:	fba3 2302 	umull	r2, r3, r3, r2
 8005d9a:	095b      	lsrs	r3, r3, #5
 8005d9c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	461d      	mov	r5, r3
 8005da4:	f04f 0600 	mov.w	r6, #0
 8005da8:	46a9      	mov	r9, r5
 8005daa:	46b2      	mov	sl, r6
 8005dac:	eb19 0309 	adds.w	r3, r9, r9
 8005db0:	eb4a 040a 	adc.w	r4, sl, sl
 8005db4:	4699      	mov	r9, r3
 8005db6:	46a2      	mov	sl, r4
 8005db8:	eb19 0905 	adds.w	r9, r9, r5
 8005dbc:	eb4a 0a06 	adc.w	sl, sl, r6
 8005dc0:	f04f 0100 	mov.w	r1, #0
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dcc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dd0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005dd4:	4689      	mov	r9, r1
 8005dd6:	4692      	mov	sl, r2
 8005dd8:	eb19 0005 	adds.w	r0, r9, r5
 8005ddc:	eb4a 0106 	adc.w	r1, sl, r6
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	461d      	mov	r5, r3
 8005de6:	f04f 0600 	mov.w	r6, #0
 8005dea:	196b      	adds	r3, r5, r5
 8005dec:	eb46 0406 	adc.w	r4, r6, r6
 8005df0:	461a      	mov	r2, r3
 8005df2:	4623      	mov	r3, r4
 8005df4:	f7fa f9fa 	bl	80001ec <__aeabi_uldivmod>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	460c      	mov	r4, r1
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	4b8b      	ldr	r3, [pc, #556]	; (800602c <UART_SetConfig+0x384>)
 8005e00:	fba3 1302 	umull	r1, r3, r3, r2
 8005e04:	095b      	lsrs	r3, r3, #5
 8005e06:	2164      	movs	r1, #100	; 0x64
 8005e08:	fb01 f303 	mul.w	r3, r1, r3
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	3332      	adds	r3, #50	; 0x32
 8005e12:	4a86      	ldr	r2, [pc, #536]	; (800602c <UART_SetConfig+0x384>)
 8005e14:	fba2 2303 	umull	r2, r3, r2, r3
 8005e18:	095b      	lsrs	r3, r3, #5
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e20:	4498      	add	r8, r3
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	461d      	mov	r5, r3
 8005e26:	f04f 0600 	mov.w	r6, #0
 8005e2a:	46a9      	mov	r9, r5
 8005e2c:	46b2      	mov	sl, r6
 8005e2e:	eb19 0309 	adds.w	r3, r9, r9
 8005e32:	eb4a 040a 	adc.w	r4, sl, sl
 8005e36:	4699      	mov	r9, r3
 8005e38:	46a2      	mov	sl, r4
 8005e3a:	eb19 0905 	adds.w	r9, r9, r5
 8005e3e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e42:	f04f 0100 	mov.w	r1, #0
 8005e46:	f04f 0200 	mov.w	r2, #0
 8005e4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e56:	4689      	mov	r9, r1
 8005e58:	4692      	mov	sl, r2
 8005e5a:	eb19 0005 	adds.w	r0, r9, r5
 8005e5e:	eb4a 0106 	adc.w	r1, sl, r6
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	461d      	mov	r5, r3
 8005e68:	f04f 0600 	mov.w	r6, #0
 8005e6c:	196b      	adds	r3, r5, r5
 8005e6e:	eb46 0406 	adc.w	r4, r6, r6
 8005e72:	461a      	mov	r2, r3
 8005e74:	4623      	mov	r3, r4
 8005e76:	f7fa f9b9 	bl	80001ec <__aeabi_uldivmod>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	460c      	mov	r4, r1
 8005e7e:	461a      	mov	r2, r3
 8005e80:	4b6a      	ldr	r3, [pc, #424]	; (800602c <UART_SetConfig+0x384>)
 8005e82:	fba3 1302 	umull	r1, r3, r3, r2
 8005e86:	095b      	lsrs	r3, r3, #5
 8005e88:	2164      	movs	r1, #100	; 0x64
 8005e8a:	fb01 f303 	mul.w	r3, r1, r3
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	00db      	lsls	r3, r3, #3
 8005e92:	3332      	adds	r3, #50	; 0x32
 8005e94:	4a65      	ldr	r2, [pc, #404]	; (800602c <UART_SetConfig+0x384>)
 8005e96:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	f003 0207 	and.w	r2, r3, #7
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4442      	add	r2, r8
 8005ea6:	609a      	str	r2, [r3, #8]
 8005ea8:	e26f      	b.n	800638a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005eaa:	f7fe fddd 	bl	8004a68 <HAL_RCC_GetPCLK1Freq>
 8005eae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	461d      	mov	r5, r3
 8005eb4:	f04f 0600 	mov.w	r6, #0
 8005eb8:	46a8      	mov	r8, r5
 8005eba:	46b1      	mov	r9, r6
 8005ebc:	eb18 0308 	adds.w	r3, r8, r8
 8005ec0:	eb49 0409 	adc.w	r4, r9, r9
 8005ec4:	4698      	mov	r8, r3
 8005ec6:	46a1      	mov	r9, r4
 8005ec8:	eb18 0805 	adds.w	r8, r8, r5
 8005ecc:	eb49 0906 	adc.w	r9, r9, r6
 8005ed0:	f04f 0100 	mov.w	r1, #0
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005edc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ee0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ee4:	4688      	mov	r8, r1
 8005ee6:	4691      	mov	r9, r2
 8005ee8:	eb18 0005 	adds.w	r0, r8, r5
 8005eec:	eb49 0106 	adc.w	r1, r9, r6
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	461d      	mov	r5, r3
 8005ef6:	f04f 0600 	mov.w	r6, #0
 8005efa:	196b      	adds	r3, r5, r5
 8005efc:	eb46 0406 	adc.w	r4, r6, r6
 8005f00:	461a      	mov	r2, r3
 8005f02:	4623      	mov	r3, r4
 8005f04:	f7fa f972 	bl	80001ec <__aeabi_uldivmod>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	4b47      	ldr	r3, [pc, #284]	; (800602c <UART_SetConfig+0x384>)
 8005f10:	fba3 2302 	umull	r2, r3, r3, r2
 8005f14:	095b      	lsrs	r3, r3, #5
 8005f16:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	461d      	mov	r5, r3
 8005f1e:	f04f 0600 	mov.w	r6, #0
 8005f22:	46a9      	mov	r9, r5
 8005f24:	46b2      	mov	sl, r6
 8005f26:	eb19 0309 	adds.w	r3, r9, r9
 8005f2a:	eb4a 040a 	adc.w	r4, sl, sl
 8005f2e:	4699      	mov	r9, r3
 8005f30:	46a2      	mov	sl, r4
 8005f32:	eb19 0905 	adds.w	r9, r9, r5
 8005f36:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f3a:	f04f 0100 	mov.w	r1, #0
 8005f3e:	f04f 0200 	mov.w	r2, #0
 8005f42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f4e:	4689      	mov	r9, r1
 8005f50:	4692      	mov	sl, r2
 8005f52:	eb19 0005 	adds.w	r0, r9, r5
 8005f56:	eb4a 0106 	adc.w	r1, sl, r6
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	461d      	mov	r5, r3
 8005f60:	f04f 0600 	mov.w	r6, #0
 8005f64:	196b      	adds	r3, r5, r5
 8005f66:	eb46 0406 	adc.w	r4, r6, r6
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	4623      	mov	r3, r4
 8005f6e:	f7fa f93d 	bl	80001ec <__aeabi_uldivmod>
 8005f72:	4603      	mov	r3, r0
 8005f74:	460c      	mov	r4, r1
 8005f76:	461a      	mov	r2, r3
 8005f78:	4b2c      	ldr	r3, [pc, #176]	; (800602c <UART_SetConfig+0x384>)
 8005f7a:	fba3 1302 	umull	r1, r3, r3, r2
 8005f7e:	095b      	lsrs	r3, r3, #5
 8005f80:	2164      	movs	r1, #100	; 0x64
 8005f82:	fb01 f303 	mul.w	r3, r1, r3
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	3332      	adds	r3, #50	; 0x32
 8005f8c:	4a27      	ldr	r2, [pc, #156]	; (800602c <UART_SetConfig+0x384>)
 8005f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f92:	095b      	lsrs	r3, r3, #5
 8005f94:	005b      	lsls	r3, r3, #1
 8005f96:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f9a:	4498      	add	r8, r3
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	461d      	mov	r5, r3
 8005fa0:	f04f 0600 	mov.w	r6, #0
 8005fa4:	46a9      	mov	r9, r5
 8005fa6:	46b2      	mov	sl, r6
 8005fa8:	eb19 0309 	adds.w	r3, r9, r9
 8005fac:	eb4a 040a 	adc.w	r4, sl, sl
 8005fb0:	4699      	mov	r9, r3
 8005fb2:	46a2      	mov	sl, r4
 8005fb4:	eb19 0905 	adds.w	r9, r9, r5
 8005fb8:	eb4a 0a06 	adc.w	sl, sl, r6
 8005fbc:	f04f 0100 	mov.w	r1, #0
 8005fc0:	f04f 0200 	mov.w	r2, #0
 8005fc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fcc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fd0:	4689      	mov	r9, r1
 8005fd2:	4692      	mov	sl, r2
 8005fd4:	eb19 0005 	adds.w	r0, r9, r5
 8005fd8:	eb4a 0106 	adc.w	r1, sl, r6
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	461d      	mov	r5, r3
 8005fe2:	f04f 0600 	mov.w	r6, #0
 8005fe6:	196b      	adds	r3, r5, r5
 8005fe8:	eb46 0406 	adc.w	r4, r6, r6
 8005fec:	461a      	mov	r2, r3
 8005fee:	4623      	mov	r3, r4
 8005ff0:	f7fa f8fc 	bl	80001ec <__aeabi_uldivmod>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	4b0c      	ldr	r3, [pc, #48]	; (800602c <UART_SetConfig+0x384>)
 8005ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8006000:	095b      	lsrs	r3, r3, #5
 8006002:	2164      	movs	r1, #100	; 0x64
 8006004:	fb01 f303 	mul.w	r3, r1, r3
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	00db      	lsls	r3, r3, #3
 800600c:	3332      	adds	r3, #50	; 0x32
 800600e:	4a07      	ldr	r2, [pc, #28]	; (800602c <UART_SetConfig+0x384>)
 8006010:	fba2 2303 	umull	r2, r3, r2, r3
 8006014:	095b      	lsrs	r3, r3, #5
 8006016:	f003 0207 	and.w	r2, r3, #7
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4442      	add	r2, r8
 8006020:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006022:	e1b2      	b.n	800638a <UART_SetConfig+0x6e2>
 8006024:	40011000 	.word	0x40011000
 8006028:	40011400 	.word	0x40011400
 800602c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4ad7      	ldr	r2, [pc, #860]	; (8006394 <UART_SetConfig+0x6ec>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d005      	beq.n	8006046 <UART_SetConfig+0x39e>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4ad6      	ldr	r2, [pc, #856]	; (8006398 <UART_SetConfig+0x6f0>)
 8006040:	4293      	cmp	r3, r2
 8006042:	f040 80d1 	bne.w	80061e8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006046:	f7fe fd23 	bl	8004a90 <HAL_RCC_GetPCLK2Freq>
 800604a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	469a      	mov	sl, r3
 8006050:	f04f 0b00 	mov.w	fp, #0
 8006054:	46d0      	mov	r8, sl
 8006056:	46d9      	mov	r9, fp
 8006058:	eb18 0308 	adds.w	r3, r8, r8
 800605c:	eb49 0409 	adc.w	r4, r9, r9
 8006060:	4698      	mov	r8, r3
 8006062:	46a1      	mov	r9, r4
 8006064:	eb18 080a 	adds.w	r8, r8, sl
 8006068:	eb49 090b 	adc.w	r9, r9, fp
 800606c:	f04f 0100 	mov.w	r1, #0
 8006070:	f04f 0200 	mov.w	r2, #0
 8006074:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006078:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800607c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006080:	4688      	mov	r8, r1
 8006082:	4691      	mov	r9, r2
 8006084:	eb1a 0508 	adds.w	r5, sl, r8
 8006088:	eb4b 0609 	adc.w	r6, fp, r9
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	4619      	mov	r1, r3
 8006092:	f04f 0200 	mov.w	r2, #0
 8006096:	f04f 0300 	mov.w	r3, #0
 800609a:	f04f 0400 	mov.w	r4, #0
 800609e:	0094      	lsls	r4, r2, #2
 80060a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060a4:	008b      	lsls	r3, r1, #2
 80060a6:	461a      	mov	r2, r3
 80060a8:	4623      	mov	r3, r4
 80060aa:	4628      	mov	r0, r5
 80060ac:	4631      	mov	r1, r6
 80060ae:	f7fa f89d 	bl	80001ec <__aeabi_uldivmod>
 80060b2:	4603      	mov	r3, r0
 80060b4:	460c      	mov	r4, r1
 80060b6:	461a      	mov	r2, r3
 80060b8:	4bb8      	ldr	r3, [pc, #736]	; (800639c <UART_SetConfig+0x6f4>)
 80060ba:	fba3 2302 	umull	r2, r3, r3, r2
 80060be:	095b      	lsrs	r3, r3, #5
 80060c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	469b      	mov	fp, r3
 80060c8:	f04f 0c00 	mov.w	ip, #0
 80060cc:	46d9      	mov	r9, fp
 80060ce:	46e2      	mov	sl, ip
 80060d0:	eb19 0309 	adds.w	r3, r9, r9
 80060d4:	eb4a 040a 	adc.w	r4, sl, sl
 80060d8:	4699      	mov	r9, r3
 80060da:	46a2      	mov	sl, r4
 80060dc:	eb19 090b 	adds.w	r9, r9, fp
 80060e0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060e4:	f04f 0100 	mov.w	r1, #0
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060f8:	4689      	mov	r9, r1
 80060fa:	4692      	mov	sl, r2
 80060fc:	eb1b 0509 	adds.w	r5, fp, r9
 8006100:	eb4c 060a 	adc.w	r6, ip, sl
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	4619      	mov	r1, r3
 800610a:	f04f 0200 	mov.w	r2, #0
 800610e:	f04f 0300 	mov.w	r3, #0
 8006112:	f04f 0400 	mov.w	r4, #0
 8006116:	0094      	lsls	r4, r2, #2
 8006118:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800611c:	008b      	lsls	r3, r1, #2
 800611e:	461a      	mov	r2, r3
 8006120:	4623      	mov	r3, r4
 8006122:	4628      	mov	r0, r5
 8006124:	4631      	mov	r1, r6
 8006126:	f7fa f861 	bl	80001ec <__aeabi_uldivmod>
 800612a:	4603      	mov	r3, r0
 800612c:	460c      	mov	r4, r1
 800612e:	461a      	mov	r2, r3
 8006130:	4b9a      	ldr	r3, [pc, #616]	; (800639c <UART_SetConfig+0x6f4>)
 8006132:	fba3 1302 	umull	r1, r3, r3, r2
 8006136:	095b      	lsrs	r3, r3, #5
 8006138:	2164      	movs	r1, #100	; 0x64
 800613a:	fb01 f303 	mul.w	r3, r1, r3
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	3332      	adds	r3, #50	; 0x32
 8006144:	4a95      	ldr	r2, [pc, #596]	; (800639c <UART_SetConfig+0x6f4>)
 8006146:	fba2 2303 	umull	r2, r3, r2, r3
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006150:	4498      	add	r8, r3
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	469b      	mov	fp, r3
 8006156:	f04f 0c00 	mov.w	ip, #0
 800615a:	46d9      	mov	r9, fp
 800615c:	46e2      	mov	sl, ip
 800615e:	eb19 0309 	adds.w	r3, r9, r9
 8006162:	eb4a 040a 	adc.w	r4, sl, sl
 8006166:	4699      	mov	r9, r3
 8006168:	46a2      	mov	sl, r4
 800616a:	eb19 090b 	adds.w	r9, r9, fp
 800616e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006172:	f04f 0100 	mov.w	r1, #0
 8006176:	f04f 0200 	mov.w	r2, #0
 800617a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800617e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006182:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006186:	4689      	mov	r9, r1
 8006188:	4692      	mov	sl, r2
 800618a:	eb1b 0509 	adds.w	r5, fp, r9
 800618e:	eb4c 060a 	adc.w	r6, ip, sl
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	4619      	mov	r1, r3
 8006198:	f04f 0200 	mov.w	r2, #0
 800619c:	f04f 0300 	mov.w	r3, #0
 80061a0:	f04f 0400 	mov.w	r4, #0
 80061a4:	0094      	lsls	r4, r2, #2
 80061a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061aa:	008b      	lsls	r3, r1, #2
 80061ac:	461a      	mov	r2, r3
 80061ae:	4623      	mov	r3, r4
 80061b0:	4628      	mov	r0, r5
 80061b2:	4631      	mov	r1, r6
 80061b4:	f7fa f81a 	bl	80001ec <__aeabi_uldivmod>
 80061b8:	4603      	mov	r3, r0
 80061ba:	460c      	mov	r4, r1
 80061bc:	461a      	mov	r2, r3
 80061be:	4b77      	ldr	r3, [pc, #476]	; (800639c <UART_SetConfig+0x6f4>)
 80061c0:	fba3 1302 	umull	r1, r3, r3, r2
 80061c4:	095b      	lsrs	r3, r3, #5
 80061c6:	2164      	movs	r1, #100	; 0x64
 80061c8:	fb01 f303 	mul.w	r3, r1, r3
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	011b      	lsls	r3, r3, #4
 80061d0:	3332      	adds	r3, #50	; 0x32
 80061d2:	4a72      	ldr	r2, [pc, #456]	; (800639c <UART_SetConfig+0x6f4>)
 80061d4:	fba2 2303 	umull	r2, r3, r2, r3
 80061d8:	095b      	lsrs	r3, r3, #5
 80061da:	f003 020f 	and.w	r2, r3, #15
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4442      	add	r2, r8
 80061e4:	609a      	str	r2, [r3, #8]
 80061e6:	e0d0      	b.n	800638a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80061e8:	f7fe fc3e 	bl	8004a68 <HAL_RCC_GetPCLK1Freq>
 80061ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	469a      	mov	sl, r3
 80061f2:	f04f 0b00 	mov.w	fp, #0
 80061f6:	46d0      	mov	r8, sl
 80061f8:	46d9      	mov	r9, fp
 80061fa:	eb18 0308 	adds.w	r3, r8, r8
 80061fe:	eb49 0409 	adc.w	r4, r9, r9
 8006202:	4698      	mov	r8, r3
 8006204:	46a1      	mov	r9, r4
 8006206:	eb18 080a 	adds.w	r8, r8, sl
 800620a:	eb49 090b 	adc.w	r9, r9, fp
 800620e:	f04f 0100 	mov.w	r1, #0
 8006212:	f04f 0200 	mov.w	r2, #0
 8006216:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800621a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800621e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006222:	4688      	mov	r8, r1
 8006224:	4691      	mov	r9, r2
 8006226:	eb1a 0508 	adds.w	r5, sl, r8
 800622a:	eb4b 0609 	adc.w	r6, fp, r9
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	4619      	mov	r1, r3
 8006234:	f04f 0200 	mov.w	r2, #0
 8006238:	f04f 0300 	mov.w	r3, #0
 800623c:	f04f 0400 	mov.w	r4, #0
 8006240:	0094      	lsls	r4, r2, #2
 8006242:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006246:	008b      	lsls	r3, r1, #2
 8006248:	461a      	mov	r2, r3
 800624a:	4623      	mov	r3, r4
 800624c:	4628      	mov	r0, r5
 800624e:	4631      	mov	r1, r6
 8006250:	f7f9 ffcc 	bl	80001ec <__aeabi_uldivmod>
 8006254:	4603      	mov	r3, r0
 8006256:	460c      	mov	r4, r1
 8006258:	461a      	mov	r2, r3
 800625a:	4b50      	ldr	r3, [pc, #320]	; (800639c <UART_SetConfig+0x6f4>)
 800625c:	fba3 2302 	umull	r2, r3, r3, r2
 8006260:	095b      	lsrs	r3, r3, #5
 8006262:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	469b      	mov	fp, r3
 800626a:	f04f 0c00 	mov.w	ip, #0
 800626e:	46d9      	mov	r9, fp
 8006270:	46e2      	mov	sl, ip
 8006272:	eb19 0309 	adds.w	r3, r9, r9
 8006276:	eb4a 040a 	adc.w	r4, sl, sl
 800627a:	4699      	mov	r9, r3
 800627c:	46a2      	mov	sl, r4
 800627e:	eb19 090b 	adds.w	r9, r9, fp
 8006282:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006286:	f04f 0100 	mov.w	r1, #0
 800628a:	f04f 0200 	mov.w	r2, #0
 800628e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006292:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006296:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800629a:	4689      	mov	r9, r1
 800629c:	4692      	mov	sl, r2
 800629e:	eb1b 0509 	adds.w	r5, fp, r9
 80062a2:	eb4c 060a 	adc.w	r6, ip, sl
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	4619      	mov	r1, r3
 80062ac:	f04f 0200 	mov.w	r2, #0
 80062b0:	f04f 0300 	mov.w	r3, #0
 80062b4:	f04f 0400 	mov.w	r4, #0
 80062b8:	0094      	lsls	r4, r2, #2
 80062ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062be:	008b      	lsls	r3, r1, #2
 80062c0:	461a      	mov	r2, r3
 80062c2:	4623      	mov	r3, r4
 80062c4:	4628      	mov	r0, r5
 80062c6:	4631      	mov	r1, r6
 80062c8:	f7f9 ff90 	bl	80001ec <__aeabi_uldivmod>
 80062cc:	4603      	mov	r3, r0
 80062ce:	460c      	mov	r4, r1
 80062d0:	461a      	mov	r2, r3
 80062d2:	4b32      	ldr	r3, [pc, #200]	; (800639c <UART_SetConfig+0x6f4>)
 80062d4:	fba3 1302 	umull	r1, r3, r3, r2
 80062d8:	095b      	lsrs	r3, r3, #5
 80062da:	2164      	movs	r1, #100	; 0x64
 80062dc:	fb01 f303 	mul.w	r3, r1, r3
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	3332      	adds	r3, #50	; 0x32
 80062e6:	4a2d      	ldr	r2, [pc, #180]	; (800639c <UART_SetConfig+0x6f4>)
 80062e8:	fba2 2303 	umull	r2, r3, r2, r3
 80062ec:	095b      	lsrs	r3, r3, #5
 80062ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062f2:	4498      	add	r8, r3
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	469b      	mov	fp, r3
 80062f8:	f04f 0c00 	mov.w	ip, #0
 80062fc:	46d9      	mov	r9, fp
 80062fe:	46e2      	mov	sl, ip
 8006300:	eb19 0309 	adds.w	r3, r9, r9
 8006304:	eb4a 040a 	adc.w	r4, sl, sl
 8006308:	4699      	mov	r9, r3
 800630a:	46a2      	mov	sl, r4
 800630c:	eb19 090b 	adds.w	r9, r9, fp
 8006310:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006314:	f04f 0100 	mov.w	r1, #0
 8006318:	f04f 0200 	mov.w	r2, #0
 800631c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006320:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006324:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006328:	4689      	mov	r9, r1
 800632a:	4692      	mov	sl, r2
 800632c:	eb1b 0509 	adds.w	r5, fp, r9
 8006330:	eb4c 060a 	adc.w	r6, ip, sl
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	4619      	mov	r1, r3
 800633a:	f04f 0200 	mov.w	r2, #0
 800633e:	f04f 0300 	mov.w	r3, #0
 8006342:	f04f 0400 	mov.w	r4, #0
 8006346:	0094      	lsls	r4, r2, #2
 8006348:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800634c:	008b      	lsls	r3, r1, #2
 800634e:	461a      	mov	r2, r3
 8006350:	4623      	mov	r3, r4
 8006352:	4628      	mov	r0, r5
 8006354:	4631      	mov	r1, r6
 8006356:	f7f9 ff49 	bl	80001ec <__aeabi_uldivmod>
 800635a:	4603      	mov	r3, r0
 800635c:	460c      	mov	r4, r1
 800635e:	461a      	mov	r2, r3
 8006360:	4b0e      	ldr	r3, [pc, #56]	; (800639c <UART_SetConfig+0x6f4>)
 8006362:	fba3 1302 	umull	r1, r3, r3, r2
 8006366:	095b      	lsrs	r3, r3, #5
 8006368:	2164      	movs	r1, #100	; 0x64
 800636a:	fb01 f303 	mul.w	r3, r1, r3
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	011b      	lsls	r3, r3, #4
 8006372:	3332      	adds	r3, #50	; 0x32
 8006374:	4a09      	ldr	r2, [pc, #36]	; (800639c <UART_SetConfig+0x6f4>)
 8006376:	fba2 2303 	umull	r2, r3, r2, r3
 800637a:	095b      	lsrs	r3, r3, #5
 800637c:	f003 020f 	and.w	r2, r3, #15
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4442      	add	r2, r8
 8006386:	609a      	str	r2, [r3, #8]
}
 8006388:	e7ff      	b.n	800638a <UART_SetConfig+0x6e2>
 800638a:	bf00      	nop
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006394:	40011000 	.word	0x40011000
 8006398:	40011400 	.word	0x40011400
 800639c:	51eb851f 	.word	0x51eb851f

080063a0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80063aa:	2300      	movs	r3, #0
 80063ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80063ae:	2300      	movs	r3, #0
 80063b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d029      	beq.n	800640e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80063c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80063ca:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80063d4:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80063da:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80063e0:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80063e6:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80063ec:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80063f2:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80063f8:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80063fe:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	e034      	b.n	8006478 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800641a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006424:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800642a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	4313      	orrs	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800643e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006442:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800644c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8006452:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8006458:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800645e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8006464:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	4313      	orrs	r3, r2
 800646a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006486:	b480      	push	{r7}
 8006488:	b087      	sub	sp, #28
 800648a:	af00      	add	r7, sp, #0
 800648c:	60f8      	str	r0, [r7, #12]
 800648e:	60b9      	str	r1, [r7, #8]
 8006490:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d02e      	beq.n	80064fe <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80064ac:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	3b01      	subs	r3, #1
 80064ba:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80064bc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	3b01      	subs	r3, #1
 80064c4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80064c6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	3b01      	subs	r3, #1
 80064ce:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80064d0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	3b01      	subs	r3, #1
 80064d8:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80064da:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80064e4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	3b01      	subs	r3, #1
 80064ec:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80064ee:	4313      	orrs	r3, r2
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	609a      	str	r2, [r3, #8]
 80064fc:	e03b      	b.n	8006576 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800650a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800650e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	3b01      	subs	r3, #1
 8006516:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	3b01      	subs	r3, #1
 800651e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006520:	4313      	orrs	r3, r2
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	4313      	orrs	r3, r2
 8006526:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006534:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	3b01      	subs	r3, #1
 8006542:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006544:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	3b01      	subs	r3, #1
 800654c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800654e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	3b01      	subs	r3, #1
 8006556:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006558:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	3b01      	subs	r3, #1
 8006560:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006562:	4313      	orrs	r3, r2
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	4313      	orrs	r3, r2
 8006568:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	371c      	adds	r7, #28
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8006590:	2300      	movs	r3, #0
 8006592:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8006594:	2300      	movs	r3, #0
 8006596:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80065a0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80065aa:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80065b2:	4313      	orrs	r3, r2
 80065b4:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80065bc:	f7fc f916 	bl	80027ec <HAL_GetTick>
 80065c0:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80065c2:	e010      	b.n	80065e6 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ca:	d00c      	beq.n	80065e6 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d007      	beq.n	80065e2 <FMC_SDRAM_SendCommand+0x5e>
 80065d2:	f7fc f90b 	bl	80027ec <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d201      	bcs.n	80065e6 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e006      	b.n	80065f4 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	f003 0320 	and.w	r3, r3, #32
 80065ee:	2b20      	cmp	r3, #32
 80065f0:	d0e8      	beq.n	80065c4 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	695a      	ldr	r2, [r3, #20]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	431a      	orrs	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 8006622:	b480      	push	{r7}
 8006624:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 8006626:	bf00      	nop
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <__errno>:
 8006630:	4b01      	ldr	r3, [pc, #4]	; (8006638 <__errno+0x8>)
 8006632:	6818      	ldr	r0, [r3, #0]
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	20000050 	.word	0x20000050

0800663c <__libc_init_array>:
 800663c:	b570      	push	{r4, r5, r6, lr}
 800663e:	4e0d      	ldr	r6, [pc, #52]	; (8006674 <__libc_init_array+0x38>)
 8006640:	4c0d      	ldr	r4, [pc, #52]	; (8006678 <__libc_init_array+0x3c>)
 8006642:	1ba4      	subs	r4, r4, r6
 8006644:	10a4      	asrs	r4, r4, #2
 8006646:	2500      	movs	r5, #0
 8006648:	42a5      	cmp	r5, r4
 800664a:	d109      	bne.n	8006660 <__libc_init_array+0x24>
 800664c:	4e0b      	ldr	r6, [pc, #44]	; (800667c <__libc_init_array+0x40>)
 800664e:	4c0c      	ldr	r4, [pc, #48]	; (8006680 <__libc_init_array+0x44>)
 8006650:	f000 fc88 	bl	8006f64 <_init>
 8006654:	1ba4      	subs	r4, r4, r6
 8006656:	10a4      	asrs	r4, r4, #2
 8006658:	2500      	movs	r5, #0
 800665a:	42a5      	cmp	r5, r4
 800665c:	d105      	bne.n	800666a <__libc_init_array+0x2e>
 800665e:	bd70      	pop	{r4, r5, r6, pc}
 8006660:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006664:	4798      	blx	r3
 8006666:	3501      	adds	r5, #1
 8006668:	e7ee      	b.n	8006648 <__libc_init_array+0xc>
 800666a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800666e:	4798      	blx	r3
 8006670:	3501      	adds	r5, #1
 8006672:	e7f2      	b.n	800665a <__libc_init_array+0x1e>
 8006674:	08008af8 	.word	0x08008af8
 8006678:	08008af8 	.word	0x08008af8
 800667c:	08008af8 	.word	0x08008af8
 8006680:	08008afc 	.word	0x08008afc

08006684 <memset>:
 8006684:	4402      	add	r2, r0
 8006686:	4603      	mov	r3, r0
 8006688:	4293      	cmp	r3, r2
 800668a:	d100      	bne.n	800668e <memset+0xa>
 800668c:	4770      	bx	lr
 800668e:	f803 1b01 	strb.w	r1, [r3], #1
 8006692:	e7f9      	b.n	8006688 <memset+0x4>

08006694 <_free_r>:
 8006694:	b538      	push	{r3, r4, r5, lr}
 8006696:	4605      	mov	r5, r0
 8006698:	2900      	cmp	r1, #0
 800669a:	d045      	beq.n	8006728 <_free_r+0x94>
 800669c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066a0:	1f0c      	subs	r4, r1, #4
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	bfb8      	it	lt
 80066a6:	18e4      	addlt	r4, r4, r3
 80066a8:	f000 fbae 	bl	8006e08 <__malloc_lock>
 80066ac:	4a1f      	ldr	r2, [pc, #124]	; (800672c <_free_r+0x98>)
 80066ae:	6813      	ldr	r3, [r2, #0]
 80066b0:	4610      	mov	r0, r2
 80066b2:	b933      	cbnz	r3, 80066c2 <_free_r+0x2e>
 80066b4:	6063      	str	r3, [r4, #4]
 80066b6:	6014      	str	r4, [r2, #0]
 80066b8:	4628      	mov	r0, r5
 80066ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066be:	f000 bba4 	b.w	8006e0a <__malloc_unlock>
 80066c2:	42a3      	cmp	r3, r4
 80066c4:	d90c      	bls.n	80066e0 <_free_r+0x4c>
 80066c6:	6821      	ldr	r1, [r4, #0]
 80066c8:	1862      	adds	r2, r4, r1
 80066ca:	4293      	cmp	r3, r2
 80066cc:	bf04      	itt	eq
 80066ce:	681a      	ldreq	r2, [r3, #0]
 80066d0:	685b      	ldreq	r3, [r3, #4]
 80066d2:	6063      	str	r3, [r4, #4]
 80066d4:	bf04      	itt	eq
 80066d6:	1852      	addeq	r2, r2, r1
 80066d8:	6022      	streq	r2, [r4, #0]
 80066da:	6004      	str	r4, [r0, #0]
 80066dc:	e7ec      	b.n	80066b8 <_free_r+0x24>
 80066de:	4613      	mov	r3, r2
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	b10a      	cbz	r2, 80066e8 <_free_r+0x54>
 80066e4:	42a2      	cmp	r2, r4
 80066e6:	d9fa      	bls.n	80066de <_free_r+0x4a>
 80066e8:	6819      	ldr	r1, [r3, #0]
 80066ea:	1858      	adds	r0, r3, r1
 80066ec:	42a0      	cmp	r0, r4
 80066ee:	d10b      	bne.n	8006708 <_free_r+0x74>
 80066f0:	6820      	ldr	r0, [r4, #0]
 80066f2:	4401      	add	r1, r0
 80066f4:	1858      	adds	r0, r3, r1
 80066f6:	4282      	cmp	r2, r0
 80066f8:	6019      	str	r1, [r3, #0]
 80066fa:	d1dd      	bne.n	80066b8 <_free_r+0x24>
 80066fc:	6810      	ldr	r0, [r2, #0]
 80066fe:	6852      	ldr	r2, [r2, #4]
 8006700:	605a      	str	r2, [r3, #4]
 8006702:	4401      	add	r1, r0
 8006704:	6019      	str	r1, [r3, #0]
 8006706:	e7d7      	b.n	80066b8 <_free_r+0x24>
 8006708:	d902      	bls.n	8006710 <_free_r+0x7c>
 800670a:	230c      	movs	r3, #12
 800670c:	602b      	str	r3, [r5, #0]
 800670e:	e7d3      	b.n	80066b8 <_free_r+0x24>
 8006710:	6820      	ldr	r0, [r4, #0]
 8006712:	1821      	adds	r1, r4, r0
 8006714:	428a      	cmp	r2, r1
 8006716:	bf04      	itt	eq
 8006718:	6811      	ldreq	r1, [r2, #0]
 800671a:	6852      	ldreq	r2, [r2, #4]
 800671c:	6062      	str	r2, [r4, #4]
 800671e:	bf04      	itt	eq
 8006720:	1809      	addeq	r1, r1, r0
 8006722:	6021      	streq	r1, [r4, #0]
 8006724:	605c      	str	r4, [r3, #4]
 8006726:	e7c7      	b.n	80066b8 <_free_r+0x24>
 8006728:	bd38      	pop	{r3, r4, r5, pc}
 800672a:	bf00      	nop
 800672c:	20000530 	.word	0x20000530

08006730 <_malloc_r>:
 8006730:	b570      	push	{r4, r5, r6, lr}
 8006732:	1ccd      	adds	r5, r1, #3
 8006734:	f025 0503 	bic.w	r5, r5, #3
 8006738:	3508      	adds	r5, #8
 800673a:	2d0c      	cmp	r5, #12
 800673c:	bf38      	it	cc
 800673e:	250c      	movcc	r5, #12
 8006740:	2d00      	cmp	r5, #0
 8006742:	4606      	mov	r6, r0
 8006744:	db01      	blt.n	800674a <_malloc_r+0x1a>
 8006746:	42a9      	cmp	r1, r5
 8006748:	d903      	bls.n	8006752 <_malloc_r+0x22>
 800674a:	230c      	movs	r3, #12
 800674c:	6033      	str	r3, [r6, #0]
 800674e:	2000      	movs	r0, #0
 8006750:	bd70      	pop	{r4, r5, r6, pc}
 8006752:	f000 fb59 	bl	8006e08 <__malloc_lock>
 8006756:	4a21      	ldr	r2, [pc, #132]	; (80067dc <_malloc_r+0xac>)
 8006758:	6814      	ldr	r4, [r2, #0]
 800675a:	4621      	mov	r1, r4
 800675c:	b991      	cbnz	r1, 8006784 <_malloc_r+0x54>
 800675e:	4c20      	ldr	r4, [pc, #128]	; (80067e0 <_malloc_r+0xb0>)
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	b91b      	cbnz	r3, 800676c <_malloc_r+0x3c>
 8006764:	4630      	mov	r0, r6
 8006766:	f000 f8a1 	bl	80068ac <_sbrk_r>
 800676a:	6020      	str	r0, [r4, #0]
 800676c:	4629      	mov	r1, r5
 800676e:	4630      	mov	r0, r6
 8006770:	f000 f89c 	bl	80068ac <_sbrk_r>
 8006774:	1c43      	adds	r3, r0, #1
 8006776:	d124      	bne.n	80067c2 <_malloc_r+0x92>
 8006778:	230c      	movs	r3, #12
 800677a:	6033      	str	r3, [r6, #0]
 800677c:	4630      	mov	r0, r6
 800677e:	f000 fb44 	bl	8006e0a <__malloc_unlock>
 8006782:	e7e4      	b.n	800674e <_malloc_r+0x1e>
 8006784:	680b      	ldr	r3, [r1, #0]
 8006786:	1b5b      	subs	r3, r3, r5
 8006788:	d418      	bmi.n	80067bc <_malloc_r+0x8c>
 800678a:	2b0b      	cmp	r3, #11
 800678c:	d90f      	bls.n	80067ae <_malloc_r+0x7e>
 800678e:	600b      	str	r3, [r1, #0]
 8006790:	50cd      	str	r5, [r1, r3]
 8006792:	18cc      	adds	r4, r1, r3
 8006794:	4630      	mov	r0, r6
 8006796:	f000 fb38 	bl	8006e0a <__malloc_unlock>
 800679a:	f104 000b 	add.w	r0, r4, #11
 800679e:	1d23      	adds	r3, r4, #4
 80067a0:	f020 0007 	bic.w	r0, r0, #7
 80067a4:	1ac3      	subs	r3, r0, r3
 80067a6:	d0d3      	beq.n	8006750 <_malloc_r+0x20>
 80067a8:	425a      	negs	r2, r3
 80067aa:	50e2      	str	r2, [r4, r3]
 80067ac:	e7d0      	b.n	8006750 <_malloc_r+0x20>
 80067ae:	428c      	cmp	r4, r1
 80067b0:	684b      	ldr	r3, [r1, #4]
 80067b2:	bf16      	itet	ne
 80067b4:	6063      	strne	r3, [r4, #4]
 80067b6:	6013      	streq	r3, [r2, #0]
 80067b8:	460c      	movne	r4, r1
 80067ba:	e7eb      	b.n	8006794 <_malloc_r+0x64>
 80067bc:	460c      	mov	r4, r1
 80067be:	6849      	ldr	r1, [r1, #4]
 80067c0:	e7cc      	b.n	800675c <_malloc_r+0x2c>
 80067c2:	1cc4      	adds	r4, r0, #3
 80067c4:	f024 0403 	bic.w	r4, r4, #3
 80067c8:	42a0      	cmp	r0, r4
 80067ca:	d005      	beq.n	80067d8 <_malloc_r+0xa8>
 80067cc:	1a21      	subs	r1, r4, r0
 80067ce:	4630      	mov	r0, r6
 80067d0:	f000 f86c 	bl	80068ac <_sbrk_r>
 80067d4:	3001      	adds	r0, #1
 80067d6:	d0cf      	beq.n	8006778 <_malloc_r+0x48>
 80067d8:	6025      	str	r5, [r4, #0]
 80067da:	e7db      	b.n	8006794 <_malloc_r+0x64>
 80067dc:	20000530 	.word	0x20000530
 80067e0:	20000534 	.word	0x20000534

080067e4 <_puts_r>:
 80067e4:	b570      	push	{r4, r5, r6, lr}
 80067e6:	460e      	mov	r6, r1
 80067e8:	4605      	mov	r5, r0
 80067ea:	b118      	cbz	r0, 80067f4 <_puts_r+0x10>
 80067ec:	6983      	ldr	r3, [r0, #24]
 80067ee:	b90b      	cbnz	r3, 80067f4 <_puts_r+0x10>
 80067f0:	f000 fa1c 	bl	8006c2c <__sinit>
 80067f4:	69ab      	ldr	r3, [r5, #24]
 80067f6:	68ac      	ldr	r4, [r5, #8]
 80067f8:	b913      	cbnz	r3, 8006800 <_puts_r+0x1c>
 80067fa:	4628      	mov	r0, r5
 80067fc:	f000 fa16 	bl	8006c2c <__sinit>
 8006800:	4b23      	ldr	r3, [pc, #140]	; (8006890 <_puts_r+0xac>)
 8006802:	429c      	cmp	r4, r3
 8006804:	d117      	bne.n	8006836 <_puts_r+0x52>
 8006806:	686c      	ldr	r4, [r5, #4]
 8006808:	89a3      	ldrh	r3, [r4, #12]
 800680a:	071b      	lsls	r3, r3, #28
 800680c:	d51d      	bpl.n	800684a <_puts_r+0x66>
 800680e:	6923      	ldr	r3, [r4, #16]
 8006810:	b1db      	cbz	r3, 800684a <_puts_r+0x66>
 8006812:	3e01      	subs	r6, #1
 8006814:	68a3      	ldr	r3, [r4, #8]
 8006816:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800681a:	3b01      	subs	r3, #1
 800681c:	60a3      	str	r3, [r4, #8]
 800681e:	b9e9      	cbnz	r1, 800685c <_puts_r+0x78>
 8006820:	2b00      	cmp	r3, #0
 8006822:	da2e      	bge.n	8006882 <_puts_r+0x9e>
 8006824:	4622      	mov	r2, r4
 8006826:	210a      	movs	r1, #10
 8006828:	4628      	mov	r0, r5
 800682a:	f000 f84f 	bl	80068cc <__swbuf_r>
 800682e:	3001      	adds	r0, #1
 8006830:	d011      	beq.n	8006856 <_puts_r+0x72>
 8006832:	200a      	movs	r0, #10
 8006834:	e011      	b.n	800685a <_puts_r+0x76>
 8006836:	4b17      	ldr	r3, [pc, #92]	; (8006894 <_puts_r+0xb0>)
 8006838:	429c      	cmp	r4, r3
 800683a:	d101      	bne.n	8006840 <_puts_r+0x5c>
 800683c:	68ac      	ldr	r4, [r5, #8]
 800683e:	e7e3      	b.n	8006808 <_puts_r+0x24>
 8006840:	4b15      	ldr	r3, [pc, #84]	; (8006898 <_puts_r+0xb4>)
 8006842:	429c      	cmp	r4, r3
 8006844:	bf08      	it	eq
 8006846:	68ec      	ldreq	r4, [r5, #12]
 8006848:	e7de      	b.n	8006808 <_puts_r+0x24>
 800684a:	4621      	mov	r1, r4
 800684c:	4628      	mov	r0, r5
 800684e:	f000 f88f 	bl	8006970 <__swsetup_r>
 8006852:	2800      	cmp	r0, #0
 8006854:	d0dd      	beq.n	8006812 <_puts_r+0x2e>
 8006856:	f04f 30ff 	mov.w	r0, #4294967295
 800685a:	bd70      	pop	{r4, r5, r6, pc}
 800685c:	2b00      	cmp	r3, #0
 800685e:	da04      	bge.n	800686a <_puts_r+0x86>
 8006860:	69a2      	ldr	r2, [r4, #24]
 8006862:	429a      	cmp	r2, r3
 8006864:	dc06      	bgt.n	8006874 <_puts_r+0x90>
 8006866:	290a      	cmp	r1, #10
 8006868:	d004      	beq.n	8006874 <_puts_r+0x90>
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	1c5a      	adds	r2, r3, #1
 800686e:	6022      	str	r2, [r4, #0]
 8006870:	7019      	strb	r1, [r3, #0]
 8006872:	e7cf      	b.n	8006814 <_puts_r+0x30>
 8006874:	4622      	mov	r2, r4
 8006876:	4628      	mov	r0, r5
 8006878:	f000 f828 	bl	80068cc <__swbuf_r>
 800687c:	3001      	adds	r0, #1
 800687e:	d1c9      	bne.n	8006814 <_puts_r+0x30>
 8006880:	e7e9      	b.n	8006856 <_puts_r+0x72>
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	200a      	movs	r0, #10
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	6022      	str	r2, [r4, #0]
 800688a:	7018      	strb	r0, [r3, #0]
 800688c:	e7e5      	b.n	800685a <_puts_r+0x76>
 800688e:	bf00      	nop
 8006890:	08008ab0 	.word	0x08008ab0
 8006894:	08008ad0 	.word	0x08008ad0
 8006898:	08008a90 	.word	0x08008a90

0800689c <puts>:
 800689c:	4b02      	ldr	r3, [pc, #8]	; (80068a8 <puts+0xc>)
 800689e:	4601      	mov	r1, r0
 80068a0:	6818      	ldr	r0, [r3, #0]
 80068a2:	f7ff bf9f 	b.w	80067e4 <_puts_r>
 80068a6:	bf00      	nop
 80068a8:	20000050 	.word	0x20000050

080068ac <_sbrk_r>:
 80068ac:	b538      	push	{r3, r4, r5, lr}
 80068ae:	4c06      	ldr	r4, [pc, #24]	; (80068c8 <_sbrk_r+0x1c>)
 80068b0:	2300      	movs	r3, #0
 80068b2:	4605      	mov	r5, r0
 80068b4:	4608      	mov	r0, r1
 80068b6:	6023      	str	r3, [r4, #0]
 80068b8:	f7fb febc 	bl	8002634 <_sbrk>
 80068bc:	1c43      	adds	r3, r0, #1
 80068be:	d102      	bne.n	80068c6 <_sbrk_r+0x1a>
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	b103      	cbz	r3, 80068c6 <_sbrk_r+0x1a>
 80068c4:	602b      	str	r3, [r5, #0]
 80068c6:	bd38      	pop	{r3, r4, r5, pc}
 80068c8:	20000540 	.word	0x20000540

080068cc <__swbuf_r>:
 80068cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ce:	460e      	mov	r6, r1
 80068d0:	4614      	mov	r4, r2
 80068d2:	4605      	mov	r5, r0
 80068d4:	b118      	cbz	r0, 80068de <__swbuf_r+0x12>
 80068d6:	6983      	ldr	r3, [r0, #24]
 80068d8:	b90b      	cbnz	r3, 80068de <__swbuf_r+0x12>
 80068da:	f000 f9a7 	bl	8006c2c <__sinit>
 80068de:	4b21      	ldr	r3, [pc, #132]	; (8006964 <__swbuf_r+0x98>)
 80068e0:	429c      	cmp	r4, r3
 80068e2:	d12a      	bne.n	800693a <__swbuf_r+0x6e>
 80068e4:	686c      	ldr	r4, [r5, #4]
 80068e6:	69a3      	ldr	r3, [r4, #24]
 80068e8:	60a3      	str	r3, [r4, #8]
 80068ea:	89a3      	ldrh	r3, [r4, #12]
 80068ec:	071a      	lsls	r2, r3, #28
 80068ee:	d52e      	bpl.n	800694e <__swbuf_r+0x82>
 80068f0:	6923      	ldr	r3, [r4, #16]
 80068f2:	b363      	cbz	r3, 800694e <__swbuf_r+0x82>
 80068f4:	6923      	ldr	r3, [r4, #16]
 80068f6:	6820      	ldr	r0, [r4, #0]
 80068f8:	1ac0      	subs	r0, r0, r3
 80068fa:	6963      	ldr	r3, [r4, #20]
 80068fc:	b2f6      	uxtb	r6, r6
 80068fe:	4283      	cmp	r3, r0
 8006900:	4637      	mov	r7, r6
 8006902:	dc04      	bgt.n	800690e <__swbuf_r+0x42>
 8006904:	4621      	mov	r1, r4
 8006906:	4628      	mov	r0, r5
 8006908:	f000 f926 	bl	8006b58 <_fflush_r>
 800690c:	bb28      	cbnz	r0, 800695a <__swbuf_r+0x8e>
 800690e:	68a3      	ldr	r3, [r4, #8]
 8006910:	3b01      	subs	r3, #1
 8006912:	60a3      	str	r3, [r4, #8]
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	6022      	str	r2, [r4, #0]
 800691a:	701e      	strb	r6, [r3, #0]
 800691c:	6963      	ldr	r3, [r4, #20]
 800691e:	3001      	adds	r0, #1
 8006920:	4283      	cmp	r3, r0
 8006922:	d004      	beq.n	800692e <__swbuf_r+0x62>
 8006924:	89a3      	ldrh	r3, [r4, #12]
 8006926:	07db      	lsls	r3, r3, #31
 8006928:	d519      	bpl.n	800695e <__swbuf_r+0x92>
 800692a:	2e0a      	cmp	r6, #10
 800692c:	d117      	bne.n	800695e <__swbuf_r+0x92>
 800692e:	4621      	mov	r1, r4
 8006930:	4628      	mov	r0, r5
 8006932:	f000 f911 	bl	8006b58 <_fflush_r>
 8006936:	b190      	cbz	r0, 800695e <__swbuf_r+0x92>
 8006938:	e00f      	b.n	800695a <__swbuf_r+0x8e>
 800693a:	4b0b      	ldr	r3, [pc, #44]	; (8006968 <__swbuf_r+0x9c>)
 800693c:	429c      	cmp	r4, r3
 800693e:	d101      	bne.n	8006944 <__swbuf_r+0x78>
 8006940:	68ac      	ldr	r4, [r5, #8]
 8006942:	e7d0      	b.n	80068e6 <__swbuf_r+0x1a>
 8006944:	4b09      	ldr	r3, [pc, #36]	; (800696c <__swbuf_r+0xa0>)
 8006946:	429c      	cmp	r4, r3
 8006948:	bf08      	it	eq
 800694a:	68ec      	ldreq	r4, [r5, #12]
 800694c:	e7cb      	b.n	80068e6 <__swbuf_r+0x1a>
 800694e:	4621      	mov	r1, r4
 8006950:	4628      	mov	r0, r5
 8006952:	f000 f80d 	bl	8006970 <__swsetup_r>
 8006956:	2800      	cmp	r0, #0
 8006958:	d0cc      	beq.n	80068f4 <__swbuf_r+0x28>
 800695a:	f04f 37ff 	mov.w	r7, #4294967295
 800695e:	4638      	mov	r0, r7
 8006960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006962:	bf00      	nop
 8006964:	08008ab0 	.word	0x08008ab0
 8006968:	08008ad0 	.word	0x08008ad0
 800696c:	08008a90 	.word	0x08008a90

08006970 <__swsetup_r>:
 8006970:	4b32      	ldr	r3, [pc, #200]	; (8006a3c <__swsetup_r+0xcc>)
 8006972:	b570      	push	{r4, r5, r6, lr}
 8006974:	681d      	ldr	r5, [r3, #0]
 8006976:	4606      	mov	r6, r0
 8006978:	460c      	mov	r4, r1
 800697a:	b125      	cbz	r5, 8006986 <__swsetup_r+0x16>
 800697c:	69ab      	ldr	r3, [r5, #24]
 800697e:	b913      	cbnz	r3, 8006986 <__swsetup_r+0x16>
 8006980:	4628      	mov	r0, r5
 8006982:	f000 f953 	bl	8006c2c <__sinit>
 8006986:	4b2e      	ldr	r3, [pc, #184]	; (8006a40 <__swsetup_r+0xd0>)
 8006988:	429c      	cmp	r4, r3
 800698a:	d10f      	bne.n	80069ac <__swsetup_r+0x3c>
 800698c:	686c      	ldr	r4, [r5, #4]
 800698e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006992:	b29a      	uxth	r2, r3
 8006994:	0715      	lsls	r5, r2, #28
 8006996:	d42c      	bmi.n	80069f2 <__swsetup_r+0x82>
 8006998:	06d0      	lsls	r0, r2, #27
 800699a:	d411      	bmi.n	80069c0 <__swsetup_r+0x50>
 800699c:	2209      	movs	r2, #9
 800699e:	6032      	str	r2, [r6, #0]
 80069a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069a4:	81a3      	strh	r3, [r4, #12]
 80069a6:	f04f 30ff 	mov.w	r0, #4294967295
 80069aa:	e03e      	b.n	8006a2a <__swsetup_r+0xba>
 80069ac:	4b25      	ldr	r3, [pc, #148]	; (8006a44 <__swsetup_r+0xd4>)
 80069ae:	429c      	cmp	r4, r3
 80069b0:	d101      	bne.n	80069b6 <__swsetup_r+0x46>
 80069b2:	68ac      	ldr	r4, [r5, #8]
 80069b4:	e7eb      	b.n	800698e <__swsetup_r+0x1e>
 80069b6:	4b24      	ldr	r3, [pc, #144]	; (8006a48 <__swsetup_r+0xd8>)
 80069b8:	429c      	cmp	r4, r3
 80069ba:	bf08      	it	eq
 80069bc:	68ec      	ldreq	r4, [r5, #12]
 80069be:	e7e6      	b.n	800698e <__swsetup_r+0x1e>
 80069c0:	0751      	lsls	r1, r2, #29
 80069c2:	d512      	bpl.n	80069ea <__swsetup_r+0x7a>
 80069c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069c6:	b141      	cbz	r1, 80069da <__swsetup_r+0x6a>
 80069c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069cc:	4299      	cmp	r1, r3
 80069ce:	d002      	beq.n	80069d6 <__swsetup_r+0x66>
 80069d0:	4630      	mov	r0, r6
 80069d2:	f7ff fe5f 	bl	8006694 <_free_r>
 80069d6:	2300      	movs	r3, #0
 80069d8:	6363      	str	r3, [r4, #52]	; 0x34
 80069da:	89a3      	ldrh	r3, [r4, #12]
 80069dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069e0:	81a3      	strh	r3, [r4, #12]
 80069e2:	2300      	movs	r3, #0
 80069e4:	6063      	str	r3, [r4, #4]
 80069e6:	6923      	ldr	r3, [r4, #16]
 80069e8:	6023      	str	r3, [r4, #0]
 80069ea:	89a3      	ldrh	r3, [r4, #12]
 80069ec:	f043 0308 	orr.w	r3, r3, #8
 80069f0:	81a3      	strh	r3, [r4, #12]
 80069f2:	6923      	ldr	r3, [r4, #16]
 80069f4:	b94b      	cbnz	r3, 8006a0a <__swsetup_r+0x9a>
 80069f6:	89a3      	ldrh	r3, [r4, #12]
 80069f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a00:	d003      	beq.n	8006a0a <__swsetup_r+0x9a>
 8006a02:	4621      	mov	r1, r4
 8006a04:	4630      	mov	r0, r6
 8006a06:	f000 f9bf 	bl	8006d88 <__smakebuf_r>
 8006a0a:	89a2      	ldrh	r2, [r4, #12]
 8006a0c:	f012 0301 	ands.w	r3, r2, #1
 8006a10:	d00c      	beq.n	8006a2c <__swsetup_r+0xbc>
 8006a12:	2300      	movs	r3, #0
 8006a14:	60a3      	str	r3, [r4, #8]
 8006a16:	6963      	ldr	r3, [r4, #20]
 8006a18:	425b      	negs	r3, r3
 8006a1a:	61a3      	str	r3, [r4, #24]
 8006a1c:	6923      	ldr	r3, [r4, #16]
 8006a1e:	b953      	cbnz	r3, 8006a36 <__swsetup_r+0xc6>
 8006a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a24:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006a28:	d1ba      	bne.n	80069a0 <__swsetup_r+0x30>
 8006a2a:	bd70      	pop	{r4, r5, r6, pc}
 8006a2c:	0792      	lsls	r2, r2, #30
 8006a2e:	bf58      	it	pl
 8006a30:	6963      	ldrpl	r3, [r4, #20]
 8006a32:	60a3      	str	r3, [r4, #8]
 8006a34:	e7f2      	b.n	8006a1c <__swsetup_r+0xac>
 8006a36:	2000      	movs	r0, #0
 8006a38:	e7f7      	b.n	8006a2a <__swsetup_r+0xba>
 8006a3a:	bf00      	nop
 8006a3c:	20000050 	.word	0x20000050
 8006a40:	08008ab0 	.word	0x08008ab0
 8006a44:	08008ad0 	.word	0x08008ad0
 8006a48:	08008a90 	.word	0x08008a90

08006a4c <__sflush_r>:
 8006a4c:	898a      	ldrh	r2, [r1, #12]
 8006a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a52:	4605      	mov	r5, r0
 8006a54:	0710      	lsls	r0, r2, #28
 8006a56:	460c      	mov	r4, r1
 8006a58:	d458      	bmi.n	8006b0c <__sflush_r+0xc0>
 8006a5a:	684b      	ldr	r3, [r1, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	dc05      	bgt.n	8006a6c <__sflush_r+0x20>
 8006a60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	dc02      	bgt.n	8006a6c <__sflush_r+0x20>
 8006a66:	2000      	movs	r0, #0
 8006a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a6e:	2e00      	cmp	r6, #0
 8006a70:	d0f9      	beq.n	8006a66 <__sflush_r+0x1a>
 8006a72:	2300      	movs	r3, #0
 8006a74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a78:	682f      	ldr	r7, [r5, #0]
 8006a7a:	6a21      	ldr	r1, [r4, #32]
 8006a7c:	602b      	str	r3, [r5, #0]
 8006a7e:	d032      	beq.n	8006ae6 <__sflush_r+0x9a>
 8006a80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a82:	89a3      	ldrh	r3, [r4, #12]
 8006a84:	075a      	lsls	r2, r3, #29
 8006a86:	d505      	bpl.n	8006a94 <__sflush_r+0x48>
 8006a88:	6863      	ldr	r3, [r4, #4]
 8006a8a:	1ac0      	subs	r0, r0, r3
 8006a8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a8e:	b10b      	cbz	r3, 8006a94 <__sflush_r+0x48>
 8006a90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a92:	1ac0      	subs	r0, r0, r3
 8006a94:	2300      	movs	r3, #0
 8006a96:	4602      	mov	r2, r0
 8006a98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a9a:	6a21      	ldr	r1, [r4, #32]
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	47b0      	blx	r6
 8006aa0:	1c43      	adds	r3, r0, #1
 8006aa2:	89a3      	ldrh	r3, [r4, #12]
 8006aa4:	d106      	bne.n	8006ab4 <__sflush_r+0x68>
 8006aa6:	6829      	ldr	r1, [r5, #0]
 8006aa8:	291d      	cmp	r1, #29
 8006aaa:	d848      	bhi.n	8006b3e <__sflush_r+0xf2>
 8006aac:	4a29      	ldr	r2, [pc, #164]	; (8006b54 <__sflush_r+0x108>)
 8006aae:	40ca      	lsrs	r2, r1
 8006ab0:	07d6      	lsls	r6, r2, #31
 8006ab2:	d544      	bpl.n	8006b3e <__sflush_r+0xf2>
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	6062      	str	r2, [r4, #4]
 8006ab8:	04d9      	lsls	r1, r3, #19
 8006aba:	6922      	ldr	r2, [r4, #16]
 8006abc:	6022      	str	r2, [r4, #0]
 8006abe:	d504      	bpl.n	8006aca <__sflush_r+0x7e>
 8006ac0:	1c42      	adds	r2, r0, #1
 8006ac2:	d101      	bne.n	8006ac8 <__sflush_r+0x7c>
 8006ac4:	682b      	ldr	r3, [r5, #0]
 8006ac6:	b903      	cbnz	r3, 8006aca <__sflush_r+0x7e>
 8006ac8:	6560      	str	r0, [r4, #84]	; 0x54
 8006aca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006acc:	602f      	str	r7, [r5, #0]
 8006ace:	2900      	cmp	r1, #0
 8006ad0:	d0c9      	beq.n	8006a66 <__sflush_r+0x1a>
 8006ad2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ad6:	4299      	cmp	r1, r3
 8006ad8:	d002      	beq.n	8006ae0 <__sflush_r+0x94>
 8006ada:	4628      	mov	r0, r5
 8006adc:	f7ff fdda 	bl	8006694 <_free_r>
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	6360      	str	r0, [r4, #52]	; 0x34
 8006ae4:	e7c0      	b.n	8006a68 <__sflush_r+0x1c>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	4628      	mov	r0, r5
 8006aea:	47b0      	blx	r6
 8006aec:	1c41      	adds	r1, r0, #1
 8006aee:	d1c8      	bne.n	8006a82 <__sflush_r+0x36>
 8006af0:	682b      	ldr	r3, [r5, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d0c5      	beq.n	8006a82 <__sflush_r+0x36>
 8006af6:	2b1d      	cmp	r3, #29
 8006af8:	d001      	beq.n	8006afe <__sflush_r+0xb2>
 8006afa:	2b16      	cmp	r3, #22
 8006afc:	d101      	bne.n	8006b02 <__sflush_r+0xb6>
 8006afe:	602f      	str	r7, [r5, #0]
 8006b00:	e7b1      	b.n	8006a66 <__sflush_r+0x1a>
 8006b02:	89a3      	ldrh	r3, [r4, #12]
 8006b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b08:	81a3      	strh	r3, [r4, #12]
 8006b0a:	e7ad      	b.n	8006a68 <__sflush_r+0x1c>
 8006b0c:	690f      	ldr	r7, [r1, #16]
 8006b0e:	2f00      	cmp	r7, #0
 8006b10:	d0a9      	beq.n	8006a66 <__sflush_r+0x1a>
 8006b12:	0793      	lsls	r3, r2, #30
 8006b14:	680e      	ldr	r6, [r1, #0]
 8006b16:	bf08      	it	eq
 8006b18:	694b      	ldreq	r3, [r1, #20]
 8006b1a:	600f      	str	r7, [r1, #0]
 8006b1c:	bf18      	it	ne
 8006b1e:	2300      	movne	r3, #0
 8006b20:	eba6 0807 	sub.w	r8, r6, r7
 8006b24:	608b      	str	r3, [r1, #8]
 8006b26:	f1b8 0f00 	cmp.w	r8, #0
 8006b2a:	dd9c      	ble.n	8006a66 <__sflush_r+0x1a>
 8006b2c:	4643      	mov	r3, r8
 8006b2e:	463a      	mov	r2, r7
 8006b30:	6a21      	ldr	r1, [r4, #32]
 8006b32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b34:	4628      	mov	r0, r5
 8006b36:	47b0      	blx	r6
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	dc06      	bgt.n	8006b4a <__sflush_r+0xfe>
 8006b3c:	89a3      	ldrh	r3, [r4, #12]
 8006b3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b42:	81a3      	strh	r3, [r4, #12]
 8006b44:	f04f 30ff 	mov.w	r0, #4294967295
 8006b48:	e78e      	b.n	8006a68 <__sflush_r+0x1c>
 8006b4a:	4407      	add	r7, r0
 8006b4c:	eba8 0800 	sub.w	r8, r8, r0
 8006b50:	e7e9      	b.n	8006b26 <__sflush_r+0xda>
 8006b52:	bf00      	nop
 8006b54:	20400001 	.word	0x20400001

08006b58 <_fflush_r>:
 8006b58:	b538      	push	{r3, r4, r5, lr}
 8006b5a:	690b      	ldr	r3, [r1, #16]
 8006b5c:	4605      	mov	r5, r0
 8006b5e:	460c      	mov	r4, r1
 8006b60:	b1db      	cbz	r3, 8006b9a <_fflush_r+0x42>
 8006b62:	b118      	cbz	r0, 8006b6c <_fflush_r+0x14>
 8006b64:	6983      	ldr	r3, [r0, #24]
 8006b66:	b90b      	cbnz	r3, 8006b6c <_fflush_r+0x14>
 8006b68:	f000 f860 	bl	8006c2c <__sinit>
 8006b6c:	4b0c      	ldr	r3, [pc, #48]	; (8006ba0 <_fflush_r+0x48>)
 8006b6e:	429c      	cmp	r4, r3
 8006b70:	d109      	bne.n	8006b86 <_fflush_r+0x2e>
 8006b72:	686c      	ldr	r4, [r5, #4]
 8006b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b78:	b17b      	cbz	r3, 8006b9a <_fflush_r+0x42>
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b82:	f7ff bf63 	b.w	8006a4c <__sflush_r>
 8006b86:	4b07      	ldr	r3, [pc, #28]	; (8006ba4 <_fflush_r+0x4c>)
 8006b88:	429c      	cmp	r4, r3
 8006b8a:	d101      	bne.n	8006b90 <_fflush_r+0x38>
 8006b8c:	68ac      	ldr	r4, [r5, #8]
 8006b8e:	e7f1      	b.n	8006b74 <_fflush_r+0x1c>
 8006b90:	4b05      	ldr	r3, [pc, #20]	; (8006ba8 <_fflush_r+0x50>)
 8006b92:	429c      	cmp	r4, r3
 8006b94:	bf08      	it	eq
 8006b96:	68ec      	ldreq	r4, [r5, #12]
 8006b98:	e7ec      	b.n	8006b74 <_fflush_r+0x1c>
 8006b9a:	2000      	movs	r0, #0
 8006b9c:	bd38      	pop	{r3, r4, r5, pc}
 8006b9e:	bf00      	nop
 8006ba0:	08008ab0 	.word	0x08008ab0
 8006ba4:	08008ad0 	.word	0x08008ad0
 8006ba8:	08008a90 	.word	0x08008a90

08006bac <std>:
 8006bac:	2300      	movs	r3, #0
 8006bae:	b510      	push	{r4, lr}
 8006bb0:	4604      	mov	r4, r0
 8006bb2:	e9c0 3300 	strd	r3, r3, [r0]
 8006bb6:	6083      	str	r3, [r0, #8]
 8006bb8:	8181      	strh	r1, [r0, #12]
 8006bba:	6643      	str	r3, [r0, #100]	; 0x64
 8006bbc:	81c2      	strh	r2, [r0, #14]
 8006bbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bc2:	6183      	str	r3, [r0, #24]
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	2208      	movs	r2, #8
 8006bc8:	305c      	adds	r0, #92	; 0x5c
 8006bca:	f7ff fd5b 	bl	8006684 <memset>
 8006bce:	4b05      	ldr	r3, [pc, #20]	; (8006be4 <std+0x38>)
 8006bd0:	6263      	str	r3, [r4, #36]	; 0x24
 8006bd2:	4b05      	ldr	r3, [pc, #20]	; (8006be8 <std+0x3c>)
 8006bd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bd6:	4b05      	ldr	r3, [pc, #20]	; (8006bec <std+0x40>)
 8006bd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bda:	4b05      	ldr	r3, [pc, #20]	; (8006bf0 <std+0x44>)
 8006bdc:	6224      	str	r4, [r4, #32]
 8006bde:	6323      	str	r3, [r4, #48]	; 0x30
 8006be0:	bd10      	pop	{r4, pc}
 8006be2:	bf00      	nop
 8006be4:	08006e0d 	.word	0x08006e0d
 8006be8:	08006e2f 	.word	0x08006e2f
 8006bec:	08006e67 	.word	0x08006e67
 8006bf0:	08006e8b 	.word	0x08006e8b

08006bf4 <_cleanup_r>:
 8006bf4:	4901      	ldr	r1, [pc, #4]	; (8006bfc <_cleanup_r+0x8>)
 8006bf6:	f000 b885 	b.w	8006d04 <_fwalk_reent>
 8006bfa:	bf00      	nop
 8006bfc:	08006b59 	.word	0x08006b59

08006c00 <__sfmoreglue>:
 8006c00:	b570      	push	{r4, r5, r6, lr}
 8006c02:	1e4a      	subs	r2, r1, #1
 8006c04:	2568      	movs	r5, #104	; 0x68
 8006c06:	4355      	muls	r5, r2
 8006c08:	460e      	mov	r6, r1
 8006c0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c0e:	f7ff fd8f 	bl	8006730 <_malloc_r>
 8006c12:	4604      	mov	r4, r0
 8006c14:	b140      	cbz	r0, 8006c28 <__sfmoreglue+0x28>
 8006c16:	2100      	movs	r1, #0
 8006c18:	e9c0 1600 	strd	r1, r6, [r0]
 8006c1c:	300c      	adds	r0, #12
 8006c1e:	60a0      	str	r0, [r4, #8]
 8006c20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c24:	f7ff fd2e 	bl	8006684 <memset>
 8006c28:	4620      	mov	r0, r4
 8006c2a:	bd70      	pop	{r4, r5, r6, pc}

08006c2c <__sinit>:
 8006c2c:	6983      	ldr	r3, [r0, #24]
 8006c2e:	b510      	push	{r4, lr}
 8006c30:	4604      	mov	r4, r0
 8006c32:	bb33      	cbnz	r3, 8006c82 <__sinit+0x56>
 8006c34:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006c38:	6503      	str	r3, [r0, #80]	; 0x50
 8006c3a:	4b12      	ldr	r3, [pc, #72]	; (8006c84 <__sinit+0x58>)
 8006c3c:	4a12      	ldr	r2, [pc, #72]	; (8006c88 <__sinit+0x5c>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6282      	str	r2, [r0, #40]	; 0x28
 8006c42:	4298      	cmp	r0, r3
 8006c44:	bf04      	itt	eq
 8006c46:	2301      	moveq	r3, #1
 8006c48:	6183      	streq	r3, [r0, #24]
 8006c4a:	f000 f81f 	bl	8006c8c <__sfp>
 8006c4e:	6060      	str	r0, [r4, #4]
 8006c50:	4620      	mov	r0, r4
 8006c52:	f000 f81b 	bl	8006c8c <__sfp>
 8006c56:	60a0      	str	r0, [r4, #8]
 8006c58:	4620      	mov	r0, r4
 8006c5a:	f000 f817 	bl	8006c8c <__sfp>
 8006c5e:	2200      	movs	r2, #0
 8006c60:	60e0      	str	r0, [r4, #12]
 8006c62:	2104      	movs	r1, #4
 8006c64:	6860      	ldr	r0, [r4, #4]
 8006c66:	f7ff ffa1 	bl	8006bac <std>
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	2109      	movs	r1, #9
 8006c6e:	68a0      	ldr	r0, [r4, #8]
 8006c70:	f7ff ff9c 	bl	8006bac <std>
 8006c74:	2202      	movs	r2, #2
 8006c76:	2112      	movs	r1, #18
 8006c78:	68e0      	ldr	r0, [r4, #12]
 8006c7a:	f7ff ff97 	bl	8006bac <std>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	61a3      	str	r3, [r4, #24]
 8006c82:	bd10      	pop	{r4, pc}
 8006c84:	08008a8c 	.word	0x08008a8c
 8006c88:	08006bf5 	.word	0x08006bf5

08006c8c <__sfp>:
 8006c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8e:	4b1b      	ldr	r3, [pc, #108]	; (8006cfc <__sfp+0x70>)
 8006c90:	681e      	ldr	r6, [r3, #0]
 8006c92:	69b3      	ldr	r3, [r6, #24]
 8006c94:	4607      	mov	r7, r0
 8006c96:	b913      	cbnz	r3, 8006c9e <__sfp+0x12>
 8006c98:	4630      	mov	r0, r6
 8006c9a:	f7ff ffc7 	bl	8006c2c <__sinit>
 8006c9e:	3648      	adds	r6, #72	; 0x48
 8006ca0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	d503      	bpl.n	8006cb0 <__sfp+0x24>
 8006ca8:	6833      	ldr	r3, [r6, #0]
 8006caa:	b133      	cbz	r3, 8006cba <__sfp+0x2e>
 8006cac:	6836      	ldr	r6, [r6, #0]
 8006cae:	e7f7      	b.n	8006ca0 <__sfp+0x14>
 8006cb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006cb4:	b16d      	cbz	r5, 8006cd2 <__sfp+0x46>
 8006cb6:	3468      	adds	r4, #104	; 0x68
 8006cb8:	e7f4      	b.n	8006ca4 <__sfp+0x18>
 8006cba:	2104      	movs	r1, #4
 8006cbc:	4638      	mov	r0, r7
 8006cbe:	f7ff ff9f 	bl	8006c00 <__sfmoreglue>
 8006cc2:	6030      	str	r0, [r6, #0]
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d1f1      	bne.n	8006cac <__sfp+0x20>
 8006cc8:	230c      	movs	r3, #12
 8006cca:	603b      	str	r3, [r7, #0]
 8006ccc:	4604      	mov	r4, r0
 8006cce:	4620      	mov	r0, r4
 8006cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cd2:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <__sfp+0x74>)
 8006cd4:	6665      	str	r5, [r4, #100]	; 0x64
 8006cd6:	e9c4 5500 	strd	r5, r5, [r4]
 8006cda:	60a5      	str	r5, [r4, #8]
 8006cdc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006ce0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006ce4:	2208      	movs	r2, #8
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006cec:	f7ff fcca 	bl	8006684 <memset>
 8006cf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006cf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006cf8:	e7e9      	b.n	8006cce <__sfp+0x42>
 8006cfa:	bf00      	nop
 8006cfc:	08008a8c 	.word	0x08008a8c
 8006d00:	ffff0001 	.word	0xffff0001

08006d04 <_fwalk_reent>:
 8006d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d08:	4680      	mov	r8, r0
 8006d0a:	4689      	mov	r9, r1
 8006d0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d10:	2600      	movs	r6, #0
 8006d12:	b914      	cbnz	r4, 8006d1a <_fwalk_reent+0x16>
 8006d14:	4630      	mov	r0, r6
 8006d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d1a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006d1e:	3f01      	subs	r7, #1
 8006d20:	d501      	bpl.n	8006d26 <_fwalk_reent+0x22>
 8006d22:	6824      	ldr	r4, [r4, #0]
 8006d24:	e7f5      	b.n	8006d12 <_fwalk_reent+0xe>
 8006d26:	89ab      	ldrh	r3, [r5, #12]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d907      	bls.n	8006d3c <_fwalk_reent+0x38>
 8006d2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d30:	3301      	adds	r3, #1
 8006d32:	d003      	beq.n	8006d3c <_fwalk_reent+0x38>
 8006d34:	4629      	mov	r1, r5
 8006d36:	4640      	mov	r0, r8
 8006d38:	47c8      	blx	r9
 8006d3a:	4306      	orrs	r6, r0
 8006d3c:	3568      	adds	r5, #104	; 0x68
 8006d3e:	e7ee      	b.n	8006d1e <_fwalk_reent+0x1a>

08006d40 <__swhatbuf_r>:
 8006d40:	b570      	push	{r4, r5, r6, lr}
 8006d42:	460e      	mov	r6, r1
 8006d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d48:	2900      	cmp	r1, #0
 8006d4a:	b096      	sub	sp, #88	; 0x58
 8006d4c:	4614      	mov	r4, r2
 8006d4e:	461d      	mov	r5, r3
 8006d50:	da07      	bge.n	8006d62 <__swhatbuf_r+0x22>
 8006d52:	2300      	movs	r3, #0
 8006d54:	602b      	str	r3, [r5, #0]
 8006d56:	89b3      	ldrh	r3, [r6, #12]
 8006d58:	061a      	lsls	r2, r3, #24
 8006d5a:	d410      	bmi.n	8006d7e <__swhatbuf_r+0x3e>
 8006d5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d60:	e00e      	b.n	8006d80 <__swhatbuf_r+0x40>
 8006d62:	466a      	mov	r2, sp
 8006d64:	f000 f8b8 	bl	8006ed8 <_fstat_r>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	dbf2      	blt.n	8006d52 <__swhatbuf_r+0x12>
 8006d6c:	9a01      	ldr	r2, [sp, #4]
 8006d6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d76:	425a      	negs	r2, r3
 8006d78:	415a      	adcs	r2, r3
 8006d7a:	602a      	str	r2, [r5, #0]
 8006d7c:	e7ee      	b.n	8006d5c <__swhatbuf_r+0x1c>
 8006d7e:	2340      	movs	r3, #64	; 0x40
 8006d80:	2000      	movs	r0, #0
 8006d82:	6023      	str	r3, [r4, #0]
 8006d84:	b016      	add	sp, #88	; 0x58
 8006d86:	bd70      	pop	{r4, r5, r6, pc}

08006d88 <__smakebuf_r>:
 8006d88:	898b      	ldrh	r3, [r1, #12]
 8006d8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d8c:	079d      	lsls	r5, r3, #30
 8006d8e:	4606      	mov	r6, r0
 8006d90:	460c      	mov	r4, r1
 8006d92:	d507      	bpl.n	8006da4 <__smakebuf_r+0x1c>
 8006d94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	6123      	str	r3, [r4, #16]
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	6163      	str	r3, [r4, #20]
 8006da0:	b002      	add	sp, #8
 8006da2:	bd70      	pop	{r4, r5, r6, pc}
 8006da4:	ab01      	add	r3, sp, #4
 8006da6:	466a      	mov	r2, sp
 8006da8:	f7ff ffca 	bl	8006d40 <__swhatbuf_r>
 8006dac:	9900      	ldr	r1, [sp, #0]
 8006dae:	4605      	mov	r5, r0
 8006db0:	4630      	mov	r0, r6
 8006db2:	f7ff fcbd 	bl	8006730 <_malloc_r>
 8006db6:	b948      	cbnz	r0, 8006dcc <__smakebuf_r+0x44>
 8006db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dbc:	059a      	lsls	r2, r3, #22
 8006dbe:	d4ef      	bmi.n	8006da0 <__smakebuf_r+0x18>
 8006dc0:	f023 0303 	bic.w	r3, r3, #3
 8006dc4:	f043 0302 	orr.w	r3, r3, #2
 8006dc8:	81a3      	strh	r3, [r4, #12]
 8006dca:	e7e3      	b.n	8006d94 <__smakebuf_r+0xc>
 8006dcc:	4b0d      	ldr	r3, [pc, #52]	; (8006e04 <__smakebuf_r+0x7c>)
 8006dce:	62b3      	str	r3, [r6, #40]	; 0x28
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	6020      	str	r0, [r4, #0]
 8006dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dd8:	81a3      	strh	r3, [r4, #12]
 8006dda:	9b00      	ldr	r3, [sp, #0]
 8006ddc:	6163      	str	r3, [r4, #20]
 8006dde:	9b01      	ldr	r3, [sp, #4]
 8006de0:	6120      	str	r0, [r4, #16]
 8006de2:	b15b      	cbz	r3, 8006dfc <__smakebuf_r+0x74>
 8006de4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006de8:	4630      	mov	r0, r6
 8006dea:	f000 f887 	bl	8006efc <_isatty_r>
 8006dee:	b128      	cbz	r0, 8006dfc <__smakebuf_r+0x74>
 8006df0:	89a3      	ldrh	r3, [r4, #12]
 8006df2:	f023 0303 	bic.w	r3, r3, #3
 8006df6:	f043 0301 	orr.w	r3, r3, #1
 8006dfa:	81a3      	strh	r3, [r4, #12]
 8006dfc:	89a3      	ldrh	r3, [r4, #12]
 8006dfe:	431d      	orrs	r5, r3
 8006e00:	81a5      	strh	r5, [r4, #12]
 8006e02:	e7cd      	b.n	8006da0 <__smakebuf_r+0x18>
 8006e04:	08006bf5 	.word	0x08006bf5

08006e08 <__malloc_lock>:
 8006e08:	4770      	bx	lr

08006e0a <__malloc_unlock>:
 8006e0a:	4770      	bx	lr

08006e0c <__sread>:
 8006e0c:	b510      	push	{r4, lr}
 8006e0e:	460c      	mov	r4, r1
 8006e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e14:	f000 f894 	bl	8006f40 <_read_r>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	bfab      	itete	ge
 8006e1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e1e:	89a3      	ldrhlt	r3, [r4, #12]
 8006e20:	181b      	addge	r3, r3, r0
 8006e22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e26:	bfac      	ite	ge
 8006e28:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e2a:	81a3      	strhlt	r3, [r4, #12]
 8006e2c:	bd10      	pop	{r4, pc}

08006e2e <__swrite>:
 8006e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e32:	461f      	mov	r7, r3
 8006e34:	898b      	ldrh	r3, [r1, #12]
 8006e36:	05db      	lsls	r3, r3, #23
 8006e38:	4605      	mov	r5, r0
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	4616      	mov	r6, r2
 8006e3e:	d505      	bpl.n	8006e4c <__swrite+0x1e>
 8006e40:	2302      	movs	r3, #2
 8006e42:	2200      	movs	r2, #0
 8006e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e48:	f000 f868 	bl	8006f1c <_lseek_r>
 8006e4c:	89a3      	ldrh	r3, [r4, #12]
 8006e4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e56:	81a3      	strh	r3, [r4, #12]
 8006e58:	4632      	mov	r2, r6
 8006e5a:	463b      	mov	r3, r7
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e62:	f000 b817 	b.w	8006e94 <_write_r>

08006e66 <__sseek>:
 8006e66:	b510      	push	{r4, lr}
 8006e68:	460c      	mov	r4, r1
 8006e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e6e:	f000 f855 	bl	8006f1c <_lseek_r>
 8006e72:	1c43      	adds	r3, r0, #1
 8006e74:	89a3      	ldrh	r3, [r4, #12]
 8006e76:	bf15      	itete	ne
 8006e78:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e82:	81a3      	strheq	r3, [r4, #12]
 8006e84:	bf18      	it	ne
 8006e86:	81a3      	strhne	r3, [r4, #12]
 8006e88:	bd10      	pop	{r4, pc}

08006e8a <__sclose>:
 8006e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e8e:	f000 b813 	b.w	8006eb8 <_close_r>
	...

08006e94 <_write_r>:
 8006e94:	b538      	push	{r3, r4, r5, lr}
 8006e96:	4c07      	ldr	r4, [pc, #28]	; (8006eb4 <_write_r+0x20>)
 8006e98:	4605      	mov	r5, r0
 8006e9a:	4608      	mov	r0, r1
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	6022      	str	r2, [r4, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f7fa f83c 	bl	8000f20 <_write>
 8006ea8:	1c43      	adds	r3, r0, #1
 8006eaa:	d102      	bne.n	8006eb2 <_write_r+0x1e>
 8006eac:	6823      	ldr	r3, [r4, #0]
 8006eae:	b103      	cbz	r3, 8006eb2 <_write_r+0x1e>
 8006eb0:	602b      	str	r3, [r5, #0]
 8006eb2:	bd38      	pop	{r3, r4, r5, pc}
 8006eb4:	20000540 	.word	0x20000540

08006eb8 <_close_r>:
 8006eb8:	b538      	push	{r3, r4, r5, lr}
 8006eba:	4c06      	ldr	r4, [pc, #24]	; (8006ed4 <_close_r+0x1c>)
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	4605      	mov	r5, r0
 8006ec0:	4608      	mov	r0, r1
 8006ec2:	6023      	str	r3, [r4, #0]
 8006ec4:	f7fb fb81 	bl	80025ca <_close>
 8006ec8:	1c43      	adds	r3, r0, #1
 8006eca:	d102      	bne.n	8006ed2 <_close_r+0x1a>
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	b103      	cbz	r3, 8006ed2 <_close_r+0x1a>
 8006ed0:	602b      	str	r3, [r5, #0]
 8006ed2:	bd38      	pop	{r3, r4, r5, pc}
 8006ed4:	20000540 	.word	0x20000540

08006ed8 <_fstat_r>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	4c07      	ldr	r4, [pc, #28]	; (8006ef8 <_fstat_r+0x20>)
 8006edc:	2300      	movs	r3, #0
 8006ede:	4605      	mov	r5, r0
 8006ee0:	4608      	mov	r0, r1
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	f7fb fb7c 	bl	80025e2 <_fstat>
 8006eea:	1c43      	adds	r3, r0, #1
 8006eec:	d102      	bne.n	8006ef4 <_fstat_r+0x1c>
 8006eee:	6823      	ldr	r3, [r4, #0]
 8006ef0:	b103      	cbz	r3, 8006ef4 <_fstat_r+0x1c>
 8006ef2:	602b      	str	r3, [r5, #0]
 8006ef4:	bd38      	pop	{r3, r4, r5, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20000540 	.word	0x20000540

08006efc <_isatty_r>:
 8006efc:	b538      	push	{r3, r4, r5, lr}
 8006efe:	4c06      	ldr	r4, [pc, #24]	; (8006f18 <_isatty_r+0x1c>)
 8006f00:	2300      	movs	r3, #0
 8006f02:	4605      	mov	r5, r0
 8006f04:	4608      	mov	r0, r1
 8006f06:	6023      	str	r3, [r4, #0]
 8006f08:	f7fb fb7b 	bl	8002602 <_isatty>
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	d102      	bne.n	8006f16 <_isatty_r+0x1a>
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	b103      	cbz	r3, 8006f16 <_isatty_r+0x1a>
 8006f14:	602b      	str	r3, [r5, #0]
 8006f16:	bd38      	pop	{r3, r4, r5, pc}
 8006f18:	20000540 	.word	0x20000540

08006f1c <_lseek_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	4c07      	ldr	r4, [pc, #28]	; (8006f3c <_lseek_r+0x20>)
 8006f20:	4605      	mov	r5, r0
 8006f22:	4608      	mov	r0, r1
 8006f24:	4611      	mov	r1, r2
 8006f26:	2200      	movs	r2, #0
 8006f28:	6022      	str	r2, [r4, #0]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	f7fb fb74 	bl	8002618 <_lseek>
 8006f30:	1c43      	adds	r3, r0, #1
 8006f32:	d102      	bne.n	8006f3a <_lseek_r+0x1e>
 8006f34:	6823      	ldr	r3, [r4, #0]
 8006f36:	b103      	cbz	r3, 8006f3a <_lseek_r+0x1e>
 8006f38:	602b      	str	r3, [r5, #0]
 8006f3a:	bd38      	pop	{r3, r4, r5, pc}
 8006f3c:	20000540 	.word	0x20000540

08006f40 <_read_r>:
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	4c07      	ldr	r4, [pc, #28]	; (8006f60 <_read_r+0x20>)
 8006f44:	4605      	mov	r5, r0
 8006f46:	4608      	mov	r0, r1
 8006f48:	4611      	mov	r1, r2
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	6022      	str	r2, [r4, #0]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	f7fb fb1e 	bl	8002590 <_read>
 8006f54:	1c43      	adds	r3, r0, #1
 8006f56:	d102      	bne.n	8006f5e <_read_r+0x1e>
 8006f58:	6823      	ldr	r3, [r4, #0]
 8006f5a:	b103      	cbz	r3, 8006f5e <_read_r+0x1e>
 8006f5c:	602b      	str	r3, [r5, #0]
 8006f5e:	bd38      	pop	{r3, r4, r5, pc}
 8006f60:	20000540 	.word	0x20000540

08006f64 <_init>:
 8006f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f66:	bf00      	nop
 8006f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f6a:	bc08      	pop	{r3}
 8006f6c:	469e      	mov	lr, r3
 8006f6e:	4770      	bx	lr

08006f70 <_fini>:
 8006f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f72:	bf00      	nop
 8006f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f76:	bc08      	pop	{r3}
 8006f78:	469e      	mov	lr, r3
 8006f7a:	4770      	bx	lr
