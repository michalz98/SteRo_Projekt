
Animacje_Nowy_Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074ac  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001af8  08007658  08007658  00017658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009150  08009150  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  08009150  08009150  00019150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009158  08009158  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009158  08009158  00019158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800915c  0800915c  0001915c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08009160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  200000b4  08009214  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  08009214  0002058c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002411e  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004bf1  00000000  00000000  00044202  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001bc0  00000000  00000000  00048df8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019e0  00000000  00000000  0004a9b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a893  00000000  00000000  0004c398  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018d0b  00000000  00000000  00076c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eef02  00000000  00000000  0008f936  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017e838  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079c4  00000000  00000000  0017e8b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000b4 	.word	0x200000b4
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007640 	.word	0x08007640

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200000b8 	.word	0x200000b8
 80001e8:	08007640 	.word	0x08007640

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <_ZN6CircleC1Ei>:
 *  Created on: May 24, 2021
 *      Author: michal
 */
#include <Circle.h>

Circle::Circle(int r)
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	6039      	str	r1, [r7, #0]
{
	this->r = r;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	683a      	ldr	r2, [r7, #0]
 80004fa:	601a      	str	r2, [r3, #0]
}
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4618      	mov	r0, r3
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr

0800050a <_ZN6Circle10drawCircleEiiP5Stage>:


void Circle::drawCircle(int x, int y, Stage* stage)
{
 800050a:	b480      	push	{r7}
 800050c:	b089      	sub	sp, #36	; 0x24
 800050e:	af00      	add	r7, sp, #0
 8000510:	60f8      	str	r0, [r7, #12]
 8000512:	60b9      	str	r1, [r7, #8]
 8000514:	607a      	str	r2, [r7, #4]
 8000516:	603b      	str	r3, [r7, #0]
    int d = 1 - this->r;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f1c3 0301 	rsb	r3, r3, #1
 8000520:	61fb      	str	r3, [r7, #28]
    int x_t, y_t;
    x_t = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	61bb      	str	r3, [r7, #24]
    y_t = r;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	617b      	str	r3, [r7, #20]

    for(int i = 1; x_t < y_t; i++)
 800052c:	2301      	movs	r3, #1
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	69ba      	ldr	r2, [r7, #24]
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	429a      	cmp	r2, r3
 8000536:	f280 813f 	bge.w	80007b8 <_ZN6Circle10drawCircleEiiP5Stage+0x2ae>
    {
        if(d < 0)
 800053a:	69fb      	ldr	r3, [r7, #28]
 800053c:	2b00      	cmp	r3, #0
 800053e:	da09      	bge.n	8000554 <_ZN6Circle10drawCircleEiiP5Stage+0x4a>
        {
            x_t++;
 8000540:	69bb      	ldr	r3, [r7, #24]
 8000542:	3301      	adds	r3, #1
 8000544:	61bb      	str	r3, [r7, #24]
            d += 2*x_t+3;
 8000546:	69bb      	ldr	r3, [r7, #24]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	3303      	adds	r3, #3
 800054c:	69fa      	ldr	r2, [r7, #28]
 800054e:	4413      	add	r3, r2
 8000550:	61fb      	str	r3, [r7, #28]
 8000552:	e00d      	b.n	8000570 <_ZN6Circle10drawCircleEiiP5Stage+0x66>
        }
        else
        {
            x_t++;
 8000554:	69bb      	ldr	r3, [r7, #24]
 8000556:	3301      	adds	r3, #1
 8000558:	61bb      	str	r3, [r7, #24]
            y_t--;
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	3b01      	subs	r3, #1
 800055e:	617b      	str	r3, [r7, #20]
            d +=  2*(x_t - y_t)+5;
 8000560:	69ba      	ldr	r2, [r7, #24]
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	3305      	adds	r3, #5
 800056a:	69fa      	ldr	r2, [r7, #28]
 800056c:	4413      	add	r3, r2
 800056e:	61fb      	str	r3, [r7, #28]
        }
        if (x_t+x > 0 && x_t+x < 240 && y_t+y > 0 && y_t+y < 320)
 8000570:	69ba      	ldr	r2, [r7, #24]
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	4413      	add	r3, r2
 8000576:	2b00      	cmp	r3, #0
 8000578:	dd1e      	ble.n	80005b8 <_ZN6Circle10drawCircleEiiP5Stage+0xae>
 800057a:	69ba      	ldr	r2, [r7, #24]
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	4413      	add	r3, r2
 8000580:	2bef      	cmp	r3, #239	; 0xef
 8000582:	dc19      	bgt.n	80005b8 <_ZN6Circle10drawCircleEiiP5Stage+0xae>
 8000584:	697a      	ldr	r2, [r7, #20]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4413      	add	r3, r2
 800058a:	2b00      	cmp	r3, #0
 800058c:	dd14      	ble.n	80005b8 <_ZN6Circle10drawCircleEiiP5Stage+0xae>
 800058e:	697a      	ldr	r2, [r7, #20]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4413      	add	r3, r2
 8000594:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000598:	da0e      	bge.n	80005b8 <_ZN6Circle10drawCircleEiiP5Stage+0xae>
        	stage->p[x_t+x][y_t+y] = 1;
 800059a:	69ba      	ldr	r2, [r7, #24]
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	441a      	add	r2, r3
 80005a0:	6979      	ldr	r1, [r7, #20]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4419      	add	r1, r3
 80005a6:	6838      	ldr	r0, [r7, #0]
 80005a8:	4613      	mov	r3, r2
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	4413      	add	r3, r2
 80005ae:	019b      	lsls	r3, r3, #6
 80005b0:	4403      	add	r3, r0
 80005b2:	440b      	add	r3, r1
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
        if (x_t+x > 0 && x_t+x < 240 && -y_t+y > 0 && -y_t+y < 320)
 80005b8:	69ba      	ldr	r2, [r7, #24]
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	4413      	add	r3, r2
 80005be:	2b00      	cmp	r3, #0
 80005c0:	dd1e      	ble.n	8000600 <_ZN6Circle10drawCircleEiiP5Stage+0xf6>
 80005c2:	69ba      	ldr	r2, [r7, #24]
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	4413      	add	r3, r2
 80005c8:	2bef      	cmp	r3, #239	; 0xef
 80005ca:	dc19      	bgt.n	8000600 <_ZN6Circle10drawCircleEiiP5Stage+0xf6>
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dd14      	ble.n	8000600 <_ZN6Circle10drawCircleEiiP5Stage+0xf6>
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80005e0:	da0e      	bge.n	8000600 <_ZN6Circle10drawCircleEiiP5Stage+0xf6>
        	stage->p[x_t+x][-y_t+y] = 1;
 80005e2:	69ba      	ldr	r2, [r7, #24]
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	441a      	add	r2, r3
 80005e8:	6879      	ldr	r1, [r7, #4]
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	1ac9      	subs	r1, r1, r3
 80005ee:	6838      	ldr	r0, [r7, #0]
 80005f0:	4613      	mov	r3, r2
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	4413      	add	r3, r2
 80005f6:	019b      	lsls	r3, r3, #6
 80005f8:	4403      	add	r3, r0
 80005fa:	440b      	add	r3, r1
 80005fc:	2201      	movs	r2, #1
 80005fe:	701a      	strb	r2, [r3, #0]
        if (-x_t+x > 0 && -x_t+x < 240 && y_t+y > 0 && y_t+y < 320)
 8000600:	68ba      	ldr	r2, [r7, #8]
 8000602:	69bb      	ldr	r3, [r7, #24]
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	dd1e      	ble.n	8000648 <_ZN6Circle10drawCircleEiiP5Stage+0x13e>
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	2bef      	cmp	r3, #239	; 0xef
 8000612:	dc19      	bgt.n	8000648 <_ZN6Circle10drawCircleEiiP5Stage+0x13e>
 8000614:	697a      	ldr	r2, [r7, #20]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	2b00      	cmp	r3, #0
 800061c:	dd14      	ble.n	8000648 <_ZN6Circle10drawCircleEiiP5Stage+0x13e>
 800061e:	697a      	ldr	r2, [r7, #20]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4413      	add	r3, r2
 8000624:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000628:	da0e      	bge.n	8000648 <_ZN6Circle10drawCircleEiiP5Stage+0x13e>
        	stage->p[-x_t+x][y_t+y] = 1;
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	1ad2      	subs	r2, r2, r3
 8000630:	6979      	ldr	r1, [r7, #20]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4419      	add	r1, r3
 8000636:	6838      	ldr	r0, [r7, #0]
 8000638:	4613      	mov	r3, r2
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	4413      	add	r3, r2
 800063e:	019b      	lsls	r3, r3, #6
 8000640:	4403      	add	r3, r0
 8000642:	440b      	add	r3, r1
 8000644:	2201      	movs	r2, #1
 8000646:	701a      	strb	r2, [r3, #0]
        if (-x_t+x > 0 && -x_t+x < 240 && -y_t+y > 0 && -y_t+y < 320)
 8000648:	68ba      	ldr	r2, [r7, #8]
 800064a:	69bb      	ldr	r3, [r7, #24]
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	2b00      	cmp	r3, #0
 8000650:	dd1e      	ble.n	8000690 <_ZN6Circle10drawCircleEiiP5Stage+0x186>
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	2bef      	cmp	r3, #239	; 0xef
 800065a:	dc19      	bgt.n	8000690 <_ZN6Circle10drawCircleEiiP5Stage+0x186>
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	dd14      	ble.n	8000690 <_ZN6Circle10drawCircleEiiP5Stage+0x186>
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	1ad3      	subs	r3, r2, r3
 800066c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000670:	da0e      	bge.n	8000690 <_ZN6Circle10drawCircleEiiP5Stage+0x186>
        	stage->p[-x_t+x][-y_t+y] = 1;
 8000672:	68ba      	ldr	r2, [r7, #8]
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	1ad2      	subs	r2, r2, r3
 8000678:	6879      	ldr	r1, [r7, #4]
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	1ac9      	subs	r1, r1, r3
 800067e:	6838      	ldr	r0, [r7, #0]
 8000680:	4613      	mov	r3, r2
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	4413      	add	r3, r2
 8000686:	019b      	lsls	r3, r3, #6
 8000688:	4403      	add	r3, r0
 800068a:	440b      	add	r3, r1
 800068c:	2201      	movs	r2, #1
 800068e:	701a      	strb	r2, [r3, #0]
        if (x_t+x > 0 && x_t+x < 320 && y_t+y > 0 && y_t+y < 240)
 8000690:	69ba      	ldr	r2, [r7, #24]
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	4413      	add	r3, r2
 8000696:	2b00      	cmp	r3, #0
 8000698:	dd1e      	ble.n	80006d8 <_ZN6Circle10drawCircleEiiP5Stage+0x1ce>
 800069a:	69ba      	ldr	r2, [r7, #24]
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	4413      	add	r3, r2
 80006a0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80006a4:	da18      	bge.n	80006d8 <_ZN6Circle10drawCircleEiiP5Stage+0x1ce>
 80006a6:	697a      	ldr	r2, [r7, #20]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4413      	add	r3, r2
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	dd13      	ble.n	80006d8 <_ZN6Circle10drawCircleEiiP5Stage+0x1ce>
 80006b0:	697a      	ldr	r2, [r7, #20]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4413      	add	r3, r2
 80006b6:	2bef      	cmp	r3, #239	; 0xef
 80006b8:	dc0e      	bgt.n	80006d8 <_ZN6Circle10drawCircleEiiP5Stage+0x1ce>
        	stage->p[y_t+x][x_t+y] = 1;
 80006ba:	697a      	ldr	r2, [r7, #20]
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	441a      	add	r2, r3
 80006c0:	69b9      	ldr	r1, [r7, #24]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4419      	add	r1, r3
 80006c6:	6838      	ldr	r0, [r7, #0]
 80006c8:	4613      	mov	r3, r2
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	4413      	add	r3, r2
 80006ce:	019b      	lsls	r3, r3, #6
 80006d0:	4403      	add	r3, r0
 80006d2:	440b      	add	r3, r1
 80006d4:	2201      	movs	r2, #1
 80006d6:	701a      	strb	r2, [r3, #0]
        if (-x_t+x > 0 && -x_t+x < 320 && y_t+y > 0 && y_t+y < 240)
 80006d8:	68ba      	ldr	r2, [r7, #8]
 80006da:	69bb      	ldr	r3, [r7, #24]
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	dd1e      	ble.n	8000720 <_ZN6Circle10drawCircleEiiP5Stage+0x216>
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	1ad3      	subs	r3, r2, r3
 80006e8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80006ec:	da18      	bge.n	8000720 <_ZN6Circle10drawCircleEiiP5Stage+0x216>
 80006ee:	697a      	ldr	r2, [r7, #20]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4413      	add	r3, r2
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	dd13      	ble.n	8000720 <_ZN6Circle10drawCircleEiiP5Stage+0x216>
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4413      	add	r3, r2
 80006fe:	2bef      	cmp	r3, #239	; 0xef
 8000700:	dc0e      	bgt.n	8000720 <_ZN6Circle10drawCircleEiiP5Stage+0x216>
        	stage->p[y_t+x][-x_t+y] = 1;
 8000702:	697a      	ldr	r2, [r7, #20]
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	441a      	add	r2, r3
 8000708:	6879      	ldr	r1, [r7, #4]
 800070a:	69bb      	ldr	r3, [r7, #24]
 800070c:	1ac9      	subs	r1, r1, r3
 800070e:	6838      	ldr	r0, [r7, #0]
 8000710:	4613      	mov	r3, r2
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	4413      	add	r3, r2
 8000716:	019b      	lsls	r3, r3, #6
 8000718:	4403      	add	r3, r0
 800071a:	440b      	add	r3, r1
 800071c:	2201      	movs	r2, #1
 800071e:	701a      	strb	r2, [r3, #0]
        if (x_t+x > 0 && x_t+x < 320 && -y_t+y > 0 && -y_t+y < 240)
 8000720:	69ba      	ldr	r2, [r7, #24]
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	4413      	add	r3, r2
 8000726:	2b00      	cmp	r3, #0
 8000728:	dd1e      	ble.n	8000768 <_ZN6Circle10drawCircleEiiP5Stage+0x25e>
 800072a:	69ba      	ldr	r2, [r7, #24]
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	4413      	add	r3, r2
 8000730:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000734:	da18      	bge.n	8000768 <_ZN6Circle10drawCircleEiiP5Stage+0x25e>
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	1ad3      	subs	r3, r2, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	dd13      	ble.n	8000768 <_ZN6Circle10drawCircleEiiP5Stage+0x25e>
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	2bef      	cmp	r3, #239	; 0xef
 8000748:	dc0e      	bgt.n	8000768 <_ZN6Circle10drawCircleEiiP5Stage+0x25e>
        	stage->p[-y_t+x][x_t+y] = 1;
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	1ad2      	subs	r2, r2, r3
 8000750:	69b9      	ldr	r1, [r7, #24]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4419      	add	r1, r3
 8000756:	6838      	ldr	r0, [r7, #0]
 8000758:	4613      	mov	r3, r2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	019b      	lsls	r3, r3, #6
 8000760:	4403      	add	r3, r0
 8000762:	440b      	add	r3, r1
 8000764:	2201      	movs	r2, #1
 8000766:	701a      	strb	r2, [r3, #0]
        if (-x_t+x > 0 && -x_t+x < 320 && -y_t+y > 0 && -y_t+y < 240)
 8000768:	68ba      	ldr	r2, [r7, #8]
 800076a:	69bb      	ldr	r3, [r7, #24]
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	2b00      	cmp	r3, #0
 8000770:	dd1e      	ble.n	80007b0 <_ZN6Circle10drawCircleEiiP5Stage+0x2a6>
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800077c:	da18      	bge.n	80007b0 <_ZN6Circle10drawCircleEiiP5Stage+0x2a6>
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	2b00      	cmp	r3, #0
 8000786:	dd13      	ble.n	80007b0 <_ZN6Circle10drawCircleEiiP5Stage+0x2a6>
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	2bef      	cmp	r3, #239	; 0xef
 8000790:	dc0e      	bgt.n	80007b0 <_ZN6Circle10drawCircleEiiP5Stage+0x2a6>
        	stage->p[-y_t+x][-x_t+y] = 1;
 8000792:	68ba      	ldr	r2, [r7, #8]
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	1ad2      	subs	r2, r2, r3
 8000798:	6879      	ldr	r1, [r7, #4]
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	1ac9      	subs	r1, r1, r3
 800079e:	6838      	ldr	r0, [r7, #0]
 80007a0:	4613      	mov	r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	4413      	add	r3, r2
 80007a6:	019b      	lsls	r3, r3, #6
 80007a8:	4403      	add	r3, r0
 80007aa:	440b      	add	r3, r1
 80007ac:	2201      	movs	r2, #1
 80007ae:	701a      	strb	r2, [r3, #0]
    for(int i = 1; x_t < y_t; i++)
 80007b0:	693b      	ldr	r3, [r7, #16]
 80007b2:	3301      	adds	r3, #1
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	e6bb      	b.n	8000530 <_ZN6Circle10drawCircleEiiP5Stage+0x26>
    }
}
 80007b8:	bf00      	nop
 80007ba:	3724      	adds	r7, #36	; 0x24
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <_ZN5Stage5clearEv>:
#include <stdio.h>
#include "stm32f429i_discovery_lcd.h"



bool Stage::clear(){
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 240; i++){
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	2bef      	cmp	r3, #239	; 0xef
 80007d4:	dc18      	bgt.n	8000808 <_ZN5Stage5clearEv+0x44>
		for(int j = 0; j < 320; j++){
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80007e0:	da0e      	bge.n	8000800 <_ZN5Stage5clearEv+0x3c>
			p[i][j] = 0;
 80007e2:	6879      	ldr	r1, [r7, #4]
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	4613      	mov	r3, r2
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	4413      	add	r3, r2
 80007ec:	019b      	lsls	r3, r3, #6
 80007ee:	18ca      	adds	r2, r1, r3
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	4413      	add	r3, r2
 80007f4:	2200      	movs	r2, #0
 80007f6:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 320; j++){
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	3301      	adds	r3, #1
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	e7ec      	b.n	80007da <_ZN5Stage5clearEv+0x16>
	for(int i = 0; i < 240; i++){
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	3301      	adds	r3, #1
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	e7e3      	b.n	80007d0 <_ZN5Stage5clearEv+0xc>
		}
	}
}
 8000808:	bf00      	nop
 800080a:	4618      	mov	r0, r3
 800080c:	3714      	adds	r7, #20
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <_ZN5Stage8sendDataEv>:


void Stage::sendData()
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b084      	sub	sp, #16
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
	//printf("c\r\n");
	for(int i=0; i<240;i++)
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	2bef      	cmp	r3, #239	; 0xef
 8000826:	dc25      	bgt.n	8000874 <_ZN5Stage8sendDataEv+0x5e>
		for(int j=0; j<320; j++)
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000832:	da1b      	bge.n	800086c <_ZN5Stage8sendDataEv+0x56>
		{
			if(p[i][j]==1)
 8000834:	6879      	ldr	r1, [r7, #4]
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	4613      	mov	r3, r2
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	019b      	lsls	r3, r3, #6
 8000840:	18ca      	adds	r2, r1, r3
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	4413      	add	r3, r2
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d00b      	beq.n	8000864 <_ZN5Stage8sendDataEv+0x4e>
			{
				  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800084c:	f04f 30ff 	mov.w	r0, #4294967295
 8000850:	f001 fc54 	bl	80020fc <BSP_LCD_SetTextColor>
				  BSP_LCD_DrawRect(i,j,1,1);
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	b298      	uxth	r0, r3
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	b299      	uxth	r1, r3
 800085c:	2301      	movs	r3, #1
 800085e:	2201      	movs	r2, #1
 8000860:	f001 fd26 	bl	80022b0 <BSP_LCD_DrawRect>
		for(int j=0; j<320; j++)
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	3301      	adds	r3, #1
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	e7df      	b.n	800082c <_ZN5Stage8sendDataEv+0x16>
	for(int i=0; i<240;i++)
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	3301      	adds	r3, #1
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	e7d6      	b.n	8000822 <_ZN5Stage8sendDataEv+0xc>
				  //printf("p %d %d\r\n",i,j);
			}
		}
	//printf("k\r\n");
}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <_ZN8StageObjC1Ev>:
 *      Author: michal
 */

#include <StageObj.h>

StageObj::StageObj()
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b087      	sub	sp, #28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	335c      	adds	r3, #92	; 0x5c
 8000888:	4618      	mov	r0, r3
 800088a:	f000 f8b5 	bl	80009f8 <_ZNSt6vectorIiSaIiEEC1Ev>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	3368      	adds	r3, #104	; 0x68
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f8b0 	bl	80009f8 <_ZNSt6vectorIiSaIiEEC1Ev>
{
	this->x1 = -1;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f04f 32ff 	mov.w	r2, #4294967295
 800089e:	625a      	str	r2, [r3, #36]	; 0x24
	this->x2 = -1;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f04f 32ff 	mov.w	r2, #4294967295
 80008a6:	629a      	str	r2, [r3, #40]	; 0x28
	this->x3 = -1;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f04f 32ff 	mov.w	r2, #4294967295
 80008ae:	62da      	str	r2, [r3, #44]	; 0x2c
	this->x4 = -1;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f04f 32ff 	mov.w	r2, #4294967295
 80008b6:	631a      	str	r2, [r3, #48]	; 0x30

	this->y1 = -1;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f04f 32ff 	mov.w	r2, #4294967295
 80008be:	639a      	str	r2, [r3, #56]	; 0x38
	this->y2 = -1;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f04f 32ff 	mov.w	r2, #4294967295
 80008c6:	63da      	str	r2, [r3, #60]	; 0x3c
	this->y3 = -1;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f04f 32ff 	mov.w	r2, #4294967295
 80008ce:	641a      	str	r2, [r3, #64]	; 0x40
	this->y4 = -1;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f04f 32ff 	mov.w	r2, #4294967295
 80008d6:	645a      	str	r2, [r3, #68]	; 0x44

	this->r1 = 0;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
	this->r2 = 0;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
	this->w1 = 0;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
	this->w2 = 0;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
	this->l1 = 0;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
	this->l2 = 0;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]

	this->rb = 25;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2219      	movs	r2, #25
 8000900:	609a      	str	r2, [r3, #8]
	this->xb = 100;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2264      	movs	r2, #100	; 0x64
 8000906:	635a      	str	r2, [r3, #52]	; 0x34
	this->yb = 100;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2264      	movs	r2, #100	; 0x64
 800090c:	649a      	str	r2, [r3, #72]	; 0x48
	this->vxb = 1;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2201      	movs	r2, #1
 8000912:	61da      	str	r2, [r3, #28]
	this->vyb = 1;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2201      	movs	r2, #1
 8000918:	621a      	str	r2, [r3, #32]

	this->x_axis = {1,0};
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8000920:	4a33      	ldr	r2, [pc, #204]	; (80009f0 <_ZN8StageObjC1Ev+0x174>)
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	e892 0003 	ldmia.w	r2, {r0, r1}
 800092a:	e883 0003 	stmia.w	r3, {r0, r1}
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000936:	4620      	mov	r0, r4
 8000938:	f000 f889 	bl	8000a4e <_ZNSt6vectorIiSaIiEEaSESt16initializer_listIiE>
	this->y_axis = {0,1};
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8000942:	4a2c      	ldr	r2, [pc, #176]	; (80009f4 <_ZN8StageObjC1Ev+0x178>)
 8000944:	f107 0310 	add.w	r3, r7, #16
 8000948:	e892 0003 	ldmia.w	r2, {r0, r1}
 800094c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000958:	4620      	mov	r0, r4
 800095a:	f000 f878 	bl	8000a4e <_ZNSt6vectorIiSaIiEEaSESt16initializer_listIiE>

	this->rw1 = 0;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	64da      	str	r2, [r3, #76]	; 0x4c
	this->rw2 = 0;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	651a      	str	r2, [r3, #80]	; 0x50
	this->rw3 = 0;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2200      	movs	r2, #0
 800096e:	655a      	str	r2, [r3, #84]	; 0x54
	this->rw4 = 0;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2200      	movs	r2, #0
 8000974:	659a      	str	r2, [r3, #88]	; 0x58

	this->wave1 = new Circle(this->rw1);
 8000976:	2004      	movs	r0, #4
 8000978:	f006 fce2 	bl	8007340 <_Znwj>
 800097c:	4603      	mov	r3, r0
 800097e:	461c      	mov	r4, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000984:	4619      	mov	r1, r3
 8000986:	4620      	mov	r0, r4
 8000988:	f7ff fdb0 	bl	80004ec <_ZN6CircleC1Ei>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	this->wave2 = new Circle(this->rw2);
 8000992:	2004      	movs	r0, #4
 8000994:	f006 fcd4 	bl	8007340 <_Znwj>
 8000998:	4603      	mov	r3, r0
 800099a:	461c      	mov	r4, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009a0:	4619      	mov	r1, r3
 80009a2:	4620      	mov	r0, r4
 80009a4:	f7ff fda2 	bl	80004ec <_ZN6CircleC1Ei>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	this->wave3 = new Circle(this->rw3);
 80009ae:	2004      	movs	r0, #4
 80009b0:	f006 fcc6 	bl	8007340 <_Znwj>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461c      	mov	r4, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009bc:	4619      	mov	r1, r3
 80009be:	4620      	mov	r0, r4
 80009c0:	f7ff fd94 	bl	80004ec <_ZN6CircleC1Ei>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
	this->wave4 = new Circle(this->rw4);
 80009ca:	2004      	movs	r0, #4
 80009cc:	f006 fcb8 	bl	8007340 <_Znwj>
 80009d0:	4603      	mov	r3, r0
 80009d2:	461c      	mov	r4, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d8:	4619      	mov	r1, r3
 80009da:	4620      	mov	r0, r4
 80009dc:	f7ff fd86 	bl	80004ec <_ZN6CircleC1Ei>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c

}
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4618      	mov	r0, r3
 80009ea:	371c      	adds	r7, #28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd90      	pop	{r4, r7, pc}
 80009f0:	08007658 	.word	0x08007658
 80009f4:	08007660 	.word	0x08007660

080009f8 <_ZNSt6vectorIiSaIiEEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 f83e 	bl	8000a84 <_ZNSt12_Vector_baseIiSaIiEEC1Ev>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <_ZNKSt16initializer_listIiE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <_ZNKSt16initializer_listIiE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8000a2a:	b590      	push	{r4, r7, lr}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ffed 	bl	8000a12 <_ZNKSt16initializer_listIiE5beginEv>
 8000a38:	4604      	mov	r4, r0
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f000 f848 	bl	8000ad0 <_ZNKSt16initializer_listIiE4sizeEv>
 8000a40:	4603      	mov	r3, r0
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	4423      	add	r3, r4
 8000a46:	4618      	mov	r0, r3
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd90      	pop	{r4, r7, pc}

08000a4e <_ZNSt6vectorIiSaIiEEaSESt16initializer_listIiE>:
       *  Note that the assignment completely changes the %vector and
       *  that the resulting %vector's size is the same as the number
       *  of elements assigned.
       */
      vector&
      operator=(initializer_list<value_type> __l)
 8000a4e:	b5b0      	push	{r4, r5, r7, lr}
 8000a50:	b086      	sub	sp, #24
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	60f8      	str	r0, [r7, #12]
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	e883 0006 	stmia.w	r3, {r1, r2}
      {
	this->_M_assign_aux(__l.begin(), __l.end(),
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ffd7 	bl	8000a12 <_ZNKSt16initializer_listIiE5beginEv>
 8000a64:	4604      	mov	r4, r0
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ffde 	bl	8000a2a <_ZNKSt16initializer_listIiE3endEv>
 8000a6e:	4602      	mov	r2, r0
 8000a70:	462b      	mov	r3, r5
 8000a72:	4621      	mov	r1, r4
 8000a74:	68f8      	ldr	r0, [r7, #12]
 8000a76:	f000 f837 	bl	8000ae8 <_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag>
			    random_access_iterator_tag());
	return *this;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
      }
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bdb0      	pop	{r4, r5, r7, pc}

08000a84 <_ZNSt12_Vector_baseIiSaIiEEC1Ev>:
      _Vector_base()
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f8b4 	bl	8000bfc <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1Ev>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000ac0:	68b9      	ldr	r1, [r7, #8]
 8000ac2:	68f8      	ldr	r0, [r7, #12]
 8000ac4:	f000 f8c2 	bl	8000c4c <_ZSt8_DestroyIPiEvT_S1_>
    }
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <_ZNKSt16initializer_listIiE4sizeEv>:
      size() const noexcept { return _M_len; }
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag>:
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
 8000ae8:	b5b0      	push	{r4, r5, r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
 8000af4:	703b      	strb	r3, [r7, #0]
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	68b8      	ldr	r0, [r7, #8]
 8000afa:	f000 f8be 	bl	8000c7a <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8000afe:	4603      	mov	r3, r0
 8000b00:	61fb      	str	r3, [r7, #28]

	if (__len > capacity())
 8000b02:	68f8      	ldr	r0, [r7, #12]
 8000b04:	f000 f8cd 	bl	8000ca2 <_ZNKSt6vectorIiSaIiEE8capacityEv>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	bf8c      	ite	hi
 8000b10:	2301      	movhi	r3, #1
 8000b12:	2300      	movls	r3, #0
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d030      	beq.n	8000b7c <_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag+0x94>
	  {
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	68ba      	ldr	r2, [r7, #8]
 8000b1e:	69f9      	ldr	r1, [r7, #28]
 8000b20:	68f8      	ldr	r0, [r7, #12]
 8000b22:	f000 f8cf 	bl	8000cc4 <_ZNSt6vectorIiSaIiEE20_M_allocate_and_copyIPKiEEPijT_S6_>
 8000b26:	61b8      	str	r0, [r7, #24]
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	681c      	ldr	r4, [r3, #0]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	685d      	ldr	r5, [r3, #4]
			  _M_get_Tp_allocator());
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ffb3 	bl	8000a9e <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8000b38:	4603      	mov	r3, r0
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4629      	mov	r1, r5
 8000b3e:	4620      	mov	r0, r4
 8000b40:	f7ff ffb8 	bl	8000ab4 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>
	    _M_deallocate(this->_M_impl._M_start,
 8000b44:	68f8      	ldr	r0, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	6819      	ldr	r1, [r3, #0]
			  this->_M_impl._M_end_of_storage
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	689b      	ldr	r3, [r3, #8]
			  - this->_M_impl._M_start);
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	109b      	asrs	r3, r3, #2
	    _M_deallocate(this->_M_impl._M_start,
 8000b58:	461a      	mov	r2, r3
 8000b5a:	f000 f864 	bl	8000c26 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>
	    this->_M_impl._M_start = __tmp;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	441a      	add	r2, r3
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	605a      	str	r2, [r3, #4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	609a      	str	r2, [r3, #8]
	    this->_M_impl._M_finish =
	      std::__uninitialized_copy_a(__mid, __last,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	  }
      }
 8000b7a:	e03b      	b.n	8000bf4 <_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag+0x10c>
	else if (size() >= __len)
 8000b7c:	68f8      	ldr	r0, [r7, #12]
 8000b7e:	f000 f8bd 	bl	8000cfc <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8000b82:	4602      	mov	r2, r0
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	4293      	cmp	r3, r2
 8000b88:	bf94      	ite	ls
 8000b8a:	2301      	movls	r3, #1
 8000b8c:	2300      	movhi	r3, #0
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d00c      	beq.n	8000bae <_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag+0xc6>
	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	68b8      	ldr	r0, [r7, #8]
 8000b9e:	f000 f8d6 	bl	8000d4e <_ZSt4copyIPKiPiET0_T_S4_S3_>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	68f8      	ldr	r0, [r7, #12]
 8000ba8:	f000 f8b9 	bl	8000d1e <_ZNSt6vectorIiSaIiEE15_M_erase_at_endEPi>
      }
 8000bac:	e022      	b.n	8000bf4 <_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag+0x10c>
	    _ForwardIterator __mid = __first;
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	617b      	str	r3, [r7, #20]
	    std::advance(__mid, size());
 8000bb2:	68f8      	ldr	r0, [r7, #12]
 8000bb4:	f000 f8a2 	bl	8000cfc <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 f8dc 	bl	8000d7e <_ZSt7advanceIPKijEvRT_T0_>
	    std::copy(__first, __mid, this->_M_impl._M_start);
 8000bc6:	6979      	ldr	r1, [r7, #20]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	68b8      	ldr	r0, [r7, #8]
 8000bd0:	f000 f8bd 	bl	8000d4e <_ZSt4copyIPKiPiET0_T_S4_S3_>
	      std::__uninitialized_copy_a(__mid, __last,
 8000bd4:	697c      	ldr	r4, [r7, #20]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	685d      	ldr	r5, [r3, #4]
					  _M_get_Tp_allocator());
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff5e 	bl	8000a9e <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8000be2:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__mid, __last,
 8000be4:	462a      	mov	r2, r5
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	4620      	mov	r0, r4
 8000bea:	f000 f8db 	bl	8000da4 <_ZSt22__uninitialized_copy_aIPKiPiiET0_T_S4_S3_RSaIT1_E>
 8000bee:	4602      	mov	r2, r0
	    this->_M_impl._M_finish =
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	605a      	str	r2, [r3, #4]
      }
 8000bf4:	bf00      	nop
 8000bf6:	3720      	adds	r7, #32
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bdb0      	pop	{r4, r5, r7, pc}

08000bfc <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1Ev>:
	_Vector_impl()
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f000 f8de 	bl	8000dc6 <_ZNSaIiEC1Ev>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
	{ }
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>:
      _M_deallocate(pointer __p, size_t __n)
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b084      	sub	sp, #16
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	60f8      	str	r0, [r7, #12]
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
	if (__p)
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d005      	beq.n	8000c44 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	68b9      	ldr	r1, [r7, #8]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f8cd 	bl	8000dde <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>
      }
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <_ZSt8_DestroyIPiEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8000c56:	6839      	ldr	r1, [r7, #0]
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f000 f8cf 	bl	8000dfc <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>
    }
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8000c6e:	4618      	mov	r0, r3
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8000c7a:	b5b0      	push	{r4, r5, r7, lr}
 8000c7c:	b084      	sub	sp, #16
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8000c84:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ffec 	bl	8000c66 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
 8000c8e:	462a      	mov	r2, r5
 8000c90:	6839      	ldr	r1, [r7, #0]
 8000c92:	4620      	mov	r0, r4
 8000c94:	f000 f8bd 	bl	8000e12 <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8000c98:	4603      	mov	r3, r0
    }
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bdb0      	pop	{r4, r5, r7, pc}

08000ca2 <_ZNKSt6vectorIiSaIiEE8capacityEv>:
      /**
       *  Returns the total number of elements that the %vector can
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	689b      	ldr	r3, [r3, #8]
			 - this->_M_impl._M_start); }
 8000cae:	461a      	mov	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	109b      	asrs	r3, r3, #2
 8000cb8:	4618      	mov	r0, r3
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <_ZNSt6vectorIiSaIiEE20_M_allocate_and_copyIPKiEEPijT_S6_>:
       *  Memory expansion handler.  Uses the member allocation function to
       *  obtain @a n bytes of memory, and then copies [first,last) into it.
       */
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
 8000cd0:	603b      	str	r3, [r7, #0]
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f8ab 	bl	8000e32 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>
 8000cdc:	6178      	str	r0, [r7, #20]
	  __try
	    {
	      std::__uninitialized_copy_a(__first, __last, __result,
					  _M_get_Tp_allocator());
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fedc 	bl	8000a9e <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8000ce6:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	6839      	ldr	r1, [r7, #0]
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 f859 	bl	8000da4 <_ZSt22__uninitialized_copy_aIPKiPiiET0_T_S4_S3_RSaIT1_E>
	      return __result;
 8000cf2:	697b      	ldr	r3, [r7, #20]
	  __catch(...)
	    {
	      _M_deallocate(__result, __n);
	      __throw_exception_again;
	    }
	}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <_ZNKSt6vectorIiSaIiEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	109b      	asrs	r3, r3, #2
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <_ZNSt6vectorIiSaIiEE15_M_erase_at_endEPi>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8000d1e:	b590      	push	{r4, r7, lr}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
 8000d26:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685c      	ldr	r4, [r3, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff feb5 	bl	8000a9e <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8000d34:	4603      	mov	r3, r0
 8000d36:	461a      	mov	r2, r3
 8000d38:	4621      	mov	r1, r4
 8000d3a:	6838      	ldr	r0, [r7, #0]
 8000d3c:	f7ff feba 	bl	8000ab4 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	683a      	ldr	r2, [r7, #0]
 8000d44:	605a      	str	r2, [r3, #4]
      }
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd90      	pop	{r4, r7, pc}

08000d4e <_ZSt4copyIPKiPiET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8000d4e:	b590      	push	{r4, r7, lr}
 8000d50:	b085      	sub	sp, #20
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 8000d5a:	68f8      	ldr	r0, [r7, #12]
 8000d5c:	f000 f87d 	bl	8000e5a <_ZSt12__miter_baseIPKiET_S2_>
 8000d60:	4604      	mov	r4, r0
 8000d62:	68b8      	ldr	r0, [r7, #8]
 8000d64:	f000 f879 	bl	8000e5a <_ZSt12__miter_baseIPKiET_S2_>
 8000d68:	4603      	mov	r3, r0
	       __result));
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4620      	mov	r0, r4
 8000d70:	f000 f87e 	bl	8000e70 <_ZSt14__copy_move_a2ILb0EPKiPiET1_T0_S4_S3_>
 8000d74:	4603      	mov	r3, r0
    }
 8000d76:	4618      	mov	r0, r3
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd90      	pop	{r4, r7, pc}

08000d7e <_ZSt7advanceIPKijEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8000d7e:	b590      	push	{r4, r7, lr}
 8000d80:	b085      	sub	sp, #20
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
 8000d86:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ff6a 	bl	8000c66 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
 8000d92:	4622      	mov	r2, r4
 8000d94:	68f9      	ldr	r1, [r7, #12]
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f000 f886 	bl	8000ea8 <_ZSt9__advanceIPKiiEvRT_T0_St26random_access_iterator_tag>
    }
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd90      	pop	{r4, r7, pc}

08000da4 <_ZSt22__uninitialized_copy_aIPKiPiiET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
 8000db0:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	68f8      	ldr	r0, [r7, #12]
 8000db8:	f000 f889 	bl	8000ece <_ZSt18uninitialized_copyIPKiPiET0_T_S4_S3_>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <_ZNSaIiEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f000 f88f 	bl	8000ef2 <_ZN9__gnu_cxx13new_allocatorIiEC1Ev>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b084      	sub	sp, #16
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	60f8      	str	r0, [r7, #12]
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	68f8      	ldr	r0, [r7, #12]
 8000df0:	f000 f88a 	bl	8000f08 <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPij>
 8000df4:	bf00      	nop
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8000e12:	b480      	push	{r7}
 8000e14:	b085      	sub	sp, #20
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	60f8      	str	r0, [r7, #12]
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	109b      	asrs	r3, r3, #2
    }
 8000e26:	4618      	mov	r0, r3
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d006      	beq.n	8000e50 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x1e>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6839      	ldr	r1, [r7, #0]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 f86b 	bl	8000f22 <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	e000      	b.n	8000e52 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x20>
 8000e50:	2300      	movs	r3, #0
      }
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <_ZSt12__miter_baseIPKiET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_ZSt14__copy_move_a2ILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8000e70:	b5b0      	push	{r4, r5, r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8000e7c:	68f8      	ldr	r0, [r7, #12]
 8000e7e:	f000 f85f 	bl	8000f40 <_ZSt12__niter_baseIPKiET_S2_>
 8000e82:	4604      	mov	r4, r0
 8000e84:	68b8      	ldr	r0, [r7, #8]
 8000e86:	f000 f85b 	bl	8000f40 <_ZSt12__niter_baseIPKiET_S2_>
 8000e8a:	4605      	mov	r5, r0
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f000 f862 	bl	8000f56 <_ZSt12__niter_baseIPiET_S1_>
 8000e92:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8000e94:	461a      	mov	r2, r3
 8000e96:	4629      	mov	r1, r5
 8000e98:	4620      	mov	r0, r4
 8000e9a:	f000 f867 	bl	8000f6c <_ZSt13__copy_move_aILb0EPKiPiET1_T0_S4_S3_>
 8000e9e:	4603      	mov	r3, r0
    }
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bdb0      	pop	{r4, r5, r7, pc}

08000ea8 <_ZSt9__advanceIPKiiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	713a      	strb	r2, [r7, #4]
      __i += __n;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	441a      	add	r2, r3
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	601a      	str	r2, [r3, #0]
    }
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_ZSt18uninitialized_copyIPKiPiET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	60f8      	str	r0, [r7, #12]
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8000eda:	2301      	movs	r3, #1
 8000edc:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	68b9      	ldr	r1, [r7, #8]
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f000 f854 	bl	8000f90 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKiPiEET0_T_S6_S5_>
 8000ee8:	4603      	mov	r3, r0
    }
 8000eea:	4618      	mov	r0, r3
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <_ZN9__gnu_cxx13new_allocatorIiEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPij>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8000f14:	68b8      	ldr	r0, [r7, #8]
 8000f16:	f006 fa2d 	bl	8007374 <_ZdlPv>
      }
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	6839      	ldr	r1, [r7, #0]
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f83d 	bl	8000fb0 <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <_ZSt12__niter_baseIPKiET_S2_>:
    __niter_base(_Iterator __it)
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <_ZSt12__niter_baseIPiET_S1_>:
    __niter_base(_Iterator __it)
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <_ZSt13__copy_move_aILb0EPKiPiET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8000f78:	2301      	movs	r3, #1
 8000f7a:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	68b9      	ldr	r1, [r7, #8]
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f000 f833 	bl	8000fec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
 8000f86:	4603      	mov	r3, r0
    }
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKiPiEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	68b9      	ldr	r1, [r7, #8]
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f7ff fed4 	bl	8000d4e <_ZSt4copyIPKiPiET0_T_S4_S3_>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f000 f832 	bl	8001026 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	bf8c      	ite	hi
 8000fca:	2301      	movhi	r3, #1
 8000fcc:	2300      	movls	r3, #0
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8000fd4:	f006 f9d0 	bl	8007378 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f006 f9af 	bl	8007340 <_Znwj>
 8000fe2:	4603      	mov	r3, r0
      }
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8000ff8:	68ba      	ldr	r2, [r7, #8]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	109b      	asrs	r3, r3, #2
 8001000:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d006      	beq.n	8001016 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	461a      	mov	r2, r3
 800100e:	68f9      	ldr	r1, [r7, #12]
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f006 f9f5 	bl	8007400 <memmove>
	  return __result + _Num;
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	4413      	add	r3, r2
	}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800102e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <_Z4ballibP5StageP8StageObj>:
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void ball(int step, bool flag, Stage* stage, StageObj* stgobj)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b084      	sub	sp, #16
 8001042:	af00      	add	r7, sp, #0
 8001044:	60f8      	str	r0, [r7, #12]
 8001046:	607a      	str	r2, [r7, #4]
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	460b      	mov	r3, r1
 800104c:	72fb      	strb	r3, [r7, #11]

	flag = 1;
 800104e:	2301      	movs	r3, #1
 8001050:	72fb      	strb	r3, [r7, #11]

	stgobj->ball->drawCircle(stgobj->xb, stgobj->yb, stage);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f7ff fa53 	bl	800050a <_ZN6Circle10drawCircleEiiP5Stage>



	if(stgobj->xb == stgobj->rb){
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	429a      	cmp	r2, r3
 800106e:	d102      	bne.n	8001076 <_Z4ballibP5StageP8StageObj+0x38>
		stgobj->vxb = 1;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	2201      	movs	r2, #1
 8001074:	61da      	str	r2, [r3, #28]
	}
	if(stgobj->xb == 239 - stgobj->rb){
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8001082:	429a      	cmp	r2, r3
 8001084:	d103      	bne.n	800108e <_Z4ballibP5StageP8StageObj+0x50>
		stgobj->vxb = -1;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	f04f 32ff 	mov.w	r2, #4294967295
 800108c:	61da      	str	r2, [r3, #28]
	}

	if(stgobj->yb == stgobj->rb){
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	429a      	cmp	r2, r3
 8001098:	d102      	bne.n	80010a0 <_Z4ballibP5StageP8StageObj+0x62>
		stgobj->vyb = 1;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	2201      	movs	r2, #1
 800109e:	621a      	str	r2, [r3, #32]
	}
	if(stgobj->yb == 319 - stgobj->rb){
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80010ac:	3301      	adds	r3, #1
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d103      	bne.n	80010ba <_Z4ballibP5StageP8StageObj+0x7c>
		stgobj->vyb = -1;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295
 80010b8:	621a      	str	r2, [r3, #32]
	}

	stgobj->xb = stgobj->xb + step * stgobj->vxb;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	68f9      	ldr	r1, [r7, #12]
 80010c4:	fb01 f303 	mul.w	r3, r1, r3
 80010c8:	441a      	add	r2, r3
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	635a      	str	r2, [r3, #52]	; 0x34
	stgobj->yb = stgobj->yb + step * stgobj->vyb;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	6a1b      	ldr	r3, [r3, #32]
 80010d6:	68f9      	ldr	r1, [r7, #12]
 80010d8:	fb01 f303 	mul.w	r3, r1, r3
 80010dc:	441a      	add	r2, r3
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	649a      	str	r2, [r3, #72]	; 0x48
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <ili9341_Init>:
 80010ea:	b580      	push	{r7, lr}
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	f000 fe15 	bl	8001d1c <LCD_IO_Init>
 80010f2:	20ca      	movs	r0, #202	; 0xca
 80010f4:	f000 f95d 	bl	80013b2 <ili9341_WriteReg>
 80010f8:	20c3      	movs	r0, #195	; 0xc3
 80010fa:	f000 f967 	bl	80013cc <ili9341_WriteData>
 80010fe:	2008      	movs	r0, #8
 8001100:	f000 f964 	bl	80013cc <ili9341_WriteData>
 8001104:	2050      	movs	r0, #80	; 0x50
 8001106:	f000 f961 	bl	80013cc <ili9341_WriteData>
 800110a:	20cf      	movs	r0, #207	; 0xcf
 800110c:	f000 f951 	bl	80013b2 <ili9341_WriteReg>
 8001110:	2000      	movs	r0, #0
 8001112:	f000 f95b 	bl	80013cc <ili9341_WriteData>
 8001116:	20c1      	movs	r0, #193	; 0xc1
 8001118:	f000 f958 	bl	80013cc <ili9341_WriteData>
 800111c:	2030      	movs	r0, #48	; 0x30
 800111e:	f000 f955 	bl	80013cc <ili9341_WriteData>
 8001122:	20ed      	movs	r0, #237	; 0xed
 8001124:	f000 f945 	bl	80013b2 <ili9341_WriteReg>
 8001128:	2064      	movs	r0, #100	; 0x64
 800112a:	f000 f94f 	bl	80013cc <ili9341_WriteData>
 800112e:	2003      	movs	r0, #3
 8001130:	f000 f94c 	bl	80013cc <ili9341_WriteData>
 8001134:	2012      	movs	r0, #18
 8001136:	f000 f949 	bl	80013cc <ili9341_WriteData>
 800113a:	2081      	movs	r0, #129	; 0x81
 800113c:	f000 f946 	bl	80013cc <ili9341_WriteData>
 8001140:	20e8      	movs	r0, #232	; 0xe8
 8001142:	f000 f936 	bl	80013b2 <ili9341_WriteReg>
 8001146:	2085      	movs	r0, #133	; 0x85
 8001148:	f000 f940 	bl	80013cc <ili9341_WriteData>
 800114c:	2000      	movs	r0, #0
 800114e:	f000 f93d 	bl	80013cc <ili9341_WriteData>
 8001152:	2078      	movs	r0, #120	; 0x78
 8001154:	f000 f93a 	bl	80013cc <ili9341_WriteData>
 8001158:	20cb      	movs	r0, #203	; 0xcb
 800115a:	f000 f92a 	bl	80013b2 <ili9341_WriteReg>
 800115e:	2039      	movs	r0, #57	; 0x39
 8001160:	f000 f934 	bl	80013cc <ili9341_WriteData>
 8001164:	202c      	movs	r0, #44	; 0x2c
 8001166:	f000 f931 	bl	80013cc <ili9341_WriteData>
 800116a:	2000      	movs	r0, #0
 800116c:	f000 f92e 	bl	80013cc <ili9341_WriteData>
 8001170:	2034      	movs	r0, #52	; 0x34
 8001172:	f000 f92b 	bl	80013cc <ili9341_WriteData>
 8001176:	2002      	movs	r0, #2
 8001178:	f000 f928 	bl	80013cc <ili9341_WriteData>
 800117c:	20f7      	movs	r0, #247	; 0xf7
 800117e:	f000 f918 	bl	80013b2 <ili9341_WriteReg>
 8001182:	2020      	movs	r0, #32
 8001184:	f000 f922 	bl	80013cc <ili9341_WriteData>
 8001188:	20ea      	movs	r0, #234	; 0xea
 800118a:	f000 f912 	bl	80013b2 <ili9341_WriteReg>
 800118e:	2000      	movs	r0, #0
 8001190:	f000 f91c 	bl	80013cc <ili9341_WriteData>
 8001194:	2000      	movs	r0, #0
 8001196:	f000 f919 	bl	80013cc <ili9341_WriteData>
 800119a:	20b1      	movs	r0, #177	; 0xb1
 800119c:	f000 f909 	bl	80013b2 <ili9341_WriteReg>
 80011a0:	2000      	movs	r0, #0
 80011a2:	f000 f913 	bl	80013cc <ili9341_WriteData>
 80011a6:	201b      	movs	r0, #27
 80011a8:	f000 f910 	bl	80013cc <ili9341_WriteData>
 80011ac:	20b6      	movs	r0, #182	; 0xb6
 80011ae:	f000 f900 	bl	80013b2 <ili9341_WriteReg>
 80011b2:	200a      	movs	r0, #10
 80011b4:	f000 f90a 	bl	80013cc <ili9341_WriteData>
 80011b8:	20a2      	movs	r0, #162	; 0xa2
 80011ba:	f000 f907 	bl	80013cc <ili9341_WriteData>
 80011be:	20c0      	movs	r0, #192	; 0xc0
 80011c0:	f000 f8f7 	bl	80013b2 <ili9341_WriteReg>
 80011c4:	2010      	movs	r0, #16
 80011c6:	f000 f901 	bl	80013cc <ili9341_WriteData>
 80011ca:	20c1      	movs	r0, #193	; 0xc1
 80011cc:	f000 f8f1 	bl	80013b2 <ili9341_WriteReg>
 80011d0:	2010      	movs	r0, #16
 80011d2:	f000 f8fb 	bl	80013cc <ili9341_WriteData>
 80011d6:	20c5      	movs	r0, #197	; 0xc5
 80011d8:	f000 f8eb 	bl	80013b2 <ili9341_WriteReg>
 80011dc:	2045      	movs	r0, #69	; 0x45
 80011de:	f000 f8f5 	bl	80013cc <ili9341_WriteData>
 80011e2:	2015      	movs	r0, #21
 80011e4:	f000 f8f2 	bl	80013cc <ili9341_WriteData>
 80011e8:	20c7      	movs	r0, #199	; 0xc7
 80011ea:	f000 f8e2 	bl	80013b2 <ili9341_WriteReg>
 80011ee:	2090      	movs	r0, #144	; 0x90
 80011f0:	f000 f8ec 	bl	80013cc <ili9341_WriteData>
 80011f4:	2036      	movs	r0, #54	; 0x36
 80011f6:	f000 f8dc 	bl	80013b2 <ili9341_WriteReg>
 80011fa:	20c8      	movs	r0, #200	; 0xc8
 80011fc:	f000 f8e6 	bl	80013cc <ili9341_WriteData>
 8001200:	20f2      	movs	r0, #242	; 0xf2
 8001202:	f000 f8d6 	bl	80013b2 <ili9341_WriteReg>
 8001206:	2000      	movs	r0, #0
 8001208:	f000 f8e0 	bl	80013cc <ili9341_WriteData>
 800120c:	20b0      	movs	r0, #176	; 0xb0
 800120e:	f000 f8d0 	bl	80013b2 <ili9341_WriteReg>
 8001212:	20c2      	movs	r0, #194	; 0xc2
 8001214:	f000 f8da 	bl	80013cc <ili9341_WriteData>
 8001218:	20b6      	movs	r0, #182	; 0xb6
 800121a:	f000 f8ca 	bl	80013b2 <ili9341_WriteReg>
 800121e:	200a      	movs	r0, #10
 8001220:	f000 f8d4 	bl	80013cc <ili9341_WriteData>
 8001224:	20a7      	movs	r0, #167	; 0xa7
 8001226:	f000 f8d1 	bl	80013cc <ili9341_WriteData>
 800122a:	2027      	movs	r0, #39	; 0x27
 800122c:	f000 f8ce 	bl	80013cc <ili9341_WriteData>
 8001230:	2004      	movs	r0, #4
 8001232:	f000 f8cb 	bl	80013cc <ili9341_WriteData>
 8001236:	202a      	movs	r0, #42	; 0x2a
 8001238:	f000 f8bb 	bl	80013b2 <ili9341_WriteReg>
 800123c:	2000      	movs	r0, #0
 800123e:	f000 f8c5 	bl	80013cc <ili9341_WriteData>
 8001242:	2000      	movs	r0, #0
 8001244:	f000 f8c2 	bl	80013cc <ili9341_WriteData>
 8001248:	2000      	movs	r0, #0
 800124a:	f000 f8bf 	bl	80013cc <ili9341_WriteData>
 800124e:	20ef      	movs	r0, #239	; 0xef
 8001250:	f000 f8bc 	bl	80013cc <ili9341_WriteData>
 8001254:	202b      	movs	r0, #43	; 0x2b
 8001256:	f000 f8ac 	bl	80013b2 <ili9341_WriteReg>
 800125a:	2000      	movs	r0, #0
 800125c:	f000 f8b6 	bl	80013cc <ili9341_WriteData>
 8001260:	2000      	movs	r0, #0
 8001262:	f000 f8b3 	bl	80013cc <ili9341_WriteData>
 8001266:	2001      	movs	r0, #1
 8001268:	f000 f8b0 	bl	80013cc <ili9341_WriteData>
 800126c:	203f      	movs	r0, #63	; 0x3f
 800126e:	f000 f8ad 	bl	80013cc <ili9341_WriteData>
 8001272:	20f6      	movs	r0, #246	; 0xf6
 8001274:	f000 f89d 	bl	80013b2 <ili9341_WriteReg>
 8001278:	2001      	movs	r0, #1
 800127a:	f000 f8a7 	bl	80013cc <ili9341_WriteData>
 800127e:	2000      	movs	r0, #0
 8001280:	f000 f8a4 	bl	80013cc <ili9341_WriteData>
 8001284:	2006      	movs	r0, #6
 8001286:	f000 f8a1 	bl	80013cc <ili9341_WriteData>
 800128a:	202c      	movs	r0, #44	; 0x2c
 800128c:	f000 f891 	bl	80013b2 <ili9341_WriteReg>
 8001290:	20c8      	movs	r0, #200	; 0xc8
 8001292:	f000 fe31 	bl	8001ef8 <LCD_Delay>
 8001296:	2026      	movs	r0, #38	; 0x26
 8001298:	f000 f88b 	bl	80013b2 <ili9341_WriteReg>
 800129c:	2001      	movs	r0, #1
 800129e:	f000 f895 	bl	80013cc <ili9341_WriteData>
 80012a2:	20e0      	movs	r0, #224	; 0xe0
 80012a4:	f000 f885 	bl	80013b2 <ili9341_WriteReg>
 80012a8:	200f      	movs	r0, #15
 80012aa:	f000 f88f 	bl	80013cc <ili9341_WriteData>
 80012ae:	2029      	movs	r0, #41	; 0x29
 80012b0:	f000 f88c 	bl	80013cc <ili9341_WriteData>
 80012b4:	2024      	movs	r0, #36	; 0x24
 80012b6:	f000 f889 	bl	80013cc <ili9341_WriteData>
 80012ba:	200c      	movs	r0, #12
 80012bc:	f000 f886 	bl	80013cc <ili9341_WriteData>
 80012c0:	200e      	movs	r0, #14
 80012c2:	f000 f883 	bl	80013cc <ili9341_WriteData>
 80012c6:	2009      	movs	r0, #9
 80012c8:	f000 f880 	bl	80013cc <ili9341_WriteData>
 80012cc:	204e      	movs	r0, #78	; 0x4e
 80012ce:	f000 f87d 	bl	80013cc <ili9341_WriteData>
 80012d2:	2078      	movs	r0, #120	; 0x78
 80012d4:	f000 f87a 	bl	80013cc <ili9341_WriteData>
 80012d8:	203c      	movs	r0, #60	; 0x3c
 80012da:	f000 f877 	bl	80013cc <ili9341_WriteData>
 80012de:	2009      	movs	r0, #9
 80012e0:	f000 f874 	bl	80013cc <ili9341_WriteData>
 80012e4:	2013      	movs	r0, #19
 80012e6:	f000 f871 	bl	80013cc <ili9341_WriteData>
 80012ea:	2005      	movs	r0, #5
 80012ec:	f000 f86e 	bl	80013cc <ili9341_WriteData>
 80012f0:	2017      	movs	r0, #23
 80012f2:	f000 f86b 	bl	80013cc <ili9341_WriteData>
 80012f6:	2011      	movs	r0, #17
 80012f8:	f000 f868 	bl	80013cc <ili9341_WriteData>
 80012fc:	2000      	movs	r0, #0
 80012fe:	f000 f865 	bl	80013cc <ili9341_WriteData>
 8001302:	20e1      	movs	r0, #225	; 0xe1
 8001304:	f000 f855 	bl	80013b2 <ili9341_WriteReg>
 8001308:	2000      	movs	r0, #0
 800130a:	f000 f85f 	bl	80013cc <ili9341_WriteData>
 800130e:	2016      	movs	r0, #22
 8001310:	f000 f85c 	bl	80013cc <ili9341_WriteData>
 8001314:	201b      	movs	r0, #27
 8001316:	f000 f859 	bl	80013cc <ili9341_WriteData>
 800131a:	2004      	movs	r0, #4
 800131c:	f000 f856 	bl	80013cc <ili9341_WriteData>
 8001320:	2011      	movs	r0, #17
 8001322:	f000 f853 	bl	80013cc <ili9341_WriteData>
 8001326:	2007      	movs	r0, #7
 8001328:	f000 f850 	bl	80013cc <ili9341_WriteData>
 800132c:	2031      	movs	r0, #49	; 0x31
 800132e:	f000 f84d 	bl	80013cc <ili9341_WriteData>
 8001332:	2033      	movs	r0, #51	; 0x33
 8001334:	f000 f84a 	bl	80013cc <ili9341_WriteData>
 8001338:	2042      	movs	r0, #66	; 0x42
 800133a:	f000 f847 	bl	80013cc <ili9341_WriteData>
 800133e:	2005      	movs	r0, #5
 8001340:	f000 f844 	bl	80013cc <ili9341_WriteData>
 8001344:	200c      	movs	r0, #12
 8001346:	f000 f841 	bl	80013cc <ili9341_WriteData>
 800134a:	200a      	movs	r0, #10
 800134c:	f000 f83e 	bl	80013cc <ili9341_WriteData>
 8001350:	2028      	movs	r0, #40	; 0x28
 8001352:	f000 f83b 	bl	80013cc <ili9341_WriteData>
 8001356:	202f      	movs	r0, #47	; 0x2f
 8001358:	f000 f838 	bl	80013cc <ili9341_WriteData>
 800135c:	200f      	movs	r0, #15
 800135e:	f000 f835 	bl	80013cc <ili9341_WriteData>
 8001362:	2011      	movs	r0, #17
 8001364:	f000 f825 	bl	80013b2 <ili9341_WriteReg>
 8001368:	20c8      	movs	r0, #200	; 0xc8
 800136a:	f000 fdc5 	bl	8001ef8 <LCD_Delay>
 800136e:	2029      	movs	r0, #41	; 0x29
 8001370:	f000 f81f 	bl	80013b2 <ili9341_WriteReg>
 8001374:	202c      	movs	r0, #44	; 0x2c
 8001376:	f000 f81c 	bl	80013b2 <ili9341_WriteReg>
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}

0800137e <ili9341_ReadID>:
 800137e:	b580      	push	{r7, lr}
 8001380:	af00      	add	r7, sp, #0
 8001382:	f000 fccb 	bl	8001d1c <LCD_IO_Init>
 8001386:	2103      	movs	r1, #3
 8001388:	20d3      	movs	r0, #211	; 0xd3
 800138a:	f000 f82c 	bl	80013e6 <ili9341_ReadData>
 800138e:	4603      	mov	r3, r0
 8001390:	b29b      	uxth	r3, r3
 8001392:	4618      	mov	r0, r3
 8001394:	bd80      	pop	{r7, pc}

08001396 <ili9341_DisplayOn>:
 8001396:	b580      	push	{r7, lr}
 8001398:	af00      	add	r7, sp, #0
 800139a:	2029      	movs	r0, #41	; 0x29
 800139c:	f000 f809 	bl	80013b2 <ili9341_WriteReg>
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <ili9341_DisplayOff>:
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	2028      	movs	r0, #40	; 0x28
 80013aa:	f000 f802 	bl	80013b2 <ili9341_WriteReg>
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <ili9341_WriteReg>:
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	71fb      	strb	r3, [r7, #7]
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 fd46 	bl	8001e50 <LCD_IO_WriteReg>
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <ili9341_WriteData>:
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	80fb      	strh	r3, [r7, #6]
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 fd17 	bl	8001e0c <LCD_IO_WriteData>
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <ili9341_ReadData>:
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	460a      	mov	r2, r1
 80013f0:	80fb      	strh	r3, [r7, #6]
 80013f2:	4613      	mov	r3, r2
 80013f4:	717b      	strb	r3, [r7, #5]
 80013f6:	797a      	ldrb	r2, [r7, #5]
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fd49 	bl	8001e94 <LCD_IO_ReadData>
 8001402:	4603      	mov	r3, r0
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <ili9341_GetLcdPixelWidth>:
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
 8001410:	23f0      	movs	r3, #240	; 0xf0
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <ili9341_GetLcdPixelHeight>:
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
 8001420:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	Stage* stage = new Stage;
 8001436:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
 800143a:	f005 ff81 	bl	8007340 <_Znwj>
 800143e:	4603      	mov	r3, r0
 8001440:	60fb      	str	r3, [r7, #12]
	StageObj* stgobj = new StageObj;
 8001442:	2098      	movs	r0, #152	; 0x98
 8001444:	f005 ff7c 	bl	8007340 <_Znwj>
 8001448:	4603      	mov	r3, r0
 800144a:	461c      	mov	r4, r3
 800144c:	4620      	mov	r0, r4
 800144e:	f7ff fa15 	bl	800087c <_ZN8StageObjC1Ev>
 8001452:	60bc      	str	r4, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8001454:	f001 fe38 	bl	80030c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001458:	f000 f846 	bl	80014e8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800145c:	f000 fb2a 	bl	8001ab4 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8001460:	f000 faa8 	bl	80019b4 <_ZL19MX_USART1_UART_Initv>
  MX_LTDC_Init();
 8001464:	f000 f96c 	bl	8001740 <_ZL12MX_LTDC_Initv>
  MX_DMA2D_Init();
 8001468:	f000 f8de 	bl	8001628 <_ZL13MX_DMA2D_Initv>
  MX_I2C3_Init();
 800146c:	f000 f918 	bl	80016a0 <_ZL12MX_I2C3_Initv>
  MX_SPI5_Init();
 8001470:	f000 fa24 	bl	80018bc <_ZL12MX_SPI5_Initv>
  MX_MBEDTLS_Init();
 8001474:	f005 ff5d 	bl	8007332 <MX_MBEDTLS_Init>
  MX_FMC_Init();
 8001478:	f000 faca 	bl	8001a10 <_ZL11MX_FMC_Initv>
  MX_TIM6_Init();
 800147c:	f000 fa5a 	bl	8001934 <_ZL12MX_TIM6_Initv>

  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8001480:	f000 fd46 	bl	8001f10 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER,LCD_FRAME_BUFFER);
 8001484:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001488:	2000      	movs	r0, #0
 800148a:	f000 fdc3 	bl	8002014 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 800148e:	2000      	movs	r0, #0
 8001490:	f000 fe24 	bl	80020dc <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8001494:	f000 ff3e 	bl	8002314 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001498:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800149c:	f000 fe60 	bl	8002160 <BSP_LCD_Clear>


  int y=0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
  bool state=1;
 80014a4:	2301      	movs	r3, #1
 80014a6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  stage->clear();
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f7ff f98b 	bl	80007c4 <_ZN5Stage5clearEv>
////		  BSP_LCD_DrawRect(0,0,240,320);
//	  }


	  //============ball===================
	  stage->clear();
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f7ff f988 	bl	80007c4 <_ZN5Stage5clearEv>
  	  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80014b4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80014b8:	f000 fe52 	bl	8002160 <BSP_LCD_Clear>
	  ball(n,1,stage,stgobj);
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <main+0xb4>)
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	2101      	movs	r1, #1
 80014c6:	f7ff fdba 	bl	800103e <_Z4ballibP5StageP8StageObj>
	  n++;
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <main+0xb4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <main+0xb4>)
 80014d2:	6013      	str	r3, [r2, #0]
	  stage->sendData();
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f7ff f99e 	bl	8000816 <_ZN5Stage8sendDataEv>
	  HAL_Delay(100);
 80014da:	2064      	movs	r0, #100	; 0x64
 80014dc:	f001 fe66 	bl	80031ac <HAL_Delay>
	  stage->clear();
 80014e0:	e7e5      	b.n	80014ae <main+0x7e>
 80014e2:	bf00      	nop
 80014e4:	200000d0 	.word	0x200000d0

080014e8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b0a0      	sub	sp, #128	; 0x80
 80014ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014f2:	2230      	movs	r2, #48	; 0x30
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f005 ff9b 	bl	8007432 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	2230      	movs	r2, #48	; 0x30
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f005 ff8c 	bl	8007432 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	4b40      	ldr	r3, [pc, #256]	; (8001620 <_Z18SystemClock_Configv+0x138>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a3f      	ldr	r2, [pc, #252]	; (8001620 <_Z18SystemClock_Configv+0x138>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b3d      	ldr	r3, [pc, #244]	; (8001620 <_Z18SystemClock_Configv+0x138>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	4b3a      	ldr	r3, [pc, #232]	; (8001624 <_Z18SystemClock_Configv+0x13c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a39      	ldr	r2, [pc, #228]	; (8001624 <_Z18SystemClock_Configv+0x13c>)
 8001540:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	4b37      	ldr	r3, [pc, #220]	; (8001624 <_Z18SystemClock_Configv+0x13c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001552:	2302      	movs	r3, #2
 8001554:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001556:	2301      	movs	r3, #1
 8001558:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800155a:	2310      	movs	r3, #16
 800155c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800155e:	2302      	movs	r3, #2
 8001560:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001562:	2300      	movs	r3, #0
 8001564:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001566:	2310      	movs	r3, #16
 8001568:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 360;
 800156a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800156e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001570:	2302      	movs	r3, #2
 8001572:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001574:	2304      	movs	r3, #4
 8001576:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001578:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800157c:	4618      	mov	r0, r3
 800157e:	f003 fb33 	bl	8004be8 <HAL_RCC_OscConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	bf14      	ite	ne
 8001588:	2301      	movne	r3, #1
 800158a:	2300      	moveq	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 8001592:	f000 fafd 	bl	8001b90 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001596:	f003 fad7 	bl	8004b48 <HAL_PWREx_EnableOverDrive>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	bf14      	ite	ne
 80015a0:	2301      	movne	r3, #1
 80015a2:	2300      	moveq	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 80015aa:	f000 faf1 	bl	8001b90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ae:	230f      	movs	r3, #15
 80015b0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b2:	2302      	movs	r3, #2
 80015b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b6:	2300      	movs	r3, #0
 80015b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015ca:	2105      	movs	r1, #5
 80015cc:	4618      	mov	r0, r3
 80015ce:	f003 fd7b 	bl	80050c8 <HAL_RCC_ClockConfig>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	bf14      	ite	ne
 80015d8:	2301      	movne	r3, #1
 80015da:	2300      	moveq	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <_Z18SystemClock_Configv+0xfe>
  {
    Error_Handler();
 80015e2:	f000 fad5 	bl	8001b90 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80015e6:	2308      	movs	r3, #8
 80015e8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 432;
 80015ea:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80015ee:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80015f0:	2302      	movs	r3, #2
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80015f4:	2300      	movs	r3, #0
 80015f6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	4618      	mov	r0, r3
 80015fe:	f003 ff2f 	bl	8005460 <HAL_RCCEx_PeriphCLKConfig>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	bf14      	ite	ne
 8001608:	2301      	movne	r3, #1
 800160a:	2300      	moveq	r3, #0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <_Z18SystemClock_Configv+0x12e>
  {
    Error_Handler();
 8001612:	f000 fabd 	bl	8001b90 <Error_Handler>
  }
}
 8001616:	bf00      	nop
 8001618:	3780      	adds	r7, #128	; 0x80
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800
 8001624:	40007000 	.word	0x40007000

08001628 <_ZL13MX_DMA2D_Initv>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800162c:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <_ZL13MX_DMA2D_Initv+0x70>)
 800162e:	4a1b      	ldr	r2, [pc, #108]	; (800169c <_ZL13MX_DMA2D_Initv+0x74>)
 8001630:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <_ZL13MX_DMA2D_Initv+0x70>)
 8001634:	2200      	movs	r2, #0
 8001636:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <_ZL13MX_DMA2D_Initv+0x70>)
 800163a:	2202      	movs	r2, #2
 800163c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <_ZL13MX_DMA2D_Initv+0x70>)
 8001640:	2200      	movs	r2, #0
 8001642:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <_ZL13MX_DMA2D_Initv+0x70>)
 8001646:	2200      	movs	r2, #0
 8001648:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <_ZL13MX_DMA2D_Initv+0x70>)
 800164c:	2202      	movs	r2, #2
 800164e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <_ZL13MX_DMA2D_Initv+0x70>)
 8001652:	2200      	movs	r2, #0
 8001654:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <_ZL13MX_DMA2D_Initv+0x70>)
 8001658:	2200      	movs	r2, #0
 800165a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800165c:	480e      	ldr	r0, [pc, #56]	; (8001698 <_ZL13MX_DMA2D_Initv+0x70>)
 800165e:	f002 f895 	bl	800378c <HAL_DMA2D_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	bf14      	ite	ne
 8001668:	2301      	movne	r3, #1
 800166a:	2300      	moveq	r3, #0
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <_ZL13MX_DMA2D_Initv+0x4e>
  {
    Error_Handler();
 8001672:	f000 fa8d 	bl	8001b90 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001676:	2101      	movs	r1, #1
 8001678:	4807      	ldr	r0, [pc, #28]	; (8001698 <_ZL13MX_DMA2D_Initv+0x70>)
 800167a:	f002 f9e5 	bl	8003a48 <HAL_DMA2D_ConfigLayer>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	bf14      	ite	ne
 8001684:	2301      	movne	r3, #1
 8001686:	2300      	moveq	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <_ZL13MX_DMA2D_Initv+0x6a>
  {
    Error_Handler();
 800168e:	f000 fa7f 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200000d4 	.word	0x200000d4
 800169c:	4002b000 	.word	0x4002b000

080016a0 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80016a4:	4b23      	ldr	r3, [pc, #140]	; (8001734 <_ZL12MX_I2C3_Initv+0x94>)
 80016a6:	4a24      	ldr	r2, [pc, #144]	; (8001738 <_ZL12MX_I2C3_Initv+0x98>)
 80016a8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80016aa:	4b22      	ldr	r3, [pc, #136]	; (8001734 <_ZL12MX_I2C3_Initv+0x94>)
 80016ac:	4a23      	ldr	r2, [pc, #140]	; (800173c <_ZL12MX_I2C3_Initv+0x9c>)
 80016ae:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016b0:	4b20      	ldr	r3, [pc, #128]	; (8001734 <_ZL12MX_I2C3_Initv+0x94>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80016b6:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <_ZL12MX_I2C3_Initv+0x94>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016bc:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <_ZL12MX_I2C3_Initv+0x94>)
 80016be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016c2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <_ZL12MX_I2C3_Initv+0x94>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <_ZL12MX_I2C3_Initv+0x94>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016d0:	4b18      	ldr	r3, [pc, #96]	; (8001734 <_ZL12MX_I2C3_Initv+0x94>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <_ZL12MX_I2C3_Initv+0x94>)
 80016d8:	2200      	movs	r2, #0
 80016da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80016dc:	4815      	ldr	r0, [pc, #84]	; (8001734 <_ZL12MX_I2C3_Initv+0x94>)
 80016de:	f002 fdaf 	bl	8004240 <HAL_I2C_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bf14      	ite	ne
 80016e8:	2301      	movne	r3, #1
 80016ea:	2300      	moveq	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 80016f2:	f000 fa4d 	bl	8001b90 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016f6:	2100      	movs	r1, #0
 80016f8:	480e      	ldr	r0, [pc, #56]	; (8001734 <_ZL12MX_I2C3_Initv+0x94>)
 80016fa:	f002 fed9 	bl	80044b0 <HAL_I2CEx_ConfigAnalogFilter>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	bf14      	ite	ne
 8001704:	2301      	movne	r3, #1
 8001706:	2300      	moveq	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <_ZL12MX_I2C3_Initv+0x72>
  {
    Error_Handler();
 800170e:	f000 fa3f 	bl	8001b90 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001712:	2100      	movs	r1, #0
 8001714:	4807      	ldr	r0, [pc, #28]	; (8001734 <_ZL12MX_I2C3_Initv+0x94>)
 8001716:	f002 ff07 	bl	8004528 <HAL_I2CEx_ConfigDigitalFilter>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	bf14      	ite	ne
 8001720:	2301      	movne	r3, #1
 8001722:	2300      	moveq	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <_ZL12MX_I2C3_Initv+0x8e>
  {
    Error_Handler();
 800172a:	f000 fa31 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000114 	.word	0x20000114
 8001738:	40005c00 	.word	0x40005c00
 800173c:	000186a0 	.word	0x000186a0

08001740 <_ZL12MX_LTDC_Initv>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b09a      	sub	sp, #104	; 0x68
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001746:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800174a:	2234      	movs	r2, #52	; 0x34
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f005 fe6f 	bl	8007432 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001754:	463b      	mov	r3, r7
 8001756:	2234      	movs	r2, #52	; 0x34
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f005 fe69 	bl	8007432 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001760:	4b54      	ldr	r3, [pc, #336]	; (80018b4 <_ZL12MX_LTDC_Initv+0x174>)
 8001762:	4a55      	ldr	r2, [pc, #340]	; (80018b8 <_ZL12MX_LTDC_Initv+0x178>)
 8001764:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001766:	4b53      	ldr	r3, [pc, #332]	; (80018b4 <_ZL12MX_LTDC_Initv+0x174>)
 8001768:	2200      	movs	r2, #0
 800176a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800176c:	4b51      	ldr	r3, [pc, #324]	; (80018b4 <_ZL12MX_LTDC_Initv+0x174>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001772:	4b50      	ldr	r3, [pc, #320]	; (80018b4 <_ZL12MX_LTDC_Initv+0x174>)
 8001774:	2200      	movs	r2, #0
 8001776:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001778:	4b4e      	ldr	r3, [pc, #312]	; (80018b4 <_ZL12MX_LTDC_Initv+0x174>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800177e:	4b4d      	ldr	r3, [pc, #308]	; (80018b4 <_ZL12MX_LTDC_Initv+0x174>)
 8001780:	2207      	movs	r2, #7
 8001782:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001784:	4b4b      	ldr	r3, [pc, #300]	; (80018b4 <_ZL12MX_LTDC_Initv+0x174>)
 8001786:	2203      	movs	r2, #3
 8001788:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800178a:	4b4a      	ldr	r3, [pc, #296]	; (80018b4 <_ZL12MX_LTDC_Initv+0x174>)
 800178c:	220e      	movs	r2, #14
 800178e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001790:	4b48      	ldr	r3, [pc, #288]	; (80018b4 <_ZL12MX_LTDC_Initv+0x174>)
 8001792:	2205      	movs	r2, #5
 8001794:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 334;
 8001796:	4b47      	ldr	r3, [pc, #284]	; (80018b4 <_ZL12MX_LTDC_Initv+0x174>)
 8001798:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 800179c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 245;
 800179e:	4b45      	ldr	r3, [pc, #276]	; (80018b4 <_ZL12MX_LTDC_Initv+0x174>)
 80017a0:	22f5      	movs	r2, #245	; 0xf5
 80017a2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 340;
 80017a4:	4b43      	ldr	r3, [pc, #268]	; (80018b4 <_ZL12MX_LTDC_Initv+0x174>)
 80017a6:	f44f 72aa 	mov.w	r2, #340	; 0x154
 80017aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 247;
 80017ac:	4b41      	ldr	r3, [pc, #260]	; (80018b4 <_ZL12MX_LTDC_Initv+0x174>)
 80017ae:	22f7      	movs	r2, #247	; 0xf7
 80017b0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80017b2:	4b40      	ldr	r3, [pc, #256]	; (80018b4 <_ZL12MX_LTDC_Initv+0x174>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80017ba:	4b3e      	ldr	r3, [pc, #248]	; (80018b4 <_ZL12MX_LTDC_Initv+0x174>)
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80017c2:	4b3c      	ldr	r3, [pc, #240]	; (80018b4 <_ZL12MX_LTDC_Initv+0x174>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80017ca:	483a      	ldr	r0, [pc, #232]	; (80018b4 <_ZL12MX_LTDC_Initv+0x174>)
 80017cc:	f002 feec 	bl	80045a8 <HAL_LTDC_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	bf14      	ite	ne
 80017d6:	2301      	movne	r3, #1
 80017d8:	2300      	moveq	r3, #0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <_ZL12MX_LTDC_Initv+0xa4>
  {
    Error_Handler();
 80017e0:	f000 f9d6 	bl	8001b90 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80017f4:	2302      	movs	r3, #2
 80017f6:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001804:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001806:	2305      	movs	r3, #5
 8001808:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001828:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800182c:	2200      	movs	r2, #0
 800182e:	4619      	mov	r1, r3
 8001830:	4820      	ldr	r0, [pc, #128]	; (80018b4 <_ZL12MX_LTDC_Initv+0x174>)
 8001832:	f002 ff89 	bl	8004748 <HAL_LTDC_ConfigLayer>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	bf14      	ite	ne
 800183c:	2301      	movne	r3, #1
 800183e:	2300      	moveq	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <_ZL12MX_LTDC_Initv+0x10a>
  {
    Error_Handler();
 8001846:	f000 f9a3 	bl	8001b90 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001866:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001868:	2305      	movs	r3, #5
 800186a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800188a:	463b      	mov	r3, r7
 800188c:	2201      	movs	r2, #1
 800188e:	4619      	mov	r1, r3
 8001890:	4808      	ldr	r0, [pc, #32]	; (80018b4 <_ZL12MX_LTDC_Initv+0x174>)
 8001892:	f002 ff59 	bl	8004748 <HAL_LTDC_ConfigLayer>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	bf14      	ite	ne
 800189c:	2301      	movne	r3, #1
 800189e:	2300      	moveq	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <_ZL12MX_LTDC_Initv+0x16a>
  {
    Error_Handler();
 80018a6:	f000 f973 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	3768      	adds	r7, #104	; 0x68
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000168 	.word	0x20000168
 80018b8:	40016800 	.word	0x40016800

080018bc <_ZL12MX_SPI5_Initv>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80018c0:	4b1a      	ldr	r3, [pc, #104]	; (800192c <_ZL12MX_SPI5_Initv+0x70>)
 80018c2:	4a1b      	ldr	r2, [pc, #108]	; (8001930 <_ZL12MX_SPI5_Initv+0x74>)
 80018c4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80018c6:	4b19      	ldr	r3, [pc, #100]	; (800192c <_ZL12MX_SPI5_Initv+0x70>)
 80018c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018cc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <_ZL12MX_SPI5_Initv+0x70>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <_ZL12MX_SPI5_Initv+0x70>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <_ZL12MX_SPI5_Initv+0x70>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <_ZL12MX_SPI5_Initv+0x70>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <_ZL12MX_SPI5_Initv+0x70>)
 80018e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ec:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018ee:	4b0f      	ldr	r3, [pc, #60]	; (800192c <_ZL12MX_SPI5_Initv+0x70>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018f4:	4b0d      	ldr	r3, [pc, #52]	; (800192c <_ZL12MX_SPI5_Initv+0x70>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <_ZL12MX_SPI5_Initv+0x70>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001900:	4b0a      	ldr	r3, [pc, #40]	; (800192c <_ZL12MX_SPI5_Initv+0x70>)
 8001902:	2200      	movs	r2, #0
 8001904:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <_ZL12MX_SPI5_Initv+0x70>)
 8001908:	220a      	movs	r2, #10
 800190a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800190c:	4807      	ldr	r0, [pc, #28]	; (800192c <_ZL12MX_SPI5_Initv+0x70>)
 800190e:	f003 ffe4 	bl	80058da <HAL_SPI_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	bf14      	ite	ne
 8001918:	2301      	movne	r3, #1
 800191a:	2300      	moveq	r3, #0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <_ZL12MX_SPI5_Initv+0x6a>
  {
    Error_Handler();
 8001922:	f000 f935 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000210 	.word	0x20000210
 8001930:	40015000 	.word	0x40015000

08001934 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800193a:	463b      	mov	r3, r7
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001942:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <_ZL12MX_TIM6_Initv+0x78>)
 8001944:	4a1a      	ldr	r2, [pc, #104]	; (80019b0 <_ZL12MX_TIM6_Initv+0x7c>)
 8001946:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001948:	4b18      	ldr	r3, [pc, #96]	; (80019ac <_ZL12MX_TIM6_Initv+0x78>)
 800194a:	2200      	movs	r2, #0
 800194c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <_ZL12MX_TIM6_Initv+0x78>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001954:	4b15      	ldr	r3, [pc, #84]	; (80019ac <_ZL12MX_TIM6_Initv+0x78>)
 8001956:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800195a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195c:	4b13      	ldr	r3, [pc, #76]	; (80019ac <_ZL12MX_TIM6_Initv+0x78>)
 800195e:	2200      	movs	r2, #0
 8001960:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001962:	4812      	ldr	r0, [pc, #72]	; (80019ac <_ZL12MX_TIM6_Initv+0x78>)
 8001964:	f004 fd44 	bl	80063f0 <HAL_TIM_Base_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	bf14      	ite	ne
 800196e:	2301      	movne	r3, #1
 8001970:	2300      	moveq	r3, #0
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <_ZL12MX_TIM6_Initv+0x48>
  {
    Error_Handler();
 8001978:	f000 f90a 	bl	8001b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197c:	2300      	movs	r3, #0
 800197e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001984:	463b      	mov	r3, r7
 8001986:	4619      	mov	r1, r3
 8001988:	4808      	ldr	r0, [pc, #32]	; (80019ac <_ZL12MX_TIM6_Initv+0x78>)
 800198a:	f004 ff37 	bl	80067fc <HAL_TIMEx_MasterConfigSynchronization>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	bf14      	ite	ne
 8001994:	2301      	movne	r3, #1
 8001996:	2300      	moveq	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <_ZL12MX_TIM6_Initv+0x6e>
  {
    Error_Handler();
 800199e:	f000 f8f7 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000268 	.word	0x20000268
 80019b0:	40001000 	.word	0x40001000

080019b4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019b8:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <_ZL19MX_USART1_UART_Initv+0x54>)
 80019ba:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <_ZL19MX_USART1_UART_Initv+0x58>)
 80019bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <_ZL19MX_USART1_UART_Initv+0x54>)
 80019c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <_ZL19MX_USART1_UART_Initv+0x54>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019cc:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <_ZL19MX_USART1_UART_Initv+0x54>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <_ZL19MX_USART1_UART_Initv+0x54>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <_ZL19MX_USART1_UART_Initv+0x54>)
 80019da:	220c      	movs	r2, #12
 80019dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <_ZL19MX_USART1_UART_Initv+0x54>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <_ZL19MX_USART1_UART_Initv+0x54>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019ea:	4807      	ldr	r0, [pc, #28]	; (8001a08 <_ZL19MX_USART1_UART_Initv+0x54>)
 80019ec:	f004 ff96 	bl	800691c <HAL_UART_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	bf14      	ite	ne
 80019f6:	2301      	movne	r3, #1
 80019f8:	2300      	moveq	r3, #0
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001a00:	f000 f8c6 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	200002a8 	.word	0x200002a8
 8001a0c:	40011000 	.word	0x40011000

08001a10 <_ZL11MX_FMC_Initv>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
 8001a24:	615a      	str	r2, [r3, #20]
 8001a26:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001a28:	4b20      	ldr	r3, [pc, #128]	; (8001aac <_ZL11MX_FMC_Initv+0x9c>)
 8001a2a:	4a21      	ldr	r2, [pc, #132]	; (8001ab0 <_ZL11MX_FMC_Initv+0xa0>)
 8001a2c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <_ZL11MX_FMC_Initv+0x9c>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001a34:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <_ZL11MX_FMC_Initv+0x9c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001a3a:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <_ZL11MX_FMC_Initv+0x9c>)
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <_ZL11MX_FMC_Initv+0x9c>)
 8001a42:	2210      	movs	r2, #16
 8001a44:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <_ZL11MX_FMC_Initv+0x9c>)
 8001a48:	2240      	movs	r2, #64	; 0x40
 8001a4a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001a4c:	4b17      	ldr	r3, [pc, #92]	; (8001aac <_ZL11MX_FMC_Initv+0x9c>)
 8001a4e:	2280      	movs	r2, #128	; 0x80
 8001a50:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <_ZL11MX_FMC_Initv+0x9c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <_ZL11MX_FMC_Initv+0x9c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <_ZL11MX_FMC_Initv+0x9c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <_ZL11MX_FMC_Initv+0x9c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001a6a:	2310      	movs	r3, #16
 8001a6c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001a6e:	2310      	movs	r3, #16
 8001a70:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001a72:	2310      	movs	r3, #16
 8001a74:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001a76:	2310      	movs	r3, #16
 8001a78:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001a7a:	2310      	movs	r3, #16
 8001a7c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001a7e:	2310      	movs	r3, #16
 8001a80:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001a82:	2310      	movs	r3, #16
 8001a84:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4808      	ldr	r0, [pc, #32]	; (8001aac <_ZL11MX_FMC_Initv+0x9c>)
 8001a8c:	f003 fea6 	bl	80057dc <HAL_SDRAM_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	bf14      	ite	ne
 8001a96:	2301      	movne	r3, #1
 8001a98:	2300      	moveq	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <_ZL11MX_FMC_Initv+0x94>
  {
    Error_Handler( );
 8001aa0:	f000 f876 	bl	8001b90 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001aa4:	bf00      	nop
 8001aa6:	3720      	adds	r7, #32
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	200002e8 	.word	0x200002e8
 8001ab0:	a0000140 	.word	0xa0000140

08001ab4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	4b33      	ldr	r3, [pc, #204]	; (8001b8c <_ZL12MX_GPIO_Initv+0xd8>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a32      	ldr	r2, [pc, #200]	; (8001b8c <_ZL12MX_GPIO_Initv+0xd8>)
 8001ac4:	f043 0320 	orr.w	r3, r3, #32
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b30      	ldr	r3, [pc, #192]	; (8001b8c <_ZL12MX_GPIO_Initv+0xd8>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0320 	and.w	r3, r3, #32
 8001ad2:	61fb      	str	r3, [r7, #28]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
 8001ada:	4b2c      	ldr	r3, [pc, #176]	; (8001b8c <_ZL12MX_GPIO_Initv+0xd8>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a2b      	ldr	r2, [pc, #172]	; (8001b8c <_ZL12MX_GPIO_Initv+0xd8>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <_ZL12MX_GPIO_Initv+0xd8>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	61bb      	str	r3, [r7, #24]
 8001af0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <_ZL12MX_GPIO_Initv+0xd8>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a24      	ldr	r2, [pc, #144]	; (8001b8c <_ZL12MX_GPIO_Initv+0xd8>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <_ZL12MX_GPIO_Initv+0xd8>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	4b1e      	ldr	r3, [pc, #120]	; (8001b8c <_ZL12MX_GPIO_Initv+0xd8>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a1d      	ldr	r2, [pc, #116]	; (8001b8c <_ZL12MX_GPIO_Initv+0xd8>)
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <_ZL12MX_GPIO_Initv+0xd8>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <_ZL12MX_GPIO_Initv+0xd8>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a16      	ldr	r2, [pc, #88]	; (8001b8c <_ZL12MX_GPIO_Initv+0xd8>)
 8001b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <_ZL12MX_GPIO_Initv+0xd8>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <_ZL12MX_GPIO_Initv+0xd8>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a0f      	ldr	r2, [pc, #60]	; (8001b8c <_ZL12MX_GPIO_Initv+0xd8>)
 8001b50:	f043 0310 	orr.w	r3, r3, #16
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <_ZL12MX_GPIO_Initv+0xd8>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <_ZL12MX_GPIO_Initv+0xd8>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <_ZL12MX_GPIO_Initv+0xd8>)
 8001b6c:	f043 0308 	orr.w	r3, r3, #8
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <_ZL12MX_GPIO_Initv+0xd8>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]

}
 8001b7e:	bf00      	nop
 8001b80:	3724      	adds	r7, #36	; 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800

08001b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <SPIx_Init>:
  * @brief  SPIx Bus initialization
  * @param  None
  * @retval None
  */
static void SPIx_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001ba4:	4819      	ldr	r0, [pc, #100]	; (8001c0c <SPIx_Init+0x6c>)
 8001ba6:	f004 fb03 	bl	80061b0 <HAL_SPI_GetState>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d12b      	bne.n	8001c08 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001bb0:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <SPIx_Init+0x6c>)
 8001bb2:	4a17      	ldr	r2, [pc, #92]	; (8001c10 <SPIx_Init+0x70>)
 8001bb4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <SPIx_Init+0x6c>)
 8001bb8:	2218      	movs	r2, #24
 8001bba:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001bbc:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <SPIx_Init+0x6c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <SPIx_Init+0x6c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001bc8:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <SPIx_Init+0x6c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <SPIx_Init+0x6c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <SPIx_Init+0x6c>)
 8001bd6:	2207      	movs	r2, #7
 8001bd8:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <SPIx_Init+0x6c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001be0:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <SPIx_Init+0x6c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <SPIx_Init+0x6c>)
 8001be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bec:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <SPIx_Init+0x6c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <SPIx_Init+0x6c>)
 8001bf6:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bfa:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001bfc:	4803      	ldr	r0, [pc, #12]	; (8001c0c <SPIx_Init+0x6c>)
 8001bfe:	f000 f853 	bl	8001ca8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001c02:	4802      	ldr	r0, [pc, #8]	; (8001c0c <SPIx_Init+0x6c>)
 8001c04:	f003 fe69 	bl	80058da <HAL_SPI_Init>
  } 
}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	2000031c 	.word	0x2000031c
 8001c10:	40015000 	.word	0x40015000

08001c14 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <SPIx_Read+0x38>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f107 0108 	add.w	r1, r7, #8
 8001c2e:	4808      	ldr	r0, [pc, #32]	; (8001c50 <SPIx_Read+0x3c>)
 8001c30:	f004 f813 	bl	8005c5a <HAL_SPI_Receive>
 8001c34:	4603      	mov	r3, r0
 8001c36:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001c3e:	f000 f827 	bl	8001c90 <SPIx_Error>
  }
  
  return readvalue;
 8001c42:	68bb      	ldr	r3, [r7, #8]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000038 	.word	0x20000038
 8001c50:	2000031c 	.word	0x2000031c

08001c54 <SPIx_Write>:
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  * @retval None
  */
static void SPIx_Write(uint16_t Value)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <SPIx_Write+0x34>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	1db9      	adds	r1, r7, #6
 8001c68:	2201      	movs	r2, #1
 8001c6a:	4808      	ldr	r0, [pc, #32]	; (8001c8c <SPIx_Write+0x38>)
 8001c6c:	f003 fec1 	bl	80059f2 <HAL_SPI_Transmit>
 8001c70:	4603      	mov	r3, r0
 8001c72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001c7a:	f000 f809 	bl	8001c90 <SPIx_Error>
  }
}
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000038 	.word	0x20000038
 8001c8c:	2000031c 	.word	0x2000031c

08001c90 <SPIx_Error>:
  * @brief  SPIx error treatment function.
  * @param  None
  * @retval None
  */
static void SPIx_Error(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001c94:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <SPIx_Error+0x14>)
 8001c96:	f003 fe84 	bl	80059a2 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001c9a:	f7ff ff81 	bl	8001ba0 <SPIx_Init>
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	2000031c 	.word	0x2000031c

08001ca8 <SPIx_MspInit>:
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	; 0x28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <SPIx_MspInit+0x6c>)
 8001cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb8:	4a16      	ldr	r2, [pc, #88]	; (8001d14 <SPIx_MspInit+0x6c>)
 8001cba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cbe:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc0:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <SPIx_MspInit+0x6c>)
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <SPIx_MspInit+0x6c>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd4:	4a0f      	ldr	r2, [pc, #60]	; (8001d14 <SPIx_MspInit+0x6c>)
 8001cd6:	f043 0320 	orr.w	r3, r3, #32
 8001cda:	6313      	str	r3, [r2, #48]	; 0x30
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <SPIx_MspInit+0x6c>)
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	f003 0320 	and.w	r3, r3, #32
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001ce8:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001cfa:	2305      	movs	r3, #5
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4619      	mov	r1, r3
 8001d04:	4804      	ldr	r0, [pc, #16]	; (8001d18 <SPIx_MspInit+0x70>)
 8001d06:	f001 ffcd 	bl	8003ca4 <HAL_GPIO_Init>
}
 8001d0a:	bf00      	nop
 8001d0c:	3728      	adds	r7, #40	; 0x28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40021400 	.word	0x40021400

08001d1c <LCD_IO_Init>:
  * @brief  Configures the LCD_SPI interface.
  * @param  None
  * @retval None
  */
void LCD_IO_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001d22:	4b36      	ldr	r3, [pc, #216]	; (8001dfc <LCD_IO_Init+0xe0>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d164      	bne.n	8001df4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001d2a:	4b34      	ldr	r3, [pc, #208]	; (8001dfc <LCD_IO_Init+0xe0>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001d30:	2300      	movs	r3, #0
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	4b32      	ldr	r3, [pc, #200]	; (8001e00 <LCD_IO_Init+0xe4>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	4a31      	ldr	r2, [pc, #196]	; (8001e00 <LCD_IO_Init+0xe4>)
 8001d3a:	f043 0308 	orr.w	r3, r3, #8
 8001d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d40:	4b2f      	ldr	r3, [pc, #188]	; (8001e00 <LCD_IO_Init+0xe4>)
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001d4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001d52:	2301      	movs	r3, #1
 8001d54:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001d5e:	f107 030c 	add.w	r3, r7, #12
 8001d62:	4619      	mov	r1, r3
 8001d64:	4827      	ldr	r0, [pc, #156]	; (8001e04 <LCD_IO_Init+0xe8>)
 8001d66:	f001 ff9d 	bl	8003ca4 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	4b24      	ldr	r3, [pc, #144]	; (8001e00 <LCD_IO_Init+0xe4>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a23      	ldr	r2, [pc, #140]	; (8001e00 <LCD_IO_Init+0xe4>)
 8001d74:	f043 0308 	orr.w	r3, r3, #8
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b21      	ldr	r3, [pc, #132]	; (8001e00 <LCD_IO_Init+0xe4>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001d94:	2302      	movs	r3, #2
 8001d96:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001d98:	f107 030c 	add.w	r3, r7, #12
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4819      	ldr	r0, [pc, #100]	; (8001e04 <LCD_IO_Init+0xe8>)
 8001da0:	f001 ff80 	bl	8003ca4 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001da4:	2300      	movs	r3, #0
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <LCD_IO_Init+0xe4>)
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	4a14      	ldr	r2, [pc, #80]	; (8001e00 <LCD_IO_Init+0xe4>)
 8001dae:	f043 0304 	orr.w	r3, r3, #4
 8001db2:	6313      	str	r3, [r2, #48]	; 0x30
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <LCD_IO_Init+0xe4>)
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001dd0:	f107 030c 	add.w	r3, r7, #12
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	480c      	ldr	r0, [pc, #48]	; (8001e08 <LCD_IO_Init+0xec>)
 8001dd8:	f001 ff64 	bl	8003ca4 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2104      	movs	r1, #4
 8001de0:	4809      	ldr	r0, [pc, #36]	; (8001e08 <LCD_IO_Init+0xec>)
 8001de2:	f002 fa13 	bl	800420c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001de6:	2201      	movs	r2, #1
 8001de8:	2104      	movs	r1, #4
 8001dea:	4807      	ldr	r0, [pc, #28]	; (8001e08 <LCD_IO_Init+0xec>)
 8001dec:	f002 fa0e 	bl	800420c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001df0:	f7ff fed6 	bl	8001ba0 <SPIx_Init>
  }
}
 8001df4:	bf00      	nop
 8001df6:	3720      	adds	r7, #32
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000374 	.word	0x20000374
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40020c00 	.word	0x40020c00
 8001e08:	40020800 	.word	0x40020800

08001e0c <LCD_IO_WriteData>:
  * @brief  Writes register value.
  * @param  None
  * @retval None
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001e16:	2201      	movs	r2, #1
 8001e18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e1c:	480a      	ldr	r0, [pc, #40]	; (8001e48 <LCD_IO_WriteData+0x3c>)
 8001e1e:	f002 f9f5 	bl	800420c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001e22:	2200      	movs	r2, #0
 8001e24:	2104      	movs	r1, #4
 8001e26:	4809      	ldr	r0, [pc, #36]	; (8001e4c <LCD_IO_WriteData+0x40>)
 8001e28:	f002 f9f0 	bl	800420c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001e2c:	88fb      	ldrh	r3, [r7, #6]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff10 	bl	8001c54 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001e34:	2201      	movs	r2, #1
 8001e36:	2104      	movs	r1, #4
 8001e38:	4804      	ldr	r0, [pc, #16]	; (8001e4c <LCD_IO_WriteData+0x40>)
 8001e3a:	f002 f9e7 	bl	800420c <HAL_GPIO_WritePin>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40020c00 	.word	0x40020c00
 8001e4c:	40020800 	.word	0x40020800

08001e50 <LCD_IO_WriteReg>:
  * @brief  Writes register address.
  * @param  None
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e60:	480a      	ldr	r0, [pc, #40]	; (8001e8c <LCD_IO_WriteReg+0x3c>)
 8001e62:	f002 f9d3 	bl	800420c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001e66:	2200      	movs	r2, #0
 8001e68:	2104      	movs	r1, #4
 8001e6a:	4809      	ldr	r0, [pc, #36]	; (8001e90 <LCD_IO_WriteReg+0x40>)
 8001e6c:	f002 f9ce 	bl	800420c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff feed 	bl	8001c54 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	2104      	movs	r1, #4
 8001e7e:	4804      	ldr	r0, [pc, #16]	; (8001e90 <LCD_IO_WriteReg+0x40>)
 8001e80:	f002 f9c4 	bl	800420c <HAL_GPIO_WritePin>
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40020c00 	.word	0x40020c00
 8001e90:	40020800 	.word	0x40020800

08001e94 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	460a      	mov	r2, r1
 8001e9e:	80fb      	strh	r3, [r7, #6]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2104      	movs	r1, #4
 8001eac:	4810      	ldr	r0, [pc, #64]	; (8001ef0 <LCD_IO_ReadData+0x5c>)
 8001eae:	f002 f9ad 	bl	800420c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eb8:	480e      	ldr	r0, [pc, #56]	; (8001ef4 <LCD_IO_ReadData+0x60>)
 8001eba:	f002 f9a7 	bl	800420c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fec7 	bl	8001c54 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8001ec6:	797b      	ldrb	r3, [r7, #5]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fea3 	bl	8001c14 <SPIx_Read>
 8001ece:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ed6:	4807      	ldr	r0, [pc, #28]	; (8001ef4 <LCD_IO_ReadData+0x60>)
 8001ed8:	f002 f998 	bl	800420c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001edc:	2201      	movs	r2, #1
 8001ede:	2104      	movs	r1, #4
 8001ee0:	4803      	ldr	r0, [pc, #12]	; (8001ef0 <LCD_IO_ReadData+0x5c>)
 8001ee2:	f002 f993 	bl	800420c <HAL_GPIO_WritePin>
  
  return readvalue;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40020800 	.word	0x40020800
 8001ef4:	40020c00 	.word	0x40020c00

08001ef8 <LCD_Delay>:
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  * @retval None
  */
void LCD_Delay(uint32_t Delay)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f001 f953 	bl	80031ac <HAL_Delay>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8001f14:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <BSP_LCD_Init+0xbc>)
 8001f16:	4a2e      	ldr	r2, [pc, #184]	; (8001fd0 <BSP_LCD_Init+0xc0>)
 8001f18:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001f1a:	4b2c      	ldr	r3, [pc, #176]	; (8001fcc <BSP_LCD_Init+0xbc>)
 8001f1c:	2209      	movs	r2, #9
 8001f1e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001f20:	4b2a      	ldr	r3, [pc, #168]	; (8001fcc <BSP_LCD_Init+0xbc>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001f26:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <BSP_LCD_Init+0xbc>)
 8001f28:	221d      	movs	r2, #29
 8001f2a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001f2c:	4b27      	ldr	r3, [pc, #156]	; (8001fcc <BSP_LCD_Init+0xbc>)
 8001f2e:	2203      	movs	r2, #3
 8001f30:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8001f32:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <BSP_LCD_Init+0xbc>)
 8001f34:	f240 120d 	movw	r2, #269	; 0x10d
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8001f3a:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <BSP_LCD_Init+0xbc>)
 8001f3c:	f240 1243 	movw	r2, #323	; 0x143
 8001f40:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8001f42:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <BSP_LCD_Init+0xbc>)
 8001f44:	f240 1217 	movw	r2, #279	; 0x117
 8001f48:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <BSP_LCD_Init+0xbc>)
 8001f4c:	f240 1247 	movw	r2, #327	; 0x147
 8001f50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8001f52:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <BSP_LCD_Init+0xbc>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001f5a:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <BSP_LCD_Init+0xbc>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8001f62:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <BSP_LCD_Init+0xbc>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f6a:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <BSP_LCD_Init+0xc4>)
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001f70:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <BSP_LCD_Init+0xc4>)
 8001f72:	22c0      	movs	r2, #192	; 0xc0
 8001f74:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001f76:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <BSP_LCD_Init+0xc4>)
 8001f78:	2204      	movs	r2, #4
 8001f7a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001f7c:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <BSP_LCD_Init+0xc4>)
 8001f7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f82:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001f84:	4813      	ldr	r0, [pc, #76]	; (8001fd4 <BSP_LCD_Init+0xc4>)
 8001f86:	f003 fa6b 	bl	8005460 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <BSP_LCD_Init+0xbc>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001f90:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <BSP_LCD_Init+0xbc>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001f96:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <BSP_LCD_Init+0xbc>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <BSP_LCD_Init+0xbc>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]
    
    MspInit();
 8001fa2:	f000 f9c7 	bl	8002334 <MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8001fa6:	4809      	ldr	r0, [pc, #36]	; (8001fcc <BSP_LCD_Init+0xbc>)
 8001fa8:	f002 fafe 	bl	80045a8 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8001fac:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <BSP_LCD_Init+0xc8>)
 8001fae:	4a0b      	ldr	r2, [pc, #44]	; (8001fdc <BSP_LCD_Init+0xcc>)
 8001fb0:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <BSP_LCD_Init+0xc8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8001fba:	f000 fac9 	bl	8002550 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001fbe:	4808      	ldr	r0, [pc, #32]	; (8001fe0 <BSP_LCD_Init+0xd0>)
 8001fc0:	f000 f8b4 	bl	800212c <BSP_LCD_SetFont>

  return LCD_OK;
 8001fc4:	2300      	movs	r3, #0
}  
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000378 	.word	0x20000378
 8001fd0:	40016800 	.word	0x40016800
 8001fd4:	20000460 	.word	0x20000460
 8001fd8:	20000580 	.word	0x20000580
 8001fdc:	20000000 	.word	0x20000000
 8001fe0:	2000003c 	.word	0x2000003c

08001fe4 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001fe8:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <BSP_LCD_GetXSize+0x14>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fee:	4798      	blx	r3
 8001ff0:	4603      	mov	r3, r0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000580 	.word	0x20000580

08001ffc <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None    
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <BSP_LCD_GetYSize+0x14>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002006:	4798      	blx	r3
 8002008:	4603      	mov	r3, r0
}
 800200a:	4618      	mov	r0, r3
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000580 	.word	0x20000580

08002014 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002014:	b580      	push	{r7, lr}
 8002016:	b090      	sub	sp, #64	; 0x40
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	6039      	str	r1, [r7, #0]
 800201e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002024:	f7ff ffde 	bl	8001fe4 <BSP_LCD_GetXSize>
 8002028:	4603      	mov	r3, r0
 800202a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002030:	f7ff ffe4 	bl	8001ffc <BSP_LCD_GetYSize>
 8002034:	4603      	mov	r3, r0
 8002036:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002040:	23ff      	movs	r3, #255	; 0xff
 8002042:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800205a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002060:	2307      	movs	r3, #7
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002064:	f7ff ffbe 	bl	8001fe4 <BSP_LCD_GetXSize>
 8002068:	4603      	mov	r3, r0
 800206a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800206c:	f7ff ffc6 	bl	8001ffc <BSP_LCD_GetYSize>
 8002070:	4603      	mov	r3, r0
 8002072:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002074:	88fa      	ldrh	r2, [r7, #6]
 8002076:	f107 030c 	add.w	r3, r7, #12
 800207a:	4619      	mov	r1, r3
 800207c:	4814      	ldr	r0, [pc, #80]	; (80020d0 <BSP_LCD_LayerDefaultInit+0xbc>)
 800207e:	f002 fb63 	bl	8004748 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002082:	88fa      	ldrh	r2, [r7, #6]
 8002084:	4913      	ldr	r1, [pc, #76]	; (80020d4 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002086:	4613      	mov	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	3304      	adds	r3, #4
 8002092:	f04f 32ff 	mov.w	r2, #4294967295
 8002096:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002098:	88fa      	ldrh	r2, [r7, #6]
 800209a:	490e      	ldr	r1, [pc, #56]	; (80020d4 <BSP_LCD_LayerDefaultInit+0xc0>)
 800209c:	4613      	mov	r3, r2
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	3308      	adds	r3, #8
 80020a8:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <BSP_LCD_LayerDefaultInit+0xc4>)
 80020aa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80020ac:	88fa      	ldrh	r2, [r7, #6]
 80020ae:	4909      	ldr	r1, [pc, #36]	; (80020d4 <BSP_LCD_LayerDefaultInit+0xc0>)
 80020b0:	4613      	mov	r3, r2
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	4413      	add	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80020be:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80020c0:	4803      	ldr	r0, [pc, #12]	; (80020d0 <BSP_LCD_LayerDefaultInit+0xbc>)
 80020c2:	f002 fb7f 	bl	80047c4 <HAL_LTDC_EnableDither>
}
 80020c6:	bf00      	nop
 80020c8:	3740      	adds	r7, #64	; 0x40
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000378 	.word	0x20000378
 80020d4:	20000494 	.word	0x20000494
 80020d8:	2000003c 	.word	0x2000003c

080020dc <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80020e4:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <BSP_LCD_SelectLayer+0x1c>)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6013      	str	r3, [r2, #0]
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000490 	.word	0x20000490

080020fc <BSP_LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002104:	4b07      	ldr	r3, [pc, #28]	; (8002124 <BSP_LCD_SetTextColor+0x28>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4907      	ldr	r1, [pc, #28]	; (8002128 <BSP_LCD_SetTextColor+0x2c>)
 800210a:	4613      	mov	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	601a      	str	r2, [r3, #0]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	20000490 	.word	0x20000490
 8002128:	20000494 	.word	0x20000494

0800212c <BSP_LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <BSP_LCD_SetFont+0x2c>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4908      	ldr	r1, [pc, #32]	; (800215c <BSP_LCD_SetFont+0x30>)
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	440b      	add	r3, r1
 8002144:	3308      	adds	r3, #8
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	601a      	str	r2, [r3, #0]
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	20000490 	.word	0x20000490
 800215c:	20000494 	.word	0x20000494

08002160 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002162:	b085      	sub	sp, #20
 8002164:	af02      	add	r7, sp, #8
 8002166:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002168:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <BSP_LCD_Clear+0x48>)
 800216a:	681c      	ldr	r4, [r3, #0]
 800216c:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <BSP_LCD_Clear+0x48>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0e      	ldr	r2, [pc, #56]	; (80021ac <BSP_LCD_Clear+0x4c>)
 8002172:	2134      	movs	r1, #52	; 0x34
 8002174:	fb01 f303 	mul.w	r3, r1, r3
 8002178:	4413      	add	r3, r2
 800217a:	335c      	adds	r3, #92	; 0x5c
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	461d      	mov	r5, r3
 8002180:	f7ff ff30 	bl	8001fe4 <BSP_LCD_GetXSize>
 8002184:	4606      	mov	r6, r0
 8002186:	f7ff ff39 	bl	8001ffc <BSP_LCD_GetYSize>
 800218a:	4602      	mov	r2, r0
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	9301      	str	r3, [sp, #4]
 8002190:	2300      	movs	r3, #0
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	4613      	mov	r3, r2
 8002196:	4632      	mov	r2, r6
 8002198:	4629      	mov	r1, r5
 800219a:	4620      	mov	r0, r4
 800219c:	f000 f9a0 	bl	80024e0 <FillBuffer>
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a8:	20000490 	.word	0x20000490
 80021ac:	20000378 	.word	0x20000378

080021b0 <BSP_LCD_DrawHLine>:
  * @param  Ypos: the Y position
  * @param  Length: line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80021b0:	b5b0      	push	{r4, r5, r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af02      	add	r7, sp, #8
 80021b6:	4603      	mov	r3, r0
 80021b8:	80fb      	strh	r3, [r7, #6]
 80021ba:	460b      	mov	r3, r1
 80021bc:	80bb      	strh	r3, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80021c6:	4b16      	ldr	r3, [pc, #88]	; (8002220 <BSP_LCD_DrawHLine+0x70>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a16      	ldr	r2, [pc, #88]	; (8002224 <BSP_LCD_DrawHLine+0x74>)
 80021cc:	2134      	movs	r1, #52	; 0x34
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	335c      	adds	r3, #92	; 0x5c
 80021d6:	681c      	ldr	r4, [r3, #0]
 80021d8:	f7ff ff04 	bl	8001fe4 <BSP_LCD_GetXSize>
 80021dc:	4602      	mov	r2, r0
 80021de:	88bb      	ldrh	r3, [r7, #4]
 80021e0:	fb03 f202 	mul.w	r2, r3, r2
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4423      	add	r3, r4
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80021ee:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <BSP_LCD_DrawHLine+0x70>)
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	68fc      	ldr	r4, [r7, #12]
 80021f4:	887d      	ldrh	r5, [r7, #2]
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <BSP_LCD_DrawHLine+0x70>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	490b      	ldr	r1, [pc, #44]	; (8002228 <BSP_LCD_DrawHLine+0x78>)
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	2300      	movs	r3, #0
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2301      	movs	r3, #1
 8002210:	462a      	mov	r2, r5
 8002212:	4621      	mov	r1, r4
 8002214:	f000 f964 	bl	80024e0 <FillBuffer>
}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bdb0      	pop	{r4, r5, r7, pc}
 8002220:	20000490 	.word	0x20000490
 8002224:	20000378 	.word	0x20000378
 8002228:	20000494 	.word	0x20000494

0800222c <BSP_LCD_DrawVLine>:
  * @param  Ypos: the Y position
  * @param  Length: line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800222c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800222e:	b087      	sub	sp, #28
 8002230:	af02      	add	r7, sp, #8
 8002232:	4603      	mov	r3, r0
 8002234:	80fb      	strh	r3, [r7, #6]
 8002236:	460b      	mov	r3, r1
 8002238:	80bb      	strh	r3, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002242:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <BSP_LCD_DrawVLine+0x78>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a18      	ldr	r2, [pc, #96]	; (80022a8 <BSP_LCD_DrawVLine+0x7c>)
 8002248:	2134      	movs	r1, #52	; 0x34
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	4413      	add	r3, r2
 8002250:	335c      	adds	r3, #92	; 0x5c
 8002252:	681c      	ldr	r4, [r3, #0]
 8002254:	f7ff fec6 	bl	8001fe4 <BSP_LCD_GetXSize>
 8002258:	4602      	mov	r2, r0
 800225a:	88bb      	ldrh	r3, [r7, #4]
 800225c:	fb03 f202 	mul.w	r2, r3, r2
 8002260:	88fb      	ldrh	r3, [r7, #6]
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4423      	add	r3, r4
 8002268:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800226a:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <BSP_LCD_DrawVLine+0x78>)
 800226c:	681c      	ldr	r4, [r3, #0]
 800226e:	68fd      	ldr	r5, [r7, #12]
 8002270:	887e      	ldrh	r6, [r7, #2]
 8002272:	f7ff feb7 	bl	8001fe4 <BSP_LCD_GetXSize>
 8002276:	4603      	mov	r3, r0
 8002278:	1e59      	subs	r1, r3, #1
 800227a:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <BSP_LCD_DrawVLine+0x78>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	480b      	ldr	r0, [pc, #44]	; (80022ac <BSP_LCD_DrawVLine+0x80>)
 8002280:	4613      	mov	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4403      	add	r3, r0
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	9301      	str	r3, [sp, #4]
 800228e:	9100      	str	r1, [sp, #0]
 8002290:	4633      	mov	r3, r6
 8002292:	2201      	movs	r2, #1
 8002294:	4629      	mov	r1, r5
 8002296:	4620      	mov	r0, r4
 8002298:	f000 f922 	bl	80024e0 <FillBuffer>
}
 800229c:	bf00      	nop
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a4:	20000490 	.word	0x20000490
 80022a8:	20000378 	.word	0x20000378
 80022ac:	20000494 	.word	0x20000494

080022b0 <BSP_LCD_DrawRect>:
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4604      	mov	r4, r0
 80022b8:	4608      	mov	r0, r1
 80022ba:	4611      	mov	r1, r2
 80022bc:	461a      	mov	r2, r3
 80022be:	4623      	mov	r3, r4
 80022c0:	80fb      	strh	r3, [r7, #6]
 80022c2:	4603      	mov	r3, r0
 80022c4:	80bb      	strh	r3, [r7, #4]
 80022c6:	460b      	mov	r3, r1
 80022c8:	807b      	strh	r3, [r7, #2]
 80022ca:	4613      	mov	r3, r2
 80022cc:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 80022ce:	887a      	ldrh	r2, [r7, #2]
 80022d0:	88b9      	ldrh	r1, [r7, #4]
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff ff6b 	bl	80021b0 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 80022da:	88ba      	ldrh	r2, [r7, #4]
 80022dc:	883b      	ldrh	r3, [r7, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	b299      	uxth	r1, r3
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff ff62 	bl	80021b0 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 80022ec:	883a      	ldrh	r2, [r7, #0]
 80022ee:	88b9      	ldrh	r1, [r7, #4]
 80022f0:	88fb      	ldrh	r3, [r7, #6]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ff9a 	bl	800222c <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 80022f8:	88fa      	ldrh	r2, [r7, #6]
 80022fa:	887b      	ldrh	r3, [r7, #2]
 80022fc:	4413      	add	r3, r2
 80022fe:	b29b      	uxth	r3, r3
 8002300:	883a      	ldrh	r2, [r7, #0]
 8002302:	88b9      	ldrh	r1, [r7, #4]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff91 	bl	800222c <BSP_LCD_DrawVLine>
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	bd90      	pop	{r4, r7, pc}
	...

08002314 <BSP_LCD_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <BSP_LCD_DisplayOn+0x1c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002322:	4b03      	ldr	r3, [pc, #12]	; (8002330 <BSP_LCD_DisplayOn+0x1c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	4798      	blx	r3
  }
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000580 	.word	0x20000580

08002334 <MspInit>:
  * @brief  Initializes the LTDC MSP.
  * @param  None
  * @retval None
  */
static void MspInit(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08e      	sub	sp, #56	; 0x38
 8002338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __LTDC_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
 800233e:	4b61      	ldr	r3, [pc, #388]	; (80024c4 <MspInit+0x190>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	4a60      	ldr	r2, [pc, #384]	; (80024c4 <MspInit+0x190>)
 8002344:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002348:	6453      	str	r3, [r2, #68]	; 0x44
 800234a:	4b5e      	ldr	r3, [pc, #376]	; (80024c4 <MspInit+0x190>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002352:	623b      	str	r3, [r7, #32]
 8002354:	6a3b      	ldr	r3, [r7, #32]
  __DMA2D_CLK_ENABLE(); 
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	4b5a      	ldr	r3, [pc, #360]	; (80024c4 <MspInit+0x190>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a59      	ldr	r2, [pc, #356]	; (80024c4 <MspInit+0x190>)
 8002360:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b57      	ldr	r3, [pc, #348]	; (80024c4 <MspInit+0x190>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __GPIOA_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	61bb      	str	r3, [r7, #24]
 8002376:	4b53      	ldr	r3, [pc, #332]	; (80024c4 <MspInit+0x190>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a52      	ldr	r2, [pc, #328]	; (80024c4 <MspInit+0x190>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b50      	ldr	r3, [pc, #320]	; (80024c4 <MspInit+0x190>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	69bb      	ldr	r3, [r7, #24]
  __GPIOB_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	4b4c      	ldr	r3, [pc, #304]	; (80024c4 <MspInit+0x190>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a4b      	ldr	r2, [pc, #300]	; (80024c4 <MspInit+0x190>)
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b49      	ldr	r3, [pc, #292]	; (80024c4 <MspInit+0x190>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	697b      	ldr	r3, [r7, #20]
  __GPIOC_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	4b45      	ldr	r3, [pc, #276]	; (80024c4 <MspInit+0x190>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a44      	ldr	r2, [pc, #272]	; (80024c4 <MspInit+0x190>)
 80023b4:	f043 0304 	orr.w	r3, r3, #4
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b42      	ldr	r3, [pc, #264]	; (80024c4 <MspInit+0x190>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	693b      	ldr	r3, [r7, #16]
  __GPIOD_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	4b3e      	ldr	r3, [pc, #248]	; (80024c4 <MspInit+0x190>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a3d      	ldr	r2, [pc, #244]	; (80024c4 <MspInit+0x190>)
 80023d0:	f043 0308 	orr.w	r3, r3, #8
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b3b      	ldr	r3, [pc, #236]	; (80024c4 <MspInit+0x190>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
  __GPIOF_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	4b37      	ldr	r3, [pc, #220]	; (80024c4 <MspInit+0x190>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a36      	ldr	r2, [pc, #216]	; (80024c4 <MspInit+0x190>)
 80023ec:	f043 0320 	orr.w	r3, r3, #32
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b34      	ldr	r3, [pc, #208]	; (80024c4 <MspInit+0x190>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]
  __GPIOG_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	607b      	str	r3, [r7, #4]
 8002402:	4b30      	ldr	r3, [pc, #192]	; (80024c4 <MspInit+0x190>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a2f      	ldr	r2, [pc, #188]	; (80024c4 <MspInit+0x190>)
 8002408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <MspInit+0x190>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002416:	607b      	str	r3, [r7, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800241a:	f641 0358 	movw	r3, #6232	; 0x1858
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002420:	2302      	movs	r3, #2
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002428:	2302      	movs	r3, #2
 800242a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800242c:	230e      	movs	r3, #14
 800242e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002434:	4619      	mov	r1, r3
 8002436:	4824      	ldr	r0, [pc, #144]	; (80024c8 <MspInit+0x194>)
 8002438:	f001 fc34 	bl	8003ca4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800243c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002446:	4619      	mov	r1, r3
 8002448:	4820      	ldr	r0, [pc, #128]	; (80024cc <MspInit+0x198>)
 800244a:	f001 fc2b 	bl	8003ca4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800244e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002458:	4619      	mov	r1, r3
 800245a:	481d      	ldr	r0, [pc, #116]	; (80024d0 <MspInit+0x19c>)
 800245c:	f001 fc22 	bl	8003ca4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002460:	2348      	movs	r3, #72	; 0x48
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002468:	4619      	mov	r1, r3
 800246a:	481a      	ldr	r0, [pc, #104]	; (80024d4 <MspInit+0x1a0>)
 800246c:	f001 fc1a 	bl	8003ca4 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800247a:	4619      	mov	r1, r3
 800247c:	4816      	ldr	r0, [pc, #88]	; (80024d8 <MspInit+0x1a4>)
 800247e:	f001 fc11 	bl	8003ca4 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002482:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800248c:	4619      	mov	r1, r3
 800248e:	4813      	ldr	r0, [pc, #76]	; (80024dc <MspInit+0x1a8>)
 8002490:	f001 fc08 	bl	8003ca4 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002494:	2303      	movs	r3, #3
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002498:	2309      	movs	r3, #9
 800249a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800249c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a0:	4619      	mov	r1, r3
 80024a2:	480a      	ldr	r0, [pc, #40]	; (80024cc <MspInit+0x198>)
 80024a4:	f001 fbfe 	bl	8003ca4 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80024a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80024ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b2:	4619      	mov	r1, r3
 80024b4:	4809      	ldr	r0, [pc, #36]	; (80024dc <MspInit+0x1a8>)
 80024b6:	f001 fbf5 	bl	8003ca4 <HAL_GPIO_Init>
}
 80024ba:	bf00      	nop
 80024bc:	3738      	adds	r7, #56	; 0x38
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40020000 	.word	0x40020000
 80024cc:	40020400 	.word	0x40020400
 80024d0:	40020800 	.word	0x40020800
 80024d4:	40020c00 	.word	0x40020c00
 80024d8:	40021400 	.word	0x40021400
 80024dc:	40021800 	.word	0x40021800

080024e0 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  * @retval None
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af02      	add	r7, sp, #8
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80024ee:	4b16      	ldr	r3, [pc, #88]	; (8002548 <FillBuffer+0x68>)
 80024f0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80024f4:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80024f6:	4b14      	ldr	r3, [pc, #80]	; (8002548 <FillBuffer+0x68>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80024fc:	4a12      	ldr	r2, [pc, #72]	; (8002548 <FillBuffer+0x68>)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <FillBuffer+0x68>)
 8002504:	4a11      	ldr	r2, [pc, #68]	; (800254c <FillBuffer+0x6c>)
 8002506:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002508:	480f      	ldr	r0, [pc, #60]	; (8002548 <FillBuffer+0x68>)
 800250a:	f001 f93f 	bl	800378c <HAL_DMA2D_Init>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d115      	bne.n	8002540 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002514:	68f9      	ldr	r1, [r7, #12]
 8002516:	480c      	ldr	r0, [pc, #48]	; (8002548 <FillBuffer+0x68>)
 8002518:	f001 fa96 	bl	8003a48 <HAL_DMA2D_ConfigLayer>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10e      	bne.n	8002540 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69f9      	ldr	r1, [r7, #28]
 800252c:	4806      	ldr	r0, [pc, #24]	; (8002548 <FillBuffer+0x68>)
 800252e:	f001 f976 	bl	800381e <HAL_DMA2D_Start>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d103      	bne.n	8002540 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002538:	210a      	movs	r1, #10
 800253a:	4803      	ldr	r0, [pc, #12]	; (8002548 <FillBuffer+0x68>)
 800253c:	f001 f99a 	bl	8003874 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002540:	bf00      	nop
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000420 	.word	0x20000420
 800254c:	4002b000 	.word	0x4002b000

08002550 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param  None
  * @retval None
  */
void BSP_SDRAM_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002554:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <BSP_SDRAM_Init+0x90>)
 8002556:	4a23      	ldr	r2, [pc, #140]	; (80025e4 <BSP_SDRAM_Init+0x94>)
 8002558:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800255a:	4b23      	ldr	r3, [pc, #140]	; (80025e8 <BSP_SDRAM_Init+0x98>)
 800255c:	2202      	movs	r2, #2
 800255e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002560:	4b21      	ldr	r3, [pc, #132]	; (80025e8 <BSP_SDRAM_Init+0x98>)
 8002562:	2207      	movs	r2, #7
 8002564:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002566:	4b20      	ldr	r3, [pc, #128]	; (80025e8 <BSP_SDRAM_Init+0x98>)
 8002568:	2204      	movs	r2, #4
 800256a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 800256c:	4b1e      	ldr	r3, [pc, #120]	; (80025e8 <BSP_SDRAM_Init+0x98>)
 800256e:	2207      	movs	r2, #7
 8002570:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002572:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <BSP_SDRAM_Init+0x98>)
 8002574:	2202      	movs	r2, #2
 8002576:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002578:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <BSP_SDRAM_Init+0x98>)
 800257a:	2202      	movs	r2, #2
 800257c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800257e:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <BSP_SDRAM_Init+0x98>)
 8002580:	2202      	movs	r2, #2
 8002582:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002584:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <BSP_SDRAM_Init+0x90>)
 8002586:	2201      	movs	r2, #1
 8002588:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800258a:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <BSP_SDRAM_Init+0x90>)
 800258c:	2200      	movs	r2, #0
 800258e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002590:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <BSP_SDRAM_Init+0x90>)
 8002592:	2204      	movs	r2, #4
 8002594:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002596:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <BSP_SDRAM_Init+0x90>)
 8002598:	2210      	movs	r2, #16
 800259a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800259c:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <BSP_SDRAM_Init+0x90>)
 800259e:	2240      	movs	r2, #64	; 0x40
 80025a0:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80025a2:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <BSP_SDRAM_Init+0x90>)
 80025a4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80025a8:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80025aa:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <BSP_SDRAM_Init+0x90>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <BSP_SDRAM_Init+0x90>)
 80025b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025b6:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <BSP_SDRAM_Init+0x90>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80025be:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <BSP_SDRAM_Init+0x90>)
 80025c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025c4:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  MspInit();
 80025c6:	f000 f871 	bl	80026ac <MspInit>
  HAL_SDRAM_Init(&SdramHandle, &Timing);
 80025ca:	4907      	ldr	r1, [pc, #28]	; (80025e8 <BSP_SDRAM_Init+0x98>)
 80025cc:	4804      	ldr	r0, [pc, #16]	; (80025e0 <BSP_SDRAM_Init+0x90>)
 80025ce:	f003 f905 	bl	80057dc <HAL_SDRAM_Init>
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80025d2:	f240 506a 	movw	r0, #1386	; 0x56a
 80025d6:	f000 f809 	bl	80025ec <BSP_SDRAM_Initialization_sequence>
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	200004ac 	.word	0x200004ac
 80025e4:	a0000140 	.word	0xa0000140
 80025e8:	200004e0 	.word	0x200004e0

080025ec <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80025f8:	4b2a      	ldr	r3, [pc, #168]	; (80026a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80025fe:	4b29      	ldr	r3, [pc, #164]	; (80026a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002600:	2208      	movs	r2, #8
 8002602:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002604:	4b27      	ldr	r3, [pc, #156]	; (80026a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002606:	2201      	movs	r2, #1
 8002608:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800260a:	4b26      	ldr	r3, [pc, #152]	; (80026a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800260c:	2200      	movs	r2, #0
 800260e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002610:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002614:	4923      	ldr	r1, [pc, #140]	; (80026a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002616:	4824      	ldr	r0, [pc, #144]	; (80026a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002618:	f003 f914 	bl	8005844 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800261c:	2001      	movs	r0, #1
 800261e:	f000 fdc5 	bl	80031ac <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002622:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002624:	2202      	movs	r2, #2
 8002626:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002628:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800262a:	2208      	movs	r2, #8
 800262c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800262e:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002630:	2201      	movs	r2, #1
 8002632:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002634:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002636:	2200      	movs	r2, #0
 8002638:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800263a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800263e:	4919      	ldr	r1, [pc, #100]	; (80026a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002640:	4819      	ldr	r0, [pc, #100]	; (80026a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002642:	f003 f8ff 	bl	8005844 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002646:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002648:	2203      	movs	r2, #3
 800264a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800264c:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800264e:	2208      	movs	r2, #8
 8002650:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002652:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002654:	2204      	movs	r2, #4
 8002656:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002658:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800265a:	2200      	movs	r2, #0
 800265c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800265e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002662:	4910      	ldr	r1, [pc, #64]	; (80026a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002664:	4810      	ldr	r0, [pc, #64]	; (80026a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002666:	f003 f8ed 	bl	8005844 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800266a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800266e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002672:	2204      	movs	r2, #4
 8002674:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002678:	2208      	movs	r2, #8
 800267a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800267c:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800267e:	2201      	movs	r2, #1
 8002680:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4a07      	ldr	r2, [pc, #28]	; (80026a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002686:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800268c:	4905      	ldr	r1, [pc, #20]	; (80026a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800268e:	4806      	ldr	r0, [pc, #24]	; (80026a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002690:	f003 f8d8 	bl	8005844 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	4804      	ldr	r0, [pc, #16]	; (80026a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002698:	f003 f8ff 	bl	800589a <HAL_SDRAM_ProgramRefreshRate>
}
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	200004fc 	.word	0x200004fc
 80026a8:	200004ac 	.word	0x200004ac

080026ac <MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  None
  * @retval None
  */
static void MspInit(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08e      	sub	sp, #56	; 0x38
 80026b0:	af00      	add	r7, sp, #0
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;
  SDRAM_HandleTypeDef  *hsdram = &SdramHandle;
 80026b2:	4b79      	ldr	r3, [pc, #484]	; (8002898 <MspInit+0x1ec>)
 80026b4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Enable FMC clock */
  __FMC_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	61fb      	str	r3, [r7, #28]
 80026ba:	4b78      	ldr	r3, [pc, #480]	; (800289c <MspInit+0x1f0>)
 80026bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026be:	4a77      	ldr	r2, [pc, #476]	; (800289c <MspInit+0x1f0>)
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	6393      	str	r3, [r2, #56]	; 0x38
 80026c6:	4b75      	ldr	r3, [pc, #468]	; (800289c <MspInit+0x1f0>)
 80026c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	61fb      	str	r3, [r7, #28]
 80026d0:	69fb      	ldr	r3, [r7, #28]

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	61bb      	str	r3, [r7, #24]
 80026d6:	4b71      	ldr	r3, [pc, #452]	; (800289c <MspInit+0x1f0>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	4a70      	ldr	r2, [pc, #448]	; (800289c <MspInit+0x1f0>)
 80026dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026e0:	6313      	str	r3, [r2, #48]	; 0x30
 80026e2:	4b6e      	ldr	r3, [pc, #440]	; (800289c <MspInit+0x1f0>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ea:	61bb      	str	r3, [r7, #24]
 80026ec:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __GPIOB_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	4b6a      	ldr	r3, [pc, #424]	; (800289c <MspInit+0x1f0>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	4a69      	ldr	r2, [pc, #420]	; (800289c <MspInit+0x1f0>)
 80026f8:	f043 0302 	orr.w	r3, r3, #2
 80026fc:	6313      	str	r3, [r2, #48]	; 0x30
 80026fe:	4b67      	ldr	r3, [pc, #412]	; (800289c <MspInit+0x1f0>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	697b      	ldr	r3, [r7, #20]
  __GPIOC_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	4b63      	ldr	r3, [pc, #396]	; (800289c <MspInit+0x1f0>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	4a62      	ldr	r2, [pc, #392]	; (800289c <MspInit+0x1f0>)
 8002714:	f043 0304 	orr.w	r3, r3, #4
 8002718:	6313      	str	r3, [r2, #48]	; 0x30
 800271a:	4b60      	ldr	r3, [pc, #384]	; (800289c <MspInit+0x1f0>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]
  __GPIOD_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	4b5c      	ldr	r3, [pc, #368]	; (800289c <MspInit+0x1f0>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	4a5b      	ldr	r2, [pc, #364]	; (800289c <MspInit+0x1f0>)
 8002730:	f043 0308 	orr.w	r3, r3, #8
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4b59      	ldr	r3, [pc, #356]	; (800289c <MspInit+0x1f0>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
  __GPIOE_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	4b55      	ldr	r3, [pc, #340]	; (800289c <MspInit+0x1f0>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	4a54      	ldr	r2, [pc, #336]	; (800289c <MspInit+0x1f0>)
 800274c:	f043 0310 	orr.w	r3, r3, #16
 8002750:	6313      	str	r3, [r2, #48]	; 0x30
 8002752:	4b52      	ldr	r3, [pc, #328]	; (800289c <MspInit+0x1f0>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f003 0310 	and.w	r3, r3, #16
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
  __GPIOF_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	4b4e      	ldr	r3, [pc, #312]	; (800289c <MspInit+0x1f0>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	4a4d      	ldr	r2, [pc, #308]	; (800289c <MspInit+0x1f0>)
 8002768:	f043 0320 	orr.w	r3, r3, #32
 800276c:	6313      	str	r3, [r2, #48]	; 0x30
 800276e:	4b4b      	ldr	r3, [pc, #300]	; (800289c <MspInit+0x1f0>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	f003 0320 	and.w	r3, r3, #32
 8002776:	607b      	str	r3, [r7, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
  __GPIOG_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	603b      	str	r3, [r7, #0]
 800277e:	4b47      	ldr	r3, [pc, #284]	; (800289c <MspInit+0x1f0>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	4a46      	ldr	r2, [pc, #280]	; (800289c <MspInit+0x1f0>)
 8002784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002788:	6313      	str	r3, [r2, #48]	; 0x30
 800278a:	4b44      	ldr	r3, [pc, #272]	; (800289c <MspInit+0x1f0>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	683b      	ldr	r3, [r7, #0]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800279a:	2302      	movs	r3, #2
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80027a2:	230c      	movs	r3, #12
 80027a4:	633b      	str	r3, [r7, #48]	; 0x30

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80027a6:	2360      	movs	r3, #96	; 0x60
 80027a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80027aa:	f107 0320 	add.w	r3, r7, #32
 80027ae:	4619      	mov	r1, r3
 80027b0:	483b      	ldr	r0, [pc, #236]	; (80028a0 <MspInit+0x1f4>)
 80027b2:	f001 fa77 	bl	8003ca4 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80027b6:	2301      	movs	r3, #1
 80027b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80027ba:	f107 0320 	add.w	r3, r7, #32
 80027be:	4619      	mov	r1, r3
 80027c0:	4838      	ldr	r0, [pc, #224]	; (80028a4 <MspInit+0x1f8>)
 80027c2:	f001 fa6f 	bl	8003ca4 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80027c6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80027ca:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80027cc:	f107 0320 	add.w	r3, r7, #32
 80027d0:	4619      	mov	r1, r3
 80027d2:	4835      	ldr	r0, [pc, #212]	; (80028a8 <MspInit+0x1fc>)
 80027d4:	f001 fa66 	bl	8003ca4 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80027d8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80027dc:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80027de:	f107 0320 	add.w	r3, r7, #32
 80027e2:	4619      	mov	r1, r3
 80027e4:	4831      	ldr	r0, [pc, #196]	; (80028ac <MspInit+0x200>)
 80027e6:	f001 fa5d 	bl	8003ca4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80027ea:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80027ee:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80027f0:	f107 0320 	add.w	r3, r7, #32
 80027f4:	4619      	mov	r1, r3
 80027f6:	482e      	ldr	r0, [pc, #184]	; (80028b0 <MspInit+0x204>)
 80027f8:	f001 fa54 	bl	8003ca4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80027fc:	f248 1333 	movw	r3, #33075	; 0x8133
 8002800:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002802:	f107 0320 	add.w	r3, r7, #32
 8002806:	4619      	mov	r1, r3
 8002808:	482a      	ldr	r0, [pc, #168]	; (80028b4 <MspInit+0x208>)
 800280a:	f001 fa4b 	bl	8003ca4 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800280e:	4b2a      	ldr	r3, [pc, #168]	; (80028b8 <MspInit+0x20c>)
 8002810:	2200      	movs	r2, #0
 8002812:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002814:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <MspInit+0x20c>)
 8002816:	2280      	movs	r2, #128	; 0x80
 8002818:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800281a:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <MspInit+0x20c>)
 800281c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002820:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002822:	4b25      	ldr	r3, [pc, #148]	; (80028b8 <MspInit+0x20c>)
 8002824:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002828:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800282a:	4b23      	ldr	r3, [pc, #140]	; (80028b8 <MspInit+0x20c>)
 800282c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002830:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002832:	4b21      	ldr	r3, [pc, #132]	; (80028b8 <MspInit+0x20c>)
 8002834:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002838:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800283a:	4b1f      	ldr	r3, [pc, #124]	; (80028b8 <MspInit+0x20c>)
 800283c:	2200      	movs	r2, #0
 800283e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002840:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <MspInit+0x20c>)
 8002842:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002846:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002848:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <MspInit+0x20c>)
 800284a:	2200      	movs	r2, #0
 800284c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800284e:	4b1a      	ldr	r3, [pc, #104]	; (80028b8 <MspInit+0x20c>)
 8002850:	2203      	movs	r2, #3
 8002852:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002854:	4b18      	ldr	r3, [pc, #96]	; (80028b8 <MspInit+0x20c>)
 8002856:	2200      	movs	r2, #0
 8002858:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800285a:	4b17      	ldr	r3, [pc, #92]	; (80028b8 <MspInit+0x20c>)
 800285c:	2200      	movs	r2, #0
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002860:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <MspInit+0x20c>)
 8002862:	4a16      	ldr	r2, [pc, #88]	; (80028bc <MspInit+0x210>)
 8002864:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002868:	4a13      	ldr	r2, [pc, #76]	; (80028b8 <MspInit+0x20c>)
 800286a:	631a      	str	r2, [r3, #48]	; 0x30
 800286c:	4a12      	ldr	r2, [pc, #72]	; (80028b8 <MspInit+0x20c>)
 800286e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002870:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002872:	4811      	ldr	r0, [pc, #68]	; (80028b8 <MspInit+0x20c>)
 8002874:	f000 fe7c 	bl	8003570 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002878:	480f      	ldr	r0, [pc, #60]	; (80028b8 <MspInit+0x20c>)
 800287a:	f000 fdcb 	bl	8003414 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0, 0);
 800287e:	2200      	movs	r2, #0
 8002880:	2100      	movs	r1, #0
 8002882:	2038      	movs	r0, #56	; 0x38
 8002884:	f000 fd8f 	bl	80033a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002888:	2038      	movs	r0, #56	; 0x38
 800288a:	f000 fda8 	bl	80033de <HAL_NVIC_EnableIRQ>
}
 800288e:	bf00      	nop
 8002890:	3738      	adds	r7, #56	; 0x38
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	200004ac 	.word	0x200004ac
 800289c:	40023800 	.word	0x40023800
 80028a0:	40020400 	.word	0x40020400
 80028a4:	40020800 	.word	0x40020800
 80028a8:	40020c00 	.word	0x40020c00
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40021400 	.word	0x40021400
 80028b4:	40021800 	.word	0x40021800
 80028b8:	2000050c 	.word	0x2000050c
 80028bc:	40026410 	.word	0x40026410

080028c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	607b      	str	r3, [r7, #4]
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_MspInit+0x4c>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	4a0f      	ldr	r2, [pc, #60]	; (800290c <HAL_MspInit+0x4c>)
 80028d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d4:	6453      	str	r3, [r2, #68]	; 0x44
 80028d6:	4b0d      	ldr	r3, [pc, #52]	; (800290c <HAL_MspInit+0x4c>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028de:	607b      	str	r3, [r7, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_MspInit+0x4c>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	4a08      	ldr	r2, [pc, #32]	; (800290c <HAL_MspInit+0x4c>)
 80028ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f0:	6413      	str	r3, [r2, #64]	; 0x40
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_MspInit+0x4c>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800

08002910 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0b      	ldr	r2, [pc, #44]	; (800294c <HAL_DMA2D_MspInit+0x3c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d10d      	bne.n	800293e <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <HAL_DMA2D_MspInit+0x40>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	4a09      	ldr	r2, [pc, #36]	; (8002950 <HAL_DMA2D_MspInit+0x40>)
 800292c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002930:	6313      	str	r3, [r2, #48]	; 0x30
 8002932:	4b07      	ldr	r3, [pc, #28]	; (8002950 <HAL_DMA2D_MspInit+0x40>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800293e:	bf00      	nop
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	4002b000 	.word	0x4002b000
 8002950:	40023800 	.word	0x40023800

08002954 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08a      	sub	sp, #40	; 0x28
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a29      	ldr	r2, [pc, #164]	; (8002a18 <HAL_I2C_MspInit+0xc4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d14b      	bne.n	8002a0e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	4b28      	ldr	r3, [pc, #160]	; (8002a1c <HAL_I2C_MspInit+0xc8>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a27      	ldr	r2, [pc, #156]	; (8002a1c <HAL_I2C_MspInit+0xc8>)
 8002980:	f043 0304 	orr.w	r3, r3, #4
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b25      	ldr	r3, [pc, #148]	; (8002a1c <HAL_I2C_MspInit+0xc8>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	4b21      	ldr	r3, [pc, #132]	; (8002a1c <HAL_I2C_MspInit+0xc8>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	4a20      	ldr	r2, [pc, #128]	; (8002a1c <HAL_I2C_MspInit+0xc8>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	6313      	str	r3, [r2, #48]	; 0x30
 80029a2:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <HAL_I2C_MspInit+0xc8>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029b4:	2312      	movs	r3, #18
 80029b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029b8:	2301      	movs	r3, #1
 80029ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029bc:	2303      	movs	r3, #3
 80029be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80029c0:	2304      	movs	r3, #4
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029c4:	f107 0314 	add.w	r3, r7, #20
 80029c8:	4619      	mov	r1, r3
 80029ca:	4815      	ldr	r0, [pc, #84]	; (8002a20 <HAL_I2C_MspInit+0xcc>)
 80029cc:	f001 f96a 	bl	8003ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029d6:	2312      	movs	r3, #18
 80029d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029da:	2301      	movs	r3, #1
 80029dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029de:	2303      	movs	r3, #3
 80029e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80029e2:	2304      	movs	r3, #4
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e6:	f107 0314 	add.w	r3, r7, #20
 80029ea:	4619      	mov	r1, r3
 80029ec:	480d      	ldr	r0, [pc, #52]	; (8002a24 <HAL_I2C_MspInit+0xd0>)
 80029ee:	f001 f959 	bl	8003ca4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_I2C_MspInit+0xc8>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	4a08      	ldr	r2, [pc, #32]	; (8002a1c <HAL_I2C_MspInit+0xc8>)
 80029fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a00:	6413      	str	r3, [r2, #64]	; 0x40
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_I2C_MspInit+0xc8>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002a0e:	bf00      	nop
 8002a10:	3728      	adds	r7, #40	; 0x28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40005c00 	.word	0x40005c00
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40020800 	.word	0x40020800
 8002a24:	40020000 	.word	0x40020000

08002a28 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08e      	sub	sp, #56	; 0x38
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a77      	ldr	r2, [pc, #476]	; (8002c24 <HAL_LTDC_MspInit+0x1fc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	f040 80e7 	bne.w	8002c1a <HAL_LTDC_MspInit+0x1f2>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	623b      	str	r3, [r7, #32]
 8002a50:	4b75      	ldr	r3, [pc, #468]	; (8002c28 <HAL_LTDC_MspInit+0x200>)
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	4a74      	ldr	r2, [pc, #464]	; (8002c28 <HAL_LTDC_MspInit+0x200>)
 8002a56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a5a:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5c:	4b72      	ldr	r3, [pc, #456]	; (8002c28 <HAL_LTDC_MspInit+0x200>)
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a64:	623b      	str	r3, [r7, #32]
 8002a66:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61fb      	str	r3, [r7, #28]
 8002a6c:	4b6e      	ldr	r3, [pc, #440]	; (8002c28 <HAL_LTDC_MspInit+0x200>)
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	4a6d      	ldr	r2, [pc, #436]	; (8002c28 <HAL_LTDC_MspInit+0x200>)
 8002a72:	f043 0320 	orr.w	r3, r3, #32
 8002a76:	6313      	str	r3, [r2, #48]	; 0x30
 8002a78:	4b6b      	ldr	r3, [pc, #428]	; (8002c28 <HAL_LTDC_MspInit+0x200>)
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a84:	2300      	movs	r3, #0
 8002a86:	61bb      	str	r3, [r7, #24]
 8002a88:	4b67      	ldr	r3, [pc, #412]	; (8002c28 <HAL_LTDC_MspInit+0x200>)
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	4a66      	ldr	r2, [pc, #408]	; (8002c28 <HAL_LTDC_MspInit+0x200>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	6313      	str	r3, [r2, #48]	; 0x30
 8002a94:	4b64      	ldr	r3, [pc, #400]	; (8002c28 <HAL_LTDC_MspInit+0x200>)
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	4b60      	ldr	r3, [pc, #384]	; (8002c28 <HAL_LTDC_MspInit+0x200>)
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	4a5f      	ldr	r2, [pc, #380]	; (8002c28 <HAL_LTDC_MspInit+0x200>)
 8002aaa:	f043 0302 	orr.w	r3, r3, #2
 8002aae:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab0:	4b5d      	ldr	r3, [pc, #372]	; (8002c28 <HAL_LTDC_MspInit+0x200>)
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002abc:	2300      	movs	r3, #0
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	4b59      	ldr	r3, [pc, #356]	; (8002c28 <HAL_LTDC_MspInit+0x200>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	4a58      	ldr	r2, [pc, #352]	; (8002c28 <HAL_LTDC_MspInit+0x200>)
 8002ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aca:	6313      	str	r3, [r2, #48]	; 0x30
 8002acc:	4b56      	ldr	r3, [pc, #344]	; (8002c28 <HAL_LTDC_MspInit+0x200>)
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	4b52      	ldr	r3, [pc, #328]	; (8002c28 <HAL_LTDC_MspInit+0x200>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	4a51      	ldr	r2, [pc, #324]	; (8002c28 <HAL_LTDC_MspInit+0x200>)
 8002ae2:	f043 0304 	orr.w	r3, r3, #4
 8002ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae8:	4b4f      	ldr	r3, [pc, #316]	; (8002c28 <HAL_LTDC_MspInit+0x200>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002af4:	2300      	movs	r3, #0
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	4b4b      	ldr	r3, [pc, #300]	; (8002c28 <HAL_LTDC_MspInit+0x200>)
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	4a4a      	ldr	r2, [pc, #296]	; (8002c28 <HAL_LTDC_MspInit+0x200>)
 8002afe:	f043 0308 	orr.w	r3, r3, #8
 8002b02:	6313      	str	r3, [r2, #48]	; 0x30
 8002b04:	4b48      	ldr	r3, [pc, #288]	; (8002c28 <HAL_LTDC_MspInit+0x200>)
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b16:	2302      	movs	r3, #2
 8002b18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b22:	230e      	movs	r3, #14
 8002b24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	483f      	ldr	r0, [pc, #252]	; (8002c2c <HAL_LTDC_MspInit+0x204>)
 8002b2e:	f001 f8b9 	bl	8003ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8002b32:	f641 0358 	movw	r3, #6232	; 0x1858
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b40:	2300      	movs	r3, #0
 8002b42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b44:	230e      	movs	r3, #14
 8002b46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4838      	ldr	r0, [pc, #224]	; (8002c30 <HAL_LTDC_MspInit+0x208>)
 8002b50:	f001 f8a8 	bl	8003ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b54:	2303      	movs	r3, #3
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b60:	2300      	movs	r3, #0
 8002b62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002b64:	2309      	movs	r3, #9
 8002b66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4831      	ldr	r0, [pc, #196]	; (8002c34 <HAL_LTDC_MspInit+0x20c>)
 8002b70:	f001 f898 	bl	8003ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8002b74:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b82:	2300      	movs	r3, #0
 8002b84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b86:	230e      	movs	r3, #14
 8002b88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4828      	ldr	r0, [pc, #160]	; (8002c34 <HAL_LTDC_MspInit+0x20c>)
 8002b92:	f001 f887 	bl	8003ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8002b96:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ba8:	230e      	movs	r3, #14
 8002baa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4821      	ldr	r0, [pc, #132]	; (8002c38 <HAL_LTDC_MspInit+0x210>)
 8002bb4:	f001 f876 	bl	8003ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bb8:	23c0      	movs	r3, #192	; 0xc0
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bc8:	230e      	movs	r3, #14
 8002bca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	481a      	ldr	r0, [pc, #104]	; (8002c3c <HAL_LTDC_MspInit+0x214>)
 8002bd4:	f001 f866 	bl	8003ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bd8:	2308      	movs	r3, #8
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be4:	2300      	movs	r3, #0
 8002be6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002be8:	230e      	movs	r3, #14
 8002bea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4813      	ldr	r0, [pc, #76]	; (8002c40 <HAL_LTDC_MspInit+0x218>)
 8002bf4:	f001 f856 	bl	8003ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002bf8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c06:	2300      	movs	r3, #0
 8002c08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002c0a:	2309      	movs	r3, #9
 8002c0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c12:	4619      	mov	r1, r3
 8002c14:	4808      	ldr	r0, [pc, #32]	; (8002c38 <HAL_LTDC_MspInit+0x210>)
 8002c16:	f001 f845 	bl	8003ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002c1a:	bf00      	nop
 8002c1c:	3738      	adds	r7, #56	; 0x38
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40016800 	.word	0x40016800
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40021400 	.word	0x40021400
 8002c30:	40020000 	.word	0x40020000
 8002c34:	40020400 	.word	0x40020400
 8002c38:	40021800 	.word	0x40021800
 8002c3c:	40020800 	.word	0x40020800
 8002c40:	40020c00 	.word	0x40020c00

08002c44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08a      	sub	sp, #40	; 0x28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c4c:	f107 0314 	add.w	r3, r7, #20
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	605a      	str	r2, [r3, #4]
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	60da      	str	r2, [r3, #12]
 8002c5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a19      	ldr	r2, [pc, #100]	; (8002cc8 <HAL_SPI_MspInit+0x84>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d12c      	bne.n	8002cc0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	4b18      	ldr	r3, [pc, #96]	; (8002ccc <HAL_SPI_MspInit+0x88>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	4a17      	ldr	r2, [pc, #92]	; (8002ccc <HAL_SPI_MspInit+0x88>)
 8002c70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c74:	6453      	str	r3, [r2, #68]	; 0x44
 8002c76:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <HAL_SPI_MspInit+0x88>)
 8002c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <HAL_SPI_MspInit+0x88>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	4a10      	ldr	r2, [pc, #64]	; (8002ccc <HAL_SPI_MspInit+0x88>)
 8002c8c:	f043 0320 	orr.w	r3, r3, #32
 8002c90:	6313      	str	r3, [r2, #48]	; 0x30
 8002c92:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <HAL_SPI_MspInit+0x88>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002c9e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cac:	2303      	movs	r3, #3
 8002cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002cb0:	2305      	movs	r3, #5
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cb4:	f107 0314 	add.w	r3, r7, #20
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4805      	ldr	r0, [pc, #20]	; (8002cd0 <HAL_SPI_MspInit+0x8c>)
 8002cbc:	f000 fff2 	bl	8003ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002cc0:	bf00      	nop
 8002cc2:	3728      	adds	r7, #40	; 0x28
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40015000 	.word	0x40015000
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40021400 	.word	0x40021400

08002cd4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a08      	ldr	r2, [pc, #32]	; (8002d04 <HAL_SPI_MspDeInit+0x30>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d10a      	bne.n	8002cfc <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002ce6:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <HAL_SPI_MspDeInit+0x34>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	4a07      	ldr	r2, [pc, #28]	; (8002d08 <HAL_SPI_MspDeInit+0x34>)
 8002cec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002cf0:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8002cf2:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002cf6:	4805      	ldr	r0, [pc, #20]	; (8002d0c <HAL_SPI_MspDeInit+0x38>)
 8002cf8:	f001 f97e 	bl	8003ff8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002cfc:	bf00      	nop
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40015000 	.word	0x40015000
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40021400 	.word	0x40021400

08002d10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a0e      	ldr	r2, [pc, #56]	; (8002d58 <HAL_TIM_Base_MspInit+0x48>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d115      	bne.n	8002d4e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <HAL_TIM_Base_MspInit+0x4c>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	4a0c      	ldr	r2, [pc, #48]	; (8002d5c <HAL_TIM_Base_MspInit+0x4c>)
 8002d2c:	f043 0310 	orr.w	r3, r3, #16
 8002d30:	6413      	str	r3, [r2, #64]	; 0x40
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <HAL_TIM_Base_MspInit+0x4c>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2100      	movs	r1, #0
 8002d42:	2036      	movs	r0, #54	; 0x36
 8002d44:	f000 fb2f 	bl	80033a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d48:	2036      	movs	r0, #54	; 0x36
 8002d4a:	f000 fb48 	bl	80033de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40001000 	.word	0x40001000
 8002d5c:	40023800 	.word	0x40023800

08002d60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 0314 	add.w	r3, r7, #20
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a19      	ldr	r2, [pc, #100]	; (8002de4 <HAL_UART_MspInit+0x84>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d12c      	bne.n	8002ddc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <HAL_UART_MspInit+0x88>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	4a17      	ldr	r2, [pc, #92]	; (8002de8 <HAL_UART_MspInit+0x88>)
 8002d8c:	f043 0310 	orr.w	r3, r3, #16
 8002d90:	6453      	str	r3, [r2, #68]	; 0x44
 8002d92:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <HAL_UART_MspInit+0x88>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	f003 0310 	and.w	r3, r3, #16
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_UART_MspInit+0x88>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a10      	ldr	r2, [pc, #64]	; (8002de8 <HAL_UART_MspInit+0x88>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <HAL_UART_MspInit+0x88>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002dba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002dcc:	2307      	movs	r3, #7
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4805      	ldr	r0, [pc, #20]	; (8002dec <HAL_UART_MspInit+0x8c>)
 8002dd8:	f000 ff64 	bl	8003ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ddc:	bf00      	nop
 8002dde:	3728      	adds	r7, #40	; 0x28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40011000 	.word	0x40011000
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40020000 	.word	0x40020000

08002df0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002df6:	1d3b      	adds	r3, r7, #4
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002e04:	4b3b      	ldr	r3, [pc, #236]	; (8002ef4 <HAL_FMC_MspInit+0x104>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d16f      	bne.n	8002eec <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002e0c:	4b39      	ldr	r3, [pc, #228]	; (8002ef4 <HAL_FMC_MspInit+0x104>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	603b      	str	r3, [r7, #0]
 8002e16:	4b38      	ldr	r3, [pc, #224]	; (8002ef8 <HAL_FMC_MspInit+0x108>)
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	4a37      	ldr	r2, [pc, #220]	; (8002ef8 <HAL_FMC_MspInit+0x108>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	6393      	str	r3, [r2, #56]	; 0x38
 8002e22:	4b35      	ldr	r3, [pc, #212]	; (8002ef8 <HAL_FMC_MspInit+0x108>)
 8002e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	603b      	str	r3, [r7, #0]
 8002e2c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002e2e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002e32:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e34:	2302      	movs	r3, #2
 8002e36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e40:	230c      	movs	r3, #12
 8002e42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e44:	1d3b      	adds	r3, r7, #4
 8002e46:	4619      	mov	r1, r3
 8002e48:	482c      	ldr	r0, [pc, #176]	; (8002efc <HAL_FMC_MspInit+0x10c>)
 8002e4a:	f000 ff2b 	bl	8003ca4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e52:	2302      	movs	r3, #2
 8002e54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e5e:	230c      	movs	r3, #12
 8002e60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e62:	1d3b      	adds	r3, r7, #4
 8002e64:	4619      	mov	r1, r3
 8002e66:	4826      	ldr	r0, [pc, #152]	; (8002f00 <HAL_FMC_MspInit+0x110>)
 8002e68:	f000 ff1c 	bl	8003ca4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8002e6c:	f248 1333 	movw	r3, #33075	; 0x8133
 8002e70:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e72:	2302      	movs	r3, #2
 8002e74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e7e:	230c      	movs	r3, #12
 8002e80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e82:	1d3b      	adds	r3, r7, #4
 8002e84:	4619      	mov	r1, r3
 8002e86:	481f      	ldr	r0, [pc, #124]	; (8002f04 <HAL_FMC_MspInit+0x114>)
 8002e88:	f000 ff0c 	bl	8003ca4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002e8c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002e90:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e92:	2302      	movs	r3, #2
 8002e94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e9e:	230c      	movs	r3, #12
 8002ea0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ea2:	1d3b      	adds	r3, r7, #4
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4818      	ldr	r0, [pc, #96]	; (8002f08 <HAL_FMC_MspInit+0x118>)
 8002ea8:	f000 fefc 	bl	8003ca4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002eac:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002eb0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ebe:	230c      	movs	r3, #12
 8002ec0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ec2:	1d3b      	adds	r3, r7, #4
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4811      	ldr	r0, [pc, #68]	; (8002f0c <HAL_FMC_MspInit+0x11c>)
 8002ec8:	f000 feec 	bl	8003ca4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002ecc:	2360      	movs	r3, #96	; 0x60
 8002ece:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002edc:	230c      	movs	r3, #12
 8002ede:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee0:	1d3b      	adds	r3, r7, #4
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	480a      	ldr	r0, [pc, #40]	; (8002f10 <HAL_FMC_MspInit+0x120>)
 8002ee6:	f000 fedd 	bl	8003ca4 <HAL_GPIO_Init>
 8002eea:	e000      	b.n	8002eee <HAL_FMC_MspInit+0xfe>
    return;
 8002eec:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	2000056c 	.word	0x2000056c
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40021400 	.word	0x40021400
 8002f00:	40020800 	.word	0x40020800
 8002f04:	40021800 	.word	0x40021800
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40020c00 	.word	0x40020c00
 8002f10:	40020400 	.word	0x40020400

08002f14 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002f1c:	f7ff ff68 	bl	8002df0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002f20:	bf00      	nop
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f2c:	bf00      	nop
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f36:	b480      	push	{r7}
 8002f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f3a:	e7fe      	b.n	8002f3a <HardFault_Handler+0x4>

08002f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f40:	e7fe      	b.n	8002f40 <MemManage_Handler+0x4>

08002f42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f42:	b480      	push	{r7}
 8002f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f46:	e7fe      	b.n	8002f46 <BusFault_Handler+0x4>

08002f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f4c:	e7fe      	b.n	8002f4c <UsageFault_Handler+0x4>

08002f4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f52:	bf00      	nop
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f7c:	f000 f8f6 	bl	800316c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f80:	bf00      	nop
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f88:	4802      	ldr	r0, [pc, #8]	; (8002f94 <TIM6_DAC_IRQHandler+0x10>)
 8002f8a:	f003 fa5c 	bl	8006446 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000268 	.word	0x20000268

08002f98 <_getpid>:
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <_kill>:
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
 8002fb2:	f004 f9eb 	bl	800738c <__errno>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	2316      	movs	r3, #22
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <_exit>:
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff ffe7 	bl	8002fa8 <_kill>
 8002fda:	e7fe      	b.n	8002fda <_exit+0x12>

08002fdc <_sbrk>:
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	4a14      	ldr	r2, [pc, #80]	; (8003038 <_sbrk+0x5c>)
 8002fe6:	4b15      	ldr	r3, [pc, #84]	; (800303c <_sbrk+0x60>)
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	4b13      	ldr	r3, [pc, #76]	; (8003040 <_sbrk+0x64>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d102      	bne.n	8002ffe <_sbrk+0x22>
 8002ff8:	4b11      	ldr	r3, [pc, #68]	; (8003040 <_sbrk+0x64>)
 8002ffa:	4a12      	ldr	r2, [pc, #72]	; (8003044 <_sbrk+0x68>)
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	4b10      	ldr	r3, [pc, #64]	; (8003040 <_sbrk+0x64>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4413      	add	r3, r2
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	429a      	cmp	r2, r3
 800300a:	d207      	bcs.n	800301c <_sbrk+0x40>
 800300c:	f004 f9be 	bl	800738c <__errno>
 8003010:	4602      	mov	r2, r0
 8003012:	230c      	movs	r3, #12
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	f04f 33ff 	mov.w	r3, #4294967295
 800301a:	e009      	b.n	8003030 <_sbrk+0x54>
 800301c:	4b08      	ldr	r3, [pc, #32]	; (8003040 <_sbrk+0x64>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	4b07      	ldr	r3, [pc, #28]	; (8003040 <_sbrk+0x64>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4413      	add	r3, r2
 800302a:	4a05      	ldr	r2, [pc, #20]	; (8003040 <_sbrk+0x64>)
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20030000 	.word	0x20030000
 800303c:	00000400 	.word	0x00000400
 8003040:	20000570 	.word	0x20000570
 8003044:	20000590 	.word	0x20000590

08003048 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800304c:	4b08      	ldr	r3, [pc, #32]	; (8003070 <SystemInit+0x28>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003052:	4a07      	ldr	r2, [pc, #28]	; (8003070 <SystemInit+0x28>)
 8003054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800305c:	4b04      	ldr	r3, [pc, #16]	; (8003070 <SystemInit+0x28>)
 800305e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003062:	609a      	str	r2, [r3, #8]
#endif
}
 8003064:	bf00      	nop
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030ac <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003078:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800307a:	e003      	b.n	8003084 <LoopCopyDataInit>

0800307c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800307c:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800307e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003080:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003082:	3104      	adds	r1, #4

08003084 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003084:	480b      	ldr	r0, [pc, #44]	; (80030b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003086:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003088:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800308a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800308c:	d3f6      	bcc.n	800307c <CopyDataInit>
  ldr  r2, =_sbss
 800308e:	4a0b      	ldr	r2, [pc, #44]	; (80030bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003090:	e002      	b.n	8003098 <LoopFillZerobss>

08003092 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003092:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003094:	f842 3b04 	str.w	r3, [r2], #4

08003098 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003098:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800309a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800309c:	d3f9      	bcc.n	8003092 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800309e:	f7ff ffd3 	bl	8003048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030a2:	f004 f979 	bl	8007398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030a6:	f7fe f9c3 	bl	8001430 <main>
  bx  lr    
 80030aa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80030ac:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80030b0:	08009160 	.word	0x08009160
  ldr  r0, =_sdata
 80030b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80030b8:	200000b4 	.word	0x200000b4
  ldr  r2, =_sbss
 80030bc:	200000b4 	.word	0x200000b4
  ldr  r3, = _ebss
 80030c0:	2000058c 	.word	0x2000058c

080030c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030c4:	e7fe      	b.n	80030c4 <ADC_IRQHandler>
	...

080030c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030cc:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <HAL_Init+0x40>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a0d      	ldr	r2, [pc, #52]	; (8003108 <HAL_Init+0x40>)
 80030d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030d8:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_Init+0x40>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a0a      	ldr	r2, [pc, #40]	; (8003108 <HAL_Init+0x40>)
 80030de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030e4:	4b08      	ldr	r3, [pc, #32]	; (8003108 <HAL_Init+0x40>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a07      	ldr	r2, [pc, #28]	; (8003108 <HAL_Init+0x40>)
 80030ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030f0:	2003      	movs	r0, #3
 80030f2:	f000 f94d 	bl	8003390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030f6:	2000      	movs	r0, #0
 80030f8:	f000 f808 	bl	800310c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030fc:	f7ff fbe0 	bl	80028c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40023c00 	.word	0x40023c00

0800310c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003114:	4b12      	ldr	r3, [pc, #72]	; (8003160 <HAL_InitTick+0x54>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4b12      	ldr	r3, [pc, #72]	; (8003164 <HAL_InitTick+0x58>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	4619      	mov	r1, r3
 800311e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003122:	fbb3 f3f1 	udiv	r3, r3, r1
 8003126:	fbb2 f3f3 	udiv	r3, r2, r3
 800312a:	4618      	mov	r0, r3
 800312c:	f000 f965 	bl	80033fa <HAL_SYSTICK_Config>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e00e      	b.n	8003158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b0f      	cmp	r3, #15
 800313e:	d80a      	bhi.n	8003156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003140:	2200      	movs	r2, #0
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	f04f 30ff 	mov.w	r0, #4294967295
 8003148:	f000 f92d 	bl	80033a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800314c:	4a06      	ldr	r2, [pc, #24]	; (8003168 <HAL_InitTick+0x5c>)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	e000      	b.n	8003158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
}
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	20000044 	.word	0x20000044
 8003164:	2000004c 	.word	0x2000004c
 8003168:	20000048 	.word	0x20000048

0800316c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003170:	4b06      	ldr	r3, [pc, #24]	; (800318c <HAL_IncTick+0x20>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <HAL_IncTick+0x24>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4413      	add	r3, r2
 800317c:	4a04      	ldr	r2, [pc, #16]	; (8003190 <HAL_IncTick+0x24>)
 800317e:	6013      	str	r3, [r2, #0]
}
 8003180:	bf00      	nop
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	2000004c 	.word	0x2000004c
 8003190:	20000584 	.word	0x20000584

08003194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return uwTick;
 8003198:	4b03      	ldr	r3, [pc, #12]	; (80031a8 <HAL_GetTick+0x14>)
 800319a:	681b      	ldr	r3, [r3, #0]
}
 800319c:	4618      	mov	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	20000584 	.word	0x20000584

080031ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031b4:	f7ff ffee 	bl	8003194 <HAL_GetTick>
 80031b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c4:	d005      	beq.n	80031d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031c6:	4b09      	ldr	r3, [pc, #36]	; (80031ec <HAL_Delay+0x40>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4413      	add	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031d2:	bf00      	nop
 80031d4:	f7ff ffde 	bl	8003194 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d8f7      	bhi.n	80031d4 <HAL_Delay+0x28>
  {
  }
}
 80031e4:	bf00      	nop
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	2000004c 	.word	0x2000004c

080031f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <__NVIC_SetPriorityGrouping+0x44>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800320c:	4013      	ands	r3, r2
 800320e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003218:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800321c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003222:	4a04      	ldr	r2, [pc, #16]	; (8003234 <__NVIC_SetPriorityGrouping+0x44>)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	60d3      	str	r3, [r2, #12]
}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800323c:	4b04      	ldr	r3, [pc, #16]	; (8003250 <__NVIC_GetPriorityGrouping+0x18>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	0a1b      	lsrs	r3, r3, #8
 8003242:	f003 0307 	and.w	r3, r3, #7
}
 8003246:	4618      	mov	r0, r3
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	e000ed00 	.word	0xe000ed00

08003254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	2b00      	cmp	r3, #0
 8003264:	db0b      	blt.n	800327e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	f003 021f 	and.w	r2, r3, #31
 800326c:	4907      	ldr	r1, [pc, #28]	; (800328c <__NVIC_EnableIRQ+0x38>)
 800326e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	2001      	movs	r0, #1
 8003276:	fa00 f202 	lsl.w	r2, r0, r2
 800327a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	e000e100 	.word	0xe000e100

08003290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	6039      	str	r1, [r7, #0]
 800329a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800329c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	db0a      	blt.n	80032ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	490c      	ldr	r1, [pc, #48]	; (80032dc <__NVIC_SetPriority+0x4c>)
 80032aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ae:	0112      	lsls	r2, r2, #4
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	440b      	add	r3, r1
 80032b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032b8:	e00a      	b.n	80032d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	4908      	ldr	r1, [pc, #32]	; (80032e0 <__NVIC_SetPriority+0x50>)
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	3b04      	subs	r3, #4
 80032c8:	0112      	lsls	r2, r2, #4
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	440b      	add	r3, r1
 80032ce:	761a      	strb	r2, [r3, #24]
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	e000e100 	.word	0xe000e100
 80032e0:	e000ed00 	.word	0xe000ed00

080032e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b089      	sub	sp, #36	; 0x24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f1c3 0307 	rsb	r3, r3, #7
 80032fe:	2b04      	cmp	r3, #4
 8003300:	bf28      	it	cs
 8003302:	2304      	movcs	r3, #4
 8003304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	3304      	adds	r3, #4
 800330a:	2b06      	cmp	r3, #6
 800330c:	d902      	bls.n	8003314 <NVIC_EncodePriority+0x30>
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	3b03      	subs	r3, #3
 8003312:	e000      	b.n	8003316 <NVIC_EncodePriority+0x32>
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003318:	f04f 32ff 	mov.w	r2, #4294967295
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43da      	mvns	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	401a      	ands	r2, r3
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800332c:	f04f 31ff 	mov.w	r1, #4294967295
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	fa01 f303 	lsl.w	r3, r1, r3
 8003336:	43d9      	mvns	r1, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800333c:	4313      	orrs	r3, r2
         );
}
 800333e:	4618      	mov	r0, r3
 8003340:	3724      	adds	r7, #36	; 0x24
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3b01      	subs	r3, #1
 8003358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800335c:	d301      	bcc.n	8003362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800335e:	2301      	movs	r3, #1
 8003360:	e00f      	b.n	8003382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003362:	4a0a      	ldr	r2, [pc, #40]	; (800338c <SysTick_Config+0x40>)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3b01      	subs	r3, #1
 8003368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800336a:	210f      	movs	r1, #15
 800336c:	f04f 30ff 	mov.w	r0, #4294967295
 8003370:	f7ff ff8e 	bl	8003290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003374:	4b05      	ldr	r3, [pc, #20]	; (800338c <SysTick_Config+0x40>)
 8003376:	2200      	movs	r2, #0
 8003378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800337a:	4b04      	ldr	r3, [pc, #16]	; (800338c <SysTick_Config+0x40>)
 800337c:	2207      	movs	r2, #7
 800337e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	e000e010 	.word	0xe000e010

08003390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7ff ff29 	bl	80031f0 <__NVIC_SetPriorityGrouping>
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b086      	sub	sp, #24
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	4603      	mov	r3, r0
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	607a      	str	r2, [r7, #4]
 80033b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033b8:	f7ff ff3e 	bl	8003238 <__NVIC_GetPriorityGrouping>
 80033bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	68b9      	ldr	r1, [r7, #8]
 80033c2:	6978      	ldr	r0, [r7, #20]
 80033c4:	f7ff ff8e 	bl	80032e4 <NVIC_EncodePriority>
 80033c8:	4602      	mov	r2, r0
 80033ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ce:	4611      	mov	r1, r2
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ff5d 	bl	8003290 <__NVIC_SetPriority>
}
 80033d6:	bf00      	nop
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	4603      	mov	r3, r0
 80033e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff ff31 	bl	8003254 <__NVIC_EnableIRQ>
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff ffa2 	bl	800334c <SysTick_Config>
 8003408:	4603      	mov	r3, r0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003420:	f7ff feb8 	bl	8003194 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e099      	b.n	8003564 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003450:	e00f      	b.n	8003472 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003452:	f7ff fe9f 	bl	8003194 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b05      	cmp	r3, #5
 800345e:	d908      	bls.n	8003472 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2203      	movs	r2, #3
 800346a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e078      	b.n	8003564 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1e8      	bne.n	8003452 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	4b38      	ldr	r3, [pc, #224]	; (800356c <HAL_DMA_Init+0x158>)
 800348c:	4013      	ands	r3, r2
 800348e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800349e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d107      	bne.n	80034dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d4:	4313      	orrs	r3, r2
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f023 0307 	bic.w	r3, r3, #7
 80034f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	2b04      	cmp	r3, #4
 8003504:	d117      	bne.n	8003536 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	4313      	orrs	r3, r2
 800350e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00e      	beq.n	8003536 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f8bd 	bl	8003698 <DMA_CheckFifoParam>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2240      	movs	r2, #64	; 0x40
 8003528:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003532:	2301      	movs	r3, #1
 8003534:	e016      	b.n	8003564 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f874 	bl	800362c <DMA_CalcBaseAndBitshift>
 8003544:	4603      	mov	r3, r0
 8003546:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354c:	223f      	movs	r2, #63	; 0x3f
 800354e:	409a      	lsls	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	f010803f 	.word	0xf010803f

08003570 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e050      	b.n	8003624 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d101      	bne.n	8003592 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800358e:	2302      	movs	r3, #2
 8003590:	e048      	b.n	8003624 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0201 	bic.w	r2, r2, #1
 80035a0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2200      	movs	r2, #0
 80035b0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2200      	movs	r2, #0
 80035b8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2200      	movs	r2, #0
 80035c0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2200      	movs	r2, #0
 80035c8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2221      	movs	r2, #33	; 0x21
 80035d0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f82a 	bl	800362c <DMA_CalcBaseAndBitshift>
 80035d8:	4603      	mov	r3, r0
 80035da:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003604:	223f      	movs	r2, #63	; 0x3f
 8003606:	409a      	lsls	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	3b10      	subs	r3, #16
 800363c:	4a14      	ldr	r2, [pc, #80]	; (8003690 <DMA_CalcBaseAndBitshift+0x64>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	091b      	lsrs	r3, r3, #4
 8003644:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003646:	4a13      	ldr	r2, [pc, #76]	; (8003694 <DMA_CalcBaseAndBitshift+0x68>)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4413      	add	r3, r2
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b03      	cmp	r3, #3
 8003658:	d909      	bls.n	800366e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003662:	f023 0303 	bic.w	r3, r3, #3
 8003666:	1d1a      	adds	r2, r3, #4
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	659a      	str	r2, [r3, #88]	; 0x58
 800366c:	e007      	b.n	800367e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003676:	f023 0303 	bic.w	r3, r3, #3
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	aaaaaaab 	.word	0xaaaaaaab
 8003694:	08009148 	.word	0x08009148

08003698 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d11f      	bne.n	80036f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	d855      	bhi.n	8003764 <DMA_CheckFifoParam+0xcc>
 80036b8:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <DMA_CheckFifoParam+0x28>)
 80036ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036be:	bf00      	nop
 80036c0:	080036d1 	.word	0x080036d1
 80036c4:	080036e3 	.word	0x080036e3
 80036c8:	080036d1 	.word	0x080036d1
 80036cc:	08003765 	.word	0x08003765
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d045      	beq.n	8003768 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e0:	e042      	b.n	8003768 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036ea:	d13f      	bne.n	800376c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f0:	e03c      	b.n	800376c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036fa:	d121      	bne.n	8003740 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2b03      	cmp	r3, #3
 8003700:	d836      	bhi.n	8003770 <DMA_CheckFifoParam+0xd8>
 8003702:	a201      	add	r2, pc, #4	; (adr r2, 8003708 <DMA_CheckFifoParam+0x70>)
 8003704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003708:	08003719 	.word	0x08003719
 800370c:	0800371f 	.word	0x0800371f
 8003710:	08003719 	.word	0x08003719
 8003714:	08003731 	.word	0x08003731
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
      break;
 800371c:	e02f      	b.n	800377e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d024      	beq.n	8003774 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800372e:	e021      	b.n	8003774 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003738:	d11e      	bne.n	8003778 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800373e:	e01b      	b.n	8003778 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d902      	bls.n	800374c <DMA_CheckFifoParam+0xb4>
 8003746:	2b03      	cmp	r3, #3
 8003748:	d003      	beq.n	8003752 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800374a:	e018      	b.n	800377e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
      break;
 8003750:	e015      	b.n	800377e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00e      	beq.n	800377c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	73fb      	strb	r3, [r7, #15]
      break;
 8003762:	e00b      	b.n	800377c <DMA_CheckFifoParam+0xe4>
      break;
 8003764:	bf00      	nop
 8003766:	e00a      	b.n	800377e <DMA_CheckFifoParam+0xe6>
      break;
 8003768:	bf00      	nop
 800376a:	e008      	b.n	800377e <DMA_CheckFifoParam+0xe6>
      break;
 800376c:	bf00      	nop
 800376e:	e006      	b.n	800377e <DMA_CheckFifoParam+0xe6>
      break;
 8003770:	bf00      	nop
 8003772:	e004      	b.n	800377e <DMA_CheckFifoParam+0xe6>
      break;
 8003774:	bf00      	nop
 8003776:	e002      	b.n	800377e <DMA_CheckFifoParam+0xe6>
      break;   
 8003778:	bf00      	nop
 800377a:	e000      	b.n	800377e <DMA_CheckFifoParam+0xe6>
      break;
 800377c:	bf00      	nop
    }
  } 
  
  return status; 
 800377e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e03b      	b.n	8003816 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff f8ac 	bl	8002910 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037dc:	f023 0107 	bic.w	r1, r3, #7
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80037f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	68d1      	ldr	r1, [r2, #12]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6812      	ldr	r2, [r2, #0]
 8003802:	430b      	orrs	r3, r1
 8003804:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b086      	sub	sp, #24
 8003822:	af02      	add	r7, sp, #8
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	607a      	str	r2, [r7, #4]
 800382a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_DMA2D_Start+0x1c>
 8003836:	2302      	movs	r3, #2
 8003838:	e018      	b.n	800386c <HAL_DMA2D_Start+0x4e>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2202      	movs	r2, #2
 8003846:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	68b9      	ldr	r1, [r7, #8]
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 f989 	bl	8003b6c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0201 	orr.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d056      	beq.n	800393e <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003890:	f7ff fc80 	bl	8003194 <HAL_GetTick>
 8003894:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003896:	e04b      	b.n	8003930 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d023      	beq.n	80038f2 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f003 0320 	and.w	r3, r3, #32
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b8:	f043 0202 	orr.w	r2, r3, #2
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d005      	beq.n	80038d6 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	f043 0201 	orr.w	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2221      	movs	r2, #33	; 0x21
 80038dc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2204      	movs	r2, #4
 80038e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e0a5      	b.n	8003a3e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d01a      	beq.n	8003930 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80038fa:	f7ff fc4b 	bl	8003194 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d302      	bcc.n	8003910 <HAL_DMA2D_PollForTransfer+0x9c>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10f      	bne.n	8003930 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003914:	f043 0220 	orr.w	r2, r3, #32
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2203      	movs	r2, #3
 8003920:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e086      	b.n	8003a3e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0ac      	beq.n	8003898 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	f003 0320 	and.w	r3, r3, #32
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d061      	beq.n	8003a24 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003960:	f7ff fc18 	bl	8003194 <HAL_GetTick>
 8003964:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003966:	e056      	b.n	8003a16 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003976:	2b00      	cmp	r3, #0
 8003978:	d02e      	beq.n	80039d8 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003988:	f043 0204 	orr.w	r2, r3, #4
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399e:	f043 0202 	orr.w	r2, r3, #2
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b4:	f043 0201 	orr.w	r2, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2229      	movs	r2, #41	; 0x29
 80039c2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2204      	movs	r2, #4
 80039c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e032      	b.n	8003a3e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039de:	d01a      	beq.n	8003a16 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80039e0:	f7ff fbd8 	bl	8003194 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d302      	bcc.n	80039f6 <HAL_DMA2D_PollForTransfer+0x182>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10f      	bne.n	8003a16 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fa:	f043 0220 	orr.w	r2, r3, #32
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2203      	movs	r2, #3
 8003a06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e013      	b.n	8003a3e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f003 0310 	and.w	r3, r3, #16
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0a1      	beq.n	8003968 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2212      	movs	r2, #18
 8003a2a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_DMA2D_ConfigLayer+0x20>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e079      	b.n	8003b5c <HAL_DMA2D_ConfigLayer+0x114>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	3318      	adds	r3, #24
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	4413      	add	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	041b      	lsls	r3, r3, #16
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003a92:	4b35      	ldr	r3, [pc, #212]	; (8003b68 <HAL_DMA2D_ConfigLayer+0x120>)
 8003a94:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b0a      	cmp	r3, #10
 8003a9c:	d003      	beq.n	8003aa6 <HAL_DMA2D_ConfigLayer+0x5e>
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b09      	cmp	r3, #9
 8003aa4:	d107      	bne.n	8003ab6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	e005      	b.n	8003ac2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	061b      	lsls	r3, r3, #24
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d120      	bne.n	8003b0a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	ea02 0103 	and.w	r1, r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b0a      	cmp	r3, #10
 8003af0:	d003      	beq.n	8003afa <HAL_DMA2D_ConfigLayer+0xb2>
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b09      	cmp	r3, #9
 8003af8:	d127      	bne.n	8003b4a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b06:	629a      	str	r2, [r3, #40]	; 0x28
 8003b08:	e01f      	b.n	8003b4a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69da      	ldr	r2, [r3, #28]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	43db      	mvns	r3, r3
 8003b14:	ea02 0103 	and.w	r1, r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b0a      	cmp	r3, #10
 8003b32:	d003      	beq.n	8003b3c <HAL_DMA2D_ConfigLayer+0xf4>
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b09      	cmp	r3, #9
 8003b3a:	d106      	bne.n	8003b4a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b48:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	371c      	adds	r7, #28
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	ff03000f 	.word	0xff03000f

08003b6c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b08b      	sub	sp, #44	; 0x2c
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b80:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	041a      	lsls	r2, r3, #16
 8003b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ba4:	d174      	bne.n	8003c90 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003bac:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003bb4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003bbc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d108      	bne.n	8003bde <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	627b      	str	r3, [r7, #36]	; 0x24
 8003bdc:	e053      	b.n	8003c86 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d106      	bne.n	8003bf4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf2:	e048      	b.n	8003c86 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d111      	bne.n	8003c20 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	0cdb      	lsrs	r3, r3, #19
 8003c00:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	0a9b      	lsrs	r3, r3, #10
 8003c06:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	08db      	lsrs	r3, r3, #3
 8003c0c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	02db      	lsls	r3, r3, #11
 8003c16:	4313      	orrs	r3, r2
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1e:	e032      	b.n	8003c86 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	d117      	bne.n	8003c58 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	0fdb      	lsrs	r3, r3, #31
 8003c2c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	0cdb      	lsrs	r3, r3, #19
 8003c32:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	0adb      	lsrs	r3, r3, #11
 8003c38:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	08db      	lsrs	r3, r3, #3
 8003c3e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	029b      	lsls	r3, r3, #10
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	03db      	lsls	r3, r3, #15
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
 8003c56:	e016      	b.n	8003c86 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	0f1b      	lsrs	r3, r3, #28
 8003c5c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	0d1b      	lsrs	r3, r3, #20
 8003c62:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	0b1b      	lsrs	r3, r3, #12
 8003c68:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	091b      	lsrs	r3, r3, #4
 8003c6e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	011a      	lsls	r2, r3, #4
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	031b      	lsls	r3, r3, #12
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003c8e:	e003      	b.n	8003c98 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	60da      	str	r2, [r3, #12]
}
 8003c98:	bf00      	nop
 8003c9a:	372c      	adds	r7, #44	; 0x2c
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b089      	sub	sp, #36	; 0x24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	e177      	b.n	8003fb0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	f040 8166 	bne.w	8003faa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d00b      	beq.n	8003cfe <HAL_GPIO_Init+0x5a>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d007      	beq.n	8003cfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cf2:	2b11      	cmp	r3, #17
 8003cf4:	d003      	beq.n	8003cfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b12      	cmp	r3, #18
 8003cfc:	d130      	bne.n	8003d60 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	2203      	movs	r2, #3
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4013      	ands	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d34:	2201      	movs	r2, #1
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4013      	ands	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	091b      	lsrs	r3, r3, #4
 8003d4a:	f003 0201 	and.w	r2, r3, #1
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d003      	beq.n	8003da0 <HAL_GPIO_Init+0xfc>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b12      	cmp	r3, #18
 8003d9e:	d123      	bne.n	8003de8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	08da      	lsrs	r2, r3, #3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3208      	adds	r2, #8
 8003da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	220f      	movs	r2, #15
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	08da      	lsrs	r2, r3, #3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3208      	adds	r2, #8
 8003de2:	69b9      	ldr	r1, [r7, #24]
 8003de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	2203      	movs	r2, #3
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 0203 	and.w	r2, r3, #3
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80c0 	beq.w	8003faa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	4b65      	ldr	r3, [pc, #404]	; (8003fc4 <HAL_GPIO_Init+0x320>)
 8003e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e32:	4a64      	ldr	r2, [pc, #400]	; (8003fc4 <HAL_GPIO_Init+0x320>)
 8003e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e38:	6453      	str	r3, [r2, #68]	; 0x44
 8003e3a:	4b62      	ldr	r3, [pc, #392]	; (8003fc4 <HAL_GPIO_Init+0x320>)
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e46:	4a60      	ldr	r2, [pc, #384]	; (8003fc8 <HAL_GPIO_Init+0x324>)
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	089b      	lsrs	r3, r3, #2
 8003e4c:	3302      	adds	r3, #2
 8003e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	220f      	movs	r2, #15
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43db      	mvns	r3, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4013      	ands	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a57      	ldr	r2, [pc, #348]	; (8003fcc <HAL_GPIO_Init+0x328>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d037      	beq.n	8003ee2 <HAL_GPIO_Init+0x23e>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a56      	ldr	r2, [pc, #344]	; (8003fd0 <HAL_GPIO_Init+0x32c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d031      	beq.n	8003ede <HAL_GPIO_Init+0x23a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a55      	ldr	r2, [pc, #340]	; (8003fd4 <HAL_GPIO_Init+0x330>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d02b      	beq.n	8003eda <HAL_GPIO_Init+0x236>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a54      	ldr	r2, [pc, #336]	; (8003fd8 <HAL_GPIO_Init+0x334>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d025      	beq.n	8003ed6 <HAL_GPIO_Init+0x232>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a53      	ldr	r2, [pc, #332]	; (8003fdc <HAL_GPIO_Init+0x338>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01f      	beq.n	8003ed2 <HAL_GPIO_Init+0x22e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a52      	ldr	r2, [pc, #328]	; (8003fe0 <HAL_GPIO_Init+0x33c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d019      	beq.n	8003ece <HAL_GPIO_Init+0x22a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a51      	ldr	r2, [pc, #324]	; (8003fe4 <HAL_GPIO_Init+0x340>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d013      	beq.n	8003eca <HAL_GPIO_Init+0x226>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a50      	ldr	r2, [pc, #320]	; (8003fe8 <HAL_GPIO_Init+0x344>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00d      	beq.n	8003ec6 <HAL_GPIO_Init+0x222>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a4f      	ldr	r2, [pc, #316]	; (8003fec <HAL_GPIO_Init+0x348>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d007      	beq.n	8003ec2 <HAL_GPIO_Init+0x21e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a4e      	ldr	r2, [pc, #312]	; (8003ff0 <HAL_GPIO_Init+0x34c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d101      	bne.n	8003ebe <HAL_GPIO_Init+0x21a>
 8003eba:	2309      	movs	r3, #9
 8003ebc:	e012      	b.n	8003ee4 <HAL_GPIO_Init+0x240>
 8003ebe:	230a      	movs	r3, #10
 8003ec0:	e010      	b.n	8003ee4 <HAL_GPIO_Init+0x240>
 8003ec2:	2308      	movs	r3, #8
 8003ec4:	e00e      	b.n	8003ee4 <HAL_GPIO_Init+0x240>
 8003ec6:	2307      	movs	r3, #7
 8003ec8:	e00c      	b.n	8003ee4 <HAL_GPIO_Init+0x240>
 8003eca:	2306      	movs	r3, #6
 8003ecc:	e00a      	b.n	8003ee4 <HAL_GPIO_Init+0x240>
 8003ece:	2305      	movs	r3, #5
 8003ed0:	e008      	b.n	8003ee4 <HAL_GPIO_Init+0x240>
 8003ed2:	2304      	movs	r3, #4
 8003ed4:	e006      	b.n	8003ee4 <HAL_GPIO_Init+0x240>
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e004      	b.n	8003ee4 <HAL_GPIO_Init+0x240>
 8003eda:	2302      	movs	r3, #2
 8003edc:	e002      	b.n	8003ee4 <HAL_GPIO_Init+0x240>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <HAL_GPIO_Init+0x240>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	f002 0203 	and.w	r2, r2, #3
 8003eea:	0092      	lsls	r2, r2, #2
 8003eec:	4093      	lsls	r3, r2
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ef4:	4934      	ldr	r1, [pc, #208]	; (8003fc8 <HAL_GPIO_Init+0x324>)
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	089b      	lsrs	r3, r3, #2
 8003efa:	3302      	adds	r3, #2
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f02:	4b3c      	ldr	r3, [pc, #240]	; (8003ff4 <HAL_GPIO_Init+0x350>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f26:	4a33      	ldr	r2, [pc, #204]	; (8003ff4 <HAL_GPIO_Init+0x350>)
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f2c:	4b31      	ldr	r3, [pc, #196]	; (8003ff4 <HAL_GPIO_Init+0x350>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	43db      	mvns	r3, r3
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f50:	4a28      	ldr	r2, [pc, #160]	; (8003ff4 <HAL_GPIO_Init+0x350>)
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f56:	4b27      	ldr	r3, [pc, #156]	; (8003ff4 <HAL_GPIO_Init+0x350>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4013      	ands	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f7a:	4a1e      	ldr	r2, [pc, #120]	; (8003ff4 <HAL_GPIO_Init+0x350>)
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f80:	4b1c      	ldr	r3, [pc, #112]	; (8003ff4 <HAL_GPIO_Init+0x350>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fa4:	4a13      	ldr	r2, [pc, #76]	; (8003ff4 <HAL_GPIO_Init+0x350>)
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	3301      	adds	r3, #1
 8003fae:	61fb      	str	r3, [r7, #28]
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	2b0f      	cmp	r3, #15
 8003fb4:	f67f ae84 	bls.w	8003cc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fb8:	bf00      	nop
 8003fba:	3724      	adds	r7, #36	; 0x24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40013800 	.word	0x40013800
 8003fcc:	40020000 	.word	0x40020000
 8003fd0:	40020400 	.word	0x40020400
 8003fd4:	40020800 	.word	0x40020800
 8003fd8:	40020c00 	.word	0x40020c00
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	40021400 	.word	0x40021400
 8003fe4:	40021800 	.word	0x40021800
 8003fe8:	40021c00 	.word	0x40021c00
 8003fec:	40022000 	.word	0x40022000
 8003ff0:	40022400 	.word	0x40022400
 8003ff4:	40013c00 	.word	0x40013c00

08003ff8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004002:	2300      	movs	r3, #0
 8004004:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800400a:	2300      	movs	r3, #0
 800400c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	e0d9      	b.n	80041c8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004014:	2201      	movs	r2, #1
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	4013      	ands	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	429a      	cmp	r2, r3
 800402c:	f040 80c9 	bne.w	80041c2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004030:	4a6a      	ldr	r2, [pc, #424]	; (80041dc <HAL_GPIO_DeInit+0x1e4>)
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	089b      	lsrs	r3, r3, #2
 8004036:	3302      	adds	r3, #2
 8004038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800403c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	220f      	movs	r2, #15
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	4013      	ands	r3, r2
 8004050:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a62      	ldr	r2, [pc, #392]	; (80041e0 <HAL_GPIO_DeInit+0x1e8>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d037      	beq.n	80040ca <HAL_GPIO_DeInit+0xd2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a61      	ldr	r2, [pc, #388]	; (80041e4 <HAL_GPIO_DeInit+0x1ec>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d031      	beq.n	80040c6 <HAL_GPIO_DeInit+0xce>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a60      	ldr	r2, [pc, #384]	; (80041e8 <HAL_GPIO_DeInit+0x1f0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d02b      	beq.n	80040c2 <HAL_GPIO_DeInit+0xca>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a5f      	ldr	r2, [pc, #380]	; (80041ec <HAL_GPIO_DeInit+0x1f4>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d025      	beq.n	80040be <HAL_GPIO_DeInit+0xc6>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a5e      	ldr	r2, [pc, #376]	; (80041f0 <HAL_GPIO_DeInit+0x1f8>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d01f      	beq.n	80040ba <HAL_GPIO_DeInit+0xc2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a5d      	ldr	r2, [pc, #372]	; (80041f4 <HAL_GPIO_DeInit+0x1fc>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d019      	beq.n	80040b6 <HAL_GPIO_DeInit+0xbe>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a5c      	ldr	r2, [pc, #368]	; (80041f8 <HAL_GPIO_DeInit+0x200>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <HAL_GPIO_DeInit+0xba>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a5b      	ldr	r2, [pc, #364]	; (80041fc <HAL_GPIO_DeInit+0x204>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00d      	beq.n	80040ae <HAL_GPIO_DeInit+0xb6>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a5a      	ldr	r2, [pc, #360]	; (8004200 <HAL_GPIO_DeInit+0x208>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d007      	beq.n	80040aa <HAL_GPIO_DeInit+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a59      	ldr	r2, [pc, #356]	; (8004204 <HAL_GPIO_DeInit+0x20c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d101      	bne.n	80040a6 <HAL_GPIO_DeInit+0xae>
 80040a2:	2309      	movs	r3, #9
 80040a4:	e012      	b.n	80040cc <HAL_GPIO_DeInit+0xd4>
 80040a6:	230a      	movs	r3, #10
 80040a8:	e010      	b.n	80040cc <HAL_GPIO_DeInit+0xd4>
 80040aa:	2308      	movs	r3, #8
 80040ac:	e00e      	b.n	80040cc <HAL_GPIO_DeInit+0xd4>
 80040ae:	2307      	movs	r3, #7
 80040b0:	e00c      	b.n	80040cc <HAL_GPIO_DeInit+0xd4>
 80040b2:	2306      	movs	r3, #6
 80040b4:	e00a      	b.n	80040cc <HAL_GPIO_DeInit+0xd4>
 80040b6:	2305      	movs	r3, #5
 80040b8:	e008      	b.n	80040cc <HAL_GPIO_DeInit+0xd4>
 80040ba:	2304      	movs	r3, #4
 80040bc:	e006      	b.n	80040cc <HAL_GPIO_DeInit+0xd4>
 80040be:	2303      	movs	r3, #3
 80040c0:	e004      	b.n	80040cc <HAL_GPIO_DeInit+0xd4>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e002      	b.n	80040cc <HAL_GPIO_DeInit+0xd4>
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <HAL_GPIO_DeInit+0xd4>
 80040ca:	2300      	movs	r3, #0
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	f002 0203 	and.w	r2, r2, #3
 80040d2:	0092      	lsls	r2, r2, #2
 80040d4:	4093      	lsls	r3, r2
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d132      	bne.n	8004142 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80040dc:	4b4a      	ldr	r3, [pc, #296]	; (8004208 <HAL_GPIO_DeInit+0x210>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	43db      	mvns	r3, r3
 80040e4:	4948      	ldr	r1, [pc, #288]	; (8004208 <HAL_GPIO_DeInit+0x210>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80040ea:	4b47      	ldr	r3, [pc, #284]	; (8004208 <HAL_GPIO_DeInit+0x210>)
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	43db      	mvns	r3, r3
 80040f2:	4945      	ldr	r1, [pc, #276]	; (8004208 <HAL_GPIO_DeInit+0x210>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80040f8:	4b43      	ldr	r3, [pc, #268]	; (8004208 <HAL_GPIO_DeInit+0x210>)
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	43db      	mvns	r3, r3
 8004100:	4941      	ldr	r1, [pc, #260]	; (8004208 <HAL_GPIO_DeInit+0x210>)
 8004102:	4013      	ands	r3, r2
 8004104:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004106:	4b40      	ldr	r3, [pc, #256]	; (8004208 <HAL_GPIO_DeInit+0x210>)
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	43db      	mvns	r3, r3
 800410e:	493e      	ldr	r1, [pc, #248]	; (8004208 <HAL_GPIO_DeInit+0x210>)
 8004110:	4013      	ands	r3, r2
 8004112:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	220f      	movs	r2, #15
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004124:	4a2d      	ldr	r2, [pc, #180]	; (80041dc <HAL_GPIO_DeInit+0x1e4>)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	089b      	lsrs	r3, r3, #2
 800412a:	3302      	adds	r3, #2
 800412c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	43da      	mvns	r2, r3
 8004134:	4829      	ldr	r0, [pc, #164]	; (80041dc <HAL_GPIO_DeInit+0x1e4>)
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	089b      	lsrs	r3, r3, #2
 800413a:	400a      	ands	r2, r1
 800413c:	3302      	adds	r3, #2
 800413e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	2103      	movs	r1, #3
 800414c:	fa01 f303 	lsl.w	r3, r1, r3
 8004150:	43db      	mvns	r3, r3
 8004152:	401a      	ands	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	08da      	lsrs	r2, r3, #3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3208      	adds	r2, #8
 8004160:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	220f      	movs	r2, #15
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43db      	mvns	r3, r3
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	08d2      	lsrs	r2, r2, #3
 8004178:	4019      	ands	r1, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3208      	adds	r2, #8
 800417e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	2103      	movs	r1, #3
 800418c:	fa01 f303 	lsl.w	r3, r1, r3
 8004190:	43db      	mvns	r3, r3
 8004192:	401a      	ands	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	2101      	movs	r1, #1
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	fa01 f303 	lsl.w	r3, r1, r3
 80041a4:	43db      	mvns	r3, r3
 80041a6:	401a      	ands	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	2103      	movs	r1, #3
 80041b6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ba:	43db      	mvns	r3, r3
 80041bc:	401a      	ands	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	3301      	adds	r3, #1
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2b0f      	cmp	r3, #15
 80041cc:	f67f af22 	bls.w	8004014 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80041d0:	bf00      	nop
 80041d2:	371c      	adds	r7, #28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	40013800 	.word	0x40013800
 80041e0:	40020000 	.word	0x40020000
 80041e4:	40020400 	.word	0x40020400
 80041e8:	40020800 	.word	0x40020800
 80041ec:	40020c00 	.word	0x40020c00
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40021400 	.word	0x40021400
 80041f8:	40021800 	.word	0x40021800
 80041fc:	40021c00 	.word	0x40021c00
 8004200:	40022000 	.word	0x40022000
 8004204:	40022400 	.word	0x40022400
 8004208:	40013c00 	.word	0x40013c00

0800420c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	460b      	mov	r3, r1
 8004216:	807b      	strh	r3, [r7, #2]
 8004218:	4613      	mov	r3, r2
 800421a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800421c:	787b      	ldrb	r3, [r7, #1]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004222:	887a      	ldrh	r2, [r7, #2]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004228:	e003      	b.n	8004232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800422a:	887b      	ldrh	r3, [r7, #2]
 800422c:	041a      	lsls	r2, r3, #16
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	619a      	str	r2, [r3, #24]
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
	...

08004240 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e11f      	b.n	8004492 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fe fb74 	bl	8002954 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2224      	movs	r2, #36	; 0x24
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0201 	bic.w	r2, r2, #1
 8004282:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004292:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042a4:	f001 f8b4 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 80042a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	4a7b      	ldr	r2, [pc, #492]	; (800449c <HAL_I2C_Init+0x25c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d807      	bhi.n	80042c4 <HAL_I2C_Init+0x84>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4a7a      	ldr	r2, [pc, #488]	; (80044a0 <HAL_I2C_Init+0x260>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	bf94      	ite	ls
 80042bc:	2301      	movls	r3, #1
 80042be:	2300      	movhi	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	e006      	b.n	80042d2 <HAL_I2C_Init+0x92>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4a77      	ldr	r2, [pc, #476]	; (80044a4 <HAL_I2C_Init+0x264>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	bf94      	ite	ls
 80042cc:	2301      	movls	r3, #1
 80042ce:	2300      	movhi	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e0db      	b.n	8004492 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4a72      	ldr	r2, [pc, #456]	; (80044a8 <HAL_I2C_Init+0x268>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	0c9b      	lsrs	r3, r3, #18
 80042e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	4a64      	ldr	r2, [pc, #400]	; (800449c <HAL_I2C_Init+0x25c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d802      	bhi.n	8004314 <HAL_I2C_Init+0xd4>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	3301      	adds	r3, #1
 8004312:	e009      	b.n	8004328 <HAL_I2C_Init+0xe8>
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800431a:	fb02 f303 	mul.w	r3, r2, r3
 800431e:	4a63      	ldr	r2, [pc, #396]	; (80044ac <HAL_I2C_Init+0x26c>)
 8004320:	fba2 2303 	umull	r2, r3, r2, r3
 8004324:	099b      	lsrs	r3, r3, #6
 8004326:	3301      	adds	r3, #1
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6812      	ldr	r2, [r2, #0]
 800432c:	430b      	orrs	r3, r1
 800432e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800433a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	4956      	ldr	r1, [pc, #344]	; (800449c <HAL_I2C_Init+0x25c>)
 8004344:	428b      	cmp	r3, r1
 8004346:	d80d      	bhi.n	8004364 <HAL_I2C_Init+0x124>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	1e59      	subs	r1, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	fbb1 f3f3 	udiv	r3, r1, r3
 8004356:	3301      	adds	r3, #1
 8004358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800435c:	2b04      	cmp	r3, #4
 800435e:	bf38      	it	cc
 8004360:	2304      	movcc	r3, #4
 8004362:	e04f      	b.n	8004404 <HAL_I2C_Init+0x1c4>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d111      	bne.n	8004390 <HAL_I2C_Init+0x150>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	1e58      	subs	r0, r3, #1
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6859      	ldr	r1, [r3, #4]
 8004374:	460b      	mov	r3, r1
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	440b      	add	r3, r1
 800437a:	fbb0 f3f3 	udiv	r3, r0, r3
 800437e:	3301      	adds	r3, #1
 8004380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004384:	2b00      	cmp	r3, #0
 8004386:	bf0c      	ite	eq
 8004388:	2301      	moveq	r3, #1
 800438a:	2300      	movne	r3, #0
 800438c:	b2db      	uxtb	r3, r3
 800438e:	e012      	b.n	80043b6 <HAL_I2C_Init+0x176>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	1e58      	subs	r0, r3, #1
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6859      	ldr	r1, [r3, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	0099      	lsls	r1, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043a6:	3301      	adds	r3, #1
 80043a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf0c      	ite	eq
 80043b0:	2301      	moveq	r3, #1
 80043b2:	2300      	movne	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_I2C_Init+0x17e>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e022      	b.n	8004404 <HAL_I2C_Init+0x1c4>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10e      	bne.n	80043e4 <HAL_I2C_Init+0x1a4>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	1e58      	subs	r0, r3, #1
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6859      	ldr	r1, [r3, #4]
 80043ce:	460b      	mov	r3, r1
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	440b      	add	r3, r1
 80043d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80043d8:	3301      	adds	r3, #1
 80043da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043e2:	e00f      	b.n	8004404 <HAL_I2C_Init+0x1c4>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	1e58      	subs	r0, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6859      	ldr	r1, [r3, #4]
 80043ec:	460b      	mov	r3, r1
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	440b      	add	r3, r1
 80043f2:	0099      	lsls	r1, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043fa:	3301      	adds	r3, #1
 80043fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004400:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	6809      	ldr	r1, [r1, #0]
 8004408:	4313      	orrs	r3, r2
 800440a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69da      	ldr	r2, [r3, #28]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004432:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6911      	ldr	r1, [r2, #16]
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	68d2      	ldr	r2, [r2, #12]
 800443e:	4311      	orrs	r1, r2
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6812      	ldr	r2, [r2, #0]
 8004444:	430b      	orrs	r3, r1
 8004446:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695a      	ldr	r2, [r3, #20]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0201 	orr.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	000186a0 	.word	0x000186a0
 80044a0:	001e847f 	.word	0x001e847f
 80044a4:	003d08ff 	.word	0x003d08ff
 80044a8:	431bde83 	.word	0x431bde83
 80044ac:	10624dd3 	.word	0x10624dd3

080044b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d129      	bne.n	800451a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2224      	movs	r2, #36	; 0x24
 80044ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0201 	bic.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0210 	bic.w	r2, r2, #16
 80044ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f042 0201 	orr.w	r2, r2, #1
 800450c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2220      	movs	r2, #32
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	e000      	b.n	800451c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800451a:	2302      	movs	r3, #2
  }
}
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004532:	2300      	movs	r3, #0
 8004534:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b20      	cmp	r3, #32
 8004540:	d12a      	bne.n	8004598 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2224      	movs	r2, #36	; 0x24
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0201 	bic.w	r2, r2, #1
 8004558:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004562:	89fb      	ldrh	r3, [r7, #14]
 8004564:	f023 030f 	bic.w	r3, r3, #15
 8004568:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	b29a      	uxth	r2, r3
 800456e:	89fb      	ldrh	r3, [r7, #14]
 8004570:	4313      	orrs	r3, r2
 8004572:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	89fa      	ldrh	r2, [r7, #14]
 800457a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0201 	orr.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	e000      	b.n	800459a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004598:	2302      	movs	r3, #2
  }
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
	...

080045a8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e0bf      	b.n	800473a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d106      	bne.n	80045d4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7fe fa2a 	bl	8002a28 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699a      	ldr	r2, [r3, #24]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80045ea:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6999      	ldr	r1, [r3, #24]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004600:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6899      	ldr	r1, [r3, #8]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4b4a      	ldr	r3, [pc, #296]	; (8004744 <HAL_LTDC_Init+0x19c>)
 800461c:	400b      	ands	r3, r1
 800461e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	041b      	lsls	r3, r3, #16
 8004626:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6899      	ldr	r1, [r3, #8]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699a      	ldr	r2, [r3, #24]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68d9      	ldr	r1, [r3, #12]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	4b3e      	ldr	r3, [pc, #248]	; (8004744 <HAL_LTDC_Init+0x19c>)
 800464a:	400b      	ands	r3, r1
 800464c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	041b      	lsls	r3, r3, #16
 8004654:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68d9      	ldr	r1, [r3, #12]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a1a      	ldr	r2, [r3, #32]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6919      	ldr	r1, [r3, #16]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	4b33      	ldr	r3, [pc, #204]	; (8004744 <HAL_LTDC_Init+0x19c>)
 8004678:	400b      	ands	r3, r1
 800467a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	041b      	lsls	r3, r3, #16
 8004682:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6919      	ldr	r1, [r3, #16]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6959      	ldr	r1, [r3, #20]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	4b27      	ldr	r3, [pc, #156]	; (8004744 <HAL_LTDC_Init+0x19c>)
 80046a6:	400b      	ands	r3, r1
 80046a8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	041b      	lsls	r3, r3, #16
 80046b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6959      	ldr	r1, [r3, #20]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046ce:	021b      	lsls	r3, r3, #8
 80046d0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80046d8:	041b      	lsls	r3, r3, #16
 80046da:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80046ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0206 	orr.w	r2, r2, #6
 8004716:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0201 	orr.w	r2, r2, #1
 8004726:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	f000f800 	.word	0xf000f800

08004748 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004748:	b5b0      	push	{r4, r5, r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <HAL_LTDC_ConfigLayer+0x1a>
 800475e:	2302      	movs	r3, #2
 8004760:	e02c      	b.n	80047bc <HAL_LTDC_ConfigLayer+0x74>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2202      	movs	r2, #2
 800476e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2134      	movs	r1, #52	; 0x34
 8004778:	fb01 f303 	mul.w	r3, r1, r3
 800477c:	4413      	add	r3, r2
 800477e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	4614      	mov	r4, r2
 8004786:	461d      	mov	r5, r3
 8004788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800478a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800478c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800478e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f83b 	bl	8004818 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2201      	movs	r2, #1
 80047a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bdb0      	pop	{r4, r5, r7, pc}

080047c4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <HAL_LTDC_EnableDither+0x16>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e016      	b.n	8004808 <HAL_LTDC_EnableDither+0x44>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2202      	movs	r2, #2
 80047e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80047ea:	4b0a      	ldr	r3, [pc, #40]	; (8004814 <HAL_LTDC_EnableDither+0x50>)
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	4a09      	ldr	r2, [pc, #36]	; (8004814 <HAL_LTDC_EnableDither+0x50>)
 80047f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f4:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	40016800 	.word	0x40016800

08004818 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004818:	b480      	push	{r7}
 800481a:	b089      	sub	sp, #36	; 0x24
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	0c1b      	lsrs	r3, r3, #16
 8004830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004834:	4413      	add	r3, r2
 8004836:	041b      	lsls	r3, r3, #16
 8004838:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	01db      	lsls	r3, r3, #7
 8004844:	4413      	add	r3, r2
 8004846:	3384      	adds	r3, #132	; 0x84
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	4611      	mov	r1, r2
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	01d2      	lsls	r2, r2, #7
 8004854:	440a      	add	r2, r1
 8004856:	3284      	adds	r2, #132	; 0x84
 8004858:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800485c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	0c1b      	lsrs	r3, r3, #16
 800486a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800486e:	4413      	add	r3, r2
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4619      	mov	r1, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	01db      	lsls	r3, r3, #7
 800487c:	440b      	add	r3, r1
 800487e:	3384      	adds	r3, #132	; 0x84
 8004880:	4619      	mov	r1, r3
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	4313      	orrs	r3, r2
 8004886:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004896:	4413      	add	r3, r2
 8004898:	041b      	lsls	r3, r3, #16
 800489a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	461a      	mov	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	01db      	lsls	r3, r3, #7
 80048a6:	4413      	add	r3, r2
 80048a8:	3384      	adds	r3, #132	; 0x84
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	6812      	ldr	r2, [r2, #0]
 80048b0:	4611      	mov	r1, r2
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	01d2      	lsls	r2, r2, #7
 80048b6:	440a      	add	r2, r1
 80048b8:	3284      	adds	r2, #132	; 0x84
 80048ba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80048be:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048ce:	4413      	add	r3, r2
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4619      	mov	r1, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	01db      	lsls	r3, r3, #7
 80048dc:	440b      	add	r3, r1
 80048de:	3384      	adds	r3, #132	; 0x84
 80048e0:	4619      	mov	r1, r3
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	461a      	mov	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	01db      	lsls	r3, r3, #7
 80048f2:	4413      	add	r3, r2
 80048f4:	3384      	adds	r3, #132	; 0x84
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	6812      	ldr	r2, [r2, #0]
 80048fc:	4611      	mov	r1, r2
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	01d2      	lsls	r2, r2, #7
 8004902:	440a      	add	r2, r1
 8004904:	3284      	adds	r2, #132	; 0x84
 8004906:	f023 0307 	bic.w	r3, r3, #7
 800490a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	461a      	mov	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	01db      	lsls	r3, r3, #7
 8004916:	4413      	add	r3, r2
 8004918:	3384      	adds	r3, #132	; 0x84
 800491a:	461a      	mov	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004928:	021b      	lsls	r3, r3, #8
 800492a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004932:	041b      	lsls	r3, r3, #16
 8004934:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	061b      	lsls	r3, r3, #24
 800493c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	01db      	lsls	r3, r3, #7
 8004948:	4413      	add	r3, r2
 800494a:	3384      	adds	r3, #132	; 0x84
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	461a      	mov	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	01db      	lsls	r3, r3, #7
 8004958:	4413      	add	r3, r2
 800495a:	3384      	adds	r3, #132	; 0x84
 800495c:	461a      	mov	r2, r3
 800495e:	2300      	movs	r3, #0
 8004960:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004968:	461a      	mov	r2, r3
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	431a      	orrs	r2, r3
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	431a      	orrs	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4619      	mov	r1, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	01db      	lsls	r3, r3, #7
 800497c:	440b      	add	r3, r1
 800497e:	3384      	adds	r3, #132	; 0x84
 8004980:	4619      	mov	r1, r3
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	4313      	orrs	r3, r2
 8004986:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	461a      	mov	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	01db      	lsls	r3, r3, #7
 8004992:	4413      	add	r3, r2
 8004994:	3384      	adds	r3, #132	; 0x84
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	6812      	ldr	r2, [r2, #0]
 800499c:	4611      	mov	r1, r2
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	01d2      	lsls	r2, r2, #7
 80049a2:	440a      	add	r2, r1
 80049a4:	3284      	adds	r2, #132	; 0x84
 80049a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049aa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	01db      	lsls	r3, r3, #7
 80049b6:	4413      	add	r3, r2
 80049b8:	3384      	adds	r3, #132	; 0x84
 80049ba:	461a      	mov	r2, r3
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	01db      	lsls	r3, r3, #7
 80049cc:	4413      	add	r3, r2
 80049ce:	3384      	adds	r3, #132	; 0x84
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	6812      	ldr	r2, [r2, #0]
 80049d6:	4611      	mov	r1, r2
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	01d2      	lsls	r2, r2, #7
 80049dc:	440a      	add	r2, r1
 80049de:	3284      	adds	r2, #132	; 0x84
 80049e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80049e4:	f023 0307 	bic.w	r3, r3, #7
 80049e8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	69da      	ldr	r2, [r3, #28]
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	68f9      	ldr	r1, [r7, #12]
 80049f4:	6809      	ldr	r1, [r1, #0]
 80049f6:	4608      	mov	r0, r1
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	01c9      	lsls	r1, r1, #7
 80049fc:	4401      	add	r1, r0
 80049fe:	3184      	adds	r1, #132	; 0x84
 8004a00:	4313      	orrs	r3, r2
 8004a02:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	01db      	lsls	r3, r3, #7
 8004a0e:	4413      	add	r3, r2
 8004a10:	3384      	adds	r3, #132	; 0x84
 8004a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	01db      	lsls	r3, r3, #7
 8004a1e:	4413      	add	r3, r2
 8004a20:	3384      	adds	r3, #132	; 0x84
 8004a22:	461a      	mov	r2, r3
 8004a24:	2300      	movs	r3, #0
 8004a26:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	01db      	lsls	r3, r3, #7
 8004a32:	4413      	add	r3, r2
 8004a34:	3384      	adds	r3, #132	; 0x84
 8004a36:	461a      	mov	r2, r3
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d102      	bne.n	8004a4c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004a46:	2304      	movs	r3, #4
 8004a48:	61fb      	str	r3, [r7, #28]
 8004a4a:	e01b      	b.n	8004a84 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d102      	bne.n	8004a5a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004a54:	2303      	movs	r3, #3
 8004a56:	61fb      	str	r3, [r7, #28]
 8004a58:	e014      	b.n	8004a84 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d00b      	beq.n	8004a7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d007      	beq.n	8004a7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	d003      	beq.n	8004a7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a76:	2b07      	cmp	r3, #7
 8004a78:	d102      	bne.n	8004a80 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	61fb      	str	r3, [r7, #28]
 8004a7e:	e001      	b.n	8004a84 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004a80:	2301      	movs	r3, #1
 8004a82:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	01db      	lsls	r3, r3, #7
 8004a8e:	4413      	add	r3, r2
 8004a90:	3384      	adds	r3, #132	; 0x84
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	6812      	ldr	r2, [r2, #0]
 8004a98:	4611      	mov	r1, r2
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	01d2      	lsls	r2, r2, #7
 8004a9e:	440a      	add	r2, r1
 8004aa0:	3284      	adds	r2, #132	; 0x84
 8004aa2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004aa6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aac:	69fa      	ldr	r2, [r7, #28]
 8004aae:	fb02 f303 	mul.w	r3, r2, r3
 8004ab2:	041a      	lsls	r2, r3, #16
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	6859      	ldr	r1, [r3, #4]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	1acb      	subs	r3, r1, r3
 8004abe:	69f9      	ldr	r1, [r7, #28]
 8004ac0:	fb01 f303 	mul.w	r3, r1, r3
 8004ac4:	3303      	adds	r3, #3
 8004ac6:	68f9      	ldr	r1, [r7, #12]
 8004ac8:	6809      	ldr	r1, [r1, #0]
 8004aca:	4608      	mov	r0, r1
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	01c9      	lsls	r1, r1, #7
 8004ad0:	4401      	add	r1, r0
 8004ad2:	3184      	adds	r1, #132	; 0x84
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	461a      	mov	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	01db      	lsls	r3, r3, #7
 8004ae2:	4413      	add	r3, r2
 8004ae4:	3384      	adds	r3, #132	; 0x84
 8004ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	6812      	ldr	r2, [r2, #0]
 8004aec:	4611      	mov	r1, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	01d2      	lsls	r2, r2, #7
 8004af2:	440a      	add	r2, r1
 8004af4:	3284      	adds	r2, #132	; 0x84
 8004af6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004afa:	f023 0307 	bic.w	r3, r3, #7
 8004afe:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	461a      	mov	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	01db      	lsls	r3, r3, #7
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3384      	adds	r3, #132	; 0x84
 8004b0e:	461a      	mov	r2, r3
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	01db      	lsls	r3, r3, #7
 8004b20:	4413      	add	r3, r2
 8004b22:	3384      	adds	r3, #132	; 0x84
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	6812      	ldr	r2, [r2, #0]
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	01d2      	lsls	r2, r2, #7
 8004b30:	440a      	add	r2, r1
 8004b32:	3284      	adds	r2, #132	; 0x84
 8004b34:	f043 0301 	orr.w	r3, r3, #1
 8004b38:	6013      	str	r3, [r2, #0]
}
 8004b3a:	bf00      	nop
 8004b3c:	3724      	adds	r7, #36	; 0x24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
	...

08004b48 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004b52:	2300      	movs	r3, #0
 8004b54:	603b      	str	r3, [r7, #0]
 8004b56:	4b20      	ldr	r3, [pc, #128]	; (8004bd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	4a1f      	ldr	r2, [pc, #124]	; (8004bd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b60:	6413      	str	r3, [r2, #64]	; 0x40
 8004b62:	4b1d      	ldr	r3, [pc, #116]	; (8004bd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6a:	603b      	str	r3, [r7, #0]
 8004b6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004b6e:	4b1b      	ldr	r3, [pc, #108]	; (8004bdc <HAL_PWREx_EnableOverDrive+0x94>)
 8004b70:	2201      	movs	r2, #1
 8004b72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b74:	f7fe fb0e 	bl	8003194 <HAL_GetTick>
 8004b78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b7a:	e009      	b.n	8004b90 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b7c:	f7fe fb0a 	bl	8003194 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b8a:	d901      	bls.n	8004b90 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e01f      	b.n	8004bd0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b90:	4b13      	ldr	r3, [pc, #76]	; (8004be0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9c:	d1ee      	bne.n	8004b7c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004b9e:	4b11      	ldr	r3, [pc, #68]	; (8004be4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ba4:	f7fe faf6 	bl	8003194 <HAL_GetTick>
 8004ba8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004baa:	e009      	b.n	8004bc0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bac:	f7fe faf2 	bl	8003194 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bba:	d901      	bls.n	8004bc0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e007      	b.n	8004bd0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004bc0:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bcc:	d1ee      	bne.n	8004bac <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	420e0040 	.word	0x420e0040
 8004be0:	40007000 	.word	0x40007000
 8004be4:	420e0044 	.word	0x420e0044

08004be8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e25b      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d075      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c06:	4ba3      	ldr	r3, [pc, #652]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 030c 	and.w	r3, r3, #12
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d00c      	beq.n	8004c2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c12:	4ba0      	ldr	r3, [pc, #640]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	d112      	bne.n	8004c44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c1e:	4b9d      	ldr	r3, [pc, #628]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c2a:	d10b      	bne.n	8004c44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c2c:	4b99      	ldr	r3, [pc, #612]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d05b      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x108>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d157      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e236      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c4c:	d106      	bne.n	8004c5c <HAL_RCC_OscConfig+0x74>
 8004c4e:	4b91      	ldr	r3, [pc, #580]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a90      	ldr	r2, [pc, #576]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c58:	6013      	str	r3, [r2, #0]
 8004c5a:	e01d      	b.n	8004c98 <HAL_RCC_OscConfig+0xb0>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c64:	d10c      	bne.n	8004c80 <HAL_RCC_OscConfig+0x98>
 8004c66:	4b8b      	ldr	r3, [pc, #556]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a8a      	ldr	r2, [pc, #552]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	4b88      	ldr	r3, [pc, #544]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a87      	ldr	r2, [pc, #540]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	e00b      	b.n	8004c98 <HAL_RCC_OscConfig+0xb0>
 8004c80:	4b84      	ldr	r3, [pc, #528]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a83      	ldr	r2, [pc, #524]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c8a:	6013      	str	r3, [r2, #0]
 8004c8c:	4b81      	ldr	r3, [pc, #516]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a80      	ldr	r2, [pc, #512]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d013      	beq.n	8004cc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca0:	f7fe fa78 	bl	8003194 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ca8:	f7fe fa74 	bl	8003194 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b64      	cmp	r3, #100	; 0x64
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e1fb      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cba:	4b76      	ldr	r3, [pc, #472]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0f0      	beq.n	8004ca8 <HAL_RCC_OscConfig+0xc0>
 8004cc6:	e014      	b.n	8004cf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc8:	f7fe fa64 	bl	8003194 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cd0:	f7fe fa60 	bl	8003194 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b64      	cmp	r3, #100	; 0x64
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e1e7      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ce2:	4b6c      	ldr	r3, [pc, #432]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f0      	bne.n	8004cd0 <HAL_RCC_OscConfig+0xe8>
 8004cee:	e000      	b.n	8004cf2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d063      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cfe:	4b65      	ldr	r3, [pc, #404]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 030c 	and.w	r3, r3, #12
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00b      	beq.n	8004d22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d0a:	4b62      	ldr	r3, [pc, #392]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d11c      	bne.n	8004d50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d16:	4b5f      	ldr	r3, [pc, #380]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d116      	bne.n	8004d50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d22:	4b5c      	ldr	r3, [pc, #368]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d005      	beq.n	8004d3a <HAL_RCC_OscConfig+0x152>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d001      	beq.n	8004d3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e1bb      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d3a:	4b56      	ldr	r3, [pc, #344]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	4952      	ldr	r1, [pc, #328]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d4e:	e03a      	b.n	8004dc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d020      	beq.n	8004d9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d58:	4b4f      	ldr	r3, [pc, #316]	; (8004e98 <HAL_RCC_OscConfig+0x2b0>)
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5e:	f7fe fa19 	bl	8003194 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d66:	f7fe fa15 	bl	8003194 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e19c      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d78:	4b46      	ldr	r3, [pc, #280]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d84:	4b43      	ldr	r3, [pc, #268]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	00db      	lsls	r3, r3, #3
 8004d92:	4940      	ldr	r1, [pc, #256]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	600b      	str	r3, [r1, #0]
 8004d98:	e015      	b.n	8004dc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d9a:	4b3f      	ldr	r3, [pc, #252]	; (8004e98 <HAL_RCC_OscConfig+0x2b0>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da0:	f7fe f9f8 	bl	8003194 <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004da8:	f7fe f9f4 	bl	8003194 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e17b      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dba:	4b36      	ldr	r3, [pc, #216]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1f0      	bne.n	8004da8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d030      	beq.n	8004e34 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d016      	beq.n	8004e08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dda:	4b30      	ldr	r3, [pc, #192]	; (8004e9c <HAL_RCC_OscConfig+0x2b4>)
 8004ddc:	2201      	movs	r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de0:	f7fe f9d8 	bl	8003194 <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004de8:	f7fe f9d4 	bl	8003194 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e15b      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dfa:	4b26      	ldr	r3, [pc, #152]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0f0      	beq.n	8004de8 <HAL_RCC_OscConfig+0x200>
 8004e06:	e015      	b.n	8004e34 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e08:	4b24      	ldr	r3, [pc, #144]	; (8004e9c <HAL_RCC_OscConfig+0x2b4>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e0e:	f7fe f9c1 	bl	8003194 <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e16:	f7fe f9bd 	bl	8003194 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e144      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e28:	4b1a      	ldr	r3, [pc, #104]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1f0      	bne.n	8004e16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 80a0 	beq.w	8004f82 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e42:	2300      	movs	r3, #0
 8004e44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e46:	4b13      	ldr	r3, [pc, #76]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10f      	bne.n	8004e72 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e52:	2300      	movs	r3, #0
 8004e54:	60bb      	str	r3, [r7, #8]
 8004e56:	4b0f      	ldr	r3, [pc, #60]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	4a0e      	ldr	r2, [pc, #56]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e60:	6413      	str	r3, [r2, #64]	; 0x40
 8004e62:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6a:	60bb      	str	r3, [r7, #8]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e72:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <HAL_RCC_OscConfig+0x2b8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d121      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e7e:	4b08      	ldr	r3, [pc, #32]	; (8004ea0 <HAL_RCC_OscConfig+0x2b8>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a07      	ldr	r2, [pc, #28]	; (8004ea0 <HAL_RCC_OscConfig+0x2b8>)
 8004e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e8a:	f7fe f983 	bl	8003194 <HAL_GetTick>
 8004e8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e90:	e011      	b.n	8004eb6 <HAL_RCC_OscConfig+0x2ce>
 8004e92:	bf00      	nop
 8004e94:	40023800 	.word	0x40023800
 8004e98:	42470000 	.word	0x42470000
 8004e9c:	42470e80 	.word	0x42470e80
 8004ea0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea4:	f7fe f976 	bl	8003194 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e0fd      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb6:	4b81      	ldr	r3, [pc, #516]	; (80050bc <HAL_RCC_OscConfig+0x4d4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0f0      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d106      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x2f0>
 8004eca:	4b7d      	ldr	r3, [pc, #500]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ece:	4a7c      	ldr	r2, [pc, #496]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004ed0:	f043 0301 	orr.w	r3, r3, #1
 8004ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ed6:	e01c      	b.n	8004f12 <HAL_RCC_OscConfig+0x32a>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2b05      	cmp	r3, #5
 8004ede:	d10c      	bne.n	8004efa <HAL_RCC_OscConfig+0x312>
 8004ee0:	4b77      	ldr	r3, [pc, #476]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee4:	4a76      	ldr	r2, [pc, #472]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004ee6:	f043 0304 	orr.w	r3, r3, #4
 8004eea:	6713      	str	r3, [r2, #112]	; 0x70
 8004eec:	4b74      	ldr	r3, [pc, #464]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef0:	4a73      	ldr	r2, [pc, #460]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004ef2:	f043 0301 	orr.w	r3, r3, #1
 8004ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef8:	e00b      	b.n	8004f12 <HAL_RCC_OscConfig+0x32a>
 8004efa:	4b71      	ldr	r3, [pc, #452]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efe:	4a70      	ldr	r2, [pc, #448]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004f00:	f023 0301 	bic.w	r3, r3, #1
 8004f04:	6713      	str	r3, [r2, #112]	; 0x70
 8004f06:	4b6e      	ldr	r3, [pc, #440]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0a:	4a6d      	ldr	r2, [pc, #436]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004f0c:	f023 0304 	bic.w	r3, r3, #4
 8004f10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d015      	beq.n	8004f46 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1a:	f7fe f93b 	bl	8003194 <HAL_GetTick>
 8004f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f20:	e00a      	b.n	8004f38 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f22:	f7fe f937 	bl	8003194 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e0bc      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f38:	4b61      	ldr	r3, [pc, #388]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0ee      	beq.n	8004f22 <HAL_RCC_OscConfig+0x33a>
 8004f44:	e014      	b.n	8004f70 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f46:	f7fe f925 	bl	8003194 <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f4c:	e00a      	b.n	8004f64 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f4e:	f7fe f921 	bl	8003194 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e0a6      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f64:	4b56      	ldr	r3, [pc, #344]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1ee      	bne.n	8004f4e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f70:	7dfb      	ldrb	r3, [r7, #23]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d105      	bne.n	8004f82 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f76:	4b52      	ldr	r3, [pc, #328]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	4a51      	ldr	r2, [pc, #324]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 8092 	beq.w	80050b0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f8c:	4b4c      	ldr	r3, [pc, #304]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f003 030c 	and.w	r3, r3, #12
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d05c      	beq.n	8005052 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d141      	bne.n	8005024 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fa0:	4b48      	ldr	r3, [pc, #288]	; (80050c4 <HAL_RCC_OscConfig+0x4dc>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa6:	f7fe f8f5 	bl	8003194 <HAL_GetTick>
 8004faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fac:	e008      	b.n	8004fc0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fae:	f7fe f8f1 	bl	8003194 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e078      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc0:	4b3f      	ldr	r3, [pc, #252]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1f0      	bne.n	8004fae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	69da      	ldr	r2, [r3, #28]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	019b      	lsls	r3, r3, #6
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe2:	085b      	lsrs	r3, r3, #1
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	041b      	lsls	r3, r3, #16
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fee:	061b      	lsls	r3, r3, #24
 8004ff0:	4933      	ldr	r1, [pc, #204]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ff6:	4b33      	ldr	r3, [pc, #204]	; (80050c4 <HAL_RCC_OscConfig+0x4dc>)
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffc:	f7fe f8ca 	bl	8003194 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005004:	f7fe f8c6 	bl	8003194 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e04d      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005016:	4b2a      	ldr	r3, [pc, #168]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d0f0      	beq.n	8005004 <HAL_RCC_OscConfig+0x41c>
 8005022:	e045      	b.n	80050b0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005024:	4b27      	ldr	r3, [pc, #156]	; (80050c4 <HAL_RCC_OscConfig+0x4dc>)
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800502a:	f7fe f8b3 	bl	8003194 <HAL_GetTick>
 800502e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005030:	e008      	b.n	8005044 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005032:	f7fe f8af 	bl	8003194 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e036      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005044:	4b1e      	ldr	r3, [pc, #120]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1f0      	bne.n	8005032 <HAL_RCC_OscConfig+0x44a>
 8005050:	e02e      	b.n	80050b0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d101      	bne.n	800505e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e029      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800505e:	4b18      	ldr	r3, [pc, #96]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	429a      	cmp	r2, r3
 8005070:	d11c      	bne.n	80050ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800507c:	429a      	cmp	r2, r3
 800507e:	d115      	bne.n	80050ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005086:	4013      	ands	r3, r2
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800508c:	4293      	cmp	r3, r2
 800508e:	d10d      	bne.n	80050ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800509a:	429a      	cmp	r2, r3
 800509c:	d106      	bne.n	80050ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d001      	beq.n	80050b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e000      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40007000 	.word	0x40007000
 80050c0:	40023800 	.word	0x40023800
 80050c4:	42470060 	.word	0x42470060

080050c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e0cc      	b.n	8005276 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050dc:	4b68      	ldr	r3, [pc, #416]	; (8005280 <HAL_RCC_ClockConfig+0x1b8>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 030f 	and.w	r3, r3, #15
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d90c      	bls.n	8005104 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ea:	4b65      	ldr	r3, [pc, #404]	; (8005280 <HAL_RCC_ClockConfig+0x1b8>)
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f2:	4b63      	ldr	r3, [pc, #396]	; (8005280 <HAL_RCC_ClockConfig+0x1b8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d001      	beq.n	8005104 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e0b8      	b.n	8005276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d020      	beq.n	8005152 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b00      	cmp	r3, #0
 800511a:	d005      	beq.n	8005128 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800511c:	4b59      	ldr	r3, [pc, #356]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	4a58      	ldr	r2, [pc, #352]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 8005122:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005126:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0308 	and.w	r3, r3, #8
 8005130:	2b00      	cmp	r3, #0
 8005132:	d005      	beq.n	8005140 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005134:	4b53      	ldr	r3, [pc, #332]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	4a52      	ldr	r2, [pc, #328]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 800513a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800513e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005140:	4b50      	ldr	r3, [pc, #320]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	494d      	ldr	r1, [pc, #308]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	4313      	orrs	r3, r2
 8005150:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d044      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d107      	bne.n	8005176 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005166:	4b47      	ldr	r3, [pc, #284]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d119      	bne.n	80051a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e07f      	b.n	8005276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	2b02      	cmp	r3, #2
 800517c:	d003      	beq.n	8005186 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005182:	2b03      	cmp	r3, #3
 8005184:	d107      	bne.n	8005196 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005186:	4b3f      	ldr	r3, [pc, #252]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d109      	bne.n	80051a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e06f      	b.n	8005276 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005196:	4b3b      	ldr	r3, [pc, #236]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e067      	b.n	8005276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051a6:	4b37      	ldr	r3, [pc, #220]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f023 0203 	bic.w	r2, r3, #3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	4934      	ldr	r1, [pc, #208]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051b8:	f7fd ffec 	bl	8003194 <HAL_GetTick>
 80051bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051be:	e00a      	b.n	80051d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051c0:	f7fd ffe8 	bl	8003194 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e04f      	b.n	8005276 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051d6:	4b2b      	ldr	r3, [pc, #172]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 020c 	and.w	r2, r3, #12
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d1eb      	bne.n	80051c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051e8:	4b25      	ldr	r3, [pc, #148]	; (8005280 <HAL_RCC_ClockConfig+0x1b8>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 030f 	and.w	r3, r3, #15
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d20c      	bcs.n	8005210 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051f6:	4b22      	ldr	r3, [pc, #136]	; (8005280 <HAL_RCC_ClockConfig+0x1b8>)
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051fe:	4b20      	ldr	r3, [pc, #128]	; (8005280 <HAL_RCC_ClockConfig+0x1b8>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 030f 	and.w	r3, r3, #15
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	429a      	cmp	r2, r3
 800520a:	d001      	beq.n	8005210 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e032      	b.n	8005276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	d008      	beq.n	800522e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800521c:	4b19      	ldr	r3, [pc, #100]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	4916      	ldr	r1, [pc, #88]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 800522a:	4313      	orrs	r3, r2
 800522c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	2b00      	cmp	r3, #0
 8005238:	d009      	beq.n	800524e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800523a:	4b12      	ldr	r3, [pc, #72]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	490e      	ldr	r1, [pc, #56]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 800524a:	4313      	orrs	r3, r2
 800524c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800524e:	f000 f821 	bl	8005294 <HAL_RCC_GetSysClockFreq>
 8005252:	4601      	mov	r1, r0
 8005254:	4b0b      	ldr	r3, [pc, #44]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	091b      	lsrs	r3, r3, #4
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	4a0a      	ldr	r2, [pc, #40]	; (8005288 <HAL_RCC_ClockConfig+0x1c0>)
 8005260:	5cd3      	ldrb	r3, [r2, r3]
 8005262:	fa21 f303 	lsr.w	r3, r1, r3
 8005266:	4a09      	ldr	r2, [pc, #36]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 8005268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800526a:	4b09      	ldr	r3, [pc, #36]	; (8005290 <HAL_RCC_ClockConfig+0x1c8>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4618      	mov	r0, r3
 8005270:	f7fd ff4c 	bl	800310c <HAL_InitTick>

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	40023c00 	.word	0x40023c00
 8005284:	40023800 	.word	0x40023800
 8005288:	08009130 	.word	0x08009130
 800528c:	20000044 	.word	0x20000044
 8005290:	20000048 	.word	0x20000048

08005294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	607b      	str	r3, [r7, #4]
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	2300      	movs	r3, #0
 80052a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052aa:	4b50      	ldr	r3, [pc, #320]	; (80053ec <HAL_RCC_GetSysClockFreq+0x158>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 030c 	and.w	r3, r3, #12
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d007      	beq.n	80052c6 <HAL_RCC_GetSysClockFreq+0x32>
 80052b6:	2b08      	cmp	r3, #8
 80052b8:	d008      	beq.n	80052cc <HAL_RCC_GetSysClockFreq+0x38>
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f040 808d 	bne.w	80053da <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052c0:	4b4b      	ldr	r3, [pc, #300]	; (80053f0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80052c2:	60bb      	str	r3, [r7, #8]
       break;
 80052c4:	e08c      	b.n	80053e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052c6:	4b4b      	ldr	r3, [pc, #300]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80052c8:	60bb      	str	r3, [r7, #8]
      break;
 80052ca:	e089      	b.n	80053e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052cc:	4b47      	ldr	r3, [pc, #284]	; (80053ec <HAL_RCC_GetSysClockFreq+0x158>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052d6:	4b45      	ldr	r3, [pc, #276]	; (80053ec <HAL_RCC_GetSysClockFreq+0x158>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d023      	beq.n	800532a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052e2:	4b42      	ldr	r3, [pc, #264]	; (80053ec <HAL_RCC_GetSysClockFreq+0x158>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	099b      	lsrs	r3, r3, #6
 80052e8:	f04f 0400 	mov.w	r4, #0
 80052ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80052f0:	f04f 0200 	mov.w	r2, #0
 80052f4:	ea03 0501 	and.w	r5, r3, r1
 80052f8:	ea04 0602 	and.w	r6, r4, r2
 80052fc:	4a3d      	ldr	r2, [pc, #244]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80052fe:	fb02 f106 	mul.w	r1, r2, r6
 8005302:	2200      	movs	r2, #0
 8005304:	fb02 f205 	mul.w	r2, r2, r5
 8005308:	440a      	add	r2, r1
 800530a:	493a      	ldr	r1, [pc, #232]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x160>)
 800530c:	fba5 0101 	umull	r0, r1, r5, r1
 8005310:	1853      	adds	r3, r2, r1
 8005312:	4619      	mov	r1, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f04f 0400 	mov.w	r4, #0
 800531a:	461a      	mov	r2, r3
 800531c:	4623      	mov	r3, r4
 800531e:	f7fa ff65 	bl	80001ec <__aeabi_uldivmod>
 8005322:	4603      	mov	r3, r0
 8005324:	460c      	mov	r4, r1
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	e049      	b.n	80053be <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800532a:	4b30      	ldr	r3, [pc, #192]	; (80053ec <HAL_RCC_GetSysClockFreq+0x158>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	099b      	lsrs	r3, r3, #6
 8005330:	f04f 0400 	mov.w	r4, #0
 8005334:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005338:	f04f 0200 	mov.w	r2, #0
 800533c:	ea03 0501 	and.w	r5, r3, r1
 8005340:	ea04 0602 	and.w	r6, r4, r2
 8005344:	4629      	mov	r1, r5
 8005346:	4632      	mov	r2, r6
 8005348:	f04f 0300 	mov.w	r3, #0
 800534c:	f04f 0400 	mov.w	r4, #0
 8005350:	0154      	lsls	r4, r2, #5
 8005352:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005356:	014b      	lsls	r3, r1, #5
 8005358:	4619      	mov	r1, r3
 800535a:	4622      	mov	r2, r4
 800535c:	1b49      	subs	r1, r1, r5
 800535e:	eb62 0206 	sbc.w	r2, r2, r6
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	f04f 0400 	mov.w	r4, #0
 800536a:	0194      	lsls	r4, r2, #6
 800536c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005370:	018b      	lsls	r3, r1, #6
 8005372:	1a5b      	subs	r3, r3, r1
 8005374:	eb64 0402 	sbc.w	r4, r4, r2
 8005378:	f04f 0100 	mov.w	r1, #0
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	00e2      	lsls	r2, r4, #3
 8005382:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005386:	00d9      	lsls	r1, r3, #3
 8005388:	460b      	mov	r3, r1
 800538a:	4614      	mov	r4, r2
 800538c:	195b      	adds	r3, r3, r5
 800538e:	eb44 0406 	adc.w	r4, r4, r6
 8005392:	f04f 0100 	mov.w	r1, #0
 8005396:	f04f 0200 	mov.w	r2, #0
 800539a:	02a2      	lsls	r2, r4, #10
 800539c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80053a0:	0299      	lsls	r1, r3, #10
 80053a2:	460b      	mov	r3, r1
 80053a4:	4614      	mov	r4, r2
 80053a6:	4618      	mov	r0, r3
 80053a8:	4621      	mov	r1, r4
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f04f 0400 	mov.w	r4, #0
 80053b0:	461a      	mov	r2, r3
 80053b2:	4623      	mov	r3, r4
 80053b4:	f7fa ff1a 	bl	80001ec <__aeabi_uldivmod>
 80053b8:	4603      	mov	r3, r0
 80053ba:	460c      	mov	r4, r1
 80053bc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053be:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <HAL_RCC_GetSysClockFreq+0x158>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	0c1b      	lsrs	r3, r3, #16
 80053c4:	f003 0303 	and.w	r3, r3, #3
 80053c8:	3301      	adds	r3, #1
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d6:	60bb      	str	r3, [r7, #8]
      break;
 80053d8:	e002      	b.n	80053e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053da:	4b05      	ldr	r3, [pc, #20]	; (80053f0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80053dc:	60bb      	str	r3, [r7, #8]
      break;
 80053de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053e0:	68bb      	ldr	r3, [r7, #8]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053ea:	bf00      	nop
 80053ec:	40023800 	.word	0x40023800
 80053f0:	00f42400 	.word	0x00f42400
 80053f4:	017d7840 	.word	0x017d7840

080053f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053fc:	4b03      	ldr	r3, [pc, #12]	; (800540c <HAL_RCC_GetHCLKFreq+0x14>)
 80053fe:	681b      	ldr	r3, [r3, #0]
}
 8005400:	4618      	mov	r0, r3
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	20000044 	.word	0x20000044

08005410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005414:	f7ff fff0 	bl	80053f8 <HAL_RCC_GetHCLKFreq>
 8005418:	4601      	mov	r1, r0
 800541a:	4b05      	ldr	r3, [pc, #20]	; (8005430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	0a9b      	lsrs	r3, r3, #10
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	4a03      	ldr	r2, [pc, #12]	; (8005434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005426:	5cd3      	ldrb	r3, [r2, r3]
 8005428:	fa21 f303 	lsr.w	r3, r1, r3
}
 800542c:	4618      	mov	r0, r3
 800542e:	bd80      	pop	{r7, pc}
 8005430:	40023800 	.word	0x40023800
 8005434:	08009140 	.word	0x08009140

08005438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800543c:	f7ff ffdc 	bl	80053f8 <HAL_RCC_GetHCLKFreq>
 8005440:	4601      	mov	r1, r0
 8005442:	4b05      	ldr	r3, [pc, #20]	; (8005458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	0b5b      	lsrs	r3, r3, #13
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	4a03      	ldr	r2, [pc, #12]	; (800545c <HAL_RCC_GetPCLK2Freq+0x24>)
 800544e:	5cd3      	ldrb	r3, [r2, r3]
 8005450:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005454:	4618      	mov	r0, r3
 8005456:	bd80      	pop	{r7, pc}
 8005458:	40023800 	.word	0x40023800
 800545c:	08009140 	.word	0x08009140

08005460 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10b      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005484:	2b00      	cmp	r3, #0
 8005486:	d105      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005490:	2b00      	cmp	r3, #0
 8005492:	d075      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005494:	4bad      	ldr	r3, [pc, #692]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005496:	2200      	movs	r2, #0
 8005498:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800549a:	f7fd fe7b 	bl	8003194 <HAL_GetTick>
 800549e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054a0:	e008      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80054a2:	f7fd fe77 	bl	8003194 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e18b      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054b4:	4ba6      	ldr	r3, [pc, #664]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1f0      	bne.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d009      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	019a      	lsls	r2, r3, #6
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	071b      	lsls	r3, r3, #28
 80054d8:	499d      	ldr	r1, [pc, #628]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d01f      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80054ec:	4b98      	ldr	r3, [pc, #608]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054f2:	0f1b      	lsrs	r3, r3, #28
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	019a      	lsls	r2, r3, #6
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	061b      	lsls	r3, r3, #24
 8005506:	431a      	orrs	r2, r3
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	071b      	lsls	r3, r3, #28
 800550c:	4990      	ldr	r1, [pc, #576]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800550e:	4313      	orrs	r3, r2
 8005510:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005514:	4b8e      	ldr	r3, [pc, #568]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005516:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800551a:	f023 021f 	bic.w	r2, r3, #31
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	3b01      	subs	r3, #1
 8005524:	498a      	ldr	r1, [pc, #552]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005526:	4313      	orrs	r3, r2
 8005528:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00d      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	019a      	lsls	r2, r3, #6
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	061b      	lsls	r3, r3, #24
 8005544:	431a      	orrs	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	071b      	lsls	r3, r3, #28
 800554c:	4980      	ldr	r1, [pc, #512]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800554e:	4313      	orrs	r3, r2
 8005550:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005554:	4b7d      	ldr	r3, [pc, #500]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005556:	2201      	movs	r2, #1
 8005558:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800555a:	f7fd fe1b 	bl	8003194 <HAL_GetTick>
 800555e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005560:	e008      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005562:	f7fd fe17 	bl	8003194 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d901      	bls.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e12b      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005574:	4b76      	ldr	r3, [pc, #472]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0f0      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b00      	cmp	r3, #0
 800558a:	d105      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005594:	2b00      	cmp	r3, #0
 8005596:	d079      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005598:	4b6e      	ldr	r3, [pc, #440]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800559e:	f7fd fdf9 	bl	8003194 <HAL_GetTick>
 80055a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055a4:	e008      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80055a6:	f7fd fdf5 	bl	8003194 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d901      	bls.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e109      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055b8:	4b65      	ldr	r3, [pc, #404]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055c4:	d0ef      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0304 	and.w	r3, r3, #4
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d020      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80055d2:	4b5f      	ldr	r3, [pc, #380]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d8:	0f1b      	lsrs	r3, r3, #28
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	019a      	lsls	r2, r3, #6
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	061b      	lsls	r3, r3, #24
 80055ec:	431a      	orrs	r2, r3
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	071b      	lsls	r3, r3, #28
 80055f2:	4957      	ldr	r1, [pc, #348]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80055fa:	4b55      	ldr	r3, [pc, #340]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005600:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a1b      	ldr	r3, [r3, #32]
 8005608:	3b01      	subs	r3, #1
 800560a:	021b      	lsls	r3, r3, #8
 800560c:	4950      	ldr	r1, [pc, #320]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0308 	and.w	r3, r3, #8
 800561c:	2b00      	cmp	r3, #0
 800561e:	d01e      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005620:	4b4b      	ldr	r3, [pc, #300]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005626:	0e1b      	lsrs	r3, r3, #24
 8005628:	f003 030f 	and.w	r3, r3, #15
 800562c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	019a      	lsls	r2, r3, #6
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	061b      	lsls	r3, r3, #24
 8005638:	431a      	orrs	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	071b      	lsls	r3, r3, #28
 8005640:	4943      	ldr	r1, [pc, #268]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005642:	4313      	orrs	r3, r2
 8005644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005648:	4b41      	ldr	r3, [pc, #260]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800564a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800564e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	493e      	ldr	r1, [pc, #248]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005658:	4313      	orrs	r3, r2
 800565a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800565e:	4b3d      	ldr	r3, [pc, #244]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005660:	2201      	movs	r2, #1
 8005662:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005664:	f7fd fd96 	bl	8003194 <HAL_GetTick>
 8005668:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800566a:	e008      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800566c:	f7fd fd92 	bl	8003194 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e0a6      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800567e:	4b34      	ldr	r3, [pc, #208]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800568a:	d1ef      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0320 	and.w	r3, r3, #32
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 808d 	beq.w	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800569a:	2300      	movs	r3, #0
 800569c:	60fb      	str	r3, [r7, #12]
 800569e:	4b2c      	ldr	r3, [pc, #176]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	4a2b      	ldr	r2, [pc, #172]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a8:	6413      	str	r3, [r2, #64]	; 0x40
 80056aa:	4b29      	ldr	r3, [pc, #164]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80056b6:	4b28      	ldr	r3, [pc, #160]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a27      	ldr	r2, [pc, #156]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80056bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056c2:	f7fd fd67 	bl	8003194 <HAL_GetTick>
 80056c6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80056c8:	e008      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80056ca:	f7fd fd63 	bl	8003194 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d901      	bls.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e077      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80056dc:	4b1e      	ldr	r3, [pc, #120]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0f0      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056e8:	4b19      	ldr	r3, [pc, #100]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d039      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	429a      	cmp	r2, r3
 8005704:	d032      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005706:	4b12      	ldr	r3, [pc, #72]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800570e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005710:	4b12      	ldr	r3, [pc, #72]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005712:	2201      	movs	r2, #1
 8005714:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005716:	4b11      	ldr	r3, [pc, #68]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005718:	2200      	movs	r2, #0
 800571a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800571c:	4a0c      	ldr	r2, [pc, #48]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005722:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b01      	cmp	r3, #1
 800572c:	d11e      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800572e:	f7fd fd31 	bl	8003194 <HAL_GetTick>
 8005732:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005734:	e014      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005736:	f7fd fd2d 	bl	8003194 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	f241 3288 	movw	r2, #5000	; 0x1388
 8005744:	4293      	cmp	r3, r2
 8005746:	d90b      	bls.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e03f      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800574c:	42470068 	.word	0x42470068
 8005750:	40023800 	.word	0x40023800
 8005754:	42470070 	.word	0x42470070
 8005758:	40007000 	.word	0x40007000
 800575c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005760:	4b1c      	ldr	r3, [pc, #112]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0e4      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005774:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005778:	d10d      	bne.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800577a:	4b16      	ldr	r3, [pc, #88]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005786:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800578a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800578e:	4911      	ldr	r1, [pc, #68]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005790:	4313      	orrs	r3, r2
 8005792:	608b      	str	r3, [r1, #8]
 8005794:	e005      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005796:	4b0f      	ldr	r3, [pc, #60]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	4a0e      	ldr	r2, [pc, #56]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800579c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80057a0:	6093      	str	r3, [r2, #8]
 80057a2:	4b0c      	ldr	r3, [pc, #48]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ae:	4909      	ldr	r1, [pc, #36]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0310 	and.w	r3, r3, #16
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d004      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80057c6:	4b04      	ldr	r3, [pc, #16]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80057c8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	40023800 	.word	0x40023800
 80057d8:	424711e0 	.word	0x424711e0

080057dc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e025      	b.n	800583c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d106      	bne.n	800580a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7fd fb85 	bl	8002f14 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2202      	movs	r2, #2
 800580e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	3304      	adds	r3, #4
 800581a:	4619      	mov	r1, r3
 800581c:	4610      	mov	r0, r2
 800581e:	f001 fc47 	bl	80070b0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	461a      	mov	r2, r3
 800582c:	6839      	ldr	r1, [r7, #0]
 800582e:	f001 fcb2 	bl	8007196 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d101      	bne.n	8005860 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800585c:	2302      	movs	r3, #2
 800585e:	e018      	b.n	8005892 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	68b9      	ldr	r1, [r7, #8]
 8005870:	4618      	mov	r0, r3
 8005872:	f001 fd0f 	bl	8007294 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d104      	bne.n	8005888 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2205      	movs	r2, #5
 8005882:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005886:	e003      	b.n	8005890 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b082      	sub	sp, #8
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d101      	bne.n	80058b4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80058b0:	2302      	movs	r3, #2
 80058b2:	e00e      	b.n	80058d2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6839      	ldr	r1, [r7, #0]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f001 fd22 	bl	800730c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b082      	sub	sp, #8
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e056      	b.n	800599a <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fd f99c 	bl	8002c44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005922:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	431a      	orrs	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	431a      	orrs	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005948:	431a      	orrs	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	431a      	orrs	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	ea42 0103 	orr.w	r1, r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	0c1b      	lsrs	r3, r3, #16
 800596a:	f003 0104 	and.w	r1, r3, #4
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69da      	ldr	r2, [r3, #28]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005988:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b082      	sub	sp, #8
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e01a      	b.n	80059ea <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059ca:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7fd f981 	bl	8002cd4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b088      	sub	sp, #32
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	603b      	str	r3, [r7, #0]
 80059fe:	4613      	mov	r3, r2
 8005a00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_SPI_Transmit+0x22>
 8005a10:	2302      	movs	r3, #2
 8005a12:	e11e      	b.n	8005c52 <HAL_SPI_Transmit+0x260>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a1c:	f7fd fbba 	bl	8003194 <HAL_GetTick>
 8005a20:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a22:	88fb      	ldrh	r3, [r7, #6]
 8005a24:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d002      	beq.n	8005a38 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005a32:	2302      	movs	r3, #2
 8005a34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a36:	e103      	b.n	8005c40 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <HAL_SPI_Transmit+0x52>
 8005a3e:	88fb      	ldrh	r3, [r7, #6]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d102      	bne.n	8005a4a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a48:	e0fa      	b.n	8005c40 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2203      	movs	r2, #3
 8005a4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	88fa      	ldrh	r2, [r7, #6]
 8005a62:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	88fa      	ldrh	r2, [r7, #6]
 8005a68:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a90:	d107      	bne.n	8005aa2 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005aa0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aac:	2b40      	cmp	r3, #64	; 0x40
 8005aae:	d007      	beq.n	8005ac0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005abe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ac8:	d14b      	bne.n	8005b62 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d002      	beq.n	8005ad8 <HAL_SPI_Transmit+0xe6>
 8005ad2:	8afb      	ldrh	r3, [r7, #22]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d13e      	bne.n	8005b56 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005adc:	881a      	ldrh	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae8:	1c9a      	adds	r2, r3, #2
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	3b01      	subs	r3, #1
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005afc:	e02b      	b.n	8005b56 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d112      	bne.n	8005b32 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b10:	881a      	ldrh	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1c:	1c9a      	adds	r2, r3, #2
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b30:	e011      	b.n	8005b56 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b32:	f7fd fb2f 	bl	8003194 <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d803      	bhi.n	8005b4a <HAL_SPI_Transmit+0x158>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b48:	d102      	bne.n	8005b50 <HAL_SPI_Transmit+0x15e>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d102      	bne.n	8005b56 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b54:	e074      	b.n	8005c40 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1ce      	bne.n	8005afe <HAL_SPI_Transmit+0x10c>
 8005b60:	e04c      	b.n	8005bfc <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <HAL_SPI_Transmit+0x17e>
 8005b6a:	8afb      	ldrh	r3, [r7, #22]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d140      	bne.n	8005bf2 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	330c      	adds	r3, #12
 8005b7a:	7812      	ldrb	r2, [r2, #0]
 8005b7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b96:	e02c      	b.n	8005bf2 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d113      	bne.n	8005bce <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	330c      	adds	r3, #12
 8005bb0:	7812      	ldrb	r2, [r2, #0]
 8005bb2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb8:	1c5a      	adds	r2, r3, #1
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	86da      	strh	r2, [r3, #54]	; 0x36
 8005bcc:	e011      	b.n	8005bf2 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bce:	f7fd fae1 	bl	8003194 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d803      	bhi.n	8005be6 <HAL_SPI_Transmit+0x1f4>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be4:	d102      	bne.n	8005bec <HAL_SPI_Transmit+0x1fa>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d102      	bne.n	8005bf2 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005bf0:	e026      	b.n	8005c40 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1cd      	bne.n	8005b98 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	6839      	ldr	r1, [r7, #0]
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 fbb3 	bl	800636c <SPI_EndRxTxTransaction>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10a      	bne.n	8005c30 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	613b      	str	r3, [r7, #16]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	613b      	str	r3, [r7, #16]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	77fb      	strb	r3, [r7, #31]
 8005c3c:	e000      	b.n	8005c40 <HAL_SPI_Transmit+0x24e>
  }

error:
 8005c3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c50:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3720      	adds	r7, #32
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b088      	sub	sp, #32
 8005c5e:	af02      	add	r7, sp, #8
 8005c60:	60f8      	str	r0, [r7, #12]
 8005c62:	60b9      	str	r1, [r7, #8]
 8005c64:	603b      	str	r3, [r7, #0]
 8005c66:	4613      	mov	r3, r2
 8005c68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c76:	d112      	bne.n	8005c9e <HAL_SPI_Receive+0x44>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10e      	bne.n	8005c9e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2204      	movs	r2, #4
 8005c84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c88:	88fa      	ldrh	r2, [r7, #6]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	68b9      	ldr	r1, [r7, #8]
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 f8e9 	bl	8005e6c <HAL_SPI_TransmitReceive>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	e0e2      	b.n	8005e64 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d101      	bne.n	8005cac <HAL_SPI_Receive+0x52>
 8005ca8:	2302      	movs	r3, #2
 8005caa:	e0db      	b.n	8005e64 <HAL_SPI_Receive+0x20a>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cb4:	f7fd fa6e 	bl	8003194 <HAL_GetTick>
 8005cb8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d002      	beq.n	8005ccc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cca:	e0c2      	b.n	8005e52 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <HAL_SPI_Receive+0x7e>
 8005cd2:	88fb      	ldrh	r3, [r7, #6]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d102      	bne.n	8005cde <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cdc:	e0b9      	b.n	8005e52 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2204      	movs	r2, #4
 8005ce2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	88fa      	ldrh	r2, [r7, #6]
 8005cf6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	88fa      	ldrh	r2, [r7, #6]
 8005cfc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d24:	d107      	bne.n	8005d36 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d34:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d40:	2b40      	cmp	r3, #64	; 0x40
 8005d42:	d007      	beq.n	8005d54 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d52:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d162      	bne.n	8005e22 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d5c:	e02e      	b.n	8005dbc <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d115      	bne.n	8005d98 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f103 020c 	add.w	r2, r3, #12
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	7812      	ldrb	r2, [r2, #0]
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d96:	e011      	b.n	8005dbc <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d98:	f7fd f9fc 	bl	8003194 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d803      	bhi.n	8005db0 <HAL_SPI_Receive+0x156>
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dae:	d102      	bne.n	8005db6 <HAL_SPI_Receive+0x15c>
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d102      	bne.n	8005dbc <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005dba:	e04a      	b.n	8005e52 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1cb      	bne.n	8005d5e <HAL_SPI_Receive+0x104>
 8005dc6:	e031      	b.n	8005e2c <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d113      	bne.n	8005dfe <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68da      	ldr	r2, [r3, #12]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de0:	b292      	uxth	r2, r2
 8005de2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de8:	1c9a      	adds	r2, r3, #2
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	3b01      	subs	r3, #1
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dfc:	e011      	b.n	8005e22 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dfe:	f7fd f9c9 	bl	8003194 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d803      	bhi.n	8005e16 <HAL_SPI_Receive+0x1bc>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e14:	d102      	bne.n	8005e1c <HAL_SPI_Receive+0x1c2>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d102      	bne.n	8005e22 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005e20:	e017      	b.n	8005e52 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1cd      	bne.n	8005dc8 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	6839      	ldr	r1, [r7, #0]
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 fa35 	bl	80062a0 <SPI_EndRxTransaction>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	75fb      	strb	r3, [r7, #23]
 8005e4e:	e000      	b.n	8005e52 <HAL_SPI_Receive+0x1f8>
  }

error :
 8005e50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3718      	adds	r7, #24
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08c      	sub	sp, #48	; 0x30
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d101      	bne.n	8005e92 <HAL_SPI_TransmitReceive+0x26>
 8005e8e:	2302      	movs	r3, #2
 8005e90:	e18a      	b.n	80061a8 <HAL_SPI_TransmitReceive+0x33c>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e9a:	f7fd f97b 	bl	8003194 <HAL_GetTick>
 8005e9e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005eb0:	887b      	ldrh	r3, [r7, #2]
 8005eb2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005eb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d00f      	beq.n	8005edc <HAL_SPI_TransmitReceive+0x70>
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ec2:	d107      	bne.n	8005ed4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d103      	bne.n	8005ed4 <HAL_SPI_TransmitReceive+0x68>
 8005ecc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	d003      	beq.n	8005edc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005eda:	e15b      	b.n	8006194 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d005      	beq.n	8005eee <HAL_SPI_TransmitReceive+0x82>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <HAL_SPI_TransmitReceive+0x82>
 8005ee8:	887b      	ldrh	r3, [r7, #2]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d103      	bne.n	8005ef6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ef4:	e14e      	b.n	8006194 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b04      	cmp	r3, #4
 8005f00:	d003      	beq.n	8005f0a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2205      	movs	r2, #5
 8005f06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	887a      	ldrh	r2, [r7, #2]
 8005f1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	887a      	ldrh	r2, [r7, #2]
 8005f20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	887a      	ldrh	r2, [r7, #2]
 8005f2c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	887a      	ldrh	r2, [r7, #2]
 8005f32:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4a:	2b40      	cmp	r3, #64	; 0x40
 8005f4c:	d007      	beq.n	8005f5e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f66:	d178      	bne.n	800605a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <HAL_SPI_TransmitReceive+0x10a>
 8005f70:	8b7b      	ldrh	r3, [r7, #26]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d166      	bne.n	8006044 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7a:	881a      	ldrh	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f86:	1c9a      	adds	r2, r3, #2
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	3b01      	subs	r3, #1
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f9a:	e053      	b.n	8006044 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d11b      	bne.n	8005fe2 <HAL_SPI_TransmitReceive+0x176>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d016      	beq.n	8005fe2 <HAL_SPI_TransmitReceive+0x176>
 8005fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d113      	bne.n	8005fe2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbe:	881a      	ldrh	r2, [r3, #0]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fca:	1c9a      	adds	r2, r3, #2
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d119      	bne.n	8006024 <HAL_SPI_TransmitReceive+0x1b8>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d014      	beq.n	8006024 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	b292      	uxth	r2, r2
 8006006:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600c:	1c9a      	adds	r2, r3, #2
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006016:	b29b      	uxth	r3, r3
 8006018:	3b01      	subs	r3, #1
 800601a:	b29a      	uxth	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006020:	2301      	movs	r3, #1
 8006022:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006024:	f7fd f8b6 	bl	8003194 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006030:	429a      	cmp	r2, r3
 8006032:	d807      	bhi.n	8006044 <HAL_SPI_TransmitReceive+0x1d8>
 8006034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603a:	d003      	beq.n	8006044 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006042:	e0a7      	b.n	8006194 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006048:	b29b      	uxth	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1a6      	bne.n	8005f9c <HAL_SPI_TransmitReceive+0x130>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006052:	b29b      	uxth	r3, r3
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1a1      	bne.n	8005f9c <HAL_SPI_TransmitReceive+0x130>
 8006058:	e07c      	b.n	8006154 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <HAL_SPI_TransmitReceive+0x1fc>
 8006062:	8b7b      	ldrh	r3, [r7, #26]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d16b      	bne.n	8006140 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	330c      	adds	r3, #12
 8006072:	7812      	ldrb	r2, [r2, #0]
 8006074:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006084:	b29b      	uxth	r3, r3
 8006086:	3b01      	subs	r3, #1
 8006088:	b29a      	uxth	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800608e:	e057      	b.n	8006140 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b02      	cmp	r3, #2
 800609c:	d11c      	bne.n	80060d8 <HAL_SPI_TransmitReceive+0x26c>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d017      	beq.n	80060d8 <HAL_SPI_TransmitReceive+0x26c>
 80060a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d114      	bne.n	80060d8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	330c      	adds	r3, #12
 80060b8:	7812      	ldrb	r2, [r2, #0]
 80060ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c0:	1c5a      	adds	r2, r3, #1
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	3b01      	subs	r3, #1
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060d4:	2300      	movs	r3, #0
 80060d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d119      	bne.n	800611a <HAL_SPI_TransmitReceive+0x2ae>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d014      	beq.n	800611a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fa:	b2d2      	uxtb	r2, r2
 80060fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800610c:	b29b      	uxth	r3, r3
 800610e:	3b01      	subs	r3, #1
 8006110:	b29a      	uxth	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006116:	2301      	movs	r3, #1
 8006118:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800611a:	f7fd f83b 	bl	8003194 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006126:	429a      	cmp	r2, r3
 8006128:	d803      	bhi.n	8006132 <HAL_SPI_TransmitReceive+0x2c6>
 800612a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006130:	d102      	bne.n	8006138 <HAL_SPI_TransmitReceive+0x2cc>
 8006132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006134:	2b00      	cmp	r3, #0
 8006136:	d103      	bne.n	8006140 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800613e:	e029      	b.n	8006194 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006144:	b29b      	uxth	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1a2      	bne.n	8006090 <HAL_SPI_TransmitReceive+0x224>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800614e:	b29b      	uxth	r3, r3
 8006150:	2b00      	cmp	r3, #0
 8006152:	d19d      	bne.n	8006090 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006156:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f000 f907 	bl	800636c <SPI_EndRxTxTransaction>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d006      	beq.n	8006172 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2220      	movs	r2, #32
 800616e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006170:	e010      	b.n	8006194 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10b      	bne.n	8006192 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800617a:	2300      	movs	r3, #0
 800617c:	617b      	str	r3, [r7, #20]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	617b      	str	r3, [r7, #20]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	617b      	str	r3, [r7, #20]
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	e000      	b.n	8006194 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006192:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3730      	adds	r7, #48	; 0x30
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061be:	b2db      	uxtb	r3, r3
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	603b      	str	r3, [r7, #0]
 80061d8:	4613      	mov	r3, r2
 80061da:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061dc:	e04c      	b.n	8006278 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e4:	d048      	beq.n	8006278 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80061e6:	f7fc ffd5 	bl	8003194 <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d902      	bls.n	80061fc <SPI_WaitFlagStateUntilTimeout+0x30>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d13d      	bne.n	8006278 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800620a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006214:	d111      	bne.n	800623a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800621e:	d004      	beq.n	800622a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006228:	d107      	bne.n	800623a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006238:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006242:	d10f      	bne.n	8006264 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006262:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e00f      	b.n	8006298 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689a      	ldr	r2, [r3, #8]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	4013      	ands	r3, r2
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	429a      	cmp	r2, r3
 8006286:	bf0c      	ite	eq
 8006288:	2301      	moveq	r3, #1
 800628a:	2300      	movne	r3, #0
 800628c:	b2db      	uxtb	r3, r3
 800628e:	461a      	mov	r2, r3
 8006290:	79fb      	ldrb	r3, [r7, #7]
 8006292:	429a      	cmp	r2, r3
 8006294:	d1a3      	bne.n	80061de <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af02      	add	r7, sp, #8
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062b4:	d111      	bne.n	80062da <SPI_EndRxTransaction+0x3a>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062be:	d004      	beq.n	80062ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062c8:	d107      	bne.n	80062da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062e2:	d12a      	bne.n	800633a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062ec:	d012      	beq.n	8006314 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2200      	movs	r2, #0
 80062f6:	2180      	movs	r1, #128	; 0x80
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7ff ff67 	bl	80061cc <SPI_WaitFlagStateUntilTimeout>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d02d      	beq.n	8006360 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006308:	f043 0220 	orr.w	r2, r3, #32
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e026      	b.n	8006362 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2200      	movs	r2, #0
 800631c:	2101      	movs	r1, #1
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f7ff ff54 	bl	80061cc <SPI_WaitFlagStateUntilTimeout>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d01a      	beq.n	8006360 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632e:	f043 0220 	orr.w	r2, r3, #32
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e013      	b.n	8006362 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2200      	movs	r2, #0
 8006342:	2101      	movs	r1, #1
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f7ff ff41 	bl	80061cc <SPI_WaitFlagStateUntilTimeout>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d007      	beq.n	8006360 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006354:	f043 0220 	orr.w	r2, r3, #32
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e000      	b.n	8006362 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
	...

0800636c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b088      	sub	sp, #32
 8006370:	af02      	add	r7, sp, #8
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006378:	4b1b      	ldr	r3, [pc, #108]	; (80063e8 <SPI_EndRxTxTransaction+0x7c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a1b      	ldr	r2, [pc, #108]	; (80063ec <SPI_EndRxTxTransaction+0x80>)
 800637e:	fba2 2303 	umull	r2, r3, r2, r3
 8006382:	0d5b      	lsrs	r3, r3, #21
 8006384:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006388:	fb02 f303 	mul.w	r3, r2, r3
 800638c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006396:	d112      	bne.n	80063be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2200      	movs	r2, #0
 80063a0:	2180      	movs	r1, #128	; 0x80
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f7ff ff12 	bl	80061cc <SPI_WaitFlagStateUntilTimeout>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d016      	beq.n	80063dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b2:	f043 0220 	orr.w	r2, r3, #32
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e00f      	b.n	80063de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00a      	beq.n	80063da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d4:	2b80      	cmp	r3, #128	; 0x80
 80063d6:	d0f2      	beq.n	80063be <SPI_EndRxTxTransaction+0x52>
 80063d8:	e000      	b.n	80063dc <SPI_EndRxTxTransaction+0x70>
        break;
 80063da:	bf00      	nop
  }

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3718      	adds	r7, #24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	20000044 	.word	0x20000044
 80063ec:	165e9f81 	.word	0x165e9f81

080063f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e01d      	b.n	800643e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d106      	bne.n	800641c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7fc fc7a 	bl	8002d10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2202      	movs	r2, #2
 8006420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3304      	adds	r3, #4
 800642c:	4619      	mov	r1, r3
 800642e:	4610      	mov	r0, r2
 8006430:	f000 f944 	bl	80066bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b082      	sub	sp, #8
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b02      	cmp	r3, #2
 800645a:	d122      	bne.n	80064a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b02      	cmp	r3, #2
 8006468:	d11b      	bne.n	80064a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f06f 0202 	mvn.w	r2, #2
 8006472:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	f003 0303 	and.w	r3, r3, #3
 8006484:	2b00      	cmp	r3, #0
 8006486:	d003      	beq.n	8006490 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f8f8 	bl	800667e <HAL_TIM_IC_CaptureCallback>
 800648e:	e005      	b.n	800649c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f8ea 	bl	800666a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f8fb 	bl	8006692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	f003 0304 	and.w	r3, r3, #4
 80064ac:	2b04      	cmp	r3, #4
 80064ae:	d122      	bne.n	80064f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	f003 0304 	and.w	r3, r3, #4
 80064ba:	2b04      	cmp	r3, #4
 80064bc:	d11b      	bne.n	80064f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f06f 0204 	mvn.w	r2, #4
 80064c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d003      	beq.n	80064e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f8ce 	bl	800667e <HAL_TIM_IC_CaptureCallback>
 80064e2:	e005      	b.n	80064f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f8c0 	bl	800666a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f8d1 	bl	8006692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	f003 0308 	and.w	r3, r3, #8
 8006500:	2b08      	cmp	r3, #8
 8006502:	d122      	bne.n	800654a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f003 0308 	and.w	r3, r3, #8
 800650e:	2b08      	cmp	r3, #8
 8006510:	d11b      	bne.n	800654a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f06f 0208 	mvn.w	r2, #8
 800651a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2204      	movs	r2, #4
 8006520:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	f003 0303 	and.w	r3, r3, #3
 800652c:	2b00      	cmp	r3, #0
 800652e:	d003      	beq.n	8006538 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f8a4 	bl	800667e <HAL_TIM_IC_CaptureCallback>
 8006536:	e005      	b.n	8006544 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 f896 	bl	800666a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f8a7 	bl	8006692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	f003 0310 	and.w	r3, r3, #16
 8006554:	2b10      	cmp	r3, #16
 8006556:	d122      	bne.n	800659e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	f003 0310 	and.w	r3, r3, #16
 8006562:	2b10      	cmp	r3, #16
 8006564:	d11b      	bne.n	800659e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f06f 0210 	mvn.w	r2, #16
 800656e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2208      	movs	r2, #8
 8006574:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006580:	2b00      	cmp	r3, #0
 8006582:	d003      	beq.n	800658c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f87a 	bl	800667e <HAL_TIM_IC_CaptureCallback>
 800658a:	e005      	b.n	8006598 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f86c 	bl	800666a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f87d 	bl	8006692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d10e      	bne.n	80065ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d107      	bne.n	80065ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f06f 0201 	mvn.w	r2, #1
 80065c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f846 	bl	8006656 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d4:	2b80      	cmp	r3, #128	; 0x80
 80065d6:	d10e      	bne.n	80065f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e2:	2b80      	cmp	r3, #128	; 0x80
 80065e4:	d107      	bne.n	80065f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f989 	bl	8006908 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006600:	2b40      	cmp	r3, #64	; 0x40
 8006602:	d10e      	bne.n	8006622 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660e:	2b40      	cmp	r3, #64	; 0x40
 8006610:	d107      	bne.n	8006622 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800661a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f842 	bl	80066a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	f003 0320 	and.w	r3, r3, #32
 800662c:	2b20      	cmp	r3, #32
 800662e:	d10e      	bne.n	800664e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f003 0320 	and.w	r3, r3, #32
 800663a:	2b20      	cmp	r3, #32
 800663c:	d107      	bne.n	800664e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f06f 0220 	mvn.w	r2, #32
 8006646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f953 	bl	80068f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800664e:	bf00      	nop
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800665e:	bf00      	nop
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006672:	bf00      	nop
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800667e:	b480      	push	{r7}
 8006680:	b083      	sub	sp, #12
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006692:	b480      	push	{r7}
 8006694:	b083      	sub	sp, #12
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800669a:	bf00      	nop
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
	...

080066bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a40      	ldr	r2, [pc, #256]	; (80067d0 <TIM_Base_SetConfig+0x114>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d013      	beq.n	80066fc <TIM_Base_SetConfig+0x40>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066da:	d00f      	beq.n	80066fc <TIM_Base_SetConfig+0x40>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a3d      	ldr	r2, [pc, #244]	; (80067d4 <TIM_Base_SetConfig+0x118>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d00b      	beq.n	80066fc <TIM_Base_SetConfig+0x40>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a3c      	ldr	r2, [pc, #240]	; (80067d8 <TIM_Base_SetConfig+0x11c>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d007      	beq.n	80066fc <TIM_Base_SetConfig+0x40>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a3b      	ldr	r2, [pc, #236]	; (80067dc <TIM_Base_SetConfig+0x120>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d003      	beq.n	80066fc <TIM_Base_SetConfig+0x40>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a3a      	ldr	r2, [pc, #232]	; (80067e0 <TIM_Base_SetConfig+0x124>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d108      	bne.n	800670e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	4313      	orrs	r3, r2
 800670c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a2f      	ldr	r2, [pc, #188]	; (80067d0 <TIM_Base_SetConfig+0x114>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d02b      	beq.n	800676e <TIM_Base_SetConfig+0xb2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800671c:	d027      	beq.n	800676e <TIM_Base_SetConfig+0xb2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a2c      	ldr	r2, [pc, #176]	; (80067d4 <TIM_Base_SetConfig+0x118>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d023      	beq.n	800676e <TIM_Base_SetConfig+0xb2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a2b      	ldr	r2, [pc, #172]	; (80067d8 <TIM_Base_SetConfig+0x11c>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d01f      	beq.n	800676e <TIM_Base_SetConfig+0xb2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a2a      	ldr	r2, [pc, #168]	; (80067dc <TIM_Base_SetConfig+0x120>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d01b      	beq.n	800676e <TIM_Base_SetConfig+0xb2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a29      	ldr	r2, [pc, #164]	; (80067e0 <TIM_Base_SetConfig+0x124>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d017      	beq.n	800676e <TIM_Base_SetConfig+0xb2>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a28      	ldr	r2, [pc, #160]	; (80067e4 <TIM_Base_SetConfig+0x128>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d013      	beq.n	800676e <TIM_Base_SetConfig+0xb2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a27      	ldr	r2, [pc, #156]	; (80067e8 <TIM_Base_SetConfig+0x12c>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d00f      	beq.n	800676e <TIM_Base_SetConfig+0xb2>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a26      	ldr	r2, [pc, #152]	; (80067ec <TIM_Base_SetConfig+0x130>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d00b      	beq.n	800676e <TIM_Base_SetConfig+0xb2>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a25      	ldr	r2, [pc, #148]	; (80067f0 <TIM_Base_SetConfig+0x134>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d007      	beq.n	800676e <TIM_Base_SetConfig+0xb2>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a24      	ldr	r2, [pc, #144]	; (80067f4 <TIM_Base_SetConfig+0x138>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d003      	beq.n	800676e <TIM_Base_SetConfig+0xb2>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a23      	ldr	r2, [pc, #140]	; (80067f8 <TIM_Base_SetConfig+0x13c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d108      	bne.n	8006780 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	4313      	orrs	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	4313      	orrs	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	689a      	ldr	r2, [r3, #8]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a0a      	ldr	r2, [pc, #40]	; (80067d0 <TIM_Base_SetConfig+0x114>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d003      	beq.n	80067b4 <TIM_Base_SetConfig+0xf8>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a0c      	ldr	r2, [pc, #48]	; (80067e0 <TIM_Base_SetConfig+0x124>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d103      	bne.n	80067bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	691a      	ldr	r2, [r3, #16]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	615a      	str	r2, [r3, #20]
}
 80067c2:	bf00      	nop
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	40010000 	.word	0x40010000
 80067d4:	40000400 	.word	0x40000400
 80067d8:	40000800 	.word	0x40000800
 80067dc:	40000c00 	.word	0x40000c00
 80067e0:	40010400 	.word	0x40010400
 80067e4:	40014000 	.word	0x40014000
 80067e8:	40014400 	.word	0x40014400
 80067ec:	40014800 	.word	0x40014800
 80067f0:	40001800 	.word	0x40001800
 80067f4:	40001c00 	.word	0x40001c00
 80067f8:	40002000 	.word	0x40002000

080067fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800680c:	2b01      	cmp	r3, #1
 800680e:	d101      	bne.n	8006814 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006810:	2302      	movs	r3, #2
 8006812:	e05a      	b.n	80068ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	4313      	orrs	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a21      	ldr	r2, [pc, #132]	; (80068d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d022      	beq.n	800689e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006860:	d01d      	beq.n	800689e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a1d      	ldr	r2, [pc, #116]	; (80068dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d018      	beq.n	800689e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a1b      	ldr	r2, [pc, #108]	; (80068e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d013      	beq.n	800689e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a1a      	ldr	r2, [pc, #104]	; (80068e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d00e      	beq.n	800689e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a18      	ldr	r2, [pc, #96]	; (80068e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d009      	beq.n	800689e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a17      	ldr	r2, [pc, #92]	; (80068ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d004      	beq.n	800689e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a15      	ldr	r2, [pc, #84]	; (80068f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d10c      	bne.n	80068b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3714      	adds	r7, #20
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	40010000 	.word	0x40010000
 80068dc:	40000400 	.word	0x40000400
 80068e0:	40000800 	.word	0x40000800
 80068e4:	40000c00 	.word	0x40000c00
 80068e8:	40010400 	.word	0x40010400
 80068ec:	40014000 	.word	0x40014000
 80068f0:	40001800 	.word	0x40001800

080068f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e03f      	b.n	80069ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d106      	bne.n	8006948 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7fc fa0c 	bl	8002d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2224      	movs	r2, #36	; 0x24
 800694c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68da      	ldr	r2, [r3, #12]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800695e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 f829 	bl	80069b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	691a      	ldr	r2, [r3, #16]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006974:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	695a      	ldr	r2, [r3, #20]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006984:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68da      	ldr	r2, [r3, #12]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006994:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2220      	movs	r2, #32
 80069a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
	...

080069b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069bc:	b085      	sub	sp, #20
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	68da      	ldr	r2, [r3, #12]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	431a      	orrs	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	431a      	orrs	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80069fa:	f023 030c 	bic.w	r3, r3, #12
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6812      	ldr	r2, [r2, #0]
 8006a02:	68f9      	ldr	r1, [r7, #12]
 8006a04:	430b      	orrs	r3, r1
 8006a06:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	699a      	ldr	r2, [r3, #24]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	69db      	ldr	r3, [r3, #28]
 8006a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a26:	f040 818b 	bne.w	8006d40 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4ac1      	ldr	r2, [pc, #772]	; (8006d34 <UART_SetConfig+0x37c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d005      	beq.n	8006a40 <UART_SetConfig+0x88>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4abf      	ldr	r2, [pc, #764]	; (8006d38 <UART_SetConfig+0x380>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	f040 80bd 	bne.w	8006bba <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a40:	f7fe fcfa 	bl	8005438 <HAL_RCC_GetPCLK2Freq>
 8006a44:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	461d      	mov	r5, r3
 8006a4a:	f04f 0600 	mov.w	r6, #0
 8006a4e:	46a8      	mov	r8, r5
 8006a50:	46b1      	mov	r9, r6
 8006a52:	eb18 0308 	adds.w	r3, r8, r8
 8006a56:	eb49 0409 	adc.w	r4, r9, r9
 8006a5a:	4698      	mov	r8, r3
 8006a5c:	46a1      	mov	r9, r4
 8006a5e:	eb18 0805 	adds.w	r8, r8, r5
 8006a62:	eb49 0906 	adc.w	r9, r9, r6
 8006a66:	f04f 0100 	mov.w	r1, #0
 8006a6a:	f04f 0200 	mov.w	r2, #0
 8006a6e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a72:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006a76:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006a7a:	4688      	mov	r8, r1
 8006a7c:	4691      	mov	r9, r2
 8006a7e:	eb18 0005 	adds.w	r0, r8, r5
 8006a82:	eb49 0106 	adc.w	r1, r9, r6
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	461d      	mov	r5, r3
 8006a8c:	f04f 0600 	mov.w	r6, #0
 8006a90:	196b      	adds	r3, r5, r5
 8006a92:	eb46 0406 	adc.w	r4, r6, r6
 8006a96:	461a      	mov	r2, r3
 8006a98:	4623      	mov	r3, r4
 8006a9a:	f7f9 fba7 	bl	80001ec <__aeabi_uldivmod>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	4ba5      	ldr	r3, [pc, #660]	; (8006d3c <UART_SetConfig+0x384>)
 8006aa6:	fba3 2302 	umull	r2, r3, r3, r2
 8006aaa:	095b      	lsrs	r3, r3, #5
 8006aac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	461d      	mov	r5, r3
 8006ab4:	f04f 0600 	mov.w	r6, #0
 8006ab8:	46a9      	mov	r9, r5
 8006aba:	46b2      	mov	sl, r6
 8006abc:	eb19 0309 	adds.w	r3, r9, r9
 8006ac0:	eb4a 040a 	adc.w	r4, sl, sl
 8006ac4:	4699      	mov	r9, r3
 8006ac6:	46a2      	mov	sl, r4
 8006ac8:	eb19 0905 	adds.w	r9, r9, r5
 8006acc:	eb4a 0a06 	adc.w	sl, sl, r6
 8006ad0:	f04f 0100 	mov.w	r1, #0
 8006ad4:	f04f 0200 	mov.w	r2, #0
 8006ad8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006adc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ae0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ae4:	4689      	mov	r9, r1
 8006ae6:	4692      	mov	sl, r2
 8006ae8:	eb19 0005 	adds.w	r0, r9, r5
 8006aec:	eb4a 0106 	adc.w	r1, sl, r6
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	461d      	mov	r5, r3
 8006af6:	f04f 0600 	mov.w	r6, #0
 8006afa:	196b      	adds	r3, r5, r5
 8006afc:	eb46 0406 	adc.w	r4, r6, r6
 8006b00:	461a      	mov	r2, r3
 8006b02:	4623      	mov	r3, r4
 8006b04:	f7f9 fb72 	bl	80001ec <__aeabi_uldivmod>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	460c      	mov	r4, r1
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	4b8b      	ldr	r3, [pc, #556]	; (8006d3c <UART_SetConfig+0x384>)
 8006b10:	fba3 1302 	umull	r1, r3, r3, r2
 8006b14:	095b      	lsrs	r3, r3, #5
 8006b16:	2164      	movs	r1, #100	; 0x64
 8006b18:	fb01 f303 	mul.w	r3, r1, r3
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	3332      	adds	r3, #50	; 0x32
 8006b22:	4a86      	ldr	r2, [pc, #536]	; (8006d3c <UART_SetConfig+0x384>)
 8006b24:	fba2 2303 	umull	r2, r3, r2, r3
 8006b28:	095b      	lsrs	r3, r3, #5
 8006b2a:	005b      	lsls	r3, r3, #1
 8006b2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b30:	4498      	add	r8, r3
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	461d      	mov	r5, r3
 8006b36:	f04f 0600 	mov.w	r6, #0
 8006b3a:	46a9      	mov	r9, r5
 8006b3c:	46b2      	mov	sl, r6
 8006b3e:	eb19 0309 	adds.w	r3, r9, r9
 8006b42:	eb4a 040a 	adc.w	r4, sl, sl
 8006b46:	4699      	mov	r9, r3
 8006b48:	46a2      	mov	sl, r4
 8006b4a:	eb19 0905 	adds.w	r9, r9, r5
 8006b4e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006b52:	f04f 0100 	mov.w	r1, #0
 8006b56:	f04f 0200 	mov.w	r2, #0
 8006b5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b66:	4689      	mov	r9, r1
 8006b68:	4692      	mov	sl, r2
 8006b6a:	eb19 0005 	adds.w	r0, r9, r5
 8006b6e:	eb4a 0106 	adc.w	r1, sl, r6
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	461d      	mov	r5, r3
 8006b78:	f04f 0600 	mov.w	r6, #0
 8006b7c:	196b      	adds	r3, r5, r5
 8006b7e:	eb46 0406 	adc.w	r4, r6, r6
 8006b82:	461a      	mov	r2, r3
 8006b84:	4623      	mov	r3, r4
 8006b86:	f7f9 fb31 	bl	80001ec <__aeabi_uldivmod>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	460c      	mov	r4, r1
 8006b8e:	461a      	mov	r2, r3
 8006b90:	4b6a      	ldr	r3, [pc, #424]	; (8006d3c <UART_SetConfig+0x384>)
 8006b92:	fba3 1302 	umull	r1, r3, r3, r2
 8006b96:	095b      	lsrs	r3, r3, #5
 8006b98:	2164      	movs	r1, #100	; 0x64
 8006b9a:	fb01 f303 	mul.w	r3, r1, r3
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	00db      	lsls	r3, r3, #3
 8006ba2:	3332      	adds	r3, #50	; 0x32
 8006ba4:	4a65      	ldr	r2, [pc, #404]	; (8006d3c <UART_SetConfig+0x384>)
 8006ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8006baa:	095b      	lsrs	r3, r3, #5
 8006bac:	f003 0207 	and.w	r2, r3, #7
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4442      	add	r2, r8
 8006bb6:	609a      	str	r2, [r3, #8]
 8006bb8:	e26f      	b.n	800709a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bba:	f7fe fc29 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 8006bbe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	461d      	mov	r5, r3
 8006bc4:	f04f 0600 	mov.w	r6, #0
 8006bc8:	46a8      	mov	r8, r5
 8006bca:	46b1      	mov	r9, r6
 8006bcc:	eb18 0308 	adds.w	r3, r8, r8
 8006bd0:	eb49 0409 	adc.w	r4, r9, r9
 8006bd4:	4698      	mov	r8, r3
 8006bd6:	46a1      	mov	r9, r4
 8006bd8:	eb18 0805 	adds.w	r8, r8, r5
 8006bdc:	eb49 0906 	adc.w	r9, r9, r6
 8006be0:	f04f 0100 	mov.w	r1, #0
 8006be4:	f04f 0200 	mov.w	r2, #0
 8006be8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006bec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006bf0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006bf4:	4688      	mov	r8, r1
 8006bf6:	4691      	mov	r9, r2
 8006bf8:	eb18 0005 	adds.w	r0, r8, r5
 8006bfc:	eb49 0106 	adc.w	r1, r9, r6
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	461d      	mov	r5, r3
 8006c06:	f04f 0600 	mov.w	r6, #0
 8006c0a:	196b      	adds	r3, r5, r5
 8006c0c:	eb46 0406 	adc.w	r4, r6, r6
 8006c10:	461a      	mov	r2, r3
 8006c12:	4623      	mov	r3, r4
 8006c14:	f7f9 faea 	bl	80001ec <__aeabi_uldivmod>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	460c      	mov	r4, r1
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	4b47      	ldr	r3, [pc, #284]	; (8006d3c <UART_SetConfig+0x384>)
 8006c20:	fba3 2302 	umull	r2, r3, r3, r2
 8006c24:	095b      	lsrs	r3, r3, #5
 8006c26:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	461d      	mov	r5, r3
 8006c2e:	f04f 0600 	mov.w	r6, #0
 8006c32:	46a9      	mov	r9, r5
 8006c34:	46b2      	mov	sl, r6
 8006c36:	eb19 0309 	adds.w	r3, r9, r9
 8006c3a:	eb4a 040a 	adc.w	r4, sl, sl
 8006c3e:	4699      	mov	r9, r3
 8006c40:	46a2      	mov	sl, r4
 8006c42:	eb19 0905 	adds.w	r9, r9, r5
 8006c46:	eb4a 0a06 	adc.w	sl, sl, r6
 8006c4a:	f04f 0100 	mov.w	r1, #0
 8006c4e:	f04f 0200 	mov.w	r2, #0
 8006c52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c5e:	4689      	mov	r9, r1
 8006c60:	4692      	mov	sl, r2
 8006c62:	eb19 0005 	adds.w	r0, r9, r5
 8006c66:	eb4a 0106 	adc.w	r1, sl, r6
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	461d      	mov	r5, r3
 8006c70:	f04f 0600 	mov.w	r6, #0
 8006c74:	196b      	adds	r3, r5, r5
 8006c76:	eb46 0406 	adc.w	r4, r6, r6
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	4623      	mov	r3, r4
 8006c7e:	f7f9 fab5 	bl	80001ec <__aeabi_uldivmod>
 8006c82:	4603      	mov	r3, r0
 8006c84:	460c      	mov	r4, r1
 8006c86:	461a      	mov	r2, r3
 8006c88:	4b2c      	ldr	r3, [pc, #176]	; (8006d3c <UART_SetConfig+0x384>)
 8006c8a:	fba3 1302 	umull	r1, r3, r3, r2
 8006c8e:	095b      	lsrs	r3, r3, #5
 8006c90:	2164      	movs	r1, #100	; 0x64
 8006c92:	fb01 f303 	mul.w	r3, r1, r3
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	00db      	lsls	r3, r3, #3
 8006c9a:	3332      	adds	r3, #50	; 0x32
 8006c9c:	4a27      	ldr	r2, [pc, #156]	; (8006d3c <UART_SetConfig+0x384>)
 8006c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca2:	095b      	lsrs	r3, r3, #5
 8006ca4:	005b      	lsls	r3, r3, #1
 8006ca6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006caa:	4498      	add	r8, r3
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	461d      	mov	r5, r3
 8006cb0:	f04f 0600 	mov.w	r6, #0
 8006cb4:	46a9      	mov	r9, r5
 8006cb6:	46b2      	mov	sl, r6
 8006cb8:	eb19 0309 	adds.w	r3, r9, r9
 8006cbc:	eb4a 040a 	adc.w	r4, sl, sl
 8006cc0:	4699      	mov	r9, r3
 8006cc2:	46a2      	mov	sl, r4
 8006cc4:	eb19 0905 	adds.w	r9, r9, r5
 8006cc8:	eb4a 0a06 	adc.w	sl, sl, r6
 8006ccc:	f04f 0100 	mov.w	r1, #0
 8006cd0:	f04f 0200 	mov.w	r2, #0
 8006cd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cdc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ce0:	4689      	mov	r9, r1
 8006ce2:	4692      	mov	sl, r2
 8006ce4:	eb19 0005 	adds.w	r0, r9, r5
 8006ce8:	eb4a 0106 	adc.w	r1, sl, r6
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	461d      	mov	r5, r3
 8006cf2:	f04f 0600 	mov.w	r6, #0
 8006cf6:	196b      	adds	r3, r5, r5
 8006cf8:	eb46 0406 	adc.w	r4, r6, r6
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	4623      	mov	r3, r4
 8006d00:	f7f9 fa74 	bl	80001ec <__aeabi_uldivmod>
 8006d04:	4603      	mov	r3, r0
 8006d06:	460c      	mov	r4, r1
 8006d08:	461a      	mov	r2, r3
 8006d0a:	4b0c      	ldr	r3, [pc, #48]	; (8006d3c <UART_SetConfig+0x384>)
 8006d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8006d10:	095b      	lsrs	r3, r3, #5
 8006d12:	2164      	movs	r1, #100	; 0x64
 8006d14:	fb01 f303 	mul.w	r3, r1, r3
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	00db      	lsls	r3, r3, #3
 8006d1c:	3332      	adds	r3, #50	; 0x32
 8006d1e:	4a07      	ldr	r2, [pc, #28]	; (8006d3c <UART_SetConfig+0x384>)
 8006d20:	fba2 2303 	umull	r2, r3, r2, r3
 8006d24:	095b      	lsrs	r3, r3, #5
 8006d26:	f003 0207 	and.w	r2, r3, #7
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4442      	add	r2, r8
 8006d30:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006d32:	e1b2      	b.n	800709a <UART_SetConfig+0x6e2>
 8006d34:	40011000 	.word	0x40011000
 8006d38:	40011400 	.word	0x40011400
 8006d3c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4ad7      	ldr	r2, [pc, #860]	; (80070a4 <UART_SetConfig+0x6ec>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d005      	beq.n	8006d56 <UART_SetConfig+0x39e>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4ad6      	ldr	r2, [pc, #856]	; (80070a8 <UART_SetConfig+0x6f0>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	f040 80d1 	bne.w	8006ef8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d56:	f7fe fb6f 	bl	8005438 <HAL_RCC_GetPCLK2Freq>
 8006d5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	469a      	mov	sl, r3
 8006d60:	f04f 0b00 	mov.w	fp, #0
 8006d64:	46d0      	mov	r8, sl
 8006d66:	46d9      	mov	r9, fp
 8006d68:	eb18 0308 	adds.w	r3, r8, r8
 8006d6c:	eb49 0409 	adc.w	r4, r9, r9
 8006d70:	4698      	mov	r8, r3
 8006d72:	46a1      	mov	r9, r4
 8006d74:	eb18 080a 	adds.w	r8, r8, sl
 8006d78:	eb49 090b 	adc.w	r9, r9, fp
 8006d7c:	f04f 0100 	mov.w	r1, #0
 8006d80:	f04f 0200 	mov.w	r2, #0
 8006d84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006d88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006d8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006d90:	4688      	mov	r8, r1
 8006d92:	4691      	mov	r9, r2
 8006d94:	eb1a 0508 	adds.w	r5, sl, r8
 8006d98:	eb4b 0609 	adc.w	r6, fp, r9
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	4619      	mov	r1, r3
 8006da2:	f04f 0200 	mov.w	r2, #0
 8006da6:	f04f 0300 	mov.w	r3, #0
 8006daa:	f04f 0400 	mov.w	r4, #0
 8006dae:	0094      	lsls	r4, r2, #2
 8006db0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006db4:	008b      	lsls	r3, r1, #2
 8006db6:	461a      	mov	r2, r3
 8006db8:	4623      	mov	r3, r4
 8006dba:	4628      	mov	r0, r5
 8006dbc:	4631      	mov	r1, r6
 8006dbe:	f7f9 fa15 	bl	80001ec <__aeabi_uldivmod>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	460c      	mov	r4, r1
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	4bb8      	ldr	r3, [pc, #736]	; (80070ac <UART_SetConfig+0x6f4>)
 8006dca:	fba3 2302 	umull	r2, r3, r3, r2
 8006dce:	095b      	lsrs	r3, r3, #5
 8006dd0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	469b      	mov	fp, r3
 8006dd8:	f04f 0c00 	mov.w	ip, #0
 8006ddc:	46d9      	mov	r9, fp
 8006dde:	46e2      	mov	sl, ip
 8006de0:	eb19 0309 	adds.w	r3, r9, r9
 8006de4:	eb4a 040a 	adc.w	r4, sl, sl
 8006de8:	4699      	mov	r9, r3
 8006dea:	46a2      	mov	sl, r4
 8006dec:	eb19 090b 	adds.w	r9, r9, fp
 8006df0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006df4:	f04f 0100 	mov.w	r1, #0
 8006df8:	f04f 0200 	mov.w	r2, #0
 8006dfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e08:	4689      	mov	r9, r1
 8006e0a:	4692      	mov	sl, r2
 8006e0c:	eb1b 0509 	adds.w	r5, fp, r9
 8006e10:	eb4c 060a 	adc.w	r6, ip, sl
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	4619      	mov	r1, r3
 8006e1a:	f04f 0200 	mov.w	r2, #0
 8006e1e:	f04f 0300 	mov.w	r3, #0
 8006e22:	f04f 0400 	mov.w	r4, #0
 8006e26:	0094      	lsls	r4, r2, #2
 8006e28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e2c:	008b      	lsls	r3, r1, #2
 8006e2e:	461a      	mov	r2, r3
 8006e30:	4623      	mov	r3, r4
 8006e32:	4628      	mov	r0, r5
 8006e34:	4631      	mov	r1, r6
 8006e36:	f7f9 f9d9 	bl	80001ec <__aeabi_uldivmod>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	461a      	mov	r2, r3
 8006e40:	4b9a      	ldr	r3, [pc, #616]	; (80070ac <UART_SetConfig+0x6f4>)
 8006e42:	fba3 1302 	umull	r1, r3, r3, r2
 8006e46:	095b      	lsrs	r3, r3, #5
 8006e48:	2164      	movs	r1, #100	; 0x64
 8006e4a:	fb01 f303 	mul.w	r3, r1, r3
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	011b      	lsls	r3, r3, #4
 8006e52:	3332      	adds	r3, #50	; 0x32
 8006e54:	4a95      	ldr	r2, [pc, #596]	; (80070ac <UART_SetConfig+0x6f4>)
 8006e56:	fba2 2303 	umull	r2, r3, r2, r3
 8006e5a:	095b      	lsrs	r3, r3, #5
 8006e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e60:	4498      	add	r8, r3
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	469b      	mov	fp, r3
 8006e66:	f04f 0c00 	mov.w	ip, #0
 8006e6a:	46d9      	mov	r9, fp
 8006e6c:	46e2      	mov	sl, ip
 8006e6e:	eb19 0309 	adds.w	r3, r9, r9
 8006e72:	eb4a 040a 	adc.w	r4, sl, sl
 8006e76:	4699      	mov	r9, r3
 8006e78:	46a2      	mov	sl, r4
 8006e7a:	eb19 090b 	adds.w	r9, r9, fp
 8006e7e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006e82:	f04f 0100 	mov.w	r1, #0
 8006e86:	f04f 0200 	mov.w	r2, #0
 8006e8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e96:	4689      	mov	r9, r1
 8006e98:	4692      	mov	sl, r2
 8006e9a:	eb1b 0509 	adds.w	r5, fp, r9
 8006e9e:	eb4c 060a 	adc.w	r6, ip, sl
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	f04f 0200 	mov.w	r2, #0
 8006eac:	f04f 0300 	mov.w	r3, #0
 8006eb0:	f04f 0400 	mov.w	r4, #0
 8006eb4:	0094      	lsls	r4, r2, #2
 8006eb6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006eba:	008b      	lsls	r3, r1, #2
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	4623      	mov	r3, r4
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	4631      	mov	r1, r6
 8006ec4:	f7f9 f992 	bl	80001ec <__aeabi_uldivmod>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	460c      	mov	r4, r1
 8006ecc:	461a      	mov	r2, r3
 8006ece:	4b77      	ldr	r3, [pc, #476]	; (80070ac <UART_SetConfig+0x6f4>)
 8006ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ed4:	095b      	lsrs	r3, r3, #5
 8006ed6:	2164      	movs	r1, #100	; 0x64
 8006ed8:	fb01 f303 	mul.w	r3, r1, r3
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	011b      	lsls	r3, r3, #4
 8006ee0:	3332      	adds	r3, #50	; 0x32
 8006ee2:	4a72      	ldr	r2, [pc, #456]	; (80070ac <UART_SetConfig+0x6f4>)
 8006ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee8:	095b      	lsrs	r3, r3, #5
 8006eea:	f003 020f 	and.w	r2, r3, #15
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4442      	add	r2, r8
 8006ef4:	609a      	str	r2, [r3, #8]
 8006ef6:	e0d0      	b.n	800709a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ef8:	f7fe fa8a 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 8006efc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	469a      	mov	sl, r3
 8006f02:	f04f 0b00 	mov.w	fp, #0
 8006f06:	46d0      	mov	r8, sl
 8006f08:	46d9      	mov	r9, fp
 8006f0a:	eb18 0308 	adds.w	r3, r8, r8
 8006f0e:	eb49 0409 	adc.w	r4, r9, r9
 8006f12:	4698      	mov	r8, r3
 8006f14:	46a1      	mov	r9, r4
 8006f16:	eb18 080a 	adds.w	r8, r8, sl
 8006f1a:	eb49 090b 	adc.w	r9, r9, fp
 8006f1e:	f04f 0100 	mov.w	r1, #0
 8006f22:	f04f 0200 	mov.w	r2, #0
 8006f26:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006f2a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006f2e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006f32:	4688      	mov	r8, r1
 8006f34:	4691      	mov	r9, r2
 8006f36:	eb1a 0508 	adds.w	r5, sl, r8
 8006f3a:	eb4b 0609 	adc.w	r6, fp, r9
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	4619      	mov	r1, r3
 8006f44:	f04f 0200 	mov.w	r2, #0
 8006f48:	f04f 0300 	mov.w	r3, #0
 8006f4c:	f04f 0400 	mov.w	r4, #0
 8006f50:	0094      	lsls	r4, r2, #2
 8006f52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f56:	008b      	lsls	r3, r1, #2
 8006f58:	461a      	mov	r2, r3
 8006f5a:	4623      	mov	r3, r4
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	4631      	mov	r1, r6
 8006f60:	f7f9 f944 	bl	80001ec <__aeabi_uldivmod>
 8006f64:	4603      	mov	r3, r0
 8006f66:	460c      	mov	r4, r1
 8006f68:	461a      	mov	r2, r3
 8006f6a:	4b50      	ldr	r3, [pc, #320]	; (80070ac <UART_SetConfig+0x6f4>)
 8006f6c:	fba3 2302 	umull	r2, r3, r3, r2
 8006f70:	095b      	lsrs	r3, r3, #5
 8006f72:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	469b      	mov	fp, r3
 8006f7a:	f04f 0c00 	mov.w	ip, #0
 8006f7e:	46d9      	mov	r9, fp
 8006f80:	46e2      	mov	sl, ip
 8006f82:	eb19 0309 	adds.w	r3, r9, r9
 8006f86:	eb4a 040a 	adc.w	r4, sl, sl
 8006f8a:	4699      	mov	r9, r3
 8006f8c:	46a2      	mov	sl, r4
 8006f8e:	eb19 090b 	adds.w	r9, r9, fp
 8006f92:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006f96:	f04f 0100 	mov.w	r1, #0
 8006f9a:	f04f 0200 	mov.w	r2, #0
 8006f9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fa2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006fa6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006faa:	4689      	mov	r9, r1
 8006fac:	4692      	mov	sl, r2
 8006fae:	eb1b 0509 	adds.w	r5, fp, r9
 8006fb2:	eb4c 060a 	adc.w	r6, ip, sl
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	f04f 0200 	mov.w	r2, #0
 8006fc0:	f04f 0300 	mov.w	r3, #0
 8006fc4:	f04f 0400 	mov.w	r4, #0
 8006fc8:	0094      	lsls	r4, r2, #2
 8006fca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006fce:	008b      	lsls	r3, r1, #2
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	4623      	mov	r3, r4
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	4631      	mov	r1, r6
 8006fd8:	f7f9 f908 	bl	80001ec <__aeabi_uldivmod>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	460c      	mov	r4, r1
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	4b32      	ldr	r3, [pc, #200]	; (80070ac <UART_SetConfig+0x6f4>)
 8006fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8006fe8:	095b      	lsrs	r3, r3, #5
 8006fea:	2164      	movs	r1, #100	; 0x64
 8006fec:	fb01 f303 	mul.w	r3, r1, r3
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	011b      	lsls	r3, r3, #4
 8006ff4:	3332      	adds	r3, #50	; 0x32
 8006ff6:	4a2d      	ldr	r2, [pc, #180]	; (80070ac <UART_SetConfig+0x6f4>)
 8006ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007002:	4498      	add	r8, r3
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	469b      	mov	fp, r3
 8007008:	f04f 0c00 	mov.w	ip, #0
 800700c:	46d9      	mov	r9, fp
 800700e:	46e2      	mov	sl, ip
 8007010:	eb19 0309 	adds.w	r3, r9, r9
 8007014:	eb4a 040a 	adc.w	r4, sl, sl
 8007018:	4699      	mov	r9, r3
 800701a:	46a2      	mov	sl, r4
 800701c:	eb19 090b 	adds.w	r9, r9, fp
 8007020:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007024:	f04f 0100 	mov.w	r1, #0
 8007028:	f04f 0200 	mov.w	r2, #0
 800702c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007030:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007034:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007038:	4689      	mov	r9, r1
 800703a:	4692      	mov	sl, r2
 800703c:	eb1b 0509 	adds.w	r5, fp, r9
 8007040:	eb4c 060a 	adc.w	r6, ip, sl
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	4619      	mov	r1, r3
 800704a:	f04f 0200 	mov.w	r2, #0
 800704e:	f04f 0300 	mov.w	r3, #0
 8007052:	f04f 0400 	mov.w	r4, #0
 8007056:	0094      	lsls	r4, r2, #2
 8007058:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800705c:	008b      	lsls	r3, r1, #2
 800705e:	461a      	mov	r2, r3
 8007060:	4623      	mov	r3, r4
 8007062:	4628      	mov	r0, r5
 8007064:	4631      	mov	r1, r6
 8007066:	f7f9 f8c1 	bl	80001ec <__aeabi_uldivmod>
 800706a:	4603      	mov	r3, r0
 800706c:	460c      	mov	r4, r1
 800706e:	461a      	mov	r2, r3
 8007070:	4b0e      	ldr	r3, [pc, #56]	; (80070ac <UART_SetConfig+0x6f4>)
 8007072:	fba3 1302 	umull	r1, r3, r3, r2
 8007076:	095b      	lsrs	r3, r3, #5
 8007078:	2164      	movs	r1, #100	; 0x64
 800707a:	fb01 f303 	mul.w	r3, r1, r3
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	011b      	lsls	r3, r3, #4
 8007082:	3332      	adds	r3, #50	; 0x32
 8007084:	4a09      	ldr	r2, [pc, #36]	; (80070ac <UART_SetConfig+0x6f4>)
 8007086:	fba2 2303 	umull	r2, r3, r2, r3
 800708a:	095b      	lsrs	r3, r3, #5
 800708c:	f003 020f 	and.w	r2, r3, #15
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4442      	add	r2, r8
 8007096:	609a      	str	r2, [r3, #8]
}
 8007098:	e7ff      	b.n	800709a <UART_SetConfig+0x6e2>
 800709a:	bf00      	nop
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a4:	40011000 	.word	0x40011000
 80070a8:	40011400 	.word	0x40011400
 80070ac:	51eb851f 	.word	0x51eb851f

080070b0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80070be:	2300      	movs	r3, #0
 80070c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d029      	beq.n	800711e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80070d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80070da:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80070e4:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80070ea:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80070f0:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80070f6:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80070fc:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8007102:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8007108:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800710e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	601a      	str	r2, [r3, #0]
 800711c:	e034      	b.n	8007188 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800712a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007134:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800713a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	4313      	orrs	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800714e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007152:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800715c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8007162:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8007168:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800716e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8007174:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	4313      	orrs	r3, r2
 800717a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007196:	b480      	push	{r7}
 8007198:	b087      	sub	sp, #28
 800719a:	af00      	add	r7, sp, #0
 800719c:	60f8      	str	r0, [r7, #12]
 800719e:	60b9      	str	r1, [r7, #8]
 80071a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80071a6:	2300      	movs	r3, #0
 80071a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d02e      	beq.n	800720e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80071bc:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	3b01      	subs	r3, #1
 80071ca:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80071cc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	3b01      	subs	r3, #1
 80071d4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80071d6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	3b01      	subs	r3, #1
 80071de:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80071e0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	3b01      	subs	r3, #1
 80071e8:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80071ea:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	3b01      	subs	r3, #1
 80071f2:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80071f4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	3b01      	subs	r3, #1
 80071fc:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80071fe:	4313      	orrs	r3, r2
 8007200:	697a      	ldr	r2, [r7, #20]
 8007202:	4313      	orrs	r3, r2
 8007204:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	609a      	str	r2, [r3, #8]
 800720c:	e03b      	b.n	8007286 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800721a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800721e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	3b01      	subs	r3, #1
 8007226:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	3b01      	subs	r3, #1
 800722e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007230:	4313      	orrs	r3, r2
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	4313      	orrs	r3, r2
 8007236:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007244:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	3b01      	subs	r3, #1
 8007252:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007254:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	3b01      	subs	r3, #1
 800725c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800725e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	3b01      	subs	r3, #1
 8007266:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007268:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	3b01      	subs	r3, #1
 8007270:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007272:	4313      	orrs	r3, r2
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	4313      	orrs	r3, r2
 8007278:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	371c      	adds	r7, #28
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80072a4:	2300      	movs	r3, #0
 80072a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80072b0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	3b01      	subs	r3, #1
 80072b8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80072ba:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80072c2:	4313      	orrs	r3, r2
 80072c4:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80072cc:	f7fb ff62 	bl	8003194 <HAL_GetTick>
 80072d0:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80072d2:	e010      	b.n	80072f6 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072da:	d00c      	beq.n	80072f6 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d007      	beq.n	80072f2 <FMC_SDRAM_SendCommand+0x5e>
 80072e2:	f7fb ff57 	bl	8003194 <HAL_GetTick>
 80072e6:	4602      	mov	r2, r0
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d201      	bcs.n	80072f6 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e006      	b.n	8007304 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	f003 0320 	and.w	r3, r3, #32
 80072fe:	2b20      	cmp	r3, #32
 8007300:	d0e8      	beq.n	80072d4 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3718      	adds	r7, #24
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	695a      	ldr	r2, [r3, #20]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	005b      	lsls	r3, r3, #1
 800731e:	431a      	orrs	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 8007332:	b480      	push	{r7}
 8007334:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 8007336:	bf00      	nop
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <_Znwj>:
 8007340:	b510      	push	{r4, lr}
 8007342:	2800      	cmp	r0, #0
 8007344:	bf14      	ite	ne
 8007346:	4604      	movne	r4, r0
 8007348:	2401      	moveq	r4, #1
 800734a:	4620      	mov	r0, r4
 800734c:	f000 f848 	bl	80073e0 <malloc>
 8007350:	b930      	cbnz	r0, 8007360 <_Znwj+0x20>
 8007352:	f000 f807 	bl	8007364 <_ZSt15get_new_handlerv>
 8007356:	b908      	cbnz	r0, 800735c <_Znwj+0x1c>
 8007358:	f000 f811 	bl	800737e <abort>
 800735c:	4780      	blx	r0
 800735e:	e7f4      	b.n	800734a <_Znwj+0xa>
 8007360:	bd10      	pop	{r4, pc}
	...

08007364 <_ZSt15get_new_handlerv>:
 8007364:	4b02      	ldr	r3, [pc, #8]	; (8007370 <_ZSt15get_new_handlerv+0xc>)
 8007366:	6818      	ldr	r0, [r3, #0]
 8007368:	f3bf 8f5b 	dmb	ish
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	20000574 	.word	0x20000574

08007374 <_ZdlPv>:
 8007374:	f000 b83c 	b.w	80073f0 <free>

08007378 <_ZSt17__throw_bad_allocv>:
 8007378:	b508      	push	{r3, lr}
 800737a:	f000 f800 	bl	800737e <abort>

0800737e <abort>:
 800737e:	b508      	push	{r3, lr}
 8007380:	2006      	movs	r0, #6
 8007382:	f000 f93f 	bl	8007604 <raise>
 8007386:	2001      	movs	r0, #1
 8007388:	f7fb fe1e 	bl	8002fc8 <_exit>

0800738c <__errno>:
 800738c:	4b01      	ldr	r3, [pc, #4]	; (8007394 <__errno+0x8>)
 800738e:	6818      	ldr	r0, [r3, #0]
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	20000050 	.word	0x20000050

08007398 <__libc_init_array>:
 8007398:	b570      	push	{r4, r5, r6, lr}
 800739a:	4e0d      	ldr	r6, [pc, #52]	; (80073d0 <__libc_init_array+0x38>)
 800739c:	4c0d      	ldr	r4, [pc, #52]	; (80073d4 <__libc_init_array+0x3c>)
 800739e:	1ba4      	subs	r4, r4, r6
 80073a0:	10a4      	asrs	r4, r4, #2
 80073a2:	2500      	movs	r5, #0
 80073a4:	42a5      	cmp	r5, r4
 80073a6:	d109      	bne.n	80073bc <__libc_init_array+0x24>
 80073a8:	4e0b      	ldr	r6, [pc, #44]	; (80073d8 <__libc_init_array+0x40>)
 80073aa:	4c0c      	ldr	r4, [pc, #48]	; (80073dc <__libc_init_array+0x44>)
 80073ac:	f000 f948 	bl	8007640 <_init>
 80073b0:	1ba4      	subs	r4, r4, r6
 80073b2:	10a4      	asrs	r4, r4, #2
 80073b4:	2500      	movs	r5, #0
 80073b6:	42a5      	cmp	r5, r4
 80073b8:	d105      	bne.n	80073c6 <__libc_init_array+0x2e>
 80073ba:	bd70      	pop	{r4, r5, r6, pc}
 80073bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073c0:	4798      	blx	r3
 80073c2:	3501      	adds	r5, #1
 80073c4:	e7ee      	b.n	80073a4 <__libc_init_array+0xc>
 80073c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073ca:	4798      	blx	r3
 80073cc:	3501      	adds	r5, #1
 80073ce:	e7f2      	b.n	80073b6 <__libc_init_array+0x1e>
 80073d0:	08009158 	.word	0x08009158
 80073d4:	08009158 	.word	0x08009158
 80073d8:	08009158 	.word	0x08009158
 80073dc:	0800915c 	.word	0x0800915c

080073e0 <malloc>:
 80073e0:	4b02      	ldr	r3, [pc, #8]	; (80073ec <malloc+0xc>)
 80073e2:	4601      	mov	r1, r0
 80073e4:	6818      	ldr	r0, [r3, #0]
 80073e6:	f000 b87b 	b.w	80074e0 <_malloc_r>
 80073ea:	bf00      	nop
 80073ec:	20000050 	.word	0x20000050

080073f0 <free>:
 80073f0:	4b02      	ldr	r3, [pc, #8]	; (80073fc <free+0xc>)
 80073f2:	4601      	mov	r1, r0
 80073f4:	6818      	ldr	r0, [r3, #0]
 80073f6:	f000 b825 	b.w	8007444 <_free_r>
 80073fa:	bf00      	nop
 80073fc:	20000050 	.word	0x20000050

08007400 <memmove>:
 8007400:	4288      	cmp	r0, r1
 8007402:	b510      	push	{r4, lr}
 8007404:	eb01 0302 	add.w	r3, r1, r2
 8007408:	d807      	bhi.n	800741a <memmove+0x1a>
 800740a:	1e42      	subs	r2, r0, #1
 800740c:	4299      	cmp	r1, r3
 800740e:	d00a      	beq.n	8007426 <memmove+0x26>
 8007410:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007414:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007418:	e7f8      	b.n	800740c <memmove+0xc>
 800741a:	4283      	cmp	r3, r0
 800741c:	d9f5      	bls.n	800740a <memmove+0xa>
 800741e:	1881      	adds	r1, r0, r2
 8007420:	1ad2      	subs	r2, r2, r3
 8007422:	42d3      	cmn	r3, r2
 8007424:	d100      	bne.n	8007428 <memmove+0x28>
 8007426:	bd10      	pop	{r4, pc}
 8007428:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800742c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007430:	e7f7      	b.n	8007422 <memmove+0x22>

08007432 <memset>:
 8007432:	4402      	add	r2, r0
 8007434:	4603      	mov	r3, r0
 8007436:	4293      	cmp	r3, r2
 8007438:	d100      	bne.n	800743c <memset+0xa>
 800743a:	4770      	bx	lr
 800743c:	f803 1b01 	strb.w	r1, [r3], #1
 8007440:	e7f9      	b.n	8007436 <memset+0x4>
	...

08007444 <_free_r>:
 8007444:	b538      	push	{r3, r4, r5, lr}
 8007446:	4605      	mov	r5, r0
 8007448:	2900      	cmp	r1, #0
 800744a:	d045      	beq.n	80074d8 <_free_r+0x94>
 800744c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007450:	1f0c      	subs	r4, r1, #4
 8007452:	2b00      	cmp	r3, #0
 8007454:	bfb8      	it	lt
 8007456:	18e4      	addlt	r4, r4, r3
 8007458:	f000 f8f0 	bl	800763c <__malloc_lock>
 800745c:	4a1f      	ldr	r2, [pc, #124]	; (80074dc <_free_r+0x98>)
 800745e:	6813      	ldr	r3, [r2, #0]
 8007460:	4610      	mov	r0, r2
 8007462:	b933      	cbnz	r3, 8007472 <_free_r+0x2e>
 8007464:	6063      	str	r3, [r4, #4]
 8007466:	6014      	str	r4, [r2, #0]
 8007468:	4628      	mov	r0, r5
 800746a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800746e:	f000 b8e6 	b.w	800763e <__malloc_unlock>
 8007472:	42a3      	cmp	r3, r4
 8007474:	d90c      	bls.n	8007490 <_free_r+0x4c>
 8007476:	6821      	ldr	r1, [r4, #0]
 8007478:	1862      	adds	r2, r4, r1
 800747a:	4293      	cmp	r3, r2
 800747c:	bf04      	itt	eq
 800747e:	681a      	ldreq	r2, [r3, #0]
 8007480:	685b      	ldreq	r3, [r3, #4]
 8007482:	6063      	str	r3, [r4, #4]
 8007484:	bf04      	itt	eq
 8007486:	1852      	addeq	r2, r2, r1
 8007488:	6022      	streq	r2, [r4, #0]
 800748a:	6004      	str	r4, [r0, #0]
 800748c:	e7ec      	b.n	8007468 <_free_r+0x24>
 800748e:	4613      	mov	r3, r2
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	b10a      	cbz	r2, 8007498 <_free_r+0x54>
 8007494:	42a2      	cmp	r2, r4
 8007496:	d9fa      	bls.n	800748e <_free_r+0x4a>
 8007498:	6819      	ldr	r1, [r3, #0]
 800749a:	1858      	adds	r0, r3, r1
 800749c:	42a0      	cmp	r0, r4
 800749e:	d10b      	bne.n	80074b8 <_free_r+0x74>
 80074a0:	6820      	ldr	r0, [r4, #0]
 80074a2:	4401      	add	r1, r0
 80074a4:	1858      	adds	r0, r3, r1
 80074a6:	4282      	cmp	r2, r0
 80074a8:	6019      	str	r1, [r3, #0]
 80074aa:	d1dd      	bne.n	8007468 <_free_r+0x24>
 80074ac:	6810      	ldr	r0, [r2, #0]
 80074ae:	6852      	ldr	r2, [r2, #4]
 80074b0:	605a      	str	r2, [r3, #4]
 80074b2:	4401      	add	r1, r0
 80074b4:	6019      	str	r1, [r3, #0]
 80074b6:	e7d7      	b.n	8007468 <_free_r+0x24>
 80074b8:	d902      	bls.n	80074c0 <_free_r+0x7c>
 80074ba:	230c      	movs	r3, #12
 80074bc:	602b      	str	r3, [r5, #0]
 80074be:	e7d3      	b.n	8007468 <_free_r+0x24>
 80074c0:	6820      	ldr	r0, [r4, #0]
 80074c2:	1821      	adds	r1, r4, r0
 80074c4:	428a      	cmp	r2, r1
 80074c6:	bf04      	itt	eq
 80074c8:	6811      	ldreq	r1, [r2, #0]
 80074ca:	6852      	ldreq	r2, [r2, #4]
 80074cc:	6062      	str	r2, [r4, #4]
 80074ce:	bf04      	itt	eq
 80074d0:	1809      	addeq	r1, r1, r0
 80074d2:	6021      	streq	r1, [r4, #0]
 80074d4:	605c      	str	r4, [r3, #4]
 80074d6:	e7c7      	b.n	8007468 <_free_r+0x24>
 80074d8:	bd38      	pop	{r3, r4, r5, pc}
 80074da:	bf00      	nop
 80074dc:	20000578 	.word	0x20000578

080074e0 <_malloc_r>:
 80074e0:	b570      	push	{r4, r5, r6, lr}
 80074e2:	1ccd      	adds	r5, r1, #3
 80074e4:	f025 0503 	bic.w	r5, r5, #3
 80074e8:	3508      	adds	r5, #8
 80074ea:	2d0c      	cmp	r5, #12
 80074ec:	bf38      	it	cc
 80074ee:	250c      	movcc	r5, #12
 80074f0:	2d00      	cmp	r5, #0
 80074f2:	4606      	mov	r6, r0
 80074f4:	db01      	blt.n	80074fa <_malloc_r+0x1a>
 80074f6:	42a9      	cmp	r1, r5
 80074f8:	d903      	bls.n	8007502 <_malloc_r+0x22>
 80074fa:	230c      	movs	r3, #12
 80074fc:	6033      	str	r3, [r6, #0]
 80074fe:	2000      	movs	r0, #0
 8007500:	bd70      	pop	{r4, r5, r6, pc}
 8007502:	f000 f89b 	bl	800763c <__malloc_lock>
 8007506:	4a21      	ldr	r2, [pc, #132]	; (800758c <_malloc_r+0xac>)
 8007508:	6814      	ldr	r4, [r2, #0]
 800750a:	4621      	mov	r1, r4
 800750c:	b991      	cbnz	r1, 8007534 <_malloc_r+0x54>
 800750e:	4c20      	ldr	r4, [pc, #128]	; (8007590 <_malloc_r+0xb0>)
 8007510:	6823      	ldr	r3, [r4, #0]
 8007512:	b91b      	cbnz	r3, 800751c <_malloc_r+0x3c>
 8007514:	4630      	mov	r0, r6
 8007516:	f000 f83d 	bl	8007594 <_sbrk_r>
 800751a:	6020      	str	r0, [r4, #0]
 800751c:	4629      	mov	r1, r5
 800751e:	4630      	mov	r0, r6
 8007520:	f000 f838 	bl	8007594 <_sbrk_r>
 8007524:	1c43      	adds	r3, r0, #1
 8007526:	d124      	bne.n	8007572 <_malloc_r+0x92>
 8007528:	230c      	movs	r3, #12
 800752a:	6033      	str	r3, [r6, #0]
 800752c:	4630      	mov	r0, r6
 800752e:	f000 f886 	bl	800763e <__malloc_unlock>
 8007532:	e7e4      	b.n	80074fe <_malloc_r+0x1e>
 8007534:	680b      	ldr	r3, [r1, #0]
 8007536:	1b5b      	subs	r3, r3, r5
 8007538:	d418      	bmi.n	800756c <_malloc_r+0x8c>
 800753a:	2b0b      	cmp	r3, #11
 800753c:	d90f      	bls.n	800755e <_malloc_r+0x7e>
 800753e:	600b      	str	r3, [r1, #0]
 8007540:	50cd      	str	r5, [r1, r3]
 8007542:	18cc      	adds	r4, r1, r3
 8007544:	4630      	mov	r0, r6
 8007546:	f000 f87a 	bl	800763e <__malloc_unlock>
 800754a:	f104 000b 	add.w	r0, r4, #11
 800754e:	1d23      	adds	r3, r4, #4
 8007550:	f020 0007 	bic.w	r0, r0, #7
 8007554:	1ac3      	subs	r3, r0, r3
 8007556:	d0d3      	beq.n	8007500 <_malloc_r+0x20>
 8007558:	425a      	negs	r2, r3
 800755a:	50e2      	str	r2, [r4, r3]
 800755c:	e7d0      	b.n	8007500 <_malloc_r+0x20>
 800755e:	428c      	cmp	r4, r1
 8007560:	684b      	ldr	r3, [r1, #4]
 8007562:	bf16      	itet	ne
 8007564:	6063      	strne	r3, [r4, #4]
 8007566:	6013      	streq	r3, [r2, #0]
 8007568:	460c      	movne	r4, r1
 800756a:	e7eb      	b.n	8007544 <_malloc_r+0x64>
 800756c:	460c      	mov	r4, r1
 800756e:	6849      	ldr	r1, [r1, #4]
 8007570:	e7cc      	b.n	800750c <_malloc_r+0x2c>
 8007572:	1cc4      	adds	r4, r0, #3
 8007574:	f024 0403 	bic.w	r4, r4, #3
 8007578:	42a0      	cmp	r0, r4
 800757a:	d005      	beq.n	8007588 <_malloc_r+0xa8>
 800757c:	1a21      	subs	r1, r4, r0
 800757e:	4630      	mov	r0, r6
 8007580:	f000 f808 	bl	8007594 <_sbrk_r>
 8007584:	3001      	adds	r0, #1
 8007586:	d0cf      	beq.n	8007528 <_malloc_r+0x48>
 8007588:	6025      	str	r5, [r4, #0]
 800758a:	e7db      	b.n	8007544 <_malloc_r+0x64>
 800758c:	20000578 	.word	0x20000578
 8007590:	2000057c 	.word	0x2000057c

08007594 <_sbrk_r>:
 8007594:	b538      	push	{r3, r4, r5, lr}
 8007596:	4c06      	ldr	r4, [pc, #24]	; (80075b0 <_sbrk_r+0x1c>)
 8007598:	2300      	movs	r3, #0
 800759a:	4605      	mov	r5, r0
 800759c:	4608      	mov	r0, r1
 800759e:	6023      	str	r3, [r4, #0]
 80075a0:	f7fb fd1c 	bl	8002fdc <_sbrk>
 80075a4:	1c43      	adds	r3, r0, #1
 80075a6:	d102      	bne.n	80075ae <_sbrk_r+0x1a>
 80075a8:	6823      	ldr	r3, [r4, #0]
 80075aa:	b103      	cbz	r3, 80075ae <_sbrk_r+0x1a>
 80075ac:	602b      	str	r3, [r5, #0]
 80075ae:	bd38      	pop	{r3, r4, r5, pc}
 80075b0:	20000588 	.word	0x20000588

080075b4 <_raise_r>:
 80075b4:	291f      	cmp	r1, #31
 80075b6:	b538      	push	{r3, r4, r5, lr}
 80075b8:	4604      	mov	r4, r0
 80075ba:	460d      	mov	r5, r1
 80075bc:	d904      	bls.n	80075c8 <_raise_r+0x14>
 80075be:	2316      	movs	r3, #22
 80075c0:	6003      	str	r3, [r0, #0]
 80075c2:	f04f 30ff 	mov.w	r0, #4294967295
 80075c6:	bd38      	pop	{r3, r4, r5, pc}
 80075c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80075ca:	b112      	cbz	r2, 80075d2 <_raise_r+0x1e>
 80075cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075d0:	b94b      	cbnz	r3, 80075e6 <_raise_r+0x32>
 80075d2:	4620      	mov	r0, r4
 80075d4:	f000 f830 	bl	8007638 <_getpid_r>
 80075d8:	462a      	mov	r2, r5
 80075da:	4601      	mov	r1, r0
 80075dc:	4620      	mov	r0, r4
 80075de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075e2:	f000 b817 	b.w	8007614 <_kill_r>
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d00a      	beq.n	8007600 <_raise_r+0x4c>
 80075ea:	1c59      	adds	r1, r3, #1
 80075ec:	d103      	bne.n	80075f6 <_raise_r+0x42>
 80075ee:	2316      	movs	r3, #22
 80075f0:	6003      	str	r3, [r0, #0]
 80075f2:	2001      	movs	r0, #1
 80075f4:	e7e7      	b.n	80075c6 <_raise_r+0x12>
 80075f6:	2400      	movs	r4, #0
 80075f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80075fc:	4628      	mov	r0, r5
 80075fe:	4798      	blx	r3
 8007600:	2000      	movs	r0, #0
 8007602:	e7e0      	b.n	80075c6 <_raise_r+0x12>

08007604 <raise>:
 8007604:	4b02      	ldr	r3, [pc, #8]	; (8007610 <raise+0xc>)
 8007606:	4601      	mov	r1, r0
 8007608:	6818      	ldr	r0, [r3, #0]
 800760a:	f7ff bfd3 	b.w	80075b4 <_raise_r>
 800760e:	bf00      	nop
 8007610:	20000050 	.word	0x20000050

08007614 <_kill_r>:
 8007614:	b538      	push	{r3, r4, r5, lr}
 8007616:	4c07      	ldr	r4, [pc, #28]	; (8007634 <_kill_r+0x20>)
 8007618:	2300      	movs	r3, #0
 800761a:	4605      	mov	r5, r0
 800761c:	4608      	mov	r0, r1
 800761e:	4611      	mov	r1, r2
 8007620:	6023      	str	r3, [r4, #0]
 8007622:	f7fb fcc1 	bl	8002fa8 <_kill>
 8007626:	1c43      	adds	r3, r0, #1
 8007628:	d102      	bne.n	8007630 <_kill_r+0x1c>
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	b103      	cbz	r3, 8007630 <_kill_r+0x1c>
 800762e:	602b      	str	r3, [r5, #0]
 8007630:	bd38      	pop	{r3, r4, r5, pc}
 8007632:	bf00      	nop
 8007634:	20000588 	.word	0x20000588

08007638 <_getpid_r>:
 8007638:	f7fb bcae 	b.w	8002f98 <_getpid>

0800763c <__malloc_lock>:
 800763c:	4770      	bx	lr

0800763e <__malloc_unlock>:
 800763e:	4770      	bx	lr

08007640 <_init>:
 8007640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007642:	bf00      	nop
 8007644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007646:	bc08      	pop	{r3}
 8007648:	469e      	mov	lr, r3
 800764a:	4770      	bx	lr

0800764c <_fini>:
 800764c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764e:	bf00      	nop
 8007650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007652:	bc08      	pop	{r3}
 8007654:	469e      	mov	lr, r3
 8007656:	4770      	bx	lr
