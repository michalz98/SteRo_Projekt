
animacje_projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f88  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003134  08003134  00013134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031b8  080031b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080031b8  080031b8  000131b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031c0  080031c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031c0  080031c0  000131c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031c4  080031c4  000131c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080031c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000070  08003238  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08003238  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000835f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001715  00000000  00000000  000283ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000720  00000000  00000000  00029b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000648  00000000  00000000  0002a238  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000237dd  00000000  00000000  0002a880  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006e1d  00000000  00000000  0004e05d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1e79  00000000  00000000  00054e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00126cf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020a0  00000000  00000000  00126d70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800311c 	.word	0x0800311c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	0800311c 	.word	0x0800311c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
 80004f6:	4b2c      	ldr	r3, [pc, #176]	; (80005a8 <MX_GPIO_Init+0xbc>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a2b      	ldr	r2, [pc, #172]	; (80005a8 <MX_GPIO_Init+0xbc>)
 80004fc:	f043 0320 	orr.w	r3, r3, #32
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0320 	and.w	r3, r3, #32
 800050a:	617b      	str	r3, [r7, #20]
 800050c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	613b      	str	r3, [r7, #16]
 8000512:	4b25      	ldr	r3, [pc, #148]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a24      	ldr	r2, [pc, #144]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b22      	ldr	r3, [pc, #136]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a1d      	ldr	r2, [pc, #116]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000534:	f043 0302 	orr.w	r3, r3, #2
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <MX_GPIO_Init+0xbc>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0302 	and.w	r3, r3, #2
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <MX_GPIO_Init+0xbc>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a16      	ldr	r2, [pc, #88]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000550:	f043 0304 	orr.w	r3, r3, #4
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0304 	and.w	r3, r3, #4
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a0f      	ldr	r2, [pc, #60]	; (80005a8 <MX_GPIO_Init+0xbc>)
 800056c:	f043 0308 	orr.w	r3, r3, #8
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f003 0308 	and.w	r3, r3, #8
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	603b      	str	r3, [r7, #0]
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a08      	ldr	r2, [pc, #32]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000588:	f043 0310 	orr.w	r3, r3, #16
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0310 	and.w	r3, r3, #16
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	683b      	ldr	r3, [r7, #0]

}
 800059a:	bf00      	nop
 800059c:	371c      	adds	r7, #28
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	40023800 	.word	0x40023800

080005ac <_write>:
void MX_I2C3_Init(void);
void MX_LTDC_Init(void);
void MX_SPI5_Init(void);


int _write(int file, char* ptr, int len){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1,  (void*)ptr, len, 50);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	2332      	movs	r3, #50	; 0x32
 80005be:	68b9      	ldr	r1, [r7, #8]
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <_write+0x24>)
 80005c2:	f001 fcb2 	bl	8001f2a <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart4,  (void*)ptr, len, 50);
	//HAL_UART_Transmit(&huart5,  (void*)ptr, len, 50);
	//HAL_UART_Transmit(&huart6,  (void*)ptr, len, 50);
	//HAL_UART_Transmit(&huart7,  (void*)ptr, len, 50);
	//HAL_UART_Transmit(&huart8,  (void*)ptr, len, 50);
	return len;
 80005c6:	687b      	ldr	r3, [r7, #4]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000158 	.word	0x20000158

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fce8 	bl	8000fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f81c 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f7ff ff84 	bl	80004ec <MX_GPIO_Init>
  MX_UART5_Init();
 80005e4:	f000 f9ae 	bl	8000944 <MX_UART5_Init>
  MX_UART4_Init();
 80005e8:	f000 f982 	bl	80008f0 <MX_UART4_Init>
  MX_UART7_Init();
 80005ec:	f000 f9d4 	bl	8000998 <MX_UART7_Init>
  MX_UART8_Init();
 80005f0:	f000 f9fc 	bl	80009ec <MX_UART8_Init>
  MX_USART1_UART_Init();
 80005f4:	f000 fa24 	bl	8000a40 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005f8:	f000 fa4c 	bl	8000a94 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005fc:	f000 fa74 	bl	8000ae8 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000600:	f000 fa9c 	bl	8000b3c <MX_USART6_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("test\r\n");
 8000604:	4803      	ldr	r0, [pc, #12]	; (8000614 <main+0x40>)
 8000606:	f002 f97d 	bl	8002904 <puts>
	  HAL_Delay(100);
 800060a:	2064      	movs	r0, #100	; 0x64
 800060c:	f000 fd2c 	bl	8001068 <HAL_Delay>
	  printf("test\r\n");
 8000610:	e7f8      	b.n	8000604 <main+0x30>
 8000612:	bf00      	nop
 8000614:	08003134 	.word	0x08003134

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f002 f908 	bl	800283c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <SystemClock_Config+0xd0>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <SystemClock_Config+0xd0>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <SystemClock_Config+0xd0>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b23      	ldr	r3, [pc, #140]	; (80006ec <SystemClock_Config+0xd4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemClock_Config+0xd4>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemClock_Config+0xd4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800068c:	2308      	movs	r3, #8
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000690:	2348      	movs	r3, #72	; 0x48
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000698:	2303      	movs	r3, #3
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 ff93 	bl	80015cc <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006ac:	f000 f820 	bl	80006f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2102      	movs	r1, #2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f9ec 	bl	8001aac <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006da:	f000 f809 	bl	80006f0 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
	...

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_MspInit+0x54>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070e:	4a11      	ldr	r2, [pc, #68]	; (8000754 <HAL_MspInit+0x54>)
 8000710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000714:	6453      	str	r3, [r2, #68]	; 0x44
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <HAL_MspInit+0x54>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <HAL_MspInit+0x54>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <HAL_MspInit+0x54>)
 800072c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000730:	6413      	str	r3, [r2, #64]	; 0x40
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <HAL_MspInit+0x54>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	210f      	movs	r1, #15
 8000742:	f06f 0001 	mvn.w	r0, #1
 8000746:	f000 fd6e 	bl	8001226 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800

08000758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <MemManage_Handler+0x4>

08000772 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <BusFault_Handler+0x4>

08000778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <UsageFault_Handler+0x4>

0800077e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b086      	sub	sp, #24
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	60f8      	str	r0, [r7, #12]
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	e00a      	b.n	80007de <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007c8:	f3af 8000 	nop.w
 80007cc:	4601      	mov	r1, r0
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	1c5a      	adds	r2, r3, #1
 80007d2:	60ba      	str	r2, [r7, #8]
 80007d4:	b2ca      	uxtb	r2, r1
 80007d6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	3301      	adds	r3, #1
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	dbf0      	blt.n	80007c8 <_read+0x12>
	}

return len;
 80007e6:	687b      	ldr	r3, [r7, #4]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3718      	adds	r7, #24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <_close>:
	}
	return len;
}

int _close(int file)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	return -1;
 80007f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000818:	605a      	str	r2, [r3, #4]
	return 0;
 800081a:	2300      	movs	r3, #0
}
 800081c:	4618      	mov	r0, r3
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <_isatty>:

int _isatty(int file)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	return 1;
 8000830:	2301      	movs	r3, #1
}
 8000832:	4618      	mov	r0, r3
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800083e:	b480      	push	{r7}
 8000840:	b085      	sub	sp, #20
 8000842:	af00      	add	r7, sp, #0
 8000844:	60f8      	str	r0, [r7, #12]
 8000846:	60b9      	str	r1, [r7, #8]
 8000848:	607a      	str	r2, [r7, #4]
	return 0;
 800084a:	2300      	movs	r3, #0
}
 800084c:	4618      	mov	r0, r3
 800084e:	3714      	adds	r7, #20
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000860:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <_sbrk+0x5c>)
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <_sbrk+0x60>)
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <_sbrk+0x64>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d102      	bne.n	800087a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <_sbrk+0x64>)
 8000876:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <_sbrk+0x68>)
 8000878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <_sbrk+0x64>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4413      	add	r3, r2
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	429a      	cmp	r2, r3
 8000886:	d207      	bcs.n	8000898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000888:	f001 ffae 	bl	80027e8 <__errno>
 800088c:	4602      	mov	r2, r0
 800088e:	230c      	movs	r3, #12
 8000890:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000892:	f04f 33ff 	mov.w	r3, #4294967295
 8000896:	e009      	b.n	80008ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <_sbrk+0x64>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800089e:	4b07      	ldr	r3, [pc, #28]	; (80008bc <_sbrk+0x64>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <_sbrk+0x64>)
 80008a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008aa:	68fb      	ldr	r3, [r7, #12]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20030000 	.word	0x20030000
 80008b8:	00000400 	.word	0x00000400
 80008bc:	2000008c 	.word	0x2000008c
 80008c0:	200002a0 	.word	0x200002a0

080008c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <SystemInit+0x28>)
 80008ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ce:	4a07      	ldr	r2, [pc, #28]	; (80008ec <SystemInit+0x28>)
 80008d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <SystemInit+0x28>)
 80008da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008de:	609a      	str	r2, [r3, #8]
#endif
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_UART4_Init+0x4c>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	; (8000940 <MX_UART4_Init+0x50>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_UART4_Init+0x4c>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_UART4_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_UART4_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_UART4_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_UART4_Init+0x4c>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_UART4_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_UART4_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_UART4_Init+0x4c>)
 8000928:	f001 fab2 	bl	8001e90 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000932:	f7ff fedd 	bl	80006f0 <Error_Handler>
  }

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000218 	.word	0x20000218
 8000940:	40004c00 	.word	0x40004c00

08000944 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_UART5_Init+0x4c>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <MX_UART5_Init+0x50>)
 800094c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_UART5_Init+0x4c>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_UART5_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_UART5_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_UART5_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_UART5_Init+0x4c>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_UART5_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_UART5_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_UART5_Init+0x4c>)
 800097c:	f001 fa88 	bl	8001e90 <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000986:	f7ff feb3 	bl	80006f0 <Error_Handler>
  }

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000118 	.word	0x20000118
 8000994:	40005000 	.word	0x40005000

08000998 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_UART7_Init+0x4c>)
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <MX_UART7_Init+0x50>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_UART7_Init+0x4c>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_UART7_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_UART7_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_UART7_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_UART7_Init+0x4c>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_UART7_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_UART7_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_UART7_Init+0x4c>)
 80009d0:	f001 fa5e 	bl	8001e90 <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_UART7_Init+0x46>
  {
    Error_Handler();
 80009da:	f7ff fe89 	bl	80006f0 <Error_Handler>
  }

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000098 	.word	0x20000098
 80009e8:	40007800 	.word	0x40007800

080009ec <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_UART8_Init+0x4c>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <MX_UART8_Init+0x50>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <MX_UART8_Init+0x4c>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_UART8_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_UART8_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_UART8_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_UART8_Init+0x4c>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MX_UART8_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_UART8_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_UART8_Init+0x4c>)
 8000a24:	f001 fa34 	bl	8001e90 <HAL_UART_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8000a2e:	f7ff fe5f 	bl	80006f0 <Error_Handler>
  }

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000198 	.word	0x20000198
 8000a3c:	40007c00 	.word	0x40007c00

08000a40 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <MX_USART1_UART_Init+0x50>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a78:	f001 fa0a 	bl	8001e90 <HAL_UART_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a82:	f7ff fe35 	bl	80006f0 <Error_Handler>
  }

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000158 	.word	0x20000158
 8000a90:	40011000 	.word	0x40011000

08000a94 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <MX_USART2_UART_Init+0x50>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000acc:	f001 f9e0 	bl	8001e90 <HAL_UART_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ad6:	f7ff fe0b 	bl	80006f0 <Error_Handler>
  }

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000258 	.word	0x20000258
 8000ae4:	40004400 	.word	0x40004400

08000ae8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_USART3_UART_Init+0x4c>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <MX_USART3_UART_Init+0x50>)
 8000af0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <MX_USART3_UART_Init+0x4c>)
 8000af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_USART3_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_USART3_UART_Init+0x4c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <MX_USART3_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_USART3_UART_Init+0x4c>)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <MX_USART3_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_USART3_UART_Init+0x4c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_USART3_UART_Init+0x4c>)
 8000b20:	f001 f9b6 	bl	8001e90 <HAL_UART_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b2a:	f7ff fde1 	bl	80006f0 <Error_Handler>
  }

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200000d8 	.word	0x200000d8
 8000b38:	40004800 	.word	0x40004800

08000b3c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_USART6_UART_Init+0x4c>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <MX_USART6_UART_Init+0x50>)
 8000b44:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <MX_USART6_UART_Init+0x4c>)
 8000b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b4c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_USART6_UART_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_USART6_UART_Init+0x4c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <MX_USART6_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_USART6_UART_Init+0x4c>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <MX_USART6_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_USART6_UART_Init+0x4c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_USART6_UART_Init+0x4c>)
 8000b74:	f001 f98c 	bl	8001e90 <HAL_UART_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b7e:	f7ff fdb7 	bl	80006f0 <Error_Handler>
  }

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200001d8 	.word	0x200001d8
 8000b8c:	40011400 	.word	0x40011400

08000b90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b098      	sub	sp, #96	; 0x60
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a8b      	ldr	r2, [pc, #556]	; (8000ddc <HAL_UART_MspInit+0x24c>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d12c      	bne.n	8000c0c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8000bb6:	4b8a      	ldr	r3, [pc, #552]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	4a89      	ldr	r2, [pc, #548]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000bbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc2:	4b87      	ldr	r3, [pc, #540]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bca:	64bb      	str	r3, [r7, #72]	; 0x48
 8000bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	647b      	str	r3, [r7, #68]	; 0x44
 8000bd2:	4b83      	ldr	r3, [pc, #524]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a82      	ldr	r2, [pc, #520]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b80      	ldr	r3, [pc, #512]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	647b      	str	r3, [r7, #68]	; 0x44
 8000be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bea:	2303      	movs	r3, #3
 8000bec:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000bfa:	2308      	movs	r3, #8
 8000bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c02:	4619      	mov	r1, r3
 8000c04:	4877      	ldr	r0, [pc, #476]	; (8000de4 <HAL_UART_MspInit+0x254>)
 8000c06:	f000 fb37 	bl	8001278 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000c0a:	e193      	b.n	8000f34 <HAL_UART_MspInit+0x3a4>
  else if(uartHandle->Instance==UART5)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a75      	ldr	r2, [pc, #468]	; (8000de8 <HAL_UART_MspInit+0x258>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d14b      	bne.n	8000cae <HAL_UART_MspInit+0x11e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	643b      	str	r3, [r7, #64]	; 0x40
 8000c1a:	4b71      	ldr	r3, [pc, #452]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	4a70      	ldr	r2, [pc, #448]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000c20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c24:	6413      	str	r3, [r2, #64]	; 0x40
 8000c26:	4b6e      	ldr	r3, [pc, #440]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c2e:	643b      	str	r3, [r7, #64]	; 0x40
 8000c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c36:	4b6a      	ldr	r3, [pc, #424]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a69      	ldr	r2, [pc, #420]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000c3c:	f043 0304 	orr.w	r3, r3, #4
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b67      	ldr	r3, [pc, #412]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c52:	4b63      	ldr	r3, [pc, #396]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a62      	ldr	r2, [pc, #392]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000c58:	f043 0308 	orr.w	r3, r3, #8
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b60      	ldr	r3, [pc, #384]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0308 	and.w	r3, r3, #8
 8000c66:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c84:	4619      	mov	r1, r3
 8000c86:	4859      	ldr	r0, [pc, #356]	; (8000dec <HAL_UART_MspInit+0x25c>)
 8000c88:	f000 faf6 	bl	8001278 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c9c:	2308      	movs	r3, #8
 8000c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4852      	ldr	r0, [pc, #328]	; (8000df0 <HAL_UART_MspInit+0x260>)
 8000ca8:	f000 fae6 	bl	8001278 <HAL_GPIO_Init>
}
 8000cac:	e142      	b.n	8000f34 <HAL_UART_MspInit+0x3a4>
  else if(uartHandle->Instance==UART7)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a50      	ldr	r2, [pc, #320]	; (8000df4 <HAL_UART_MspInit+0x264>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d12c      	bne.n	8000d12 <HAL_UART_MspInit+0x182>
    __HAL_RCC_UART7_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	637b      	str	r3, [r7, #52]	; 0x34
 8000cbc:	4b48      	ldr	r3, [pc, #288]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	4a47      	ldr	r2, [pc, #284]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000cc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc8:	4b45      	ldr	r3, [pc, #276]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8000cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	633b      	str	r3, [r7, #48]	; 0x30
 8000cd8:	4b41      	ldr	r3, [pc, #260]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	4a40      	ldr	r2, [pc, #256]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000cde:	f043 0320 	orr.w	r3, r3, #32
 8000ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce4:	4b3e      	ldr	r3, [pc, #248]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	f003 0320 	and.w	r3, r3, #32
 8000cec:	633b      	str	r3, [r7, #48]	; 0x30
 8000cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cf0:	23c0      	movs	r3, #192	; 0xc0
 8000cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8000d00:	2308      	movs	r3, #8
 8000d02:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d08:	4619      	mov	r1, r3
 8000d0a:	483b      	ldr	r0, [pc, #236]	; (8000df8 <HAL_UART_MspInit+0x268>)
 8000d0c:	f000 fab4 	bl	8001278 <HAL_GPIO_Init>
}
 8000d10:	e110      	b.n	8000f34 <HAL_UART_MspInit+0x3a4>
  else if(uartHandle->Instance==UART8)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a39      	ldr	r2, [pc, #228]	; (8000dfc <HAL_UART_MspInit+0x26c>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d12c      	bne.n	8000d76 <HAL_UART_MspInit+0x1e6>
    __HAL_RCC_UART8_CLK_ENABLE();
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d20:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	4a2e      	ldr	r2, [pc, #184]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000d26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2c:	4b2c      	ldr	r3, [pc, #176]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d3c:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d40:	4a27      	ldr	r2, [pc, #156]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000d42:	f043 0310 	orr.w	r3, r3, #16
 8000d46:	6313      	str	r3, [r2, #48]	; 0x30
 8000d48:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	f003 0310 	and.w	r3, r3, #16
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d54:	2303      	movs	r3, #3
 8000d56:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000d64:	2308      	movs	r3, #8
 8000d66:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d68:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4824      	ldr	r0, [pc, #144]	; (8000e00 <HAL_UART_MspInit+0x270>)
 8000d70:	f000 fa82 	bl	8001278 <HAL_GPIO_Init>
}
 8000d74:	e0de      	b.n	8000f34 <HAL_UART_MspInit+0x3a4>
  else if(uartHandle->Instance==USART1)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a22      	ldr	r2, [pc, #136]	; (8000e04 <HAL_UART_MspInit+0x274>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d143      	bne.n	8000e08 <HAL_UART_MspInit+0x278>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d88:	4a15      	ldr	r2, [pc, #84]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000d8a:	f043 0310 	orr.w	r3, r3, #16
 8000d8e:	6453      	str	r3, [r2, #68]	; 0x44
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d94:	f003 0310 	and.w	r3, r3, #16
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <HAL_UART_MspInit+0x250>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	623b      	str	r3, [r7, #32]
 8000db6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000db8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dca:	2307      	movs	r3, #7
 8000dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4803      	ldr	r0, [pc, #12]	; (8000de4 <HAL_UART_MspInit+0x254>)
 8000dd6:	f000 fa4f 	bl	8001278 <HAL_GPIO_Init>
}
 8000dda:	e0ab      	b.n	8000f34 <HAL_UART_MspInit+0x3a4>
 8000ddc:	40004c00 	.word	0x40004c00
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020000 	.word	0x40020000
 8000de8:	40005000 	.word	0x40005000
 8000dec:	40020800 	.word	0x40020800
 8000df0:	40020c00 	.word	0x40020c00
 8000df4:	40007800 	.word	0x40007800
 8000df8:	40021400 	.word	0x40021400
 8000dfc:	40007c00 	.word	0x40007c00
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40011000 	.word	0x40011000
  else if(uartHandle->Instance==USART2)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a4b      	ldr	r2, [pc, #300]	; (8000f3c <HAL_UART_MspInit+0x3ac>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d12c      	bne.n	8000e6c <HAL_UART_MspInit+0x2dc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
 8000e16:	4b4a      	ldr	r3, [pc, #296]	; (8000f40 <HAL_UART_MspInit+0x3b0>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	4a49      	ldr	r2, [pc, #292]	; (8000f40 <HAL_UART_MspInit+0x3b0>)
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	6413      	str	r3, [r2, #64]	; 0x40
 8000e22:	4b47      	ldr	r3, [pc, #284]	; (8000f40 <HAL_UART_MspInit+0x3b0>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2a:	61fb      	str	r3, [r7, #28]
 8000e2c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
 8000e32:	4b43      	ldr	r3, [pc, #268]	; (8000f40 <HAL_UART_MspInit+0x3b0>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a42      	ldr	r2, [pc, #264]	; (8000f40 <HAL_UART_MspInit+0x3b0>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b40      	ldr	r3, [pc, #256]	; (8000f40 <HAL_UART_MspInit+0x3b0>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e4a:	230c      	movs	r3, #12
 8000e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e5a:	2307      	movs	r3, #7
 8000e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e62:	4619      	mov	r1, r3
 8000e64:	4837      	ldr	r0, [pc, #220]	; (8000f44 <HAL_UART_MspInit+0x3b4>)
 8000e66:	f000 fa07 	bl	8001278 <HAL_GPIO_Init>
}
 8000e6a:	e063      	b.n	8000f34 <HAL_UART_MspInit+0x3a4>
  else if(uartHandle->Instance==USART3)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a35      	ldr	r2, [pc, #212]	; (8000f48 <HAL_UART_MspInit+0x3b8>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d12d      	bne.n	8000ed2 <HAL_UART_MspInit+0x342>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	4b31      	ldr	r3, [pc, #196]	; (8000f40 <HAL_UART_MspInit+0x3b0>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	4a30      	ldr	r2, [pc, #192]	; (8000f40 <HAL_UART_MspInit+0x3b0>)
 8000e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e84:	6413      	str	r3, [r2, #64]	; 0x40
 8000e86:	4b2e      	ldr	r3, [pc, #184]	; (8000f40 <HAL_UART_MspInit+0x3b0>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <HAL_UART_MspInit+0x3b0>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a29      	ldr	r2, [pc, #164]	; (8000f40 <HAL_UART_MspInit+0x3b0>)
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b27      	ldr	r3, [pc, #156]	; (8000f40 <HAL_UART_MspInit+0x3b0>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000eae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ec0:	2307      	movs	r3, #7
 8000ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4820      	ldr	r0, [pc, #128]	; (8000f4c <HAL_UART_MspInit+0x3bc>)
 8000ecc:	f000 f9d4 	bl	8001278 <HAL_GPIO_Init>
}
 8000ed0:	e030      	b.n	8000f34 <HAL_UART_MspInit+0x3a4>
  else if(uartHandle->Instance==USART6)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a1e      	ldr	r2, [pc, #120]	; (8000f50 <HAL_UART_MspInit+0x3c0>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d12b      	bne.n	8000f34 <HAL_UART_MspInit+0x3a4>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <HAL_UART_MspInit+0x3b0>)
 8000ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee4:	4a16      	ldr	r2, [pc, #88]	; (8000f40 <HAL_UART_MspInit+0x3b0>)
 8000ee6:	f043 0320 	orr.w	r3, r3, #32
 8000eea:	6453      	str	r3, [r2, #68]	; 0x44
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <HAL_UART_MspInit+0x3b0>)
 8000eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef0:	f003 0320 	and.w	r3, r3, #32
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <HAL_UART_MspInit+0x3b0>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f00:	4a0f      	ldr	r2, [pc, #60]	; (8000f40 <HAL_UART_MspInit+0x3b0>)
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	6313      	str	r3, [r2, #48]	; 0x30
 8000f08:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <HAL_UART_MspInit+0x3b0>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f14:	23c0      	movs	r3, #192	; 0xc0
 8000f16:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000f24:	2308      	movs	r3, #8
 8000f26:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4809      	ldr	r0, [pc, #36]	; (8000f54 <HAL_UART_MspInit+0x3c4>)
 8000f30:	f000 f9a2 	bl	8001278 <HAL_GPIO_Init>
}
 8000f34:	bf00      	nop
 8000f36:	3760      	adds	r7, #96	; 0x60
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40004400 	.word	0x40004400
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020000 	.word	0x40020000
 8000f48:	40004800 	.word	0x40004800
 8000f4c:	40020400 	.word	0x40020400
 8000f50:	40011400 	.word	0x40011400
 8000f54:	40020800 	.word	0x40020800

08000f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f90 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f5e:	e003      	b.n	8000f68 <LoopCopyDataInit>

08000f60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f66:	3104      	adds	r1, #4

08000f68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f70:	d3f6      	bcc.n	8000f60 <CopyDataInit>
  ldr  r2, =_sbss
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f74:	e002      	b.n	8000f7c <LoopFillZerobss>

08000f76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f78:	f842 3b04 	str.w	r3, [r2], #4

08000f7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f80:	d3f9      	bcc.n	8000f76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f82:	f7ff fc9f 	bl	80008c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f001 fc35 	bl	80027f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8a:	f7ff fb23 	bl	80005d4 <main>
  bx  lr    
 8000f8e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f90:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000f94:	080031c8 	.word	0x080031c8
  ldr  r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f9c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000fa0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000fa4:	200002a0 	.word	0x200002a0

08000fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC_IRQHandler>
	...

08000fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <HAL_Init+0x40>)
 8000fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <HAL_Init+0x40>)
 8000fc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <HAL_Init+0x40>)
 8000fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f000 f91b 	bl	8001210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f000 f808 	bl	8000ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe0:	f7ff fb8e 	bl	8000700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40023c00 	.word	0x40023c00

08000ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_InitTick+0x54>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_InitTick+0x58>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001006:	fbb3 f3f1 	udiv	r3, r3, r1
 800100a:	fbb2 f3f3 	udiv	r3, r2, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f925 	bl	800125e <HAL_SYSTICK_Config>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e00e      	b.n	800103c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b0f      	cmp	r3, #15
 8001022:	d80a      	bhi.n	800103a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001024:	2200      	movs	r2, #0
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	f000 f8fb 	bl	8001226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001030:	4a06      	ldr	r2, [pc, #24]	; (800104c <HAL_InitTick+0x5c>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	e000      	b.n	800103c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000000 	.word	0x20000000
 8001048:	20000008 	.word	0x20000008
 800104c:	20000004 	.word	0x20000004

08001050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <HAL_GetTick+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000298 	.word	0x20000298

08001068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001070:	f7ff ffee 	bl	8001050 <HAL_GetTick>
 8001074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001080:	d005      	beq.n	800108e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <HAL_Delay+0x40>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800108e:	bf00      	nop
 8001090:	f7ff ffde 	bl	8001050 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	429a      	cmp	r2, r3
 800109e:	d8f7      	bhi.n	8001090 <HAL_Delay+0x28>
  {
  }
}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000008 	.word	0x20000008

080010ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <__NVIC_SetPriorityGrouping+0x44>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c8:	4013      	ands	r3, r2
 80010ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010de:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <__NVIC_SetPriorityGrouping+0x44>)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	60d3      	str	r3, [r2, #12]
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <__NVIC_GetPriorityGrouping+0x18>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	f003 0307 	and.w	r3, r3, #7
}
 8001102:	4618      	mov	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	db0a      	blt.n	800113a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	490c      	ldr	r1, [pc, #48]	; (800115c <__NVIC_SetPriority+0x4c>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	440b      	add	r3, r1
 8001134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001138:	e00a      	b.n	8001150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4908      	ldr	r1, [pc, #32]	; (8001160 <__NVIC_SetPriority+0x50>)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	3b04      	subs	r3, #4
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	440b      	add	r3, r1
 800114e:	761a      	strb	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f1c3 0307 	rsb	r3, r3, #7
 800117e:	2b04      	cmp	r3, #4
 8001180:	bf28      	it	cs
 8001182:	2304      	movcs	r3, #4
 8001184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3304      	adds	r3, #4
 800118a:	2b06      	cmp	r3, #6
 800118c:	d902      	bls.n	8001194 <NVIC_EncodePriority+0x30>
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3b03      	subs	r3, #3
 8001192:	e000      	b.n	8001196 <NVIC_EncodePriority+0x32>
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	4313      	orrs	r3, r2
         );
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011dc:	d301      	bcc.n	80011e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011de:	2301      	movs	r3, #1
 80011e0:	e00f      	b.n	8001202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <SysTick_Config+0x40>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ea:	210f      	movs	r1, #15
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f7ff ff8e 	bl	8001110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <SysTick_Config+0x40>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fa:	4b04      	ldr	r3, [pc, #16]	; (800120c <SysTick_Config+0x40>)
 80011fc:	2207      	movs	r2, #7
 80011fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	e000e010 	.word	0xe000e010

08001210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff47 	bl	80010ac <__NVIC_SetPriorityGrouping>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001238:	f7ff ff5c 	bl	80010f4 <__NVIC_GetPriorityGrouping>
 800123c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7ff ff8e 	bl	8001164 <NVIC_EncodePriority>
 8001248:	4602      	mov	r2, r0
 800124a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff5d 	bl	8001110 <__NVIC_SetPriority>
}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ffb0 	bl	80011cc <SysTick_Config>
 800126c:	4603      	mov	r3, r0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800128a:	2300      	movs	r3, #0
 800128c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
 8001292:	e177      	b.n	8001584 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001294:	2201      	movs	r2, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	f040 8166 	bne.w	800157e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d00b      	beq.n	80012d2 <HAL_GPIO_Init+0x5a>
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d007      	beq.n	80012d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012c6:	2b11      	cmp	r3, #17
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b12      	cmp	r3, #18
 80012d0:	d130      	bne.n	8001334 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	2203      	movs	r2, #3
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001308:	2201      	movs	r2, #1
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	091b      	lsrs	r3, r3, #4
 800131e:	f003 0201 	and.w	r2, r3, #1
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	2203      	movs	r2, #3
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0xfc>
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b12      	cmp	r3, #18
 8001372:	d123      	bne.n	80013bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	08da      	lsrs	r2, r3, #3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3208      	adds	r2, #8
 800137c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	220f      	movs	r2, #15
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	08da      	lsrs	r2, r3, #3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3208      	adds	r2, #8
 80013b6:	69b9      	ldr	r1, [r7, #24]
 80013b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	2203      	movs	r2, #3
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0203 	and.w	r2, r3, #3
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 80c0 	beq.w	800157e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b65      	ldr	r3, [pc, #404]	; (8001598 <HAL_GPIO_Init+0x320>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	4a64      	ldr	r2, [pc, #400]	; (8001598 <HAL_GPIO_Init+0x320>)
 8001408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140c:	6453      	str	r3, [r2, #68]	; 0x44
 800140e:	4b62      	ldr	r3, [pc, #392]	; (8001598 <HAL_GPIO_Init+0x320>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800141a:	4a60      	ldr	r2, [pc, #384]	; (800159c <HAL_GPIO_Init+0x324>)
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	3302      	adds	r3, #2
 8001422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	220f      	movs	r2, #15
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a57      	ldr	r2, [pc, #348]	; (80015a0 <HAL_GPIO_Init+0x328>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d037      	beq.n	80014b6 <HAL_GPIO_Init+0x23e>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a56      	ldr	r2, [pc, #344]	; (80015a4 <HAL_GPIO_Init+0x32c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d031      	beq.n	80014b2 <HAL_GPIO_Init+0x23a>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a55      	ldr	r2, [pc, #340]	; (80015a8 <HAL_GPIO_Init+0x330>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d02b      	beq.n	80014ae <HAL_GPIO_Init+0x236>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a54      	ldr	r2, [pc, #336]	; (80015ac <HAL_GPIO_Init+0x334>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d025      	beq.n	80014aa <HAL_GPIO_Init+0x232>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a53      	ldr	r2, [pc, #332]	; (80015b0 <HAL_GPIO_Init+0x338>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d01f      	beq.n	80014a6 <HAL_GPIO_Init+0x22e>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a52      	ldr	r2, [pc, #328]	; (80015b4 <HAL_GPIO_Init+0x33c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d019      	beq.n	80014a2 <HAL_GPIO_Init+0x22a>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a51      	ldr	r2, [pc, #324]	; (80015b8 <HAL_GPIO_Init+0x340>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d013      	beq.n	800149e <HAL_GPIO_Init+0x226>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a50      	ldr	r2, [pc, #320]	; (80015bc <HAL_GPIO_Init+0x344>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d00d      	beq.n	800149a <HAL_GPIO_Init+0x222>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a4f      	ldr	r2, [pc, #316]	; (80015c0 <HAL_GPIO_Init+0x348>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d007      	beq.n	8001496 <HAL_GPIO_Init+0x21e>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4e      	ldr	r2, [pc, #312]	; (80015c4 <HAL_GPIO_Init+0x34c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d101      	bne.n	8001492 <HAL_GPIO_Init+0x21a>
 800148e:	2309      	movs	r3, #9
 8001490:	e012      	b.n	80014b8 <HAL_GPIO_Init+0x240>
 8001492:	230a      	movs	r3, #10
 8001494:	e010      	b.n	80014b8 <HAL_GPIO_Init+0x240>
 8001496:	2308      	movs	r3, #8
 8001498:	e00e      	b.n	80014b8 <HAL_GPIO_Init+0x240>
 800149a:	2307      	movs	r3, #7
 800149c:	e00c      	b.n	80014b8 <HAL_GPIO_Init+0x240>
 800149e:	2306      	movs	r3, #6
 80014a0:	e00a      	b.n	80014b8 <HAL_GPIO_Init+0x240>
 80014a2:	2305      	movs	r3, #5
 80014a4:	e008      	b.n	80014b8 <HAL_GPIO_Init+0x240>
 80014a6:	2304      	movs	r3, #4
 80014a8:	e006      	b.n	80014b8 <HAL_GPIO_Init+0x240>
 80014aa:	2303      	movs	r3, #3
 80014ac:	e004      	b.n	80014b8 <HAL_GPIO_Init+0x240>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e002      	b.n	80014b8 <HAL_GPIO_Init+0x240>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <HAL_GPIO_Init+0x240>
 80014b6:	2300      	movs	r3, #0
 80014b8:	69fa      	ldr	r2, [r7, #28]
 80014ba:	f002 0203 	and.w	r2, r2, #3
 80014be:	0092      	lsls	r2, r2, #2
 80014c0:	4093      	lsls	r3, r2
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014c8:	4934      	ldr	r1, [pc, #208]	; (800159c <HAL_GPIO_Init+0x324>)
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	3302      	adds	r3, #2
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d6:	4b3c      	ldr	r3, [pc, #240]	; (80015c8 <HAL_GPIO_Init+0x350>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014fa:	4a33      	ldr	r2, [pc, #204]	; (80015c8 <HAL_GPIO_Init+0x350>)
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001500:	4b31      	ldr	r3, [pc, #196]	; (80015c8 <HAL_GPIO_Init+0x350>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001524:	4a28      	ldr	r2, [pc, #160]	; (80015c8 <HAL_GPIO_Init+0x350>)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800152a:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <HAL_GPIO_Init+0x350>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800154e:	4a1e      	ldr	r2, [pc, #120]	; (80015c8 <HAL_GPIO_Init+0x350>)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001554:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <HAL_GPIO_Init+0x350>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001578:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <HAL_GPIO_Init+0x350>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3301      	adds	r3, #1
 8001582:	61fb      	str	r3, [r7, #28]
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	2b0f      	cmp	r3, #15
 8001588:	f67f ae84 	bls.w	8001294 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800158c:	bf00      	nop
 800158e:	3724      	adds	r7, #36	; 0x24
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	40023800 	.word	0x40023800
 800159c:	40013800 	.word	0x40013800
 80015a0:	40020000 	.word	0x40020000
 80015a4:	40020400 	.word	0x40020400
 80015a8:	40020800 	.word	0x40020800
 80015ac:	40020c00 	.word	0x40020c00
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40021400 	.word	0x40021400
 80015b8:	40021800 	.word	0x40021800
 80015bc:	40021c00 	.word	0x40021c00
 80015c0:	40022000 	.word	0x40022000
 80015c4:	40022400 	.word	0x40022400
 80015c8:	40013c00 	.word	0x40013c00

080015cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e25b      	b.n	8001a96 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d075      	beq.n	80016d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ea:	4ba3      	ldr	r3, [pc, #652]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	d00c      	beq.n	8001610 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015f6:	4ba0      	ldr	r3, [pc, #640]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d112      	bne.n	8001628 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001602:	4b9d      	ldr	r3, [pc, #628]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800160a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800160e:	d10b      	bne.n	8001628 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001610:	4b99      	ldr	r3, [pc, #612]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d05b      	beq.n	80016d4 <HAL_RCC_OscConfig+0x108>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d157      	bne.n	80016d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e236      	b.n	8001a96 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001630:	d106      	bne.n	8001640 <HAL_RCC_OscConfig+0x74>
 8001632:	4b91      	ldr	r3, [pc, #580]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a90      	ldr	r2, [pc, #576]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 8001638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	e01d      	b.n	800167c <HAL_RCC_OscConfig+0xb0>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001648:	d10c      	bne.n	8001664 <HAL_RCC_OscConfig+0x98>
 800164a:	4b8b      	ldr	r3, [pc, #556]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a8a      	ldr	r2, [pc, #552]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 8001650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	4b88      	ldr	r3, [pc, #544]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a87      	ldr	r2, [pc, #540]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 800165c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e00b      	b.n	800167c <HAL_RCC_OscConfig+0xb0>
 8001664:	4b84      	ldr	r3, [pc, #528]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a83      	ldr	r2, [pc, #524]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 800166a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4b81      	ldr	r3, [pc, #516]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a80      	ldr	r2, [pc, #512]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 8001676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800167a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d013      	beq.n	80016ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fce4 	bl	8001050 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800168c:	f7ff fce0 	bl	8001050 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b64      	cmp	r3, #100	; 0x64
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e1fb      	b.n	8001a96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169e:	4b76      	ldr	r3, [pc, #472]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0xc0>
 80016aa:	e014      	b.n	80016d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fcd0 	bl	8001050 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b4:	f7ff fccc 	bl	8001050 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b64      	cmp	r3, #100	; 0x64
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e1e7      	b.n	8001a96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c6:	4b6c      	ldr	r3, [pc, #432]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0xe8>
 80016d2:	e000      	b.n	80016d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d063      	beq.n	80017aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016e2:	4b65      	ldr	r3, [pc, #404]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00b      	beq.n	8001706 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ee:	4b62      	ldr	r3, [pc, #392]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	d11c      	bne.n	8001734 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016fa:	4b5f      	ldr	r3, [pc, #380]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d116      	bne.n	8001734 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001706:	4b5c      	ldr	r3, [pc, #368]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d005      	beq.n	800171e <HAL_RCC_OscConfig+0x152>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d001      	beq.n	800171e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e1bb      	b.n	8001a96 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171e:	4b56      	ldr	r3, [pc, #344]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4952      	ldr	r1, [pc, #328]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 800172e:	4313      	orrs	r3, r2
 8001730:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001732:	e03a      	b.n	80017aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d020      	beq.n	800177e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800173c:	4b4f      	ldr	r3, [pc, #316]	; (800187c <HAL_RCC_OscConfig+0x2b0>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001742:	f7ff fc85 	bl	8001050 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800174a:	f7ff fc81 	bl	8001050 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e19c      	b.n	8001a96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175c:	4b46      	ldr	r3, [pc, #280]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001768:	4b43      	ldr	r3, [pc, #268]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4940      	ldr	r1, [pc, #256]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 8001778:	4313      	orrs	r3, r2
 800177a:	600b      	str	r3, [r1, #0]
 800177c:	e015      	b.n	80017aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177e:	4b3f      	ldr	r3, [pc, #252]	; (800187c <HAL_RCC_OscConfig+0x2b0>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff fc64 	bl	8001050 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800178c:	f7ff fc60 	bl	8001050 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e17b      	b.n	8001a96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179e:	4b36      	ldr	r3, [pc, #216]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d030      	beq.n	8001818 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d016      	beq.n	80017ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017be:	4b30      	ldr	r3, [pc, #192]	; (8001880 <HAL_RCC_OscConfig+0x2b4>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c4:	f7ff fc44 	bl	8001050 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017cc:	f7ff fc40 	bl	8001050 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e15b      	b.n	8001a96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017de:	4b26      	ldr	r3, [pc, #152]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 80017e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x200>
 80017ea:	e015      	b.n	8001818 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ec:	4b24      	ldr	r3, [pc, #144]	; (8001880 <HAL_RCC_OscConfig+0x2b4>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f2:	f7ff fc2d 	bl	8001050 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017fa:	f7ff fc29 	bl	8001050 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e144      	b.n	8001a96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180c:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 800180e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f0      	bne.n	80017fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 80a0 	beq.w	8001966 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001826:	2300      	movs	r3, #0
 8001828:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10f      	bne.n	8001856 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001844:	6413      	str	r3, [r2, #64]	; 0x40
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <HAL_RCC_OscConfig+0x2ac>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001852:	2301      	movs	r3, #1
 8001854:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001856:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_RCC_OscConfig+0x2b8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185e:	2b00      	cmp	r3, #0
 8001860:	d121      	bne.n	80018a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001862:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_RCC_OscConfig+0x2b8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a07      	ldr	r2, [pc, #28]	; (8001884 <HAL_RCC_OscConfig+0x2b8>)
 8001868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186e:	f7ff fbef 	bl	8001050 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001874:	e011      	b.n	800189a <HAL_RCC_OscConfig+0x2ce>
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	42470000 	.word	0x42470000
 8001880:	42470e80 	.word	0x42470e80
 8001884:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001888:	f7ff fbe2 	bl	8001050 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e0fd      	b.n	8001a96 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189a:	4b81      	ldr	r3, [pc, #516]	; (8001aa0 <HAL_RCC_OscConfig+0x4d4>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d106      	bne.n	80018bc <HAL_RCC_OscConfig+0x2f0>
 80018ae:	4b7d      	ldr	r3, [pc, #500]	; (8001aa4 <HAL_RCC_OscConfig+0x4d8>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b2:	4a7c      	ldr	r2, [pc, #496]	; (8001aa4 <HAL_RCC_OscConfig+0x4d8>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ba:	e01c      	b.n	80018f6 <HAL_RCC_OscConfig+0x32a>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b05      	cmp	r3, #5
 80018c2:	d10c      	bne.n	80018de <HAL_RCC_OscConfig+0x312>
 80018c4:	4b77      	ldr	r3, [pc, #476]	; (8001aa4 <HAL_RCC_OscConfig+0x4d8>)
 80018c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c8:	4a76      	ldr	r2, [pc, #472]	; (8001aa4 <HAL_RCC_OscConfig+0x4d8>)
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	6713      	str	r3, [r2, #112]	; 0x70
 80018d0:	4b74      	ldr	r3, [pc, #464]	; (8001aa4 <HAL_RCC_OscConfig+0x4d8>)
 80018d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d4:	4a73      	ldr	r2, [pc, #460]	; (8001aa4 <HAL_RCC_OscConfig+0x4d8>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6713      	str	r3, [r2, #112]	; 0x70
 80018dc:	e00b      	b.n	80018f6 <HAL_RCC_OscConfig+0x32a>
 80018de:	4b71      	ldr	r3, [pc, #452]	; (8001aa4 <HAL_RCC_OscConfig+0x4d8>)
 80018e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e2:	4a70      	ldr	r2, [pc, #448]	; (8001aa4 <HAL_RCC_OscConfig+0x4d8>)
 80018e4:	f023 0301 	bic.w	r3, r3, #1
 80018e8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ea:	4b6e      	ldr	r3, [pc, #440]	; (8001aa4 <HAL_RCC_OscConfig+0x4d8>)
 80018ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ee:	4a6d      	ldr	r2, [pc, #436]	; (8001aa4 <HAL_RCC_OscConfig+0x4d8>)
 80018f0:	f023 0304 	bic.w	r3, r3, #4
 80018f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d015      	beq.n	800192a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fe:	f7ff fba7 	bl	8001050 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001904:	e00a      	b.n	800191c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001906:	f7ff fba3 	bl	8001050 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	f241 3288 	movw	r2, #5000	; 0x1388
 8001914:	4293      	cmp	r3, r2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e0bc      	b.n	8001a96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191c:	4b61      	ldr	r3, [pc, #388]	; (8001aa4 <HAL_RCC_OscConfig+0x4d8>)
 800191e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0ee      	beq.n	8001906 <HAL_RCC_OscConfig+0x33a>
 8001928:	e014      	b.n	8001954 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192a:	f7ff fb91 	bl	8001050 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001930:	e00a      	b.n	8001948 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001932:	f7ff fb8d 	bl	8001050 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001940:	4293      	cmp	r3, r2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e0a6      	b.n	8001a96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001948:	4b56      	ldr	r3, [pc, #344]	; (8001aa4 <HAL_RCC_OscConfig+0x4d8>)
 800194a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1ee      	bne.n	8001932 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001954:	7dfb      	ldrb	r3, [r7, #23]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d105      	bne.n	8001966 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800195a:	4b52      	ldr	r3, [pc, #328]	; (8001aa4 <HAL_RCC_OscConfig+0x4d8>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	4a51      	ldr	r2, [pc, #324]	; (8001aa4 <HAL_RCC_OscConfig+0x4d8>)
 8001960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001964:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 8092 	beq.w	8001a94 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001970:	4b4c      	ldr	r3, [pc, #304]	; (8001aa4 <HAL_RCC_OscConfig+0x4d8>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 030c 	and.w	r3, r3, #12
 8001978:	2b08      	cmp	r3, #8
 800197a:	d05c      	beq.n	8001a36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d141      	bne.n	8001a08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001984:	4b48      	ldr	r3, [pc, #288]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198a:	f7ff fb61 	bl	8001050 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001992:	f7ff fb5d 	bl	8001050 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e078      	b.n	8001a96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a4:	4b3f      	ldr	r3, [pc, #252]	; (8001aa4 <HAL_RCC_OscConfig+0x4d8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f0      	bne.n	8001992 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69da      	ldr	r2, [r3, #28]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	019b      	lsls	r3, r3, #6
 80019c0:	431a      	orrs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c6:	085b      	lsrs	r3, r3, #1
 80019c8:	3b01      	subs	r3, #1
 80019ca:	041b      	lsls	r3, r3, #16
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d2:	061b      	lsls	r3, r3, #24
 80019d4:	4933      	ldr	r1, [pc, #204]	; (8001aa4 <HAL_RCC_OscConfig+0x4d8>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019da:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 80019dc:	2201      	movs	r2, #1
 80019de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff fb36 	bl	8001050 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e8:	f7ff fb32 	bl	8001050 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e04d      	b.n	8001a96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fa:	4b2a      	ldr	r3, [pc, #168]	; (8001aa4 <HAL_RCC_OscConfig+0x4d8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0f0      	beq.n	80019e8 <HAL_RCC_OscConfig+0x41c>
 8001a06:	e045      	b.n	8001a94 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a08:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <HAL_RCC_OscConfig+0x4dc>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0e:	f7ff fb1f 	bl	8001050 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a16:	f7ff fb1b 	bl	8001050 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e036      	b.n	8001a96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <HAL_RCC_OscConfig+0x4d8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f0      	bne.n	8001a16 <HAL_RCC_OscConfig+0x44a>
 8001a34:	e02e      	b.n	8001a94 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d101      	bne.n	8001a42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e029      	b.n	8001a96 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_RCC_OscConfig+0x4d8>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d11c      	bne.n	8001a90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d115      	bne.n	8001a90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d10d      	bne.n	8001a90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d106      	bne.n	8001a90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40007000 	.word	0x40007000
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	42470060 	.word	0x42470060

08001aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0cc      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac0:	4b68      	ldr	r3, [pc, #416]	; (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 030f 	and.w	r3, r3, #15
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d90c      	bls.n	8001ae8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	4b65      	ldr	r3, [pc, #404]	; (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad6:	4b63      	ldr	r3, [pc, #396]	; (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d001      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e0b8      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d020      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b00:	4b59      	ldr	r3, [pc, #356]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	4a58      	ldr	r2, [pc, #352]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b18:	4b53      	ldr	r3, [pc, #332]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	4a52      	ldr	r2, [pc, #328]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b24:	4b50      	ldr	r3, [pc, #320]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	494d      	ldr	r1, [pc, #308]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d044      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d107      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	4b47      	ldr	r3, [pc, #284]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d119      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e07f      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d003      	beq.n	8001b6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d107      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6a:	4b3f      	ldr	r3, [pc, #252]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d109      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e06f      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7a:	4b3b      	ldr	r3, [pc, #236]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e067      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b8a:	4b37      	ldr	r3, [pc, #220]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f023 0203 	bic.w	r2, r3, #3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4934      	ldr	r1, [pc, #208]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b9c:	f7ff fa58 	bl	8001050 <HAL_GetTick>
 8001ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba2:	e00a      	b.n	8001bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba4:	f7ff fa54 	bl	8001050 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e04f      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bba:	4b2b      	ldr	r3, [pc, #172]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 020c 	and.w	r2, r3, #12
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d1eb      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d20c      	bcs.n	8001bf4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be2:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e032      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d008      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c00:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4916      	ldr	r1, [pc, #88]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d009      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	490e      	ldr	r1, [pc, #56]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c32:	f000 f821 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8001c36:	4601      	mov	r1, r0
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001c44:	5cd3      	ldrb	r3, [r2, r3]
 8001c46:	fa21 f303 	lsr.w	r3, r1, r3
 8001c4a:	4a09      	ldr	r2, [pc, #36]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_RCC_ClockConfig+0x1c8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff f9cc 	bl	8000ff0 <HAL_InitTick>

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40023c00 	.word	0x40023c00
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	0800313c 	.word	0x0800313c
 8001c70:	20000000 	.word	0x20000000
 8001c74:	20000004 	.word	0x20000004

08001c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	2300      	movs	r3, #0
 8001c88:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c8e:	4b63      	ldr	r3, [pc, #396]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 030c 	and.w	r3, r3, #12
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d007      	beq.n	8001caa <HAL_RCC_GetSysClockFreq+0x32>
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d008      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x38>
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f040 80b4 	bne.w	8001e0c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ca4:	4b5e      	ldr	r3, [pc, #376]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ca6:	60bb      	str	r3, [r7, #8]
       break;
 8001ca8:	e0b3      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001caa:	4b5e      	ldr	r3, [pc, #376]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001cac:	60bb      	str	r3, [r7, #8]
      break;
 8001cae:	e0b0      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cb0:	4b5a      	ldr	r3, [pc, #360]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cb8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cba:	4b58      	ldr	r3, [pc, #352]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d04a      	beq.n	8001d5c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc6:	4b55      	ldr	r3, [pc, #340]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	099b      	lsrs	r3, r3, #6
 8001ccc:	f04f 0400 	mov.w	r4, #0
 8001cd0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	ea03 0501 	and.w	r5, r3, r1
 8001cdc:	ea04 0602 	and.w	r6, r4, r2
 8001ce0:	4629      	mov	r1, r5
 8001ce2:	4632      	mov	r2, r6
 8001ce4:	f04f 0300 	mov.w	r3, #0
 8001ce8:	f04f 0400 	mov.w	r4, #0
 8001cec:	0154      	lsls	r4, r2, #5
 8001cee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cf2:	014b      	lsls	r3, r1, #5
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4622      	mov	r2, r4
 8001cf8:	1b49      	subs	r1, r1, r5
 8001cfa:	eb62 0206 	sbc.w	r2, r2, r6
 8001cfe:	f04f 0300 	mov.w	r3, #0
 8001d02:	f04f 0400 	mov.w	r4, #0
 8001d06:	0194      	lsls	r4, r2, #6
 8001d08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d0c:	018b      	lsls	r3, r1, #6
 8001d0e:	1a5b      	subs	r3, r3, r1
 8001d10:	eb64 0402 	sbc.w	r4, r4, r2
 8001d14:	f04f 0100 	mov.w	r1, #0
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	00e2      	lsls	r2, r4, #3
 8001d1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d22:	00d9      	lsls	r1, r3, #3
 8001d24:	460b      	mov	r3, r1
 8001d26:	4614      	mov	r4, r2
 8001d28:	195b      	adds	r3, r3, r5
 8001d2a:	eb44 0406 	adc.w	r4, r4, r6
 8001d2e:	f04f 0100 	mov.w	r1, #0
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	0262      	lsls	r2, r4, #9
 8001d38:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001d3c:	0259      	lsls	r1, r3, #9
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4614      	mov	r4, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	4621      	mov	r1, r4
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f04f 0400 	mov.w	r4, #0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4623      	mov	r3, r4
 8001d50:	f7fe fa4c 	bl	80001ec <__aeabi_uldivmod>
 8001d54:	4603      	mov	r3, r0
 8001d56:	460c      	mov	r4, r1
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	e049      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d5c:	4b2f      	ldr	r3, [pc, #188]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	099b      	lsrs	r3, r3, #6
 8001d62:	f04f 0400 	mov.w	r4, #0
 8001d66:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	ea03 0501 	and.w	r5, r3, r1
 8001d72:	ea04 0602 	and.w	r6, r4, r2
 8001d76:	4629      	mov	r1, r5
 8001d78:	4632      	mov	r2, r6
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	f04f 0400 	mov.w	r4, #0
 8001d82:	0154      	lsls	r4, r2, #5
 8001d84:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d88:	014b      	lsls	r3, r1, #5
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4622      	mov	r2, r4
 8001d8e:	1b49      	subs	r1, r1, r5
 8001d90:	eb62 0206 	sbc.w	r2, r2, r6
 8001d94:	f04f 0300 	mov.w	r3, #0
 8001d98:	f04f 0400 	mov.w	r4, #0
 8001d9c:	0194      	lsls	r4, r2, #6
 8001d9e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001da2:	018b      	lsls	r3, r1, #6
 8001da4:	1a5b      	subs	r3, r3, r1
 8001da6:	eb64 0402 	sbc.w	r4, r4, r2
 8001daa:	f04f 0100 	mov.w	r1, #0
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	00e2      	lsls	r2, r4, #3
 8001db4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001db8:	00d9      	lsls	r1, r3, #3
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4614      	mov	r4, r2
 8001dbe:	195b      	adds	r3, r3, r5
 8001dc0:	eb44 0406 	adc.w	r4, r4, r6
 8001dc4:	f04f 0100 	mov.w	r1, #0
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	02a2      	lsls	r2, r4, #10
 8001dce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001dd2:	0299      	lsls	r1, r3, #10
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4614      	mov	r4, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	4621      	mov	r1, r4
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f04f 0400 	mov.w	r4, #0
 8001de2:	461a      	mov	r2, r3
 8001de4:	4623      	mov	r3, r4
 8001de6:	f7fe fa01 	bl	80001ec <__aeabi_uldivmod>
 8001dea:	4603      	mov	r3, r0
 8001dec:	460c      	mov	r4, r1
 8001dee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001df0:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	0c1b      	lsrs	r3, r3, #16
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e08:	60bb      	str	r3, [r7, #8]
      break;
 8001e0a:	e002      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e0c:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001e0e:	60bb      	str	r3, [r7, #8]
      break;
 8001e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e12:	68bb      	ldr	r3, [r7, #8]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	00f42400 	.word	0x00f42400
 8001e24:	007a1200 	.word	0x007a1200

08001e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	20000000 	.word	0x20000000

08001e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e44:	f7ff fff0 	bl	8001e28 <HAL_RCC_GetHCLKFreq>
 8001e48:	4601      	mov	r1, r0
 8001e4a:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	0a9b      	lsrs	r3, r3, #10
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	4a03      	ldr	r2, [pc, #12]	; (8001e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e56:	5cd3      	ldrb	r3, [r2, r3]
 8001e58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40023800 	.word	0x40023800
 8001e64:	0800314c 	.word	0x0800314c

08001e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e6c:	f7ff ffdc 	bl	8001e28 <HAL_RCC_GetHCLKFreq>
 8001e70:	4601      	mov	r1, r0
 8001e72:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	0b5b      	lsrs	r3, r3, #13
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	4a03      	ldr	r2, [pc, #12]	; (8001e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e7e:	5cd3      	ldrb	r3, [r2, r3]
 8001e80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	0800314c 	.word	0x0800314c

08001e90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e03f      	b.n	8001f22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d106      	bne.n	8001ebc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7fe fe6a 	bl	8000b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2224      	movs	r2, #36	; 0x24
 8001ec0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ed2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f90b 	bl	80020f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ee8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	695a      	ldr	r2, [r3, #20]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ef8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2220      	movs	r2, #32
 8001f14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b088      	sub	sp, #32
 8001f2e:	af02      	add	r7, sp, #8
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	603b      	str	r3, [r7, #0]
 8001f36:	4613      	mov	r3, r2
 8001f38:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b20      	cmp	r3, #32
 8001f48:	f040 8083 	bne.w	8002052 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <HAL_UART_Transmit+0x2e>
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e07b      	b.n	8002054 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <HAL_UART_Transmit+0x40>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e074      	b.n	8002054 <HAL_UART_Transmit+0x12a>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2221      	movs	r2, #33	; 0x21
 8001f7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001f80:	f7ff f866 	bl	8001050 <HAL_GetTick>
 8001f84:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	88fa      	ldrh	r2, [r7, #6]
 8001f8a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	88fa      	ldrh	r2, [r7, #6]
 8001f90:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001f9a:	e042      	b.n	8002022 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fb2:	d122      	bne.n	8001ffa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2180      	movs	r1, #128	; 0x80
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 f84c 	bl	800205c <UART_WaitOnFlagUntilTimeout>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e042      	b.n	8002054 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fe0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d103      	bne.n	8001ff2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	3302      	adds	r3, #2
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	e017      	b.n	8002022 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	e013      	b.n	8002022 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2200      	movs	r2, #0
 8002002:	2180      	movs	r1, #128	; 0x80
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 f829 	bl	800205c <UART_WaitOnFlagUntilTimeout>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e01f      	b.n	8002054 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	60ba      	str	r2, [r7, #8]
 800201a:	781a      	ldrb	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002026:	b29b      	uxth	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1b7      	bne.n	8001f9c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2200      	movs	r2, #0
 8002034:	2140      	movs	r1, #64	; 0x40
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 f810 	bl	800205c <UART_WaitOnFlagUntilTimeout>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e006      	b.n	8002054 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2220      	movs	r2, #32
 800204a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	e000      	b.n	8002054 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002052:	2302      	movs	r3, #2
  }
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	603b      	str	r3, [r7, #0]
 8002068:	4613      	mov	r3, r2
 800206a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800206c:	e02c      	b.n	80020c8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d028      	beq.n	80020c8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d007      	beq.n	800208c <UART_WaitOnFlagUntilTimeout+0x30>
 800207c:	f7fe ffe8 	bl	8001050 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	429a      	cmp	r2, r3
 800208a:	d21d      	bcs.n	80020c8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800209a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695a      	ldr	r2, [r3, #20]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0201 	bic.w	r2, r2, #1
 80020aa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2220      	movs	r2, #32
 80020b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e00f      	b.n	80020e8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	4013      	ands	r3, r2
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	bf0c      	ite	eq
 80020d8:	2301      	moveq	r3, #1
 80020da:	2300      	movne	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	461a      	mov	r2, r3
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d0c3      	beq.n	800206e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020f4:	b085      	sub	sp, #20
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	4313      	orrs	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002132:	f023 030c 	bic.w	r3, r3, #12
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	68f9      	ldr	r1, [r7, #12]
 800213c:	430b      	orrs	r3, r1
 800213e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699a      	ldr	r2, [r3, #24]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800215e:	f040 818b 	bne.w	8002478 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4ac1      	ldr	r2, [pc, #772]	; (800246c <UART_SetConfig+0x37c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d005      	beq.n	8002178 <UART_SetConfig+0x88>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4abf      	ldr	r2, [pc, #764]	; (8002470 <UART_SetConfig+0x380>)
 8002172:	4293      	cmp	r3, r2
 8002174:	f040 80bd 	bne.w	80022f2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002178:	f7ff fe76 	bl	8001e68 <HAL_RCC_GetPCLK2Freq>
 800217c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	461d      	mov	r5, r3
 8002182:	f04f 0600 	mov.w	r6, #0
 8002186:	46a8      	mov	r8, r5
 8002188:	46b1      	mov	r9, r6
 800218a:	eb18 0308 	adds.w	r3, r8, r8
 800218e:	eb49 0409 	adc.w	r4, r9, r9
 8002192:	4698      	mov	r8, r3
 8002194:	46a1      	mov	r9, r4
 8002196:	eb18 0805 	adds.w	r8, r8, r5
 800219a:	eb49 0906 	adc.w	r9, r9, r6
 800219e:	f04f 0100 	mov.w	r1, #0
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80021aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80021ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80021b2:	4688      	mov	r8, r1
 80021b4:	4691      	mov	r9, r2
 80021b6:	eb18 0005 	adds.w	r0, r8, r5
 80021ba:	eb49 0106 	adc.w	r1, r9, r6
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	461d      	mov	r5, r3
 80021c4:	f04f 0600 	mov.w	r6, #0
 80021c8:	196b      	adds	r3, r5, r5
 80021ca:	eb46 0406 	adc.w	r4, r6, r6
 80021ce:	461a      	mov	r2, r3
 80021d0:	4623      	mov	r3, r4
 80021d2:	f7fe f80b 	bl	80001ec <__aeabi_uldivmod>
 80021d6:	4603      	mov	r3, r0
 80021d8:	460c      	mov	r4, r1
 80021da:	461a      	mov	r2, r3
 80021dc:	4ba5      	ldr	r3, [pc, #660]	; (8002474 <UART_SetConfig+0x384>)
 80021de:	fba3 2302 	umull	r2, r3, r3, r2
 80021e2:	095b      	lsrs	r3, r3, #5
 80021e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	461d      	mov	r5, r3
 80021ec:	f04f 0600 	mov.w	r6, #0
 80021f0:	46a9      	mov	r9, r5
 80021f2:	46b2      	mov	sl, r6
 80021f4:	eb19 0309 	adds.w	r3, r9, r9
 80021f8:	eb4a 040a 	adc.w	r4, sl, sl
 80021fc:	4699      	mov	r9, r3
 80021fe:	46a2      	mov	sl, r4
 8002200:	eb19 0905 	adds.w	r9, r9, r5
 8002204:	eb4a 0a06 	adc.w	sl, sl, r6
 8002208:	f04f 0100 	mov.w	r1, #0
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002214:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002218:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800221c:	4689      	mov	r9, r1
 800221e:	4692      	mov	sl, r2
 8002220:	eb19 0005 	adds.w	r0, r9, r5
 8002224:	eb4a 0106 	adc.w	r1, sl, r6
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	461d      	mov	r5, r3
 800222e:	f04f 0600 	mov.w	r6, #0
 8002232:	196b      	adds	r3, r5, r5
 8002234:	eb46 0406 	adc.w	r4, r6, r6
 8002238:	461a      	mov	r2, r3
 800223a:	4623      	mov	r3, r4
 800223c:	f7fd ffd6 	bl	80001ec <__aeabi_uldivmod>
 8002240:	4603      	mov	r3, r0
 8002242:	460c      	mov	r4, r1
 8002244:	461a      	mov	r2, r3
 8002246:	4b8b      	ldr	r3, [pc, #556]	; (8002474 <UART_SetConfig+0x384>)
 8002248:	fba3 1302 	umull	r1, r3, r3, r2
 800224c:	095b      	lsrs	r3, r3, #5
 800224e:	2164      	movs	r1, #100	; 0x64
 8002250:	fb01 f303 	mul.w	r3, r1, r3
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	3332      	adds	r3, #50	; 0x32
 800225a:	4a86      	ldr	r2, [pc, #536]	; (8002474 <UART_SetConfig+0x384>)
 800225c:	fba2 2303 	umull	r2, r3, r2, r3
 8002260:	095b      	lsrs	r3, r3, #5
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002268:	4498      	add	r8, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	461d      	mov	r5, r3
 800226e:	f04f 0600 	mov.w	r6, #0
 8002272:	46a9      	mov	r9, r5
 8002274:	46b2      	mov	sl, r6
 8002276:	eb19 0309 	adds.w	r3, r9, r9
 800227a:	eb4a 040a 	adc.w	r4, sl, sl
 800227e:	4699      	mov	r9, r3
 8002280:	46a2      	mov	sl, r4
 8002282:	eb19 0905 	adds.w	r9, r9, r5
 8002286:	eb4a 0a06 	adc.w	sl, sl, r6
 800228a:	f04f 0100 	mov.w	r1, #0
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002296:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800229a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800229e:	4689      	mov	r9, r1
 80022a0:	4692      	mov	sl, r2
 80022a2:	eb19 0005 	adds.w	r0, r9, r5
 80022a6:	eb4a 0106 	adc.w	r1, sl, r6
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	461d      	mov	r5, r3
 80022b0:	f04f 0600 	mov.w	r6, #0
 80022b4:	196b      	adds	r3, r5, r5
 80022b6:	eb46 0406 	adc.w	r4, r6, r6
 80022ba:	461a      	mov	r2, r3
 80022bc:	4623      	mov	r3, r4
 80022be:	f7fd ff95 	bl	80001ec <__aeabi_uldivmod>
 80022c2:	4603      	mov	r3, r0
 80022c4:	460c      	mov	r4, r1
 80022c6:	461a      	mov	r2, r3
 80022c8:	4b6a      	ldr	r3, [pc, #424]	; (8002474 <UART_SetConfig+0x384>)
 80022ca:	fba3 1302 	umull	r1, r3, r3, r2
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	2164      	movs	r1, #100	; 0x64
 80022d2:	fb01 f303 	mul.w	r3, r1, r3
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	3332      	adds	r3, #50	; 0x32
 80022dc:	4a65      	ldr	r2, [pc, #404]	; (8002474 <UART_SetConfig+0x384>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	f003 0207 	and.w	r2, r3, #7
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4442      	add	r2, r8
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	e26f      	b.n	80027d2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022f2:	f7ff fda5 	bl	8001e40 <HAL_RCC_GetPCLK1Freq>
 80022f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	461d      	mov	r5, r3
 80022fc:	f04f 0600 	mov.w	r6, #0
 8002300:	46a8      	mov	r8, r5
 8002302:	46b1      	mov	r9, r6
 8002304:	eb18 0308 	adds.w	r3, r8, r8
 8002308:	eb49 0409 	adc.w	r4, r9, r9
 800230c:	4698      	mov	r8, r3
 800230e:	46a1      	mov	r9, r4
 8002310:	eb18 0805 	adds.w	r8, r8, r5
 8002314:	eb49 0906 	adc.w	r9, r9, r6
 8002318:	f04f 0100 	mov.w	r1, #0
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002324:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002328:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800232c:	4688      	mov	r8, r1
 800232e:	4691      	mov	r9, r2
 8002330:	eb18 0005 	adds.w	r0, r8, r5
 8002334:	eb49 0106 	adc.w	r1, r9, r6
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	461d      	mov	r5, r3
 800233e:	f04f 0600 	mov.w	r6, #0
 8002342:	196b      	adds	r3, r5, r5
 8002344:	eb46 0406 	adc.w	r4, r6, r6
 8002348:	461a      	mov	r2, r3
 800234a:	4623      	mov	r3, r4
 800234c:	f7fd ff4e 	bl	80001ec <__aeabi_uldivmod>
 8002350:	4603      	mov	r3, r0
 8002352:	460c      	mov	r4, r1
 8002354:	461a      	mov	r2, r3
 8002356:	4b47      	ldr	r3, [pc, #284]	; (8002474 <UART_SetConfig+0x384>)
 8002358:	fba3 2302 	umull	r2, r3, r3, r2
 800235c:	095b      	lsrs	r3, r3, #5
 800235e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	461d      	mov	r5, r3
 8002366:	f04f 0600 	mov.w	r6, #0
 800236a:	46a9      	mov	r9, r5
 800236c:	46b2      	mov	sl, r6
 800236e:	eb19 0309 	adds.w	r3, r9, r9
 8002372:	eb4a 040a 	adc.w	r4, sl, sl
 8002376:	4699      	mov	r9, r3
 8002378:	46a2      	mov	sl, r4
 800237a:	eb19 0905 	adds.w	r9, r9, r5
 800237e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002382:	f04f 0100 	mov.w	r1, #0
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800238e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002392:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002396:	4689      	mov	r9, r1
 8002398:	4692      	mov	sl, r2
 800239a:	eb19 0005 	adds.w	r0, r9, r5
 800239e:	eb4a 0106 	adc.w	r1, sl, r6
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	461d      	mov	r5, r3
 80023a8:	f04f 0600 	mov.w	r6, #0
 80023ac:	196b      	adds	r3, r5, r5
 80023ae:	eb46 0406 	adc.w	r4, r6, r6
 80023b2:	461a      	mov	r2, r3
 80023b4:	4623      	mov	r3, r4
 80023b6:	f7fd ff19 	bl	80001ec <__aeabi_uldivmod>
 80023ba:	4603      	mov	r3, r0
 80023bc:	460c      	mov	r4, r1
 80023be:	461a      	mov	r2, r3
 80023c0:	4b2c      	ldr	r3, [pc, #176]	; (8002474 <UART_SetConfig+0x384>)
 80023c2:	fba3 1302 	umull	r1, r3, r3, r2
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	2164      	movs	r1, #100	; 0x64
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	3332      	adds	r3, #50	; 0x32
 80023d4:	4a27      	ldr	r2, [pc, #156]	; (8002474 <UART_SetConfig+0x384>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80023e2:	4498      	add	r8, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	461d      	mov	r5, r3
 80023e8:	f04f 0600 	mov.w	r6, #0
 80023ec:	46a9      	mov	r9, r5
 80023ee:	46b2      	mov	sl, r6
 80023f0:	eb19 0309 	adds.w	r3, r9, r9
 80023f4:	eb4a 040a 	adc.w	r4, sl, sl
 80023f8:	4699      	mov	r9, r3
 80023fa:	46a2      	mov	sl, r4
 80023fc:	eb19 0905 	adds.w	r9, r9, r5
 8002400:	eb4a 0a06 	adc.w	sl, sl, r6
 8002404:	f04f 0100 	mov.w	r1, #0
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002410:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002414:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002418:	4689      	mov	r9, r1
 800241a:	4692      	mov	sl, r2
 800241c:	eb19 0005 	adds.w	r0, r9, r5
 8002420:	eb4a 0106 	adc.w	r1, sl, r6
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	461d      	mov	r5, r3
 800242a:	f04f 0600 	mov.w	r6, #0
 800242e:	196b      	adds	r3, r5, r5
 8002430:	eb46 0406 	adc.w	r4, r6, r6
 8002434:	461a      	mov	r2, r3
 8002436:	4623      	mov	r3, r4
 8002438:	f7fd fed8 	bl	80001ec <__aeabi_uldivmod>
 800243c:	4603      	mov	r3, r0
 800243e:	460c      	mov	r4, r1
 8002440:	461a      	mov	r2, r3
 8002442:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <UART_SetConfig+0x384>)
 8002444:	fba3 1302 	umull	r1, r3, r3, r2
 8002448:	095b      	lsrs	r3, r3, #5
 800244a:	2164      	movs	r1, #100	; 0x64
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	3332      	adds	r3, #50	; 0x32
 8002456:	4a07      	ldr	r2, [pc, #28]	; (8002474 <UART_SetConfig+0x384>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	095b      	lsrs	r3, r3, #5
 800245e:	f003 0207 	and.w	r2, r3, #7
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4442      	add	r2, r8
 8002468:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800246a:	e1b2      	b.n	80027d2 <UART_SetConfig+0x6e2>
 800246c:	40011000 	.word	0x40011000
 8002470:	40011400 	.word	0x40011400
 8002474:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4ad7      	ldr	r2, [pc, #860]	; (80027dc <UART_SetConfig+0x6ec>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d005      	beq.n	800248e <UART_SetConfig+0x39e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4ad6      	ldr	r2, [pc, #856]	; (80027e0 <UART_SetConfig+0x6f0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	f040 80d1 	bne.w	8002630 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800248e:	f7ff fceb 	bl	8001e68 <HAL_RCC_GetPCLK2Freq>
 8002492:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	469a      	mov	sl, r3
 8002498:	f04f 0b00 	mov.w	fp, #0
 800249c:	46d0      	mov	r8, sl
 800249e:	46d9      	mov	r9, fp
 80024a0:	eb18 0308 	adds.w	r3, r8, r8
 80024a4:	eb49 0409 	adc.w	r4, r9, r9
 80024a8:	4698      	mov	r8, r3
 80024aa:	46a1      	mov	r9, r4
 80024ac:	eb18 080a 	adds.w	r8, r8, sl
 80024b0:	eb49 090b 	adc.w	r9, r9, fp
 80024b4:	f04f 0100 	mov.w	r1, #0
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80024c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80024c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80024c8:	4688      	mov	r8, r1
 80024ca:	4691      	mov	r9, r2
 80024cc:	eb1a 0508 	adds.w	r5, sl, r8
 80024d0:	eb4b 0609 	adc.w	r6, fp, r9
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4619      	mov	r1, r3
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	f04f 0400 	mov.w	r4, #0
 80024e6:	0094      	lsls	r4, r2, #2
 80024e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024ec:	008b      	lsls	r3, r1, #2
 80024ee:	461a      	mov	r2, r3
 80024f0:	4623      	mov	r3, r4
 80024f2:	4628      	mov	r0, r5
 80024f4:	4631      	mov	r1, r6
 80024f6:	f7fd fe79 	bl	80001ec <__aeabi_uldivmod>
 80024fa:	4603      	mov	r3, r0
 80024fc:	460c      	mov	r4, r1
 80024fe:	461a      	mov	r2, r3
 8002500:	4bb8      	ldr	r3, [pc, #736]	; (80027e4 <UART_SetConfig+0x6f4>)
 8002502:	fba3 2302 	umull	r2, r3, r3, r2
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	469b      	mov	fp, r3
 8002510:	f04f 0c00 	mov.w	ip, #0
 8002514:	46d9      	mov	r9, fp
 8002516:	46e2      	mov	sl, ip
 8002518:	eb19 0309 	adds.w	r3, r9, r9
 800251c:	eb4a 040a 	adc.w	r4, sl, sl
 8002520:	4699      	mov	r9, r3
 8002522:	46a2      	mov	sl, r4
 8002524:	eb19 090b 	adds.w	r9, r9, fp
 8002528:	eb4a 0a0c 	adc.w	sl, sl, ip
 800252c:	f04f 0100 	mov.w	r1, #0
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002538:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800253c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002540:	4689      	mov	r9, r1
 8002542:	4692      	mov	sl, r2
 8002544:	eb1b 0509 	adds.w	r5, fp, r9
 8002548:	eb4c 060a 	adc.w	r6, ip, sl
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4619      	mov	r1, r3
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	f04f 0400 	mov.w	r4, #0
 800255e:	0094      	lsls	r4, r2, #2
 8002560:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002564:	008b      	lsls	r3, r1, #2
 8002566:	461a      	mov	r2, r3
 8002568:	4623      	mov	r3, r4
 800256a:	4628      	mov	r0, r5
 800256c:	4631      	mov	r1, r6
 800256e:	f7fd fe3d 	bl	80001ec <__aeabi_uldivmod>
 8002572:	4603      	mov	r3, r0
 8002574:	460c      	mov	r4, r1
 8002576:	461a      	mov	r2, r3
 8002578:	4b9a      	ldr	r3, [pc, #616]	; (80027e4 <UART_SetConfig+0x6f4>)
 800257a:	fba3 1302 	umull	r1, r3, r3, r2
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	2164      	movs	r1, #100	; 0x64
 8002582:	fb01 f303 	mul.w	r3, r1, r3
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	3332      	adds	r3, #50	; 0x32
 800258c:	4a95      	ldr	r2, [pc, #596]	; (80027e4 <UART_SetConfig+0x6f4>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002598:	4498      	add	r8, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	469b      	mov	fp, r3
 800259e:	f04f 0c00 	mov.w	ip, #0
 80025a2:	46d9      	mov	r9, fp
 80025a4:	46e2      	mov	sl, ip
 80025a6:	eb19 0309 	adds.w	r3, r9, r9
 80025aa:	eb4a 040a 	adc.w	r4, sl, sl
 80025ae:	4699      	mov	r9, r3
 80025b0:	46a2      	mov	sl, r4
 80025b2:	eb19 090b 	adds.w	r9, r9, fp
 80025b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80025ba:	f04f 0100 	mov.w	r1, #0
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025ce:	4689      	mov	r9, r1
 80025d0:	4692      	mov	sl, r2
 80025d2:	eb1b 0509 	adds.w	r5, fp, r9
 80025d6:	eb4c 060a 	adc.w	r6, ip, sl
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	4619      	mov	r1, r3
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	f04f 0400 	mov.w	r4, #0
 80025ec:	0094      	lsls	r4, r2, #2
 80025ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025f2:	008b      	lsls	r3, r1, #2
 80025f4:	461a      	mov	r2, r3
 80025f6:	4623      	mov	r3, r4
 80025f8:	4628      	mov	r0, r5
 80025fa:	4631      	mov	r1, r6
 80025fc:	f7fd fdf6 	bl	80001ec <__aeabi_uldivmod>
 8002600:	4603      	mov	r3, r0
 8002602:	460c      	mov	r4, r1
 8002604:	461a      	mov	r2, r3
 8002606:	4b77      	ldr	r3, [pc, #476]	; (80027e4 <UART_SetConfig+0x6f4>)
 8002608:	fba3 1302 	umull	r1, r3, r3, r2
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	2164      	movs	r1, #100	; 0x64
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	3332      	adds	r3, #50	; 0x32
 800261a:	4a72      	ldr	r2, [pc, #456]	; (80027e4 <UART_SetConfig+0x6f4>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	095b      	lsrs	r3, r3, #5
 8002622:	f003 020f 	and.w	r2, r3, #15
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4442      	add	r2, r8
 800262c:	609a      	str	r2, [r3, #8]
 800262e:	e0d0      	b.n	80027d2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002630:	f7ff fc06 	bl	8001e40 <HAL_RCC_GetPCLK1Freq>
 8002634:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	469a      	mov	sl, r3
 800263a:	f04f 0b00 	mov.w	fp, #0
 800263e:	46d0      	mov	r8, sl
 8002640:	46d9      	mov	r9, fp
 8002642:	eb18 0308 	adds.w	r3, r8, r8
 8002646:	eb49 0409 	adc.w	r4, r9, r9
 800264a:	4698      	mov	r8, r3
 800264c:	46a1      	mov	r9, r4
 800264e:	eb18 080a 	adds.w	r8, r8, sl
 8002652:	eb49 090b 	adc.w	r9, r9, fp
 8002656:	f04f 0100 	mov.w	r1, #0
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002662:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002666:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800266a:	4688      	mov	r8, r1
 800266c:	4691      	mov	r9, r2
 800266e:	eb1a 0508 	adds.w	r5, sl, r8
 8002672:	eb4b 0609 	adc.w	r6, fp, r9
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	4619      	mov	r1, r3
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	f04f 0400 	mov.w	r4, #0
 8002688:	0094      	lsls	r4, r2, #2
 800268a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800268e:	008b      	lsls	r3, r1, #2
 8002690:	461a      	mov	r2, r3
 8002692:	4623      	mov	r3, r4
 8002694:	4628      	mov	r0, r5
 8002696:	4631      	mov	r1, r6
 8002698:	f7fd fda8 	bl	80001ec <__aeabi_uldivmod>
 800269c:	4603      	mov	r3, r0
 800269e:	460c      	mov	r4, r1
 80026a0:	461a      	mov	r2, r3
 80026a2:	4b50      	ldr	r3, [pc, #320]	; (80027e4 <UART_SetConfig+0x6f4>)
 80026a4:	fba3 2302 	umull	r2, r3, r3, r2
 80026a8:	095b      	lsrs	r3, r3, #5
 80026aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	469b      	mov	fp, r3
 80026b2:	f04f 0c00 	mov.w	ip, #0
 80026b6:	46d9      	mov	r9, fp
 80026b8:	46e2      	mov	sl, ip
 80026ba:	eb19 0309 	adds.w	r3, r9, r9
 80026be:	eb4a 040a 	adc.w	r4, sl, sl
 80026c2:	4699      	mov	r9, r3
 80026c4:	46a2      	mov	sl, r4
 80026c6:	eb19 090b 	adds.w	r9, r9, fp
 80026ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 80026ce:	f04f 0100 	mov.w	r1, #0
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026e2:	4689      	mov	r9, r1
 80026e4:	4692      	mov	sl, r2
 80026e6:	eb1b 0509 	adds.w	r5, fp, r9
 80026ea:	eb4c 060a 	adc.w	r6, ip, sl
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4619      	mov	r1, r3
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	f04f 0400 	mov.w	r4, #0
 8002700:	0094      	lsls	r4, r2, #2
 8002702:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002706:	008b      	lsls	r3, r1, #2
 8002708:	461a      	mov	r2, r3
 800270a:	4623      	mov	r3, r4
 800270c:	4628      	mov	r0, r5
 800270e:	4631      	mov	r1, r6
 8002710:	f7fd fd6c 	bl	80001ec <__aeabi_uldivmod>
 8002714:	4603      	mov	r3, r0
 8002716:	460c      	mov	r4, r1
 8002718:	461a      	mov	r2, r3
 800271a:	4b32      	ldr	r3, [pc, #200]	; (80027e4 <UART_SetConfig+0x6f4>)
 800271c:	fba3 1302 	umull	r1, r3, r3, r2
 8002720:	095b      	lsrs	r3, r3, #5
 8002722:	2164      	movs	r1, #100	; 0x64
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	3332      	adds	r3, #50	; 0x32
 800272e:	4a2d      	ldr	r2, [pc, #180]	; (80027e4 <UART_SetConfig+0x6f4>)
 8002730:	fba2 2303 	umull	r2, r3, r2, r3
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800273a:	4498      	add	r8, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	469b      	mov	fp, r3
 8002740:	f04f 0c00 	mov.w	ip, #0
 8002744:	46d9      	mov	r9, fp
 8002746:	46e2      	mov	sl, ip
 8002748:	eb19 0309 	adds.w	r3, r9, r9
 800274c:	eb4a 040a 	adc.w	r4, sl, sl
 8002750:	4699      	mov	r9, r3
 8002752:	46a2      	mov	sl, r4
 8002754:	eb19 090b 	adds.w	r9, r9, fp
 8002758:	eb4a 0a0c 	adc.w	sl, sl, ip
 800275c:	f04f 0100 	mov.w	r1, #0
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002768:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800276c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002770:	4689      	mov	r9, r1
 8002772:	4692      	mov	sl, r2
 8002774:	eb1b 0509 	adds.w	r5, fp, r9
 8002778:	eb4c 060a 	adc.w	r6, ip, sl
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4619      	mov	r1, r3
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	f04f 0400 	mov.w	r4, #0
 800278e:	0094      	lsls	r4, r2, #2
 8002790:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002794:	008b      	lsls	r3, r1, #2
 8002796:	461a      	mov	r2, r3
 8002798:	4623      	mov	r3, r4
 800279a:	4628      	mov	r0, r5
 800279c:	4631      	mov	r1, r6
 800279e:	f7fd fd25 	bl	80001ec <__aeabi_uldivmod>
 80027a2:	4603      	mov	r3, r0
 80027a4:	460c      	mov	r4, r1
 80027a6:	461a      	mov	r2, r3
 80027a8:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <UART_SetConfig+0x6f4>)
 80027aa:	fba3 1302 	umull	r1, r3, r3, r2
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	2164      	movs	r1, #100	; 0x64
 80027b2:	fb01 f303 	mul.w	r3, r1, r3
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	3332      	adds	r3, #50	; 0x32
 80027bc:	4a09      	ldr	r2, [pc, #36]	; (80027e4 <UART_SetConfig+0x6f4>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	f003 020f 	and.w	r2, r3, #15
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4442      	add	r2, r8
 80027ce:	609a      	str	r2, [r3, #8]
}
 80027d0:	e7ff      	b.n	80027d2 <UART_SetConfig+0x6e2>
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027dc:	40011000 	.word	0x40011000
 80027e0:	40011400 	.word	0x40011400
 80027e4:	51eb851f 	.word	0x51eb851f

080027e8 <__errno>:
 80027e8:	4b01      	ldr	r3, [pc, #4]	; (80027f0 <__errno+0x8>)
 80027ea:	6818      	ldr	r0, [r3, #0]
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	2000000c 	.word	0x2000000c

080027f4 <__libc_init_array>:
 80027f4:	b570      	push	{r4, r5, r6, lr}
 80027f6:	4e0d      	ldr	r6, [pc, #52]	; (800282c <__libc_init_array+0x38>)
 80027f8:	4c0d      	ldr	r4, [pc, #52]	; (8002830 <__libc_init_array+0x3c>)
 80027fa:	1ba4      	subs	r4, r4, r6
 80027fc:	10a4      	asrs	r4, r4, #2
 80027fe:	2500      	movs	r5, #0
 8002800:	42a5      	cmp	r5, r4
 8002802:	d109      	bne.n	8002818 <__libc_init_array+0x24>
 8002804:	4e0b      	ldr	r6, [pc, #44]	; (8002834 <__libc_init_array+0x40>)
 8002806:	4c0c      	ldr	r4, [pc, #48]	; (8002838 <__libc_init_array+0x44>)
 8002808:	f000 fc88 	bl	800311c <_init>
 800280c:	1ba4      	subs	r4, r4, r6
 800280e:	10a4      	asrs	r4, r4, #2
 8002810:	2500      	movs	r5, #0
 8002812:	42a5      	cmp	r5, r4
 8002814:	d105      	bne.n	8002822 <__libc_init_array+0x2e>
 8002816:	bd70      	pop	{r4, r5, r6, pc}
 8002818:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800281c:	4798      	blx	r3
 800281e:	3501      	adds	r5, #1
 8002820:	e7ee      	b.n	8002800 <__libc_init_array+0xc>
 8002822:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002826:	4798      	blx	r3
 8002828:	3501      	adds	r5, #1
 800282a:	e7f2      	b.n	8002812 <__libc_init_array+0x1e>
 800282c:	080031c0 	.word	0x080031c0
 8002830:	080031c0 	.word	0x080031c0
 8002834:	080031c0 	.word	0x080031c0
 8002838:	080031c4 	.word	0x080031c4

0800283c <memset>:
 800283c:	4402      	add	r2, r0
 800283e:	4603      	mov	r3, r0
 8002840:	4293      	cmp	r3, r2
 8002842:	d100      	bne.n	8002846 <memset+0xa>
 8002844:	4770      	bx	lr
 8002846:	f803 1b01 	strb.w	r1, [r3], #1
 800284a:	e7f9      	b.n	8002840 <memset+0x4>

0800284c <_puts_r>:
 800284c:	b570      	push	{r4, r5, r6, lr}
 800284e:	460e      	mov	r6, r1
 8002850:	4605      	mov	r5, r0
 8002852:	b118      	cbz	r0, 800285c <_puts_r+0x10>
 8002854:	6983      	ldr	r3, [r0, #24]
 8002856:	b90b      	cbnz	r3, 800285c <_puts_r+0x10>
 8002858:	f000 fa0c 	bl	8002c74 <__sinit>
 800285c:	69ab      	ldr	r3, [r5, #24]
 800285e:	68ac      	ldr	r4, [r5, #8]
 8002860:	b913      	cbnz	r3, 8002868 <_puts_r+0x1c>
 8002862:	4628      	mov	r0, r5
 8002864:	f000 fa06 	bl	8002c74 <__sinit>
 8002868:	4b23      	ldr	r3, [pc, #140]	; (80028f8 <_puts_r+0xac>)
 800286a:	429c      	cmp	r4, r3
 800286c:	d117      	bne.n	800289e <_puts_r+0x52>
 800286e:	686c      	ldr	r4, [r5, #4]
 8002870:	89a3      	ldrh	r3, [r4, #12]
 8002872:	071b      	lsls	r3, r3, #28
 8002874:	d51d      	bpl.n	80028b2 <_puts_r+0x66>
 8002876:	6923      	ldr	r3, [r4, #16]
 8002878:	b1db      	cbz	r3, 80028b2 <_puts_r+0x66>
 800287a:	3e01      	subs	r6, #1
 800287c:	68a3      	ldr	r3, [r4, #8]
 800287e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002882:	3b01      	subs	r3, #1
 8002884:	60a3      	str	r3, [r4, #8]
 8002886:	b9e9      	cbnz	r1, 80028c4 <_puts_r+0x78>
 8002888:	2b00      	cmp	r3, #0
 800288a:	da2e      	bge.n	80028ea <_puts_r+0x9e>
 800288c:	4622      	mov	r2, r4
 800288e:	210a      	movs	r1, #10
 8002890:	4628      	mov	r0, r5
 8002892:	f000 f83f 	bl	8002914 <__swbuf_r>
 8002896:	3001      	adds	r0, #1
 8002898:	d011      	beq.n	80028be <_puts_r+0x72>
 800289a:	200a      	movs	r0, #10
 800289c:	e011      	b.n	80028c2 <_puts_r+0x76>
 800289e:	4b17      	ldr	r3, [pc, #92]	; (80028fc <_puts_r+0xb0>)
 80028a0:	429c      	cmp	r4, r3
 80028a2:	d101      	bne.n	80028a8 <_puts_r+0x5c>
 80028a4:	68ac      	ldr	r4, [r5, #8]
 80028a6:	e7e3      	b.n	8002870 <_puts_r+0x24>
 80028a8:	4b15      	ldr	r3, [pc, #84]	; (8002900 <_puts_r+0xb4>)
 80028aa:	429c      	cmp	r4, r3
 80028ac:	bf08      	it	eq
 80028ae:	68ec      	ldreq	r4, [r5, #12]
 80028b0:	e7de      	b.n	8002870 <_puts_r+0x24>
 80028b2:	4621      	mov	r1, r4
 80028b4:	4628      	mov	r0, r5
 80028b6:	f000 f87f 	bl	80029b8 <__swsetup_r>
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d0dd      	beq.n	800287a <_puts_r+0x2e>
 80028be:	f04f 30ff 	mov.w	r0, #4294967295
 80028c2:	bd70      	pop	{r4, r5, r6, pc}
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	da04      	bge.n	80028d2 <_puts_r+0x86>
 80028c8:	69a2      	ldr	r2, [r4, #24]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	dc06      	bgt.n	80028dc <_puts_r+0x90>
 80028ce:	290a      	cmp	r1, #10
 80028d0:	d004      	beq.n	80028dc <_puts_r+0x90>
 80028d2:	6823      	ldr	r3, [r4, #0]
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	6022      	str	r2, [r4, #0]
 80028d8:	7019      	strb	r1, [r3, #0]
 80028da:	e7cf      	b.n	800287c <_puts_r+0x30>
 80028dc:	4622      	mov	r2, r4
 80028de:	4628      	mov	r0, r5
 80028e0:	f000 f818 	bl	8002914 <__swbuf_r>
 80028e4:	3001      	adds	r0, #1
 80028e6:	d1c9      	bne.n	800287c <_puts_r+0x30>
 80028e8:	e7e9      	b.n	80028be <_puts_r+0x72>
 80028ea:	6823      	ldr	r3, [r4, #0]
 80028ec:	200a      	movs	r0, #10
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	6022      	str	r2, [r4, #0]
 80028f2:	7018      	strb	r0, [r3, #0]
 80028f4:	e7e5      	b.n	80028c2 <_puts_r+0x76>
 80028f6:	bf00      	nop
 80028f8:	08003178 	.word	0x08003178
 80028fc:	08003198 	.word	0x08003198
 8002900:	08003158 	.word	0x08003158

08002904 <puts>:
 8002904:	4b02      	ldr	r3, [pc, #8]	; (8002910 <puts+0xc>)
 8002906:	4601      	mov	r1, r0
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	f7ff bf9f 	b.w	800284c <_puts_r>
 800290e:	bf00      	nop
 8002910:	2000000c 	.word	0x2000000c

08002914 <__swbuf_r>:
 8002914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002916:	460e      	mov	r6, r1
 8002918:	4614      	mov	r4, r2
 800291a:	4605      	mov	r5, r0
 800291c:	b118      	cbz	r0, 8002926 <__swbuf_r+0x12>
 800291e:	6983      	ldr	r3, [r0, #24]
 8002920:	b90b      	cbnz	r3, 8002926 <__swbuf_r+0x12>
 8002922:	f000 f9a7 	bl	8002c74 <__sinit>
 8002926:	4b21      	ldr	r3, [pc, #132]	; (80029ac <__swbuf_r+0x98>)
 8002928:	429c      	cmp	r4, r3
 800292a:	d12a      	bne.n	8002982 <__swbuf_r+0x6e>
 800292c:	686c      	ldr	r4, [r5, #4]
 800292e:	69a3      	ldr	r3, [r4, #24]
 8002930:	60a3      	str	r3, [r4, #8]
 8002932:	89a3      	ldrh	r3, [r4, #12]
 8002934:	071a      	lsls	r2, r3, #28
 8002936:	d52e      	bpl.n	8002996 <__swbuf_r+0x82>
 8002938:	6923      	ldr	r3, [r4, #16]
 800293a:	b363      	cbz	r3, 8002996 <__swbuf_r+0x82>
 800293c:	6923      	ldr	r3, [r4, #16]
 800293e:	6820      	ldr	r0, [r4, #0]
 8002940:	1ac0      	subs	r0, r0, r3
 8002942:	6963      	ldr	r3, [r4, #20]
 8002944:	b2f6      	uxtb	r6, r6
 8002946:	4283      	cmp	r3, r0
 8002948:	4637      	mov	r7, r6
 800294a:	dc04      	bgt.n	8002956 <__swbuf_r+0x42>
 800294c:	4621      	mov	r1, r4
 800294e:	4628      	mov	r0, r5
 8002950:	f000 f926 	bl	8002ba0 <_fflush_r>
 8002954:	bb28      	cbnz	r0, 80029a2 <__swbuf_r+0x8e>
 8002956:	68a3      	ldr	r3, [r4, #8]
 8002958:	3b01      	subs	r3, #1
 800295a:	60a3      	str	r3, [r4, #8]
 800295c:	6823      	ldr	r3, [r4, #0]
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	6022      	str	r2, [r4, #0]
 8002962:	701e      	strb	r6, [r3, #0]
 8002964:	6963      	ldr	r3, [r4, #20]
 8002966:	3001      	adds	r0, #1
 8002968:	4283      	cmp	r3, r0
 800296a:	d004      	beq.n	8002976 <__swbuf_r+0x62>
 800296c:	89a3      	ldrh	r3, [r4, #12]
 800296e:	07db      	lsls	r3, r3, #31
 8002970:	d519      	bpl.n	80029a6 <__swbuf_r+0x92>
 8002972:	2e0a      	cmp	r6, #10
 8002974:	d117      	bne.n	80029a6 <__swbuf_r+0x92>
 8002976:	4621      	mov	r1, r4
 8002978:	4628      	mov	r0, r5
 800297a:	f000 f911 	bl	8002ba0 <_fflush_r>
 800297e:	b190      	cbz	r0, 80029a6 <__swbuf_r+0x92>
 8002980:	e00f      	b.n	80029a2 <__swbuf_r+0x8e>
 8002982:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <__swbuf_r+0x9c>)
 8002984:	429c      	cmp	r4, r3
 8002986:	d101      	bne.n	800298c <__swbuf_r+0x78>
 8002988:	68ac      	ldr	r4, [r5, #8]
 800298a:	e7d0      	b.n	800292e <__swbuf_r+0x1a>
 800298c:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <__swbuf_r+0xa0>)
 800298e:	429c      	cmp	r4, r3
 8002990:	bf08      	it	eq
 8002992:	68ec      	ldreq	r4, [r5, #12]
 8002994:	e7cb      	b.n	800292e <__swbuf_r+0x1a>
 8002996:	4621      	mov	r1, r4
 8002998:	4628      	mov	r0, r5
 800299a:	f000 f80d 	bl	80029b8 <__swsetup_r>
 800299e:	2800      	cmp	r0, #0
 80029a0:	d0cc      	beq.n	800293c <__swbuf_r+0x28>
 80029a2:	f04f 37ff 	mov.w	r7, #4294967295
 80029a6:	4638      	mov	r0, r7
 80029a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029aa:	bf00      	nop
 80029ac:	08003178 	.word	0x08003178
 80029b0:	08003198 	.word	0x08003198
 80029b4:	08003158 	.word	0x08003158

080029b8 <__swsetup_r>:
 80029b8:	4b32      	ldr	r3, [pc, #200]	; (8002a84 <__swsetup_r+0xcc>)
 80029ba:	b570      	push	{r4, r5, r6, lr}
 80029bc:	681d      	ldr	r5, [r3, #0]
 80029be:	4606      	mov	r6, r0
 80029c0:	460c      	mov	r4, r1
 80029c2:	b125      	cbz	r5, 80029ce <__swsetup_r+0x16>
 80029c4:	69ab      	ldr	r3, [r5, #24]
 80029c6:	b913      	cbnz	r3, 80029ce <__swsetup_r+0x16>
 80029c8:	4628      	mov	r0, r5
 80029ca:	f000 f953 	bl	8002c74 <__sinit>
 80029ce:	4b2e      	ldr	r3, [pc, #184]	; (8002a88 <__swsetup_r+0xd0>)
 80029d0:	429c      	cmp	r4, r3
 80029d2:	d10f      	bne.n	80029f4 <__swsetup_r+0x3c>
 80029d4:	686c      	ldr	r4, [r5, #4]
 80029d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029da:	b29a      	uxth	r2, r3
 80029dc:	0715      	lsls	r5, r2, #28
 80029de:	d42c      	bmi.n	8002a3a <__swsetup_r+0x82>
 80029e0:	06d0      	lsls	r0, r2, #27
 80029e2:	d411      	bmi.n	8002a08 <__swsetup_r+0x50>
 80029e4:	2209      	movs	r2, #9
 80029e6:	6032      	str	r2, [r6, #0]
 80029e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029ec:	81a3      	strh	r3, [r4, #12]
 80029ee:	f04f 30ff 	mov.w	r0, #4294967295
 80029f2:	e03e      	b.n	8002a72 <__swsetup_r+0xba>
 80029f4:	4b25      	ldr	r3, [pc, #148]	; (8002a8c <__swsetup_r+0xd4>)
 80029f6:	429c      	cmp	r4, r3
 80029f8:	d101      	bne.n	80029fe <__swsetup_r+0x46>
 80029fa:	68ac      	ldr	r4, [r5, #8]
 80029fc:	e7eb      	b.n	80029d6 <__swsetup_r+0x1e>
 80029fe:	4b24      	ldr	r3, [pc, #144]	; (8002a90 <__swsetup_r+0xd8>)
 8002a00:	429c      	cmp	r4, r3
 8002a02:	bf08      	it	eq
 8002a04:	68ec      	ldreq	r4, [r5, #12]
 8002a06:	e7e6      	b.n	80029d6 <__swsetup_r+0x1e>
 8002a08:	0751      	lsls	r1, r2, #29
 8002a0a:	d512      	bpl.n	8002a32 <__swsetup_r+0x7a>
 8002a0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a0e:	b141      	cbz	r1, 8002a22 <__swsetup_r+0x6a>
 8002a10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a14:	4299      	cmp	r1, r3
 8002a16:	d002      	beq.n	8002a1e <__swsetup_r+0x66>
 8002a18:	4630      	mov	r0, r6
 8002a1a:	f000 fa19 	bl	8002e50 <_free_r>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	6363      	str	r3, [r4, #52]	; 0x34
 8002a22:	89a3      	ldrh	r3, [r4, #12]
 8002a24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002a28:	81a3      	strh	r3, [r4, #12]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	6063      	str	r3, [r4, #4]
 8002a2e:	6923      	ldr	r3, [r4, #16]
 8002a30:	6023      	str	r3, [r4, #0]
 8002a32:	89a3      	ldrh	r3, [r4, #12]
 8002a34:	f043 0308 	orr.w	r3, r3, #8
 8002a38:	81a3      	strh	r3, [r4, #12]
 8002a3a:	6923      	ldr	r3, [r4, #16]
 8002a3c:	b94b      	cbnz	r3, 8002a52 <__swsetup_r+0x9a>
 8002a3e:	89a3      	ldrh	r3, [r4, #12]
 8002a40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a48:	d003      	beq.n	8002a52 <__swsetup_r+0x9a>
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	4630      	mov	r0, r6
 8002a4e:	f000 f9bf 	bl	8002dd0 <__smakebuf_r>
 8002a52:	89a2      	ldrh	r2, [r4, #12]
 8002a54:	f012 0301 	ands.w	r3, r2, #1
 8002a58:	d00c      	beq.n	8002a74 <__swsetup_r+0xbc>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60a3      	str	r3, [r4, #8]
 8002a5e:	6963      	ldr	r3, [r4, #20]
 8002a60:	425b      	negs	r3, r3
 8002a62:	61a3      	str	r3, [r4, #24]
 8002a64:	6923      	ldr	r3, [r4, #16]
 8002a66:	b953      	cbnz	r3, 8002a7e <__swsetup_r+0xc6>
 8002a68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a6c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002a70:	d1ba      	bne.n	80029e8 <__swsetup_r+0x30>
 8002a72:	bd70      	pop	{r4, r5, r6, pc}
 8002a74:	0792      	lsls	r2, r2, #30
 8002a76:	bf58      	it	pl
 8002a78:	6963      	ldrpl	r3, [r4, #20]
 8002a7a:	60a3      	str	r3, [r4, #8]
 8002a7c:	e7f2      	b.n	8002a64 <__swsetup_r+0xac>
 8002a7e:	2000      	movs	r0, #0
 8002a80:	e7f7      	b.n	8002a72 <__swsetup_r+0xba>
 8002a82:	bf00      	nop
 8002a84:	2000000c 	.word	0x2000000c
 8002a88:	08003178 	.word	0x08003178
 8002a8c:	08003198 	.word	0x08003198
 8002a90:	08003158 	.word	0x08003158

08002a94 <__sflush_r>:
 8002a94:	898a      	ldrh	r2, [r1, #12]
 8002a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a9a:	4605      	mov	r5, r0
 8002a9c:	0710      	lsls	r0, r2, #28
 8002a9e:	460c      	mov	r4, r1
 8002aa0:	d458      	bmi.n	8002b54 <__sflush_r+0xc0>
 8002aa2:	684b      	ldr	r3, [r1, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	dc05      	bgt.n	8002ab4 <__sflush_r+0x20>
 8002aa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	dc02      	bgt.n	8002ab4 <__sflush_r+0x20>
 8002aae:	2000      	movs	r0, #0
 8002ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ab6:	2e00      	cmp	r6, #0
 8002ab8:	d0f9      	beq.n	8002aae <__sflush_r+0x1a>
 8002aba:	2300      	movs	r3, #0
 8002abc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002ac0:	682f      	ldr	r7, [r5, #0]
 8002ac2:	6a21      	ldr	r1, [r4, #32]
 8002ac4:	602b      	str	r3, [r5, #0]
 8002ac6:	d032      	beq.n	8002b2e <__sflush_r+0x9a>
 8002ac8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002aca:	89a3      	ldrh	r3, [r4, #12]
 8002acc:	075a      	lsls	r2, r3, #29
 8002ace:	d505      	bpl.n	8002adc <__sflush_r+0x48>
 8002ad0:	6863      	ldr	r3, [r4, #4]
 8002ad2:	1ac0      	subs	r0, r0, r3
 8002ad4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ad6:	b10b      	cbz	r3, 8002adc <__sflush_r+0x48>
 8002ad8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ada:	1ac0      	subs	r0, r0, r3
 8002adc:	2300      	movs	r3, #0
 8002ade:	4602      	mov	r2, r0
 8002ae0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ae2:	6a21      	ldr	r1, [r4, #32]
 8002ae4:	4628      	mov	r0, r5
 8002ae6:	47b0      	blx	r6
 8002ae8:	1c43      	adds	r3, r0, #1
 8002aea:	89a3      	ldrh	r3, [r4, #12]
 8002aec:	d106      	bne.n	8002afc <__sflush_r+0x68>
 8002aee:	6829      	ldr	r1, [r5, #0]
 8002af0:	291d      	cmp	r1, #29
 8002af2:	d848      	bhi.n	8002b86 <__sflush_r+0xf2>
 8002af4:	4a29      	ldr	r2, [pc, #164]	; (8002b9c <__sflush_r+0x108>)
 8002af6:	40ca      	lsrs	r2, r1
 8002af8:	07d6      	lsls	r6, r2, #31
 8002afa:	d544      	bpl.n	8002b86 <__sflush_r+0xf2>
 8002afc:	2200      	movs	r2, #0
 8002afe:	6062      	str	r2, [r4, #4]
 8002b00:	04d9      	lsls	r1, r3, #19
 8002b02:	6922      	ldr	r2, [r4, #16]
 8002b04:	6022      	str	r2, [r4, #0]
 8002b06:	d504      	bpl.n	8002b12 <__sflush_r+0x7e>
 8002b08:	1c42      	adds	r2, r0, #1
 8002b0a:	d101      	bne.n	8002b10 <__sflush_r+0x7c>
 8002b0c:	682b      	ldr	r3, [r5, #0]
 8002b0e:	b903      	cbnz	r3, 8002b12 <__sflush_r+0x7e>
 8002b10:	6560      	str	r0, [r4, #84]	; 0x54
 8002b12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b14:	602f      	str	r7, [r5, #0]
 8002b16:	2900      	cmp	r1, #0
 8002b18:	d0c9      	beq.n	8002aae <__sflush_r+0x1a>
 8002b1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b1e:	4299      	cmp	r1, r3
 8002b20:	d002      	beq.n	8002b28 <__sflush_r+0x94>
 8002b22:	4628      	mov	r0, r5
 8002b24:	f000 f994 	bl	8002e50 <_free_r>
 8002b28:	2000      	movs	r0, #0
 8002b2a:	6360      	str	r0, [r4, #52]	; 0x34
 8002b2c:	e7c0      	b.n	8002ab0 <__sflush_r+0x1c>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	4628      	mov	r0, r5
 8002b32:	47b0      	blx	r6
 8002b34:	1c41      	adds	r1, r0, #1
 8002b36:	d1c8      	bne.n	8002aca <__sflush_r+0x36>
 8002b38:	682b      	ldr	r3, [r5, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0c5      	beq.n	8002aca <__sflush_r+0x36>
 8002b3e:	2b1d      	cmp	r3, #29
 8002b40:	d001      	beq.n	8002b46 <__sflush_r+0xb2>
 8002b42:	2b16      	cmp	r3, #22
 8002b44:	d101      	bne.n	8002b4a <__sflush_r+0xb6>
 8002b46:	602f      	str	r7, [r5, #0]
 8002b48:	e7b1      	b.n	8002aae <__sflush_r+0x1a>
 8002b4a:	89a3      	ldrh	r3, [r4, #12]
 8002b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b50:	81a3      	strh	r3, [r4, #12]
 8002b52:	e7ad      	b.n	8002ab0 <__sflush_r+0x1c>
 8002b54:	690f      	ldr	r7, [r1, #16]
 8002b56:	2f00      	cmp	r7, #0
 8002b58:	d0a9      	beq.n	8002aae <__sflush_r+0x1a>
 8002b5a:	0793      	lsls	r3, r2, #30
 8002b5c:	680e      	ldr	r6, [r1, #0]
 8002b5e:	bf08      	it	eq
 8002b60:	694b      	ldreq	r3, [r1, #20]
 8002b62:	600f      	str	r7, [r1, #0]
 8002b64:	bf18      	it	ne
 8002b66:	2300      	movne	r3, #0
 8002b68:	eba6 0807 	sub.w	r8, r6, r7
 8002b6c:	608b      	str	r3, [r1, #8]
 8002b6e:	f1b8 0f00 	cmp.w	r8, #0
 8002b72:	dd9c      	ble.n	8002aae <__sflush_r+0x1a>
 8002b74:	4643      	mov	r3, r8
 8002b76:	463a      	mov	r2, r7
 8002b78:	6a21      	ldr	r1, [r4, #32]
 8002b7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002b7c:	4628      	mov	r0, r5
 8002b7e:	47b0      	blx	r6
 8002b80:	2800      	cmp	r0, #0
 8002b82:	dc06      	bgt.n	8002b92 <__sflush_r+0xfe>
 8002b84:	89a3      	ldrh	r3, [r4, #12]
 8002b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b8a:	81a3      	strh	r3, [r4, #12]
 8002b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b90:	e78e      	b.n	8002ab0 <__sflush_r+0x1c>
 8002b92:	4407      	add	r7, r0
 8002b94:	eba8 0800 	sub.w	r8, r8, r0
 8002b98:	e7e9      	b.n	8002b6e <__sflush_r+0xda>
 8002b9a:	bf00      	nop
 8002b9c:	20400001 	.word	0x20400001

08002ba0 <_fflush_r>:
 8002ba0:	b538      	push	{r3, r4, r5, lr}
 8002ba2:	690b      	ldr	r3, [r1, #16]
 8002ba4:	4605      	mov	r5, r0
 8002ba6:	460c      	mov	r4, r1
 8002ba8:	b1db      	cbz	r3, 8002be2 <_fflush_r+0x42>
 8002baa:	b118      	cbz	r0, 8002bb4 <_fflush_r+0x14>
 8002bac:	6983      	ldr	r3, [r0, #24]
 8002bae:	b90b      	cbnz	r3, 8002bb4 <_fflush_r+0x14>
 8002bb0:	f000 f860 	bl	8002c74 <__sinit>
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <_fflush_r+0x48>)
 8002bb6:	429c      	cmp	r4, r3
 8002bb8:	d109      	bne.n	8002bce <_fflush_r+0x2e>
 8002bba:	686c      	ldr	r4, [r5, #4]
 8002bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bc0:	b17b      	cbz	r3, 8002be2 <_fflush_r+0x42>
 8002bc2:	4621      	mov	r1, r4
 8002bc4:	4628      	mov	r0, r5
 8002bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bca:	f7ff bf63 	b.w	8002a94 <__sflush_r>
 8002bce:	4b07      	ldr	r3, [pc, #28]	; (8002bec <_fflush_r+0x4c>)
 8002bd0:	429c      	cmp	r4, r3
 8002bd2:	d101      	bne.n	8002bd8 <_fflush_r+0x38>
 8002bd4:	68ac      	ldr	r4, [r5, #8]
 8002bd6:	e7f1      	b.n	8002bbc <_fflush_r+0x1c>
 8002bd8:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <_fflush_r+0x50>)
 8002bda:	429c      	cmp	r4, r3
 8002bdc:	bf08      	it	eq
 8002bde:	68ec      	ldreq	r4, [r5, #12]
 8002be0:	e7ec      	b.n	8002bbc <_fflush_r+0x1c>
 8002be2:	2000      	movs	r0, #0
 8002be4:	bd38      	pop	{r3, r4, r5, pc}
 8002be6:	bf00      	nop
 8002be8:	08003178 	.word	0x08003178
 8002bec:	08003198 	.word	0x08003198
 8002bf0:	08003158 	.word	0x08003158

08002bf4 <std>:
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	b510      	push	{r4, lr}
 8002bf8:	4604      	mov	r4, r0
 8002bfa:	e9c0 3300 	strd	r3, r3, [r0]
 8002bfe:	6083      	str	r3, [r0, #8]
 8002c00:	8181      	strh	r1, [r0, #12]
 8002c02:	6643      	str	r3, [r0, #100]	; 0x64
 8002c04:	81c2      	strh	r2, [r0, #14]
 8002c06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c0a:	6183      	str	r3, [r0, #24]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	2208      	movs	r2, #8
 8002c10:	305c      	adds	r0, #92	; 0x5c
 8002c12:	f7ff fe13 	bl	800283c <memset>
 8002c16:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <std+0x38>)
 8002c18:	6263      	str	r3, [r4, #36]	; 0x24
 8002c1a:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <std+0x3c>)
 8002c1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <std+0x40>)
 8002c20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c22:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <std+0x44>)
 8002c24:	6224      	str	r4, [r4, #32]
 8002c26:	6323      	str	r3, [r4, #48]	; 0x30
 8002c28:	bd10      	pop	{r4, pc}
 8002c2a:	bf00      	nop
 8002c2c:	08002fc1 	.word	0x08002fc1
 8002c30:	08002fe3 	.word	0x08002fe3
 8002c34:	0800301b 	.word	0x0800301b
 8002c38:	0800303f 	.word	0x0800303f

08002c3c <_cleanup_r>:
 8002c3c:	4901      	ldr	r1, [pc, #4]	; (8002c44 <_cleanup_r+0x8>)
 8002c3e:	f000 b885 	b.w	8002d4c <_fwalk_reent>
 8002c42:	bf00      	nop
 8002c44:	08002ba1 	.word	0x08002ba1

08002c48 <__sfmoreglue>:
 8002c48:	b570      	push	{r4, r5, r6, lr}
 8002c4a:	1e4a      	subs	r2, r1, #1
 8002c4c:	2568      	movs	r5, #104	; 0x68
 8002c4e:	4355      	muls	r5, r2
 8002c50:	460e      	mov	r6, r1
 8002c52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002c56:	f000 f949 	bl	8002eec <_malloc_r>
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	b140      	cbz	r0, 8002c70 <__sfmoreglue+0x28>
 8002c5e:	2100      	movs	r1, #0
 8002c60:	e9c0 1600 	strd	r1, r6, [r0]
 8002c64:	300c      	adds	r0, #12
 8002c66:	60a0      	str	r0, [r4, #8]
 8002c68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002c6c:	f7ff fde6 	bl	800283c <memset>
 8002c70:	4620      	mov	r0, r4
 8002c72:	bd70      	pop	{r4, r5, r6, pc}

08002c74 <__sinit>:
 8002c74:	6983      	ldr	r3, [r0, #24]
 8002c76:	b510      	push	{r4, lr}
 8002c78:	4604      	mov	r4, r0
 8002c7a:	bb33      	cbnz	r3, 8002cca <__sinit+0x56>
 8002c7c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002c80:	6503      	str	r3, [r0, #80]	; 0x50
 8002c82:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <__sinit+0x58>)
 8002c84:	4a12      	ldr	r2, [pc, #72]	; (8002cd0 <__sinit+0x5c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6282      	str	r2, [r0, #40]	; 0x28
 8002c8a:	4298      	cmp	r0, r3
 8002c8c:	bf04      	itt	eq
 8002c8e:	2301      	moveq	r3, #1
 8002c90:	6183      	streq	r3, [r0, #24]
 8002c92:	f000 f81f 	bl	8002cd4 <__sfp>
 8002c96:	6060      	str	r0, [r4, #4]
 8002c98:	4620      	mov	r0, r4
 8002c9a:	f000 f81b 	bl	8002cd4 <__sfp>
 8002c9e:	60a0      	str	r0, [r4, #8]
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	f000 f817 	bl	8002cd4 <__sfp>
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	60e0      	str	r0, [r4, #12]
 8002caa:	2104      	movs	r1, #4
 8002cac:	6860      	ldr	r0, [r4, #4]
 8002cae:	f7ff ffa1 	bl	8002bf4 <std>
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	2109      	movs	r1, #9
 8002cb6:	68a0      	ldr	r0, [r4, #8]
 8002cb8:	f7ff ff9c 	bl	8002bf4 <std>
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	2112      	movs	r1, #18
 8002cc0:	68e0      	ldr	r0, [r4, #12]
 8002cc2:	f7ff ff97 	bl	8002bf4 <std>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	61a3      	str	r3, [r4, #24]
 8002cca:	bd10      	pop	{r4, pc}
 8002ccc:	08003154 	.word	0x08003154
 8002cd0:	08002c3d 	.word	0x08002c3d

08002cd4 <__sfp>:
 8002cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd6:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <__sfp+0x70>)
 8002cd8:	681e      	ldr	r6, [r3, #0]
 8002cda:	69b3      	ldr	r3, [r6, #24]
 8002cdc:	4607      	mov	r7, r0
 8002cde:	b913      	cbnz	r3, 8002ce6 <__sfp+0x12>
 8002ce0:	4630      	mov	r0, r6
 8002ce2:	f7ff ffc7 	bl	8002c74 <__sinit>
 8002ce6:	3648      	adds	r6, #72	; 0x48
 8002ce8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	d503      	bpl.n	8002cf8 <__sfp+0x24>
 8002cf0:	6833      	ldr	r3, [r6, #0]
 8002cf2:	b133      	cbz	r3, 8002d02 <__sfp+0x2e>
 8002cf4:	6836      	ldr	r6, [r6, #0]
 8002cf6:	e7f7      	b.n	8002ce8 <__sfp+0x14>
 8002cf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002cfc:	b16d      	cbz	r5, 8002d1a <__sfp+0x46>
 8002cfe:	3468      	adds	r4, #104	; 0x68
 8002d00:	e7f4      	b.n	8002cec <__sfp+0x18>
 8002d02:	2104      	movs	r1, #4
 8002d04:	4638      	mov	r0, r7
 8002d06:	f7ff ff9f 	bl	8002c48 <__sfmoreglue>
 8002d0a:	6030      	str	r0, [r6, #0]
 8002d0c:	2800      	cmp	r0, #0
 8002d0e:	d1f1      	bne.n	8002cf4 <__sfp+0x20>
 8002d10:	230c      	movs	r3, #12
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	4604      	mov	r4, r0
 8002d16:	4620      	mov	r0, r4
 8002d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d1a:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <__sfp+0x74>)
 8002d1c:	6665      	str	r5, [r4, #100]	; 0x64
 8002d1e:	e9c4 5500 	strd	r5, r5, [r4]
 8002d22:	60a5      	str	r5, [r4, #8]
 8002d24:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002d28:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002d2c:	2208      	movs	r2, #8
 8002d2e:	4629      	mov	r1, r5
 8002d30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002d34:	f7ff fd82 	bl	800283c <memset>
 8002d38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002d3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002d40:	e7e9      	b.n	8002d16 <__sfp+0x42>
 8002d42:	bf00      	nop
 8002d44:	08003154 	.word	0x08003154
 8002d48:	ffff0001 	.word	0xffff0001

08002d4c <_fwalk_reent>:
 8002d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d50:	4680      	mov	r8, r0
 8002d52:	4689      	mov	r9, r1
 8002d54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002d58:	2600      	movs	r6, #0
 8002d5a:	b914      	cbnz	r4, 8002d62 <_fwalk_reent+0x16>
 8002d5c:	4630      	mov	r0, r6
 8002d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d62:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002d66:	3f01      	subs	r7, #1
 8002d68:	d501      	bpl.n	8002d6e <_fwalk_reent+0x22>
 8002d6a:	6824      	ldr	r4, [r4, #0]
 8002d6c:	e7f5      	b.n	8002d5a <_fwalk_reent+0xe>
 8002d6e:	89ab      	ldrh	r3, [r5, #12]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d907      	bls.n	8002d84 <_fwalk_reent+0x38>
 8002d74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	d003      	beq.n	8002d84 <_fwalk_reent+0x38>
 8002d7c:	4629      	mov	r1, r5
 8002d7e:	4640      	mov	r0, r8
 8002d80:	47c8      	blx	r9
 8002d82:	4306      	orrs	r6, r0
 8002d84:	3568      	adds	r5, #104	; 0x68
 8002d86:	e7ee      	b.n	8002d66 <_fwalk_reent+0x1a>

08002d88 <__swhatbuf_r>:
 8002d88:	b570      	push	{r4, r5, r6, lr}
 8002d8a:	460e      	mov	r6, r1
 8002d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d90:	2900      	cmp	r1, #0
 8002d92:	b096      	sub	sp, #88	; 0x58
 8002d94:	4614      	mov	r4, r2
 8002d96:	461d      	mov	r5, r3
 8002d98:	da07      	bge.n	8002daa <__swhatbuf_r+0x22>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	602b      	str	r3, [r5, #0]
 8002d9e:	89b3      	ldrh	r3, [r6, #12]
 8002da0:	061a      	lsls	r2, r3, #24
 8002da2:	d410      	bmi.n	8002dc6 <__swhatbuf_r+0x3e>
 8002da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002da8:	e00e      	b.n	8002dc8 <__swhatbuf_r+0x40>
 8002daa:	466a      	mov	r2, sp
 8002dac:	f000 f96e 	bl	800308c <_fstat_r>
 8002db0:	2800      	cmp	r0, #0
 8002db2:	dbf2      	blt.n	8002d9a <__swhatbuf_r+0x12>
 8002db4:	9a01      	ldr	r2, [sp, #4]
 8002db6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002dba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002dbe:	425a      	negs	r2, r3
 8002dc0:	415a      	adcs	r2, r3
 8002dc2:	602a      	str	r2, [r5, #0]
 8002dc4:	e7ee      	b.n	8002da4 <__swhatbuf_r+0x1c>
 8002dc6:	2340      	movs	r3, #64	; 0x40
 8002dc8:	2000      	movs	r0, #0
 8002dca:	6023      	str	r3, [r4, #0]
 8002dcc:	b016      	add	sp, #88	; 0x58
 8002dce:	bd70      	pop	{r4, r5, r6, pc}

08002dd0 <__smakebuf_r>:
 8002dd0:	898b      	ldrh	r3, [r1, #12]
 8002dd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002dd4:	079d      	lsls	r5, r3, #30
 8002dd6:	4606      	mov	r6, r0
 8002dd8:	460c      	mov	r4, r1
 8002dda:	d507      	bpl.n	8002dec <__smakebuf_r+0x1c>
 8002ddc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002de0:	6023      	str	r3, [r4, #0]
 8002de2:	6123      	str	r3, [r4, #16]
 8002de4:	2301      	movs	r3, #1
 8002de6:	6163      	str	r3, [r4, #20]
 8002de8:	b002      	add	sp, #8
 8002dea:	bd70      	pop	{r4, r5, r6, pc}
 8002dec:	ab01      	add	r3, sp, #4
 8002dee:	466a      	mov	r2, sp
 8002df0:	f7ff ffca 	bl	8002d88 <__swhatbuf_r>
 8002df4:	9900      	ldr	r1, [sp, #0]
 8002df6:	4605      	mov	r5, r0
 8002df8:	4630      	mov	r0, r6
 8002dfa:	f000 f877 	bl	8002eec <_malloc_r>
 8002dfe:	b948      	cbnz	r0, 8002e14 <__smakebuf_r+0x44>
 8002e00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e04:	059a      	lsls	r2, r3, #22
 8002e06:	d4ef      	bmi.n	8002de8 <__smakebuf_r+0x18>
 8002e08:	f023 0303 	bic.w	r3, r3, #3
 8002e0c:	f043 0302 	orr.w	r3, r3, #2
 8002e10:	81a3      	strh	r3, [r4, #12]
 8002e12:	e7e3      	b.n	8002ddc <__smakebuf_r+0xc>
 8002e14:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <__smakebuf_r+0x7c>)
 8002e16:	62b3      	str	r3, [r6, #40]	; 0x28
 8002e18:	89a3      	ldrh	r3, [r4, #12]
 8002e1a:	6020      	str	r0, [r4, #0]
 8002e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e20:	81a3      	strh	r3, [r4, #12]
 8002e22:	9b00      	ldr	r3, [sp, #0]
 8002e24:	6163      	str	r3, [r4, #20]
 8002e26:	9b01      	ldr	r3, [sp, #4]
 8002e28:	6120      	str	r0, [r4, #16]
 8002e2a:	b15b      	cbz	r3, 8002e44 <__smakebuf_r+0x74>
 8002e2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e30:	4630      	mov	r0, r6
 8002e32:	f000 f93d 	bl	80030b0 <_isatty_r>
 8002e36:	b128      	cbz	r0, 8002e44 <__smakebuf_r+0x74>
 8002e38:	89a3      	ldrh	r3, [r4, #12]
 8002e3a:	f023 0303 	bic.w	r3, r3, #3
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	81a3      	strh	r3, [r4, #12]
 8002e44:	89a3      	ldrh	r3, [r4, #12]
 8002e46:	431d      	orrs	r5, r3
 8002e48:	81a5      	strh	r5, [r4, #12]
 8002e4a:	e7cd      	b.n	8002de8 <__smakebuf_r+0x18>
 8002e4c:	08002c3d 	.word	0x08002c3d

08002e50 <_free_r>:
 8002e50:	b538      	push	{r3, r4, r5, lr}
 8002e52:	4605      	mov	r5, r0
 8002e54:	2900      	cmp	r1, #0
 8002e56:	d045      	beq.n	8002ee4 <_free_r+0x94>
 8002e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e5c:	1f0c      	subs	r4, r1, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	bfb8      	it	lt
 8002e62:	18e4      	addlt	r4, r4, r3
 8002e64:	f000 f946 	bl	80030f4 <__malloc_lock>
 8002e68:	4a1f      	ldr	r2, [pc, #124]	; (8002ee8 <_free_r+0x98>)
 8002e6a:	6813      	ldr	r3, [r2, #0]
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	b933      	cbnz	r3, 8002e7e <_free_r+0x2e>
 8002e70:	6063      	str	r3, [r4, #4]
 8002e72:	6014      	str	r4, [r2, #0]
 8002e74:	4628      	mov	r0, r5
 8002e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e7a:	f000 b93c 	b.w	80030f6 <__malloc_unlock>
 8002e7e:	42a3      	cmp	r3, r4
 8002e80:	d90c      	bls.n	8002e9c <_free_r+0x4c>
 8002e82:	6821      	ldr	r1, [r4, #0]
 8002e84:	1862      	adds	r2, r4, r1
 8002e86:	4293      	cmp	r3, r2
 8002e88:	bf04      	itt	eq
 8002e8a:	681a      	ldreq	r2, [r3, #0]
 8002e8c:	685b      	ldreq	r3, [r3, #4]
 8002e8e:	6063      	str	r3, [r4, #4]
 8002e90:	bf04      	itt	eq
 8002e92:	1852      	addeq	r2, r2, r1
 8002e94:	6022      	streq	r2, [r4, #0]
 8002e96:	6004      	str	r4, [r0, #0]
 8002e98:	e7ec      	b.n	8002e74 <_free_r+0x24>
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	b10a      	cbz	r2, 8002ea4 <_free_r+0x54>
 8002ea0:	42a2      	cmp	r2, r4
 8002ea2:	d9fa      	bls.n	8002e9a <_free_r+0x4a>
 8002ea4:	6819      	ldr	r1, [r3, #0]
 8002ea6:	1858      	adds	r0, r3, r1
 8002ea8:	42a0      	cmp	r0, r4
 8002eaa:	d10b      	bne.n	8002ec4 <_free_r+0x74>
 8002eac:	6820      	ldr	r0, [r4, #0]
 8002eae:	4401      	add	r1, r0
 8002eb0:	1858      	adds	r0, r3, r1
 8002eb2:	4282      	cmp	r2, r0
 8002eb4:	6019      	str	r1, [r3, #0]
 8002eb6:	d1dd      	bne.n	8002e74 <_free_r+0x24>
 8002eb8:	6810      	ldr	r0, [r2, #0]
 8002eba:	6852      	ldr	r2, [r2, #4]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	4401      	add	r1, r0
 8002ec0:	6019      	str	r1, [r3, #0]
 8002ec2:	e7d7      	b.n	8002e74 <_free_r+0x24>
 8002ec4:	d902      	bls.n	8002ecc <_free_r+0x7c>
 8002ec6:	230c      	movs	r3, #12
 8002ec8:	602b      	str	r3, [r5, #0]
 8002eca:	e7d3      	b.n	8002e74 <_free_r+0x24>
 8002ecc:	6820      	ldr	r0, [r4, #0]
 8002ece:	1821      	adds	r1, r4, r0
 8002ed0:	428a      	cmp	r2, r1
 8002ed2:	bf04      	itt	eq
 8002ed4:	6811      	ldreq	r1, [r2, #0]
 8002ed6:	6852      	ldreq	r2, [r2, #4]
 8002ed8:	6062      	str	r2, [r4, #4]
 8002eda:	bf04      	itt	eq
 8002edc:	1809      	addeq	r1, r1, r0
 8002ede:	6021      	streq	r1, [r4, #0]
 8002ee0:	605c      	str	r4, [r3, #4]
 8002ee2:	e7c7      	b.n	8002e74 <_free_r+0x24>
 8002ee4:	bd38      	pop	{r3, r4, r5, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000090 	.word	0x20000090

08002eec <_malloc_r>:
 8002eec:	b570      	push	{r4, r5, r6, lr}
 8002eee:	1ccd      	adds	r5, r1, #3
 8002ef0:	f025 0503 	bic.w	r5, r5, #3
 8002ef4:	3508      	adds	r5, #8
 8002ef6:	2d0c      	cmp	r5, #12
 8002ef8:	bf38      	it	cc
 8002efa:	250c      	movcc	r5, #12
 8002efc:	2d00      	cmp	r5, #0
 8002efe:	4606      	mov	r6, r0
 8002f00:	db01      	blt.n	8002f06 <_malloc_r+0x1a>
 8002f02:	42a9      	cmp	r1, r5
 8002f04:	d903      	bls.n	8002f0e <_malloc_r+0x22>
 8002f06:	230c      	movs	r3, #12
 8002f08:	6033      	str	r3, [r6, #0]
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	bd70      	pop	{r4, r5, r6, pc}
 8002f0e:	f000 f8f1 	bl	80030f4 <__malloc_lock>
 8002f12:	4a21      	ldr	r2, [pc, #132]	; (8002f98 <_malloc_r+0xac>)
 8002f14:	6814      	ldr	r4, [r2, #0]
 8002f16:	4621      	mov	r1, r4
 8002f18:	b991      	cbnz	r1, 8002f40 <_malloc_r+0x54>
 8002f1a:	4c20      	ldr	r4, [pc, #128]	; (8002f9c <_malloc_r+0xb0>)
 8002f1c:	6823      	ldr	r3, [r4, #0]
 8002f1e:	b91b      	cbnz	r3, 8002f28 <_malloc_r+0x3c>
 8002f20:	4630      	mov	r0, r6
 8002f22:	f000 f83d 	bl	8002fa0 <_sbrk_r>
 8002f26:	6020      	str	r0, [r4, #0]
 8002f28:	4629      	mov	r1, r5
 8002f2a:	4630      	mov	r0, r6
 8002f2c:	f000 f838 	bl	8002fa0 <_sbrk_r>
 8002f30:	1c43      	adds	r3, r0, #1
 8002f32:	d124      	bne.n	8002f7e <_malloc_r+0x92>
 8002f34:	230c      	movs	r3, #12
 8002f36:	6033      	str	r3, [r6, #0]
 8002f38:	4630      	mov	r0, r6
 8002f3a:	f000 f8dc 	bl	80030f6 <__malloc_unlock>
 8002f3e:	e7e4      	b.n	8002f0a <_malloc_r+0x1e>
 8002f40:	680b      	ldr	r3, [r1, #0]
 8002f42:	1b5b      	subs	r3, r3, r5
 8002f44:	d418      	bmi.n	8002f78 <_malloc_r+0x8c>
 8002f46:	2b0b      	cmp	r3, #11
 8002f48:	d90f      	bls.n	8002f6a <_malloc_r+0x7e>
 8002f4a:	600b      	str	r3, [r1, #0]
 8002f4c:	50cd      	str	r5, [r1, r3]
 8002f4e:	18cc      	adds	r4, r1, r3
 8002f50:	4630      	mov	r0, r6
 8002f52:	f000 f8d0 	bl	80030f6 <__malloc_unlock>
 8002f56:	f104 000b 	add.w	r0, r4, #11
 8002f5a:	1d23      	adds	r3, r4, #4
 8002f5c:	f020 0007 	bic.w	r0, r0, #7
 8002f60:	1ac3      	subs	r3, r0, r3
 8002f62:	d0d3      	beq.n	8002f0c <_malloc_r+0x20>
 8002f64:	425a      	negs	r2, r3
 8002f66:	50e2      	str	r2, [r4, r3]
 8002f68:	e7d0      	b.n	8002f0c <_malloc_r+0x20>
 8002f6a:	428c      	cmp	r4, r1
 8002f6c:	684b      	ldr	r3, [r1, #4]
 8002f6e:	bf16      	itet	ne
 8002f70:	6063      	strne	r3, [r4, #4]
 8002f72:	6013      	streq	r3, [r2, #0]
 8002f74:	460c      	movne	r4, r1
 8002f76:	e7eb      	b.n	8002f50 <_malloc_r+0x64>
 8002f78:	460c      	mov	r4, r1
 8002f7a:	6849      	ldr	r1, [r1, #4]
 8002f7c:	e7cc      	b.n	8002f18 <_malloc_r+0x2c>
 8002f7e:	1cc4      	adds	r4, r0, #3
 8002f80:	f024 0403 	bic.w	r4, r4, #3
 8002f84:	42a0      	cmp	r0, r4
 8002f86:	d005      	beq.n	8002f94 <_malloc_r+0xa8>
 8002f88:	1a21      	subs	r1, r4, r0
 8002f8a:	4630      	mov	r0, r6
 8002f8c:	f000 f808 	bl	8002fa0 <_sbrk_r>
 8002f90:	3001      	adds	r0, #1
 8002f92:	d0cf      	beq.n	8002f34 <_malloc_r+0x48>
 8002f94:	6025      	str	r5, [r4, #0]
 8002f96:	e7db      	b.n	8002f50 <_malloc_r+0x64>
 8002f98:	20000090 	.word	0x20000090
 8002f9c:	20000094 	.word	0x20000094

08002fa0 <_sbrk_r>:
 8002fa0:	b538      	push	{r3, r4, r5, lr}
 8002fa2:	4c06      	ldr	r4, [pc, #24]	; (8002fbc <_sbrk_r+0x1c>)
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	4605      	mov	r5, r0
 8002fa8:	4608      	mov	r0, r1
 8002faa:	6023      	str	r3, [r4, #0]
 8002fac:	f7fd fc54 	bl	8000858 <_sbrk>
 8002fb0:	1c43      	adds	r3, r0, #1
 8002fb2:	d102      	bne.n	8002fba <_sbrk_r+0x1a>
 8002fb4:	6823      	ldr	r3, [r4, #0]
 8002fb6:	b103      	cbz	r3, 8002fba <_sbrk_r+0x1a>
 8002fb8:	602b      	str	r3, [r5, #0]
 8002fba:	bd38      	pop	{r3, r4, r5, pc}
 8002fbc:	2000029c 	.word	0x2000029c

08002fc0 <__sread>:
 8002fc0:	b510      	push	{r4, lr}
 8002fc2:	460c      	mov	r4, r1
 8002fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fc8:	f000 f896 	bl	80030f8 <_read_r>
 8002fcc:	2800      	cmp	r0, #0
 8002fce:	bfab      	itete	ge
 8002fd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002fd2:	89a3      	ldrhlt	r3, [r4, #12]
 8002fd4:	181b      	addge	r3, r3, r0
 8002fd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002fda:	bfac      	ite	ge
 8002fdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8002fde:	81a3      	strhlt	r3, [r4, #12]
 8002fe0:	bd10      	pop	{r4, pc}

08002fe2 <__swrite>:
 8002fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fe6:	461f      	mov	r7, r3
 8002fe8:	898b      	ldrh	r3, [r1, #12]
 8002fea:	05db      	lsls	r3, r3, #23
 8002fec:	4605      	mov	r5, r0
 8002fee:	460c      	mov	r4, r1
 8002ff0:	4616      	mov	r6, r2
 8002ff2:	d505      	bpl.n	8003000 <__swrite+0x1e>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ffc:	f000 f868 	bl	80030d0 <_lseek_r>
 8003000:	89a3      	ldrh	r3, [r4, #12]
 8003002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003006:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800300a:	81a3      	strh	r3, [r4, #12]
 800300c:	4632      	mov	r2, r6
 800300e:	463b      	mov	r3, r7
 8003010:	4628      	mov	r0, r5
 8003012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003016:	f000 b817 	b.w	8003048 <_write_r>

0800301a <__sseek>:
 800301a:	b510      	push	{r4, lr}
 800301c:	460c      	mov	r4, r1
 800301e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003022:	f000 f855 	bl	80030d0 <_lseek_r>
 8003026:	1c43      	adds	r3, r0, #1
 8003028:	89a3      	ldrh	r3, [r4, #12]
 800302a:	bf15      	itete	ne
 800302c:	6560      	strne	r0, [r4, #84]	; 0x54
 800302e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003032:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003036:	81a3      	strheq	r3, [r4, #12]
 8003038:	bf18      	it	ne
 800303a:	81a3      	strhne	r3, [r4, #12]
 800303c:	bd10      	pop	{r4, pc}

0800303e <__sclose>:
 800303e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003042:	f000 b813 	b.w	800306c <_close_r>
	...

08003048 <_write_r>:
 8003048:	b538      	push	{r3, r4, r5, lr}
 800304a:	4c07      	ldr	r4, [pc, #28]	; (8003068 <_write_r+0x20>)
 800304c:	4605      	mov	r5, r0
 800304e:	4608      	mov	r0, r1
 8003050:	4611      	mov	r1, r2
 8003052:	2200      	movs	r2, #0
 8003054:	6022      	str	r2, [r4, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	f7fd faa8 	bl	80005ac <_write>
 800305c:	1c43      	adds	r3, r0, #1
 800305e:	d102      	bne.n	8003066 <_write_r+0x1e>
 8003060:	6823      	ldr	r3, [r4, #0]
 8003062:	b103      	cbz	r3, 8003066 <_write_r+0x1e>
 8003064:	602b      	str	r3, [r5, #0]
 8003066:	bd38      	pop	{r3, r4, r5, pc}
 8003068:	2000029c 	.word	0x2000029c

0800306c <_close_r>:
 800306c:	b538      	push	{r3, r4, r5, lr}
 800306e:	4c06      	ldr	r4, [pc, #24]	; (8003088 <_close_r+0x1c>)
 8003070:	2300      	movs	r3, #0
 8003072:	4605      	mov	r5, r0
 8003074:	4608      	mov	r0, r1
 8003076:	6023      	str	r3, [r4, #0]
 8003078:	f7fd fbba 	bl	80007f0 <_close>
 800307c:	1c43      	adds	r3, r0, #1
 800307e:	d102      	bne.n	8003086 <_close_r+0x1a>
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	b103      	cbz	r3, 8003086 <_close_r+0x1a>
 8003084:	602b      	str	r3, [r5, #0]
 8003086:	bd38      	pop	{r3, r4, r5, pc}
 8003088:	2000029c 	.word	0x2000029c

0800308c <_fstat_r>:
 800308c:	b538      	push	{r3, r4, r5, lr}
 800308e:	4c07      	ldr	r4, [pc, #28]	; (80030ac <_fstat_r+0x20>)
 8003090:	2300      	movs	r3, #0
 8003092:	4605      	mov	r5, r0
 8003094:	4608      	mov	r0, r1
 8003096:	4611      	mov	r1, r2
 8003098:	6023      	str	r3, [r4, #0]
 800309a:	f7fd fbb5 	bl	8000808 <_fstat>
 800309e:	1c43      	adds	r3, r0, #1
 80030a0:	d102      	bne.n	80030a8 <_fstat_r+0x1c>
 80030a2:	6823      	ldr	r3, [r4, #0]
 80030a4:	b103      	cbz	r3, 80030a8 <_fstat_r+0x1c>
 80030a6:	602b      	str	r3, [r5, #0]
 80030a8:	bd38      	pop	{r3, r4, r5, pc}
 80030aa:	bf00      	nop
 80030ac:	2000029c 	.word	0x2000029c

080030b0 <_isatty_r>:
 80030b0:	b538      	push	{r3, r4, r5, lr}
 80030b2:	4c06      	ldr	r4, [pc, #24]	; (80030cc <_isatty_r+0x1c>)
 80030b4:	2300      	movs	r3, #0
 80030b6:	4605      	mov	r5, r0
 80030b8:	4608      	mov	r0, r1
 80030ba:	6023      	str	r3, [r4, #0]
 80030bc:	f7fd fbb4 	bl	8000828 <_isatty>
 80030c0:	1c43      	adds	r3, r0, #1
 80030c2:	d102      	bne.n	80030ca <_isatty_r+0x1a>
 80030c4:	6823      	ldr	r3, [r4, #0]
 80030c6:	b103      	cbz	r3, 80030ca <_isatty_r+0x1a>
 80030c8:	602b      	str	r3, [r5, #0]
 80030ca:	bd38      	pop	{r3, r4, r5, pc}
 80030cc:	2000029c 	.word	0x2000029c

080030d0 <_lseek_r>:
 80030d0:	b538      	push	{r3, r4, r5, lr}
 80030d2:	4c07      	ldr	r4, [pc, #28]	; (80030f0 <_lseek_r+0x20>)
 80030d4:	4605      	mov	r5, r0
 80030d6:	4608      	mov	r0, r1
 80030d8:	4611      	mov	r1, r2
 80030da:	2200      	movs	r2, #0
 80030dc:	6022      	str	r2, [r4, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	f7fd fbad 	bl	800083e <_lseek>
 80030e4:	1c43      	adds	r3, r0, #1
 80030e6:	d102      	bne.n	80030ee <_lseek_r+0x1e>
 80030e8:	6823      	ldr	r3, [r4, #0]
 80030ea:	b103      	cbz	r3, 80030ee <_lseek_r+0x1e>
 80030ec:	602b      	str	r3, [r5, #0]
 80030ee:	bd38      	pop	{r3, r4, r5, pc}
 80030f0:	2000029c 	.word	0x2000029c

080030f4 <__malloc_lock>:
 80030f4:	4770      	bx	lr

080030f6 <__malloc_unlock>:
 80030f6:	4770      	bx	lr

080030f8 <_read_r>:
 80030f8:	b538      	push	{r3, r4, r5, lr}
 80030fa:	4c07      	ldr	r4, [pc, #28]	; (8003118 <_read_r+0x20>)
 80030fc:	4605      	mov	r5, r0
 80030fe:	4608      	mov	r0, r1
 8003100:	4611      	mov	r1, r2
 8003102:	2200      	movs	r2, #0
 8003104:	6022      	str	r2, [r4, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	f7fd fb55 	bl	80007b6 <_read>
 800310c:	1c43      	adds	r3, r0, #1
 800310e:	d102      	bne.n	8003116 <_read_r+0x1e>
 8003110:	6823      	ldr	r3, [r4, #0]
 8003112:	b103      	cbz	r3, 8003116 <_read_r+0x1e>
 8003114:	602b      	str	r3, [r5, #0]
 8003116:	bd38      	pop	{r3, r4, r5, pc}
 8003118:	2000029c 	.word	0x2000029c

0800311c <_init>:
 800311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311e:	bf00      	nop
 8003120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003122:	bc08      	pop	{r3}
 8003124:	469e      	mov	lr, r3
 8003126:	4770      	bx	lr

08003128 <_fini>:
 8003128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312a:	bf00      	nop
 800312c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800312e:	bc08      	pop	{r3}
 8003130:	469e      	mov	lr, r3
 8003132:	4770      	bx	lr
